

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri May 29 10:59:57 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	text0,global,reloc=2,class=CODE,delta=1
    27                           	psect	text1,global,reloc=2,class=CODE,delta=1
    28                           	psect	text2,global,reloc=2,class=CODE,delta=1
    29                           	psect	text3,global,reloc=2,class=CODE,delta=1
    30                           	psect	text4,global,reloc=2,class=CODE,delta=1
    31                           	psect	text5,global,reloc=2,class=CODE,delta=1
    32                           	psect	text6,global,reloc=2,class=CODE,delta=1
    33                           	psect	text7,global,reloc=2,class=CODE,delta=1
    34                           	psect	text8,global,reloc=2,class=CODE,delta=1
    35                           	psect	text9,global,reloc=2,class=CODE,delta=1
    36                           	psect	text10,global,reloc=2,class=CODE,delta=1
    37                           	psect	text11,global,reloc=2,class=CODE,delta=1
    38                           	psect	text12,global,reloc=2,class=CODE,delta=1
    39                           	psect	text13,global,reloc=2,class=CODE,delta=1
    40                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text15,global,reloc=2,class=CODE,delta=1
    42                           	psect	text16,global,reloc=2,class=CODE,delta=1
    43                           	psect	text17,global,reloc=2,class=CODE,delta=1
    44                           	psect	text18,global,reloc=2,class=CODE,delta=1
    45                           	psect	text19,global,reloc=2,class=CODE,delta=1
    46                           	psect	text20,global,reloc=2,class=CODE,delta=1
    47                           	psect	text21,global,reloc=2,class=CODE,delta=1
    48                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text26,global,reloc=2,class=CODE,delta=1
    53                           	psect	text27,global,reloc=2,class=CODE,delta=1
    54                           	psect	text28,global,reloc=2,class=CODE,delta=1
    55                           	psect	text29,global,reloc=2,class=CODE,delta=1
    56                           	psect	text30,global,reloc=2,class=CODE,delta=1
    57                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text33,global,reloc=2,class=CODE,delta=1
    60                           	psect	text34,global,reloc=2,class=CODE,delta=1
    61                           	psect	text35,global,reloc=2,class=CODE,delta=1
    62                           	psect	text36,global,reloc=2,class=CODE,delta=1
    63                           	psect	text37,global,reloc=2,class=CODE,delta=1
    64                           	psect	text38,global,reloc=2,class=CODE,delta=1
    65                           	psect	text39,global,reloc=2,class=CODE,delta=1
    66                           	psect	text40,global,reloc=2,class=CODE,delta=1
    67                           	psect	text41,global,reloc=2,class=CODE,delta=1
    68                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    70                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text47,global,reloc=2,class=CODE,delta=1
    74                           	psect	text48,global,reloc=2,class=CODE,delta=1
    75                           	psect	text49,global,reloc=2,class=CODE,delta=1
    76                           	psect	text50,global,reloc=2,class=CODE,delta=1
    77                           	psect	text51,global,reloc=2,class=CODE,delta=1
    78                           	psect	text52,global,reloc=2,class=CODE,delta=1
    79                           	psect	text53,global,reloc=2,class=CODE,delta=1
    80                           	psect	text54,global,reloc=2,class=CODE,delta=1
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1
    82                           	psect	text56,global,reloc=2,class=CODE,delta=1
    83                           	psect	text57,global,reloc=2,class=CODE,delta=1
    84                           	psect	text58,global,reloc=2,class=CODE,delta=1
    85                           	psect	text59,global,reloc=2,class=CODE,delta=1
    86                           	psect	text60,global,reloc=2,class=CODE,delta=1
    87                           	psect	text61,global,reloc=2,class=CODE,delta=1
    88                           	psect	text62,global,reloc=2,class=CODE,delta=1
    89                           	psect	text63,global,reloc=2,class=CODE,delta=1
    90                           	psect	text64,global,reloc=2,class=CODE,delta=1
    91                           	psect	text65,global,reloc=2,class=CODE,delta=1
    92                           	psect	text66,global,reloc=2,class=CODE,delta=1
    93                           	psect	text67,global,reloc=2,class=CODE,delta=1
    94                           	psect	text68,global,reloc=2,class=CODE,delta=1
    95                           	psect	text69,global,reloc=2,class=CODE,delta=1
    96                           	psect	text70,global,reloc=2,class=CODE,delta=1
    97                           	psect	text71,global,reloc=2,class=CODE,delta=1
    98                           	psect	text72,global,reloc=2,class=CODE,delta=1
    99                           	psect	text73,global,reloc=2,class=CODE,delta=1
   100                           	psect	text74,global,reloc=2,class=CODE,delta=1
   101                           	psect	text75,global,reloc=2,class=CODE,delta=1
   102                           	psect	text76,global,reloc=2,class=CODE,delta=1
   103                           	psect	text77,global,reloc=2,class=CODE,delta=1
   104                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text79,global,reloc=2,class=CODE,delta=1
   106                           	psect	text80,global,reloc=2,class=CODE,delta=1
   107                           	psect	text81,global,reloc=2,class=CODE,delta=1
   108                           	psect	text82,global,reloc=2,class=CODE,delta=1
   109                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=2
   110                           	psect	text84,global,reloc=2,class=CODE,delta=1
   111                           	psect	text85,global,reloc=2,class=CODE,delta=1
   112                           	psect	text86,global,reloc=2,class=CODE,delta=1
   113                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   114                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=2
   115                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=2
   116                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=2
   117                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=2
   118                           	psect	text92,global,reloc=2,class=CODE,delta=1
   119                           	psect	text93,global,reloc=2,class=CODE,delta=1
   120                           	psect	text94,global,reloc=2,class=CODE,delta=1
   121                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=2
   122                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=2
   123                           	psect	text97,global,reloc=2,class=CODE,delta=1
   124                           	psect	text98,global,reloc=2,class=CODE,delta=1
   125                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=2
   126                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=2
   129                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=2
   130                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=2
   131                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text106,global,reloc=2,class=CODE,delta=1
   133                           	psect	text107,global,reloc=2,class=CODE,delta=1
   134                           	psect	text108,global,reloc=2,class=CODE,delta=1
   135                           	psect	text109,global,reloc=2,class=CODE,delta=1
   136                           	psect	text110,global,reloc=2,class=CODE,delta=1
   137                           	psect	text111,global,reloc=2,class=CODE,delta=1
   138                           	psect	text112,global,reloc=2,class=CODE,delta=1
   139                           	psect	text113,global,reloc=2,class=CODE,delta=1
   140                           	psect	text114,global,reloc=2,class=CODE,delta=1
   141                           	psect	text115,global,reloc=2,class=CODE,delta=1
   142                           	psect	text116,global,reloc=2,class=CODE,delta=1
   143                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=2
   144                           	psect	text118,global,reloc=2,class=CODE,delta=1
   145                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   146                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   147                           	psect	text120,global,reloc=2,class=CODE,delta=1
   148                           	psect	text121,global,reloc=2,class=CODE,delta=1
   149                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   150                           	psect	text122,global,reloc=2,class=CODE,delta=1
   151                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   152                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   153  0000                     
   154                           ; Version 2.10
   155                           ; Generated 31/07/2019 GMT
   156                           ; 
   157                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   158                           ; All rights reserved.
   159                           ; 
   160                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   161                           ; 
   162                           ; Redistribution and use in source and binary forms, with or without modification, are
   163                           ; permitted provided that the following conditions are met:
   164                           ; 
   165                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   166                           ;        conditions and the following disclaimer.
   167                           ; 
   168                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   169                           ;        of conditions and the following disclaimer in the documentation and/or other
   170                           ;        materials provided with the distribution.
   171                           ; 
   172                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   173                           ;        software without specific prior written permission.
   174                           ; 
   175                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   176                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   177                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   178                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   179                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   180                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   181                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   182                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   183                           ; 
   184                           ; 
   185                           ; Code-generator required, PIC18F2520 Definitions
   186                           ; 
   187                           ; SFR Addresses
   188  0000                     
   189                           	psect	idataCOMRAM
   190  007510                     __pidataCOMRAM:
   191                           	opt callstack 0
   192                           
   193                           ;initializer for _gpsbufidx
   194  007510  FF                 	db	255
   195                           
   196                           	psect	idataBANK0
   197  0074CE                     __pidataBANK0:
   198                           	opt callstack 0
   199                           
   200                           ;initializer for _N31_reg4445
   201  0074CE  0001               	dw	1
   202                           
   203                           ;initializer for show_display@old_adf4351_lockstat
   204  0074D0  FF                 	db	255
   205                           
   206                           ;initializer for show_display@old_si5328locked
   207  0074D1  FF                 	db	255
   208                           
   209                           ;initializer for show_display@old_LNB_laststat
   210  0074D2  FF                 	db	255
   211                           
   212                           ;initializer for show_display@old_GPS_sat
   213  0074D3  FF                 	db	255
   214                           
   215                           ;initializer for show_display@old_lnbqrg
   216  0074D4  FF                 	db	255
   217                           
   218                           ;initializer for show_display@old_ubx_ack
   219  0074D5  FF                 	db	255
   220                           
   221                           ;initializer for show_display@old_GPS_fix
   222  0074D6  FF                 	db	255
   223                           
   224                           ;initializer for show_display@old_GPS_lock
   225  0074D7  FF                 	db	255
   226                           
   227                           ;initializer for _actualADFswitch
   228  0074D8  FF                 	db	255
   229                           
   230                           ;initializer for check_si5328_status@lastinput
   231  0074D9  FF                 	db	255
   232                           
   233                           ;initializer for check_si5328_status@lastlock
   234  0074DA  FF                 	db	255
   235                           
   236                           ;initializer for _LNB_laststat
   237  0074DB  FF                 	db	255
   238                           
   239                           ;initializer for _use_GPS
   240  0074DC  01                 	db	1
   241                           
   242                           	psect	idataBANK1
   243  00750C                     __pidataBANK1:
   244                           	opt callstack 0
   245                           
   246                           ;initializer for _NC1_LS_reg3233
   247  00750C  0001               	dw	1
   248                           
   249                           ;initializer for _N2L_reg4142
   250  00750E  0001               	dw	1
   251                           
   252                           	psect	idataBANK2
   253  005E7C                     __pidataBANK2:
   254                           	opt callstack 0
   255                           
   256                           ;initializer for stoa@F1139
   257  005E7C  28                 	db	40
   258  005E7D  6E                 	db	110
   259  005E7E  75                 	db	117
   260  005E7F  6C                 	db	108
   261  005E80  6C                 	db	108
   262  005E81  29                 	db	41
   263  005E82  00                 	db	0
   264                           
   265                           ;initializer for _LO
   266  005E83  18                 	db	24
   267  005E84  19                 	db	25
   268  005E85  1A                 	db	26
   269  005E86  1B                 	db	27
   270                           
   271                           ;initializer for ssd1306_setpos@F3137
   272  005E87  B0                 	db	176
   273  005E88  02                 	db	2
   274  005E89  10                 	db	16
   275                           
   276                           ;initializer for _g_pout
   277  005E8A  0001               	dw	1
   278                           
   279                           ;initializer for _g_ipc
   280  005E8C  0005               	dw	5
   281                           
   282                           ;initializer for _NC2_LS_reg3536
   283  005E8E  0001               	dw	1
   284                           
   285                           ;initializer for _N1HS_reg25
   286  005E90  0001               	dw	1
   287                           
   288                           ;initializer for _N2HS_reg40
   289  005E92  0001               	dw	1
   290                           
   291                           ;initializer for _N32_reg4748
   292  005E94  0001               	dw	1
   293                           
   294                           ;initializer for _gps_config_data
   295  005E96  00                 	db	0
   296  005E97  01                 	db	1
   297  005E98  00                 	db	0
   298  005E99  00                 	db	0
   299  005E9A  32                 	db	50
   300  005E9B  00                 	db	0
   301  005E9C  00                 	db	0
   302  005E9D  00                 	db	0
   303  005E9E  00                 	db	0
   304  005E9F  00                 	db	0
   305  005EA0  00                 	db	0
   306  005EA1  00                 	db	0
   307  005EA2  E3                 	db	227
   308  005EA3  EA                 	db	234
   309  005EA4  21                 	db	33
   310  005EA5  01                 	db	1
   311  005EA6  00                 	db	0
   312  005EA7  00                 	db	0
   313  005EA8  00                 	db	0
   314  005EA9  80                 	db	128
   315  005EAA  00                 	db	0
   316  005EAB  00                 	db	0
   317  005EAC  00                 	db	0
   318  005EAD  80                 	db	128
   319  005EAE  00                 	db	0
   320  005EAF  00                 	db	0
   321  005EB0  00                 	db	0
   322  005EB1  00                 	db	0
   323  005EB2  EF                 	db	239
   324  005EB3  00                 	db	0
   325  005EB4  00                 	db	0
   326  005EB5  00                 	db	0
   327                           
   328                           ;initializer for _reg_set_LNB_LO
   329  005EB6  2C                 	db	44
   330  005EB7  00                 	db	0
   331  005EB8  2D                 	db	45
   332  005EB9  00                 	db	0
   333  005EBA  2F                 	db	47
   334  005EBB  00                 	db	0
   335  005EBC  30                 	db	48
   336  005EBD  00                 	db	0
   337  005EBE  28                 	db	40
   338  005EBF  00                 	db	0
   339  005EC0  29                 	db	41
   340  005EC1  00                 	db	0
   341  005EC2  2A                 	db	42
   342  005EC3  00                 	db	0
   343  005EC4  19                 	db	25
   344  005EC5  00                 	db	0
   345  005EC6  20                 	db	32
   346  005EC7  00                 	db	0
   347  005EC8  21                 	db	33
   348  005EC9  00                 	db	0
   349  005ECA  23                 	db	35
   350  005ECB  00                 	db	0
   351  005ECC  24                 	db	36
   352  005ECD  00                 	db	0
   353                           
   354                           ;initializer for show_display@old_GPS_lon
   355  005ECE  20                 	db	32
   356  005ECF  20                 	db	32
   357  005ED0  20                 	db	32
   358  005ED1  20                 	db	32
   359  005ED2  20                 	db	32
   360  005ED3  20                 	db	32
   361  005ED4  20                 	db	32
   362  005ED5  20                 	db	32
   363  005ED6  20                 	db	32
   364  005ED7  20                 	db	32
   365  005ED8  20                 	db	32
   366  005ED9  20                 	db	32
   367  005EDA  20                 	db	32
   368  005EDB  00                 	db	0
   369  005EDC  00                 	db	0
   370                           
   371                           ;initializer for show_display@old_GPS_lat
   372  005EDD  20                 	db	32
   373  005EDE  20                 	db	32
   374  005EDF  20                 	db	32
   375  005EE0  20                 	db	32
   376  005EE1  20                 	db	32
   377  005EE2  20                 	db	32
   378  005EE3  20                 	db	32
   379  005EE4  20                 	db	32
   380  005EE5  20                 	db	32
   381  005EE6  20                 	db	32
   382  005EE7  20                 	db	32
   383  005EE8  20                 	db	32
   384  005EE9  20                 	db	32
   385  005EEA  00                 	db	0
   386  005EEB  00                 	db	0
   387                           
   388                           ;initializer for _GPS_lon
   389  005EEC  20                 	db	32
   390  005EED  20                 	db	32
   391  005EEE  20                 	db	32
   392  005EEF  20                 	db	32
   393  005EF0  20                 	db	32
   394  005EF1  20                 	db	32
   395  005EF2  20                 	db	32
   396  005EF3  20                 	db	32
   397  005EF4  00                 	db	0
   398  005EF5  00                 	db	0
   399  005EF6  00                 	db	0
   400  005EF7  00                 	db	0
   401  005EF8  00                 	db	0
   402  005EF9  00                 	db	0
   403  005EFA  00                 	db	0
   404                           
   405                           ;initializer for _GPS_lat
   406  005EFB  20                 	db	32
   407  005EFC  20                 	db	32
   408  005EFD  20                 	db	32
   409  005EFE  20                 	db	32
   410  005EFF  20                 	db	32
   411  005F00  20                 	db	32
   412  005F01  20                 	db	32
   413  005F02  20                 	db	32
   414  005F03  00                 	db	0
   415  005F04  00                 	db	0
   416  005F05  00                 	db	0
   417  005F06  00                 	db	0
   418  005F07  00                 	db	0
   419  005F08  00                 	db	0
   420  005F09  00                 	db	0
   421                           
   422                           ;initializer for show_display@old_GPS_time
   423  005F0A  78                 	db	120
   424  005F0B  00                 	db	0
   425  005F0C  00                 	db	0
   426  005F0D  00                 	db	0
   427  005F0E  00                 	db	0
   428  005F0F  00                 	db	0
   429  005F10  00                 	db	0
   430  005F11  00                 	db	0
   431  005F12  00                 	db	0
   432                           
   433                           ;initializer for _GPS_time
   434  005F13  20                 	db	32
   435  005F14  00                 	db	0
   436  005F15  00                 	db	0
   437  005F16  00                 	db	0
   438  005F17  00                 	db	0
   439  005F18  00                 	db	0
   440  005F19  00                 	db	0
   441  005F1A  00                 	db	0
   442  005F1B  00                 	db	0
   443                           
   444                           	psect	idataBANK3
   445  00749A                     __pidataBANK3:
   446                           	opt callstack 0
   447                           
   448                           ;initializer for _ssd1306_init_commands
   449  00749A  AE                 	db	174
   450  00749B  D5                 	db	213
   451  00749C  A0                 	db	160
   452  00749D  A8                 	db	168
   453  00749E  3F                 	db	63
   454  00749F  D3                 	db	211
   455  0074A0  00                 	db	0
   456  0074A1  40                 	db	64
   457  0074A2  8D                 	db	141
   458  0074A3  14                 	db	20
   459  0074A4  20                 	db	32
   460  0074A5  00                 	db	0
   461  0074A6  A1                 	db	161
   462  0074A7  C8                 	db	200
   463  0074A8  DA                 	db	218
   464  0074A9  12                 	db	18
   465  0074AA  81                 	db	129
   466  0074AB  DF                 	db	223
   467  0074AC  D9                 	db	217
   468  0074AD  82                 	db	130
   469  0074AE  DB                 	db	219
   470  0074AF  34                 	db	52
   471  0074B0  A4                 	db	164
   472  0074B1  A6                 	db	166
   473  0074B2  C0                 	db	192
   474  0074B3  A0                 	db	160
   475  0074B4  AF                 	db	175
   476                           
   477                           	psect	mediumconst
   478  007728                     __pmediumconst:
   479                           	opt callstack 0
   480  007728  00                 	db	0
   481  007729                     _font8x8_basic:
   482                           	opt callstack 0
   483  007729  00                 	db	0
   484  00772A  00                 	db	0
   485  00772B  00                 	db	0
   486  00772C  00                 	db	0
   487  00772D  00                 	db	0
   488  00772E  00                 	db	0
   489  00772F  00                 	db	0
   490  007730  00                 	db	0
   491  007731  18                 	db	24
   492  007732  3C                 	db	60
   493  007733  3C                 	db	60
   494  007734  18                 	db	24
   495  007735  18                 	db	24
   496  007736  00                 	db	0
   497  007737  18                 	db	24
   498  007738  00                 	db	0
   499  007739  36                 	db	54
   500  00773A  36                 	db	54
   501  00773B  00                 	db	0
   502  00773C  00                 	db	0
   503  00773D  00                 	db	0
   504  00773E  00                 	db	0
   505  00773F  00                 	db	0
   506  007740  00                 	db	0
   507  007741  36                 	db	54
   508  007742  36                 	db	54
   509  007743  7F                 	db	127
   510  007744  36                 	db	54
   511  007745  7F                 	db	127
   512  007746  36                 	db	54
   513  007747  36                 	db	54
   514  007748  00                 	db	0
   515  007749  0C                 	db	12
   516  00774A  3E                 	db	62
   517  00774B  03                 	db	3
   518  00774C  1E                 	db	30
   519  00774D  30                 	db	48
   520  00774E  1F                 	db	31
   521  00774F  0C                 	db	12
   522  007750  00                 	db	0
   523  007751  00                 	db	0
   524  007752  63                 	db	99
   525  007753  33                 	db	51
   526  007754  18                 	db	24
   527  007755  0C                 	db	12
   528  007756  66                 	db	102
   529  007757  63                 	db	99
   530  007758  00                 	db	0
   531  007759  1C                 	db	28
   532  00775A  36                 	db	54
   533  00775B  1C                 	db	28
   534  00775C  6E                 	db	110
   535  00775D  3B                 	db	59
   536  00775E  33                 	db	51
   537  00775F  6E                 	db	110
   538  007760  00                 	db	0
   539  007761  06                 	db	6
   540  007762  06                 	db	6
   541  007763  03                 	db	3
   542  007764  00                 	db	0
   543  007765  00                 	db	0
   544  007766  00                 	db	0
   545  007767  00                 	db	0
   546  007768  00                 	db	0
   547  007769  18                 	db	24
   548  00776A  0C                 	db	12
   549  00776B  06                 	db	6
   550  00776C  06                 	db	6
   551  00776D  06                 	db	6
   552  00776E  0C                 	db	12
   553  00776F  18                 	db	24
   554  007770  00                 	db	0
   555  007771  06                 	db	6
   556  007772  0C                 	db	12
   557  007773  18                 	db	24
   558  007774  18                 	db	24
   559  007775  18                 	db	24
   560  007776  0C                 	db	12
   561  007777  06                 	db	6
   562  007778  00                 	db	0
   563  007779  00                 	db	0
   564  00777A  66                 	db	102
   565  00777B  3C                 	db	60
   566  00777C  FF                 	db	255
   567  00777D  3C                 	db	60
   568  00777E  66                 	db	102
   569  00777F  00                 	db	0
   570  007780  00                 	db	0
   571  007781  00                 	db	0
   572  007782  0C                 	db	12
   573  007783  0C                 	db	12
   574  007784  3F                 	db	63
   575  007785  0C                 	db	12
   576  007786  0C                 	db	12
   577  007787  00                 	db	0
   578  007788  00                 	db	0
   579  007789  00                 	db	0
   580  00778A  00                 	db	0
   581  00778B  00                 	db	0
   582  00778C  00                 	db	0
   583  00778D  00                 	db	0
   584  00778E  0C                 	db	12
   585  00778F  0C                 	db	12
   586  007790  06                 	db	6
   587  007791  00                 	db	0
   588  007792  00                 	db	0
   589  007793  00                 	db	0
   590  007794  3F                 	db	63
   591  007795  00                 	db	0
   592  007796  00                 	db	0
   593  007797  00                 	db	0
   594  007798  00                 	db	0
   595  007799  00                 	db	0
   596  00779A  00                 	db	0
   597  00779B  00                 	db	0
   598  00779C  00                 	db	0
   599  00779D  00                 	db	0
   600  00779E  0C                 	db	12
   601  00779F  0C                 	db	12
   602  0077A0  00                 	db	0
   603  0077A1  60                 	db	96
   604  0077A2  30                 	db	48
   605  0077A3  18                 	db	24
   606  0077A4  0C                 	db	12
   607  0077A5  06                 	db	6
   608  0077A6  03                 	db	3
   609  0077A7  01                 	db	1
   610  0077A8  00                 	db	0
   611  0077A9  3E                 	db	62
   612  0077AA  63                 	db	99
   613  0077AB  73                 	db	115
   614  0077AC  7B                 	db	123
   615  0077AD  6F                 	db	111
   616  0077AE  67                 	db	103
   617  0077AF  3E                 	db	62
   618  0077B0  00                 	db	0
   619  0077B1  0C                 	db	12
   620  0077B2  0E                 	db	14
   621  0077B3  0C                 	db	12
   622  0077B4  0C                 	db	12
   623  0077B5  0C                 	db	12
   624  0077B6  0C                 	db	12
   625  0077B7  3F                 	db	63
   626  0077B8  00                 	db	0
   627  0077B9  1E                 	db	30
   628  0077BA  33                 	db	51
   629  0077BB  30                 	db	48
   630  0077BC  1C                 	db	28
   631  0077BD  06                 	db	6
   632  0077BE  33                 	db	51
   633  0077BF  3F                 	db	63
   634  0077C0  00                 	db	0
   635  0077C1  1E                 	db	30
   636  0077C2  33                 	db	51
   637  0077C3  30                 	db	48
   638  0077C4  1C                 	db	28
   639  0077C5  30                 	db	48
   640  0077C6  33                 	db	51
   641  0077C7  1E                 	db	30
   642  0077C8  00                 	db	0
   643  0077C9  38                 	db	56
   644  0077CA  3C                 	db	60
   645  0077CB  36                 	db	54
   646  0077CC  33                 	db	51
   647  0077CD  7F                 	db	127
   648  0077CE  30                 	db	48
   649  0077CF  78                 	db	120
   650  0077D0  00                 	db	0
   651  0077D1  3F                 	db	63
   652  0077D2  03                 	db	3
   653  0077D3  1F                 	db	31
   654  0077D4  30                 	db	48
   655  0077D5  30                 	db	48
   656  0077D6  33                 	db	51
   657  0077D7  1E                 	db	30
   658  0077D8  00                 	db	0
   659  0077D9  1C                 	db	28
   660  0077DA  06                 	db	6
   661  0077DB  03                 	db	3
   662  0077DC  1F                 	db	31
   663  0077DD  33                 	db	51
   664  0077DE  33                 	db	51
   665  0077DF  1E                 	db	30
   666  0077E0  00                 	db	0
   667  0077E1  3F                 	db	63
   668  0077E2  33                 	db	51
   669  0077E3  30                 	db	48
   670  0077E4  18                 	db	24
   671  0077E5  0C                 	db	12
   672  0077E6  0C                 	db	12
   673  0077E7  0C                 	db	12
   674  0077E8  00                 	db	0
   675  0077E9  1E                 	db	30
   676  0077EA  33                 	db	51
   677  0077EB  33                 	db	51
   678  0077EC  1E                 	db	30
   679  0077ED  33                 	db	51
   680  0077EE  33                 	db	51
   681  0077EF  1E                 	db	30
   682  0077F0  00                 	db	0
   683  0077F1  1E                 	db	30
   684  0077F2  33                 	db	51
   685  0077F3  33                 	db	51
   686  0077F4  3E                 	db	62
   687  0077F5  30                 	db	48
   688  0077F6  18                 	db	24
   689  0077F7  0E                 	db	14
   690  0077F8  00                 	db	0
   691  0077F9  00                 	db	0
   692  0077FA  0C                 	db	12
   693  0077FB  0C                 	db	12
   694  0077FC  00                 	db	0
   695  0077FD  00                 	db	0
   696  0077FE  0C                 	db	12
   697  0077FF  0C                 	db	12
   698  007800  00                 	db	0
   699  007801  00                 	db	0
   700  007802  0C                 	db	12
   701  007803  0C                 	db	12
   702  007804  00                 	db	0
   703  007805  00                 	db	0
   704  007806  0C                 	db	12
   705  007807  0C                 	db	12
   706  007808  06                 	db	6
   707  007809  18                 	db	24
   708  00780A  0C                 	db	12
   709  00780B  06                 	db	6
   710  00780C  03                 	db	3
   711  00780D  06                 	db	6
   712  00780E  0C                 	db	12
   713  00780F  18                 	db	24
   714  007810  00                 	db	0
   715  007811  00                 	db	0
   716  007812  00                 	db	0
   717  007813  3F                 	db	63
   718  007814  00                 	db	0
   719  007815  00                 	db	0
   720  007816  3F                 	db	63
   721  007817  00                 	db	0
   722  007818  00                 	db	0
   723  007819  06                 	db	6
   724  00781A  0C                 	db	12
   725  00781B  18                 	db	24
   726  00781C  30                 	db	48
   727  00781D  18                 	db	24
   728  00781E  0C                 	db	12
   729  00781F  06                 	db	6
   730  007820  00                 	db	0
   731  007821  1E                 	db	30
   732  007822  33                 	db	51
   733  007823  30                 	db	48
   734  007824  18                 	db	24
   735  007825  0C                 	db	12
   736  007826  00                 	db	0
   737  007827  0C                 	db	12
   738  007828  00                 	db	0
   739  007829  3E                 	db	62
   740  00782A  63                 	db	99
   741  00782B  7B                 	db	123
   742  00782C  7B                 	db	123
   743  00782D  7B                 	db	123
   744  00782E  03                 	db	3
   745  00782F  1E                 	db	30
   746  007830  00                 	db	0
   747  007831  0C                 	db	12
   748  007832  1E                 	db	30
   749  007833  33                 	db	51
   750  007834  33                 	db	51
   751  007835  3F                 	db	63
   752  007836  33                 	db	51
   753  007837  33                 	db	51
   754  007838  00                 	db	0
   755  007839  3F                 	db	63
   756  00783A  66                 	db	102
   757  00783B  66                 	db	102
   758  00783C  3E                 	db	62
   759  00783D  66                 	db	102
   760  00783E  66                 	db	102
   761  00783F  3F                 	db	63
   762  007840  00                 	db	0
   763  007841  3C                 	db	60
   764  007842  66                 	db	102
   765  007843  03                 	db	3
   766  007844  03                 	db	3
   767  007845  03                 	db	3
   768  007846  66                 	db	102
   769  007847  3C                 	db	60
   770  007848  00                 	db	0
   771  007849  1F                 	db	31
   772  00784A  36                 	db	54
   773  00784B  66                 	db	102
   774  00784C  66                 	db	102
   775  00784D  66                 	db	102
   776  00784E  36                 	db	54
   777  00784F  1F                 	db	31
   778  007850  00                 	db	0
   779  007851  7F                 	db	127
   780  007852  46                 	db	70
   781  007853  16                 	db	22
   782  007854  1E                 	db	30
   783  007855  16                 	db	22
   784  007856  46                 	db	70
   785  007857  7F                 	db	127
   786  007858  00                 	db	0
   787  007859  7F                 	db	127
   788  00785A  46                 	db	70
   789  00785B  16                 	db	22
   790  00785C  1E                 	db	30
   791  00785D  16                 	db	22
   792  00785E  06                 	db	6
   793  00785F  0F                 	db	15
   794  007860  00                 	db	0
   795  007861  3C                 	db	60
   796  007862  66                 	db	102
   797  007863  03                 	db	3
   798  007864  03                 	db	3
   799  007865  73                 	db	115
   800  007866  66                 	db	102
   801  007867  7C                 	db	124
   802  007868  00                 	db	0
   803  007869  33                 	db	51
   804  00786A  33                 	db	51
   805  00786B  33                 	db	51
   806  00786C  3F                 	db	63
   807  00786D  33                 	db	51
   808  00786E  33                 	db	51
   809  00786F  33                 	db	51
   810  007870  00                 	db	0
   811  007871  1E                 	db	30
   812  007872  0C                 	db	12
   813  007873  0C                 	db	12
   814  007874  0C                 	db	12
   815  007875  0C                 	db	12
   816  007876  0C                 	db	12
   817  007877  1E                 	db	30
   818  007878  00                 	db	0
   819  007879  78                 	db	120
   820  00787A  30                 	db	48
   821  00787B  30                 	db	48
   822  00787C  30                 	db	48
   823  00787D  33                 	db	51
   824  00787E  33                 	db	51
   825  00787F  1E                 	db	30
   826  007880  00                 	db	0
   827  007881  67                 	db	103
   828  007882  66                 	db	102
   829  007883  36                 	db	54
   830  007884  1E                 	db	30
   831  007885  36                 	db	54
   832  007886  66                 	db	102
   833  007887  67                 	db	103
   834  007888  00                 	db	0
   835  007889  0F                 	db	15
   836  00788A  06                 	db	6
   837  00788B  06                 	db	6
   838  00788C  06                 	db	6
   839  00788D  46                 	db	70
   840  00788E  66                 	db	102
   841  00788F  7F                 	db	127
   842  007890  00                 	db	0
   843  007891  63                 	db	99
   844  007892  77                 	db	119
   845  007893  7F                 	db	127
   846  007894  7F                 	db	127
   847  007895  6B                 	db	107
   848  007896  63                 	db	99
   849  007897  63                 	db	99
   850  007898  00                 	db	0
   851  007899  63                 	db	99
   852  00789A  67                 	db	103
   853  00789B  6F                 	db	111
   854  00789C  7B                 	db	123
   855  00789D  73                 	db	115
   856  00789E  63                 	db	99
   857  00789F  63                 	db	99
   858  0078A0  00                 	db	0
   859  0078A1  1C                 	db	28
   860  0078A2  36                 	db	54
   861  0078A3  63                 	db	99
   862  0078A4  63                 	db	99
   863  0078A5  63                 	db	99
   864  0078A6  36                 	db	54
   865  0078A7  1C                 	db	28
   866  0078A8  00                 	db	0
   867  0078A9  3F                 	db	63
   868  0078AA  66                 	db	102
   869  0078AB  66                 	db	102
   870  0078AC  3E                 	db	62
   871  0078AD  06                 	db	6
   872  0078AE  06                 	db	6
   873  0078AF  0F                 	db	15
   874  0078B0  00                 	db	0
   875  0078B1  1E                 	db	30
   876  0078B2  33                 	db	51
   877  0078B3  33                 	db	51
   878  0078B4  33                 	db	51
   879  0078B5  3B                 	db	59
   880  0078B6  1E                 	db	30
   881  0078B7  38                 	db	56
   882  0078B8  00                 	db	0
   883  0078B9  3F                 	db	63
   884  0078BA  66                 	db	102
   885  0078BB  66                 	db	102
   886  0078BC  3E                 	db	62
   887  0078BD  36                 	db	54
   888  0078BE  66                 	db	102
   889  0078BF  67                 	db	103
   890  0078C0  00                 	db	0
   891  0078C1  1E                 	db	30
   892  0078C2  33                 	db	51
   893  0078C3  07                 	db	7
   894  0078C4  0E                 	db	14
   895  0078C5  38                 	db	56
   896  0078C6  33                 	db	51
   897  0078C7  1E                 	db	30
   898  0078C8  00                 	db	0
   899  0078C9  3F                 	db	63
   900  0078CA  2D                 	db	45
   901  0078CB  0C                 	db	12
   902  0078CC  0C                 	db	12
   903  0078CD  0C                 	db	12
   904  0078CE  0C                 	db	12
   905  0078CF  1E                 	db	30
   906  0078D0  00                 	db	0
   907  0078D1  33                 	db	51
   908  0078D2  33                 	db	51
   909  0078D3  33                 	db	51
   910  0078D4  33                 	db	51
   911  0078D5  33                 	db	51
   912  0078D6  33                 	db	51
   913  0078D7  3F                 	db	63
   914  0078D8  00                 	db	0
   915  0078D9  33                 	db	51
   916  0078DA  33                 	db	51
   917  0078DB  33                 	db	51
   918  0078DC  33                 	db	51
   919  0078DD  33                 	db	51
   920  0078DE  1E                 	db	30
   921  0078DF  0C                 	db	12
   922  0078E0  00                 	db	0
   923  0078E1  63                 	db	99
   924  0078E2  63                 	db	99
   925  0078E3  63                 	db	99
   926  0078E4  6B                 	db	107
   927  0078E5  7F                 	db	127
   928  0078E6  77                 	db	119
   929  0078E7  63                 	db	99
   930  0078E8  00                 	db	0
   931  0078E9  63                 	db	99
   932  0078EA  63                 	db	99
   933  0078EB  36                 	db	54
   934  0078EC  1C                 	db	28
   935  0078ED  1C                 	db	28
   936  0078EE  36                 	db	54
   937  0078EF  63                 	db	99
   938  0078F0  00                 	db	0
   939  0078F1  33                 	db	51
   940  0078F2  33                 	db	51
   941  0078F3  33                 	db	51
   942  0078F4  1E                 	db	30
   943  0078F5  0C                 	db	12
   944  0078F6  0C                 	db	12
   945  0078F7  1E                 	db	30
   946  0078F8  00                 	db	0
   947  0078F9  7F                 	db	127
   948  0078FA  63                 	db	99
   949  0078FB  31                 	db	49
   950  0078FC  18                 	db	24
   951  0078FD  4C                 	db	76
   952  0078FE  66                 	db	102
   953  0078FF  7F                 	db	127
   954  007900  00                 	db	0
   955  007901  1E                 	db	30
   956  007902  06                 	db	6
   957  007903  06                 	db	6
   958  007904  06                 	db	6
   959  007905  06                 	db	6
   960  007906  06                 	db	6
   961  007907  1E                 	db	30
   962  007908  00                 	db	0
   963  007909  03                 	db	3
   964  00790A  06                 	db	6
   965  00790B  0C                 	db	12
   966  00790C  18                 	db	24
   967  00790D  30                 	db	48
   968  00790E  60                 	db	96
   969  00790F  40                 	db	64
   970  007910  00                 	db	0
   971  007911  1E                 	db	30
   972  007912  18                 	db	24
   973  007913  18                 	db	24
   974  007914  18                 	db	24
   975  007915  18                 	db	24
   976  007916  18                 	db	24
   977  007917  1E                 	db	30
   978  007918  00                 	db	0
   979  007919  08                 	db	8
   980  00791A  1C                 	db	28
   981  00791B  36                 	db	54
   982  00791C  63                 	db	99
   983  00791D  00                 	db	0
   984  00791E  00                 	db	0
   985  00791F  00                 	db	0
   986  007920  00                 	db	0
   987  007921  00                 	db	0
   988  007922  00                 	db	0
   989  007923  00                 	db	0
   990  007924  00                 	db	0
   991  007925  00                 	db	0
   992  007926  00                 	db	0
   993  007927  00                 	db	0
   994  007928  FF                 	db	255
   995  007929  0C                 	db	12
   996  00792A  0C                 	db	12
   997  00792B  18                 	db	24
   998  00792C  00                 	db	0
   999  00792D  00                 	db	0
  1000  00792E  00                 	db	0
  1001  00792F  00                 	db	0
  1002  007930  00                 	db	0
  1003  007931  00                 	db	0
  1004  007932  00                 	db	0
  1005  007933  1E                 	db	30
  1006  007934  30                 	db	48
  1007  007935  3E                 	db	62
  1008  007936  33                 	db	51
  1009  007937  6E                 	db	110
  1010  007938  00                 	db	0
  1011  007939  07                 	db	7
  1012  00793A  06                 	db	6
  1013  00793B  06                 	db	6
  1014  00793C  3E                 	db	62
  1015  00793D  66                 	db	102
  1016  00793E  66                 	db	102
  1017  00793F  3B                 	db	59
  1018  007940  00                 	db	0
  1019  007941  00                 	db	0
  1020  007942  00                 	db	0
  1021  007943  1E                 	db	30
  1022  007944  33                 	db	51
  1023  007945  03                 	db	3
  1024  007946  33                 	db	51
  1025  007947  1E                 	db	30
  1026  007948  00                 	db	0
  1027  007949  38                 	db	56
  1028  00794A  30                 	db	48
  1029  00794B  30                 	db	48
  1030  00794C  3E                 	db	62
  1031  00794D  33                 	db	51
  1032  00794E  33                 	db	51
  1033  00794F  6E                 	db	110
  1034  007950  00                 	db	0
  1035  007951  00                 	db	0
  1036  007952  00                 	db	0
  1037  007953  1E                 	db	30
  1038  007954  33                 	db	51
  1039  007955  3F                 	db	63
  1040  007956  03                 	db	3
  1041  007957  1E                 	db	30
  1042  007958  00                 	db	0
  1043  007959  1C                 	db	28
  1044  00795A  36                 	db	54
  1045  00795B  06                 	db	6
  1046  00795C  0F                 	db	15
  1047  00795D  06                 	db	6
  1048  00795E  06                 	db	6
  1049  00795F  0F                 	db	15
  1050  007960  00                 	db	0
  1051  007961  00                 	db	0
  1052  007962  00                 	db	0
  1053  007963  6E                 	db	110
  1054  007964  33                 	db	51
  1055  007965  33                 	db	51
  1056  007966  3E                 	db	62
  1057  007967  30                 	db	48
  1058  007968  1F                 	db	31
  1059  007969  07                 	db	7
  1060  00796A  06                 	db	6
  1061  00796B  36                 	db	54
  1062  00796C  6E                 	db	110
  1063  00796D  66                 	db	102
  1064  00796E  66                 	db	102
  1065  00796F  67                 	db	103
  1066  007970  00                 	db	0
  1067  007971  0C                 	db	12
  1068  007972  00                 	db	0
  1069  007973  0E                 	db	14
  1070  007974  0C                 	db	12
  1071  007975  0C                 	db	12
  1072  007976  0C                 	db	12
  1073  007977  1E                 	db	30
  1074  007978  00                 	db	0
  1075  007979  30                 	db	48
  1076  00797A  00                 	db	0
  1077  00797B  30                 	db	48
  1078  00797C  30                 	db	48
  1079  00797D  30                 	db	48
  1080  00797E  33                 	db	51
  1081  00797F  33                 	db	51
  1082  007980  1E                 	db	30
  1083  007981  07                 	db	7
  1084  007982  06                 	db	6
  1085  007983  66                 	db	102
  1086  007984  36                 	db	54
  1087  007985  1E                 	db	30
  1088  007986  36                 	db	54
  1089  007987  67                 	db	103
  1090  007988  00                 	db	0
  1091  007989  0E                 	db	14
  1092  00798A  0C                 	db	12
  1093  00798B  0C                 	db	12
  1094  00798C  0C                 	db	12
  1095  00798D  0C                 	db	12
  1096  00798E  0C                 	db	12
  1097  00798F  1E                 	db	30
  1098  007990  00                 	db	0
  1099  007991  00                 	db	0
  1100  007992  00                 	db	0
  1101  007993  33                 	db	51
  1102  007994  7F                 	db	127
  1103  007995  7F                 	db	127
  1104  007996  6B                 	db	107
  1105  007997  63                 	db	99
  1106  007998  00                 	db	0
  1107  007999  00                 	db	0
  1108  00799A  00                 	db	0
  1109  00799B  1F                 	db	31
  1110  00799C  33                 	db	51
  1111  00799D  33                 	db	51
  1112  00799E  33                 	db	51
  1113  00799F  33                 	db	51
  1114  0079A0  00                 	db	0
  1115  0079A1  00                 	db	0
  1116  0079A2  00                 	db	0
  1117  0079A3  1E                 	db	30
  1118  0079A4  33                 	db	51
  1119  0079A5  33                 	db	51
  1120  0079A6  33                 	db	51
  1121  0079A7  1E                 	db	30
  1122  0079A8  00                 	db	0
  1123  0079A9  00                 	db	0
  1124  0079AA  00                 	db	0
  1125  0079AB  3B                 	db	59
  1126  0079AC  66                 	db	102
  1127  0079AD  66                 	db	102
  1128  0079AE  3E                 	db	62
  1129  0079AF  06                 	db	6
  1130  0079B0  0F                 	db	15
  1131  0079B1  00                 	db	0
  1132  0079B2  00                 	db	0
  1133  0079B3  6E                 	db	110
  1134  0079B4  33                 	db	51
  1135  0079B5  33                 	db	51
  1136  0079B6  3E                 	db	62
  1137  0079B7  30                 	db	48
  1138  0079B8  78                 	db	120
  1139  0079B9  00                 	db	0
  1140  0079BA  00                 	db	0
  1141  0079BB  3B                 	db	59
  1142  0079BC  6E                 	db	110
  1143  0079BD  66                 	db	102
  1144  0079BE  06                 	db	6
  1145  0079BF  0F                 	db	15
  1146  0079C0  00                 	db	0
  1147  0079C1  00                 	db	0
  1148  0079C2  00                 	db	0
  1149  0079C3  3E                 	db	62
  1150  0079C4  03                 	db	3
  1151  0079C5  1E                 	db	30
  1152  0079C6  30                 	db	48
  1153  0079C7  1F                 	db	31
  1154  0079C8  00                 	db	0
  1155  0079C9  08                 	db	8
  1156  0079CA  0C                 	db	12
  1157  0079CB  3E                 	db	62
  1158  0079CC  0C                 	db	12
  1159  0079CD  0C                 	db	12
  1160  0079CE  2C                 	db	44
  1161  0079CF  18                 	db	24
  1162  0079D0  00                 	db	0
  1163  0079D1  00                 	db	0
  1164  0079D2  00                 	db	0
  1165  0079D3  33                 	db	51
  1166  0079D4  33                 	db	51
  1167  0079D5  33                 	db	51
  1168  0079D6  33                 	db	51
  1169  0079D7  6E                 	db	110
  1170  0079D8  00                 	db	0
  1171  0079D9  00                 	db	0
  1172  0079DA  00                 	db	0
  1173  0079DB  33                 	db	51
  1174  0079DC  33                 	db	51
  1175  0079DD  33                 	db	51
  1176  0079DE  1E                 	db	30
  1177  0079DF  0C                 	db	12
  1178  0079E0  00                 	db	0
  1179  0079E1  00                 	db	0
  1180  0079E2  00                 	db	0
  1181  0079E3  63                 	db	99
  1182  0079E4  6B                 	db	107
  1183  0079E5  7F                 	db	127
  1184  0079E6  7F                 	db	127
  1185  0079E7  36                 	db	54
  1186  0079E8  00                 	db	0
  1187  0079E9  00                 	db	0
  1188  0079EA  00                 	db	0
  1189  0079EB  63                 	db	99
  1190  0079EC  36                 	db	54
  1191  0079ED  1C                 	db	28
  1192  0079EE  36                 	db	54
  1193  0079EF  63                 	db	99
  1194  0079F0  00                 	db	0
  1195  0079F1  00                 	db	0
  1196  0079F2  00                 	db	0
  1197  0079F3  33                 	db	51
  1198  0079F4  33                 	db	51
  1199  0079F5  33                 	db	51
  1200  0079F6  3E                 	db	62
  1201  0079F7  30                 	db	48
  1202  0079F8  1F                 	db	31
  1203  0079F9  00                 	db	0
  1204  0079FA  00                 	db	0
  1205  0079FB  3F                 	db	63
  1206  0079FC  19                 	db	25
  1207  0079FD  0C                 	db	12
  1208  0079FE  26                 	db	38
  1209  0079FF  3F                 	db	63
  1210  007A00  00                 	db	0
  1211  007A01  38                 	db	56
  1212  007A02  0C                 	db	12
  1213  007A03  0C                 	db	12
  1214  007A04  07                 	db	7
  1215  007A05  0C                 	db	12
  1216  007A06  0C                 	db	12
  1217  007A07  38                 	db	56
  1218  007A08  00                 	db	0
  1219  007A09  18                 	db	24
  1220  007A0A  18                 	db	24
  1221  007A0B  18                 	db	24
  1222  007A0C  00                 	db	0
  1223  007A0D  18                 	db	24
  1224  007A0E  18                 	db	24
  1225  007A0F  18                 	db	24
  1226  007A10  00                 	db	0
  1227  007A11  07                 	db	7
  1228  007A12  0C                 	db	12
  1229  007A13  0C                 	db	12
  1230  007A14  38                 	db	56
  1231  007A15  0C                 	db	12
  1232  007A16  0C                 	db	12
  1233  007A17  07                 	db	7
  1234  007A18  00                 	db	0
  1235  007A19  6E                 	db	110
  1236  007A1A  3B                 	db	59
  1237  007A1B  00                 	db	0
  1238  007A1C  00                 	db	0
  1239  007A1D  00                 	db	0
  1240  007A1E  00                 	db	0
  1241  007A1F  00                 	db	0
  1242  007A20  00                 	db	0
  1243  007A21  00                 	db	0
  1244  007A22  00                 	db	0
  1245  007A23  00                 	db	0
  1246  007A24  00                 	db	0
  1247  007A25  00                 	db	0
  1248  007A26  00                 	db	0
  1249  007A27  00                 	db	0
  1250  007A28  00                 	db	0
  1251  007A29  00                 	db	0
  1252  007A2A  00                 	db	0
  1253  007A2B  00                 	db	0
  1254  007A2C  00                 	db	0
  1255  007A2D  00                 	db	0
  1256  007A2E  00                 	db	0
  1257  007A2F  00                 	db	0
  1258  007A30  00                 	db	0
  1259  007A31                     __end_of_font8x8_basic:
  1260                           	opt callstack 0
  1261  007A31                     _out_freq_table:
  1262                           	opt callstack 0
  1263  007A31  0003               	dw	3
  1264  007A33  0015               	dw	21
  1265  007A35  001C               	dw	28
  1266  007A37  001D               	dw	29
  1267  007A39  0032               	dw	50
  1268  007A3B  0046               	dw	70
  1269  007A3D  0090               	dw	144
  1270  007A3F  0091               	dw	145
  1271  007A41  01B3               	dw	435
  1272  007A43  01B7               	dw	439
  1273  007A45                     __end_of_out_freq_table:
  1274                           	opt callstack 0
  1275  007A45                     _PIN_LED2:
  1276                           	opt callstack 0
  1277  007A45  82                 	db	low _PIN_LED2_DEF
  1278  007A46  7B                 	db	high _PIN_LED2_DEF
  1279  007A47                     __end_of_PIN_LED2:
  1280                           	opt callstack 0
  1281  007A47                     _PIN_LED1:
  1282                           	opt callstack 0
  1283  007A47  8C                 	db	low _PIN_LED1_DEF
  1284  007A48  7B                 	db	high _PIN_LED1_DEF
  1285  007A49                     __end_of_PIN_LED1:
  1286                           	opt callstack 0
  1287  007A49                     _PIN_LED0:
  1288                           	opt callstack 0
  1289  007A49  96                 	db	low _PIN_LED0_DEF
  1290  007A4A  7B                 	db	high _PIN_LED0_DEF
  1291  007A4B                     __end_of_PIN_LED0:
  1292                           	opt callstack 0
  1293  007A4B                     _PIN_LED3:
  1294                           	opt callstack 0
  1295  007A4B  A0                 	db	low _PIN_LED3_DEF
  1296  007A4C  7B                 	db	high _PIN_LED3_DEF
  1297  007A4D                     __end_of_PIN_LED3:
  1298                           	opt callstack 0
  1299  007A4D  6E                 	db	low _PIN_USART_RX_DEF
  1300  007A4E  7B                 	db	high _PIN_USART_RX_DEF
  1301  007A4F                     __end_of_PIN_USART_RX:
  1302                           	opt callstack 0
  1303  007A4F  73                 	db	low _PIN_USART_TX_DEF
  1304  007A50  7B                 	db	high _PIN_USART_TX_DEF
  1305  007A51                     __end_of_PIN_USART_TX:
  1306                           	opt callstack 0
  1307  007A51  50                 	db	low _PIN_LNB_QRG1_DEF
  1308  007A52  7B                 	db	high _PIN_LNB_QRG1_DEF
  1309  007A53                     __end_of_PIN_LNB_QRG1:
  1310                           	opt callstack 0
  1311  007A53  55                 	db	low _PIN_LNB_QRG2_DEF
  1312  007A54  7B                 	db	high _PIN_LNB_QRG2_DEF
  1313  007A55                     __end_of_PIN_LNB_QRG2:
  1314                           	opt callstack 0
  1315  007A55  5A                 	db	low _PIN_SJ6_DEF
  1316  007A56  7B                 	db	high _PIN_SJ6_DEF
  1317  007A57                     __end_of_PIN_SJ6:
  1318                           	opt callstack 0
  1319  007A57  5F                 	db	low _PIN_SJ5_DEF
  1320  007A58  7B                 	db	high _PIN_SJ5_DEF
  1321  007A59                     __end_of_PIN_SJ5:
  1322                           	opt callstack 0
  1323  007A59  64                 	db	low _PIN_SJ4_DEF
  1324  007A5A  7B                 	db	high _PIN_SJ4_DEF
  1325  007A5B                     __end_of_PIN_SJ4:
  1326                           	opt callstack 0
  1327  007A5B  69                 	db	low _PIN_SJ3_DEF
  1328  007A5C  7B                 	db	high _PIN_SJ3_DEF
  1329  007A5D                     __end_of_PIN_SJ3:
  1330                           	opt callstack 0
  1331  007A5D  78                 	db	low _PIN_I2C_SDA_DEF
  1332  007A5E  7B                 	db	high _PIN_I2C_SDA_DEF
  1333  007A5F                     __end_of_PIN_I2C_SDA:
  1334                           	opt callstack 0
  1335  007A5F  7D                 	db	low _PIN_I2C_SCL_DEF
  1336  007A60  7B                 	db	high _PIN_I2C_SCL_DEF
  1337  007A61                     __end_of_PIN_I2C_SCL:
  1338                           	opt callstack 0
  1339  007A61  9B                 	db	low _PIN_LED_CPU_OK_DEF
  1340  007A62  7B                 	db	high _PIN_LED_CPU_OK_DEF
  1341  007A63                     __end_of_PIN_LED_CPU_OK:
  1342                           	opt callstack 0
  1343  007A63  AA                 	db	low _PIN_SI5328_CS_CA_DEF
  1344  007A64  7B                 	db	high _PIN_SI5328_CS_CA_DEF
  1345  007A65                     __end_of_PIN_SI5328_CS_CA:
  1346                           	opt callstack 0
  1347  007A65  A5                 	db	low _PIN_LED_SI_LOCK_DEF
  1348  007A66  7B                 	db	high _PIN_LED_SI_LOCK_DEF
  1349  007A67                     __end_of_PIN_LED_SI_LOCK:
  1350                           	opt callstack 0
  1351  007A67  AF                 	db	low _PIN_SI5328_LOL_DEF
  1352  007A68  7B                 	db	high _PIN_SI5328_LOL_DEF
  1353  007A69                     __end_of_PIN_SI5328_LOL:
  1354                           	opt callstack 0
  1355  007A69  87                 	db	low _PIN_LED_LNB_GOOD_DEF
  1356  007A6A  7B                 	db	high _PIN_LED_LNB_GOOD_DEF
  1357  007A6B                     __end_of_PIN_LED_LNB_GOOD:
  1358                           	opt callstack 0
  1359  007A6B  4B                 	db	low _PIN_LNB_FAULT_DEF
  1360  007A6C  7B                 	db	high _PIN_LNB_FAULT_DEF
  1361  007A6D                     __end_of_PIN_LNB_FAULT:
  1362                           	opt callstack 0
  1363  007A6D  B9                 	db	low _PIN_SIO_DATA_DEF
  1364  007A6E  7B                 	db	high _PIN_SIO_DATA_DEF
  1365  007A6F                     __end_of_PIN_SIO_DATA:
  1366                           	opt callstack 0
  1367  007A6F  B4                 	db	low _PIN_SIO_CLK_DEF
  1368  007A70  7B                 	db	high _PIN_SIO_CLK_DEF
  1369  007A71                     __end_of_PIN_SIO_CLK:
  1370                           	opt callstack 0
  1371  007A71  91                 	db	low _PIN_LED_ADF_LOCK_DEF
  1372  007A72  7B                 	db	high _PIN_LED_ADF_LOCK_DEF
  1373  007A73                     __end_of_PIN_LED_ADF_LOCK:
  1374                           	opt callstack 0
  1375  007A73  C8                 	db	low _PIN_ADF_LOCK_DEF
  1376  007A74  7B                 	db	high _PIN_ADF_LOCK_DEF
  1377  007A75                     __end_of_PIN_ADF_LOCK:
  1378                           	opt callstack 0
  1379  007A75  C3                 	db	low _PIN_ADF_CE_DEF
  1380  007A76  7B                 	db	high _PIN_ADF_CE_DEF
  1381  007A77                     __end_of_PIN_ADF_CE:
  1382                           	opt callstack 0
  1383  007A77  BE                 	db	low _PIN_ADF_LE_DEF
  1384  007A78  7B                 	db	high _PIN_ADF_LE_DEF
  1385  007A79                     __end_of_PIN_ADF_LE:
  1386                           	opt callstack 0
  1387  007A79                     _freq_table_27_OPT:
  1388                           	opt callstack 0
  1389  007A79  BF00               	dw	48896
  1390  007A7B  0013               	dw	19
  1391  007A7D  78B0               	dw	30896
  1392  007A7F  0013               	dw	19
  1393  007A81  5D58               	dw	23896
  1394  007A83  0013               	dw	19
  1395  007A85  5970               	dw	22896
  1396  007A87  0013               	dw	19
  1397  007A89  0768               	dw	1896
  1398  007A8B  0013               	dw	19
  1399  007A8D  B948               	dw	47432
  1400  007A8F  0012               	dw	18
  1401  007A91  9838               	dw	38968
  1402  007A93  0011               	dw	17
  1403  007A95  9450               	dw	37968
  1404  007A97  0011               	dw	17
  1405  007A99  2780               	dw	10112
  1406  007A9B  000D               	dw	13
  1407  007A9D  17E0               	dw	6112
  1408  007A9F  000D               	dw	13
  1409  007AA1                     __end_of_freq_table_27_OPT:
  1410                           	opt callstack 0
  1411  007AA1                     _freq_table_27_26:
  1412                           	opt callstack 0
  1413  007AA1  BD97               	dw	48535
  1414  007AA3  0010               	dw	16
  1415  007AA5  7747               	dw	30535
  1416  007AA7  0010               	dw	16
  1417  007AA9  5BEF               	dw	23535
  1418  007AAB  0010               	dw	16
  1419  007AAD  5807               	dw	22535
  1420  007AAF  0010               	dw	16
  1421  007AB1  05FF               	dw	1535
  1422  007AB3  0010               	dw	16
  1423  007AB5  B7DF               	dw	47071
  1424  007AB7  000F               	dw	15
  1425  007AB9  96CF               	dw	38607
  1426  007ABB  000E               	dw	14
  1427  007ABD  92E7               	dw	37607
  1428  007ABF  000E               	dw	14
  1429  007AC1  2617               	dw	9751
  1430  007AC3  000A               	dw	10
  1431  007AC5  1677               	dw	5751
  1432  007AC7  000A               	dw	10
  1433  007AC9                     __end_of_freq_table_27_26:
  1434                           	opt callstack 0
  1435  007AC9                     _freq_table_25_25:
  1436                           	opt callstack 0
  1437  007AC9  3B00               	dw	15104
  1438  007ACB  000B               	dw	11
  1439  007ACD  F4B0               	dw	62640
  1440  007ACF  000A               	dw	10
  1441  007AD1  D958               	dw	55640
  1442  007AD3  000A               	dw	10
  1443  007AD5  D570               	dw	54640
  1444  007AD7  000A               	dw	10
  1445  007AD9  8368               	dw	33640
  1446  007ADB  000A               	dw	10
  1447  007ADD  3548               	dw	13640
  1448  007ADF  000A               	dw	10
  1449  007AE1  1438               	dw	5176
  1450  007AE3  0009               	dw	9
  1451  007AE5  1050               	dw	4176
  1452  007AE7  0009               	dw	9
  1453  007AE9  A380               	dw	41856
  1454  007AEB  0004               	dw	4
  1455  007AED  93E0               	dw	37856
  1456  007AEF  0004               	dw	4
  1457  007AF1                     __end_of_freq_table_25_25:
  1458                           	opt callstack 0
  1459  007AF1                     _freq_table_25_24:
  1460                           	opt callstack 0
  1461  007AF1  2E70               	dw	11888
  1462  007AF3  0011               	dw	17
  1463  007AF5  E820               	dw	59424
  1464  007AF7  0010               	dw	16
  1465  007AF9  CCC8               	dw	52424
  1466  007AFB  0010               	dw	16
  1467  007AFD  C8E0               	dw	51424
  1468  007AFF  0010               	dw	16
  1469  007B01  76D8               	dw	30424
  1470  007B03  0010               	dw	16
  1471  007B05  28B8               	dw	10424
  1472  007B07  0010               	dw	16
  1473  007B09  07A8               	dw	1960
  1474  007B0B  000F               	dw	15
  1475  007B0D  03C0               	dw	960
  1476  007B0F  000F               	dw	15
  1477  007B11  96F0               	dw	38640
  1478  007B13  000A               	dw	10
  1479  007B15  8750               	dw	34640
  1480  007B17  000A               	dw	10
  1481  007B19                     __end_of_freq_table_25_24:
  1482                           	opt callstack 0
  1483  007B19                     _reg_set_univ_CKIN1_GPS:
  1484                           	opt callstack 0
  1485  007B19  00                 	db	0
  1486  007B1A  14                 	db	20
  1487  007B1B  01                 	db	1
  1488  007B1C  E4                 	db	228
  1489  007B1D  02                 	db	2
  1490  007B1E  F2                 	db	242
  1491  007B1F  03                 	db	3
  1492  007B20  05                 	db	5
  1493  007B21  04                 	db	4
  1494  007B22  17                 	db	23
  1495  007B23  06                 	db	6
  1496  007B24  15                 	db	21
  1497  007B25  09                 	db	9
  1498  007B26  C8                 	db	200
  1499  007B27  13                 	db	19
  1500  007B28  29                 	db	41
  1501  007B29  14                 	db	20
  1502  007B2A  3E                 	db	62
  1503  007B2B  15                 	db	21
  1504  007B2C  FC                 	db	252
  1505  007B2D  37                 	db	55
  1506  007B2E  08                 	db	8
  1507  007B2F  89                 	db	137
  1508  007B30  01                 	db	1
  1509  007B31  8B                 	db	139
  1510  007B32  FC                 	db	252
  1511  007B33                     __end_of_reg_set_univ_CKIN1_GPS:
  1512                           	opt callstack 0
  1513  007B33                     _reg_set_univ_CKIN2_XAXB:
  1514                           	opt callstack 0
  1515  007B33  00                 	db	0
  1516  007B34  54                 	db	84
  1517  007B35  02                 	db	2
  1518  007B36  F2                 	db	242
  1519  007B37  03                 	db	3
  1520  007B38  45                 	db	69
  1521  007B39  04                 	db	4
  1522  007B3A  17                 	db	23
  1523  007B3B  06                 	db	6
  1524  007B3C  15                 	db	21
  1525  007B3D  09                 	db	9
  1526  007B3E  C8                 	db	200
  1527  007B3F  13                 	db	19
  1528  007B40  29                 	db	41
  1529  007B41  14                 	db	20
  1530  007B42  3E                 	db	62
  1531  007B43  15                 	db	21
  1532  007B44  FC                 	db	252
  1533  007B45  37                 	db	55
  1534  007B46  08                 	db	8
  1535  007B47  89                 	db	137
  1536  007B48  01                 	db	1
  1537  007B49  8B                 	db	139
  1538  007B4A  FC                 	db	252
  1539  007B4B                     __end_of_reg_set_univ_CKIN2_XAXB:
  1540                           	opt callstack 0
  1541  007B4B                     _PIN_LNB_FAULT_DEF:
  1542                           	opt callstack 0
  1543  007B4B  82                 	db	130
  1544  007B4C  0F                 	db	15
  1545  007B4D  94                 	db	148
  1546  007B4E  0F                 	db	15
  1547  007B4F  20                 	db	32
  1548  007B50                     __end_of_PIN_LNB_FAULT_DEF:
  1549                           	opt callstack 0
  1550  007B50                     _PIN_LNB_QRG1_DEF:
  1551                           	opt callstack 0
  1552  007B50  81                 	db	129
  1553  007B51  0F                 	db	15
  1554  007B52  93                 	db	147
  1555  007B53  0F                 	db	15
  1556  007B54  20                 	db	32
  1557  007B55                     __end_of_PIN_LNB_QRG1_DEF:
  1558                           	opt callstack 0
  1559  007B55                     _PIN_LNB_QRG2_DEF:
  1560                           	opt callstack 0
  1561  007B55  81                 	db	129
  1562  007B56  0F                 	db	15
  1563  007B57  93                 	db	147
  1564  007B58  0F                 	db	15
  1565  007B59  01                 	db	1
  1566  007B5A                     __end_of_PIN_LNB_QRG2_DEF:
  1567                           	opt callstack 0
  1568  007B5A                     _PIN_SJ6_DEF:
  1569                           	opt callstack 0
  1570  007B5A  81                 	db	129
  1571  007B5B  0F                 	db	15
  1572  007B5C  93                 	db	147
  1573  007B5D  0F                 	db	15
  1574  007B5E  10                 	db	16
  1575  007B5F                     __end_of_PIN_SJ6_DEF:
  1576                           	opt callstack 0
  1577  007B5F                     _PIN_SJ5_DEF:
  1578                           	opt callstack 0
  1579  007B5F  81                 	db	129
  1580  007B60  0F                 	db	15
  1581  007B61  93                 	db	147
  1582  007B62  0F                 	db	15
  1583  007B63  08                 	db	8
  1584  007B64                     __end_of_PIN_SJ5_DEF:
  1585                           	opt callstack 0
  1586  007B64                     _PIN_SJ4_DEF:
  1587                           	opt callstack 0
  1588  007B64  81                 	db	129
  1589  007B65  0F                 	db	15
  1590  007B66  93                 	db	147
  1591  007B67  0F                 	db	15
  1592  007B68  04                 	db	4
  1593  007B69                     __end_of_PIN_SJ4_DEF:
  1594                           	opt callstack 0
  1595  007B69                     _PIN_SJ3_DEF:
  1596                           	opt callstack 0
  1597  007B69  81                 	db	129
  1598  007B6A  0F                 	db	15
  1599  007B6B  93                 	db	147
  1600  007B6C  0F                 	db	15
  1601  007B6D  02                 	db	2
  1602  007B6E                     __end_of_PIN_SJ3_DEF:
  1603                           	opt callstack 0
  1604  007B6E                     _PIN_USART_RX_DEF:
  1605                           	opt callstack 0
  1606  007B6E  82                 	db	130
  1607  007B6F  0F                 	db	15
  1608  007B70  94                 	db	148
  1609  007B71  0F                 	db	15
  1610  007B72  80                 	db	128
  1611  007B73                     __end_of_PIN_USART_RX_DEF:
  1612                           	opt callstack 0
  1613  007B73                     _PIN_USART_TX_DEF:
  1614                           	opt callstack 0
  1615  007B73  82                 	db	130
  1616  007B74  0F                 	db	15
  1617  007B75  94                 	db	148
  1618  007B76  0F                 	db	15
  1619  007B77  40                 	db	64
  1620  007B78                     __end_of_PIN_USART_TX_DEF:
  1621                           	opt callstack 0
  1622  007B78                     _PIN_I2C_SDA_DEF:
  1623                           	opt callstack 0
  1624  007B78  82                 	db	130
  1625  007B79  0F                 	db	15
  1626  007B7A  94                 	db	148
  1627  007B7B  0F                 	db	15
  1628  007B7C  10                 	db	16
  1629  007B7D                     __end_of_PIN_I2C_SDA_DEF:
  1630                           	opt callstack 0
  1631  007B7D                     _PIN_I2C_SCL_DEF:
  1632                           	opt callstack 0
  1633  007B7D  82                 	db	130
  1634  007B7E  0F                 	db	15
  1635  007B7F  94                 	db	148
  1636  007B80  0F                 	db	15
  1637  007B81  08                 	db	8
  1638  007B82                     __end_of_PIN_I2C_SCL_DEF:
  1639                           	opt callstack 0
  1640  007B82                     _PIN_LED2_DEF:
  1641  007B82  82                 	db	130
  1642  007B83  0F                 	db	15
  1643  007B84  94                 	db	148
  1644  007B85  0F                 	db	15
  1645  007B86  04                 	db	4
  1646  007B87                     __end_of_PIN_LED2_DEF:
  1647                           	opt callstack 0
  1648  007B87                     _PIN_LED_LNB_GOOD_DEF:
  1649                           	opt callstack 0
  1650  007B87  82                 	db	130
  1651  007B88  0F                 	db	15
  1652  007B89  94                 	db	148
  1653  007B8A  0F                 	db	15
  1654  007B8B  04                 	db	4
  1655  007B8C                     __end_of_PIN_LED_LNB_GOOD_DEF:
  1656                           	opt callstack 0
  1657  007B8C                     _PIN_LED1_DEF:
  1658  007B8C  82                 	db	130
  1659  007B8D  0F                 	db	15
  1660  007B8E  94                 	db	148
  1661  007B8F  0F                 	db	15
  1662  007B90  02                 	db	2
  1663  007B91                     __end_of_PIN_LED1_DEF:
  1664                           	opt callstack 0
  1665  007B91                     _PIN_LED_ADF_LOCK_DEF:
  1666                           	opt callstack 0
  1667  007B91  82                 	db	130
  1668  007B92  0F                 	db	15
  1669  007B93  94                 	db	148
  1670  007B94  0F                 	db	15
  1671  007B95  02                 	db	2
  1672  007B96                     __end_of_PIN_LED_ADF_LOCK_DEF:
  1673                           	opt callstack 0
  1674  007B96                     _PIN_LED0_DEF:
  1675  007B96  82                 	db	130
  1676  007B97  0F                 	db	15
  1677  007B98  94                 	db	148
  1678  007B99  0F                 	db	15
  1679  007B9A  01                 	db	1
  1680  007B9B                     __end_of_PIN_LED0_DEF:
  1681                           	opt callstack 0
  1682  007B9B                     _PIN_LED_CPU_OK_DEF:
  1683                           	opt callstack 0
  1684  007B9B  82                 	db	130
  1685  007B9C  0F                 	db	15
  1686  007B9D  94                 	db	148
  1687  007B9E  0F                 	db	15
  1688  007B9F  01                 	db	1
  1689  007BA0                     __end_of_PIN_LED_CPU_OK_DEF:
  1690                           	opt callstack 0
  1691  007BA0                     _PIN_LED3_DEF:
  1692  007BA0  80                 	db	128
  1693  007BA1  0F                 	db	15
  1694  007BA2  92                 	db	146
  1695  007BA3  0F                 	db	15
  1696  007BA4  40                 	db	64
  1697  007BA5                     __end_of_PIN_LED3_DEF:
  1698                           	opt callstack 0
  1699  007BA5                     _PIN_LED_SI_LOCK_DEF:
  1700                           	opt callstack 0
  1701  007BA5  80                 	db	128
  1702  007BA6  0F                 	db	15
  1703  007BA7  92                 	db	146
  1704  007BA8  0F                 	db	15
  1705  007BA9  40                 	db	64
  1706  007BAA                     __end_of_PIN_LED_SI_LOCK_DEF:
  1707                           	opt callstack 0
  1708  007BAA                     _PIN_SI5328_CS_CA_DEF:
  1709                           	opt callstack 0
  1710  007BAA  80                 	db	128
  1711  007BAB  0F                 	db	15
  1712  007BAC  92                 	db	146
  1713  007BAD  0F                 	db	15
  1714  007BAE  80                 	db	128
  1715  007BAF                     __end_of_PIN_SI5328_CS_CA_DEF:
  1716                           	opt callstack 0
  1717  007BAF                     _PIN_SI5328_LOL_DEF:
  1718                           	opt callstack 0
  1719  007BAF  80                 	db	128
  1720  007BB0  0F                 	db	15
  1721  007BB1  92                 	db	146
  1722  007BB2  0F                 	db	15
  1723  007BB3  20                 	db	32
  1724  007BB4                     __end_of_PIN_SI5328_LOL_DEF:
  1725                           	opt callstack 0
  1726  007BB4                     _PIN_SIO_CLK_DEF:
  1727                           	opt callstack 0
  1728  007BB4  80                 	db	128
  1729  007BB5  0F                 	db	15
  1730  007BB6  92                 	db	146
  1731  007BB7  0F                 	db	15
  1732  007BB8  10                 	db	16
  1733  007BB9                     __end_of_PIN_SIO_CLK_DEF:
  1734                           	opt callstack 0
  1735  007BB9                     _PIN_SIO_DATA_DEF:
  1736                           	opt callstack 0
  1737  007BB9  80                 	db	128
  1738  007BBA  0F                 	db	15
  1739  007BBB  92                 	db	146
  1740  007BBC  0F                 	db	15
  1741  007BBD  08                 	db	8
  1742  007BBE                     __end_of_PIN_SIO_DATA_DEF:
  1743                           	opt callstack 0
  1744  007BBE                     _PIN_ADF_LE_DEF:
  1745                           	opt callstack 0
  1746  007BBE  80                 	db	128
  1747  007BBF  0F                 	db	15
  1748  007BC0  92                 	db	146
  1749  007BC1  0F                 	db	15
  1750  007BC2  04                 	db	4
  1751  007BC3                     __end_of_PIN_ADF_LE_DEF:
  1752                           	opt callstack 0
  1753  007BC3                     _PIN_ADF_CE_DEF:
  1754                           	opt callstack 0
  1755  007BC3  80                 	db	128
  1756  007BC4  0F                 	db	15
  1757  007BC5  92                 	db	146
  1758  007BC6  0F                 	db	15
  1759  007BC7  02                 	db	2
  1760  007BC8                     __end_of_PIN_ADF_CE_DEF:
  1761                           	opt callstack 0
  1762  007BC8                     _PIN_ADF_LOCK_DEF:
  1763                           	opt callstack 0
  1764  007BC8  80                 	db	128
  1765  007BC9  0F                 	db	15
  1766  007BCA  92                 	db	146
  1767  007BCB  0F                 	db	15
  1768  007BCC  01                 	db	1
  1769  007BCD                     __end_of_PIN_ADF_LOCK_DEF:
  1770                           	opt callstack 0
  1771  0000                     _PIR2bits	set	4001
  1772  0000                     _EECON2	set	4007
  1773  0000                     _EEDATA	set	4008
  1774  0000                     _EECON1bits	set	4006
  1775  0000                     _EEADR	set	4009
  1776  0000                     _WDTCON	set	4049
  1777  0000                     _RCONbits	set	4048
  1778  0000                     _PIE2	set	4000
  1779  0000                     _PIE1	set	3997
  1780  0000                     _OSCCONbits	set	4051
  1781  0000                     _OSCCON	set	4051
  1782  0000                     _OSCTUNE	set	3995
  1783  0000                     _T0CON	set	4053
  1784  0000                     _TMR0H	set	4055
  1785  0000                     _TMR0L	set	4054
  1786  0000                     _INTCON2bits	set	4081
  1787  0000                     _ADCON1bits	set	4033
  1788  0000                     _INTCONbits	set	4082
  1789  0000                     _RCREG	set	4014
  1790  0000                     _TXREG	set	4013
  1791  0000                     _PIE1bits	set	3997
  1792  0000                     _SPBRG	set	4015
  1793  0000                     _SPBRGH	set	4016
  1794  0000                     _BAUDCONbits	set	4024
  1795  0000                     _RCSTAbits	set	4011
  1796  0000                     _TXSTAbits	set	4012
  1797  0000                     _SSPBUF	set	4041
  1798  0000                     _SSPCON2bits	set	4037
  1799  0000                     _PIR1bits	set	3998
  1800  0000                     _SSPADD	set	4040
  1801  0000                     _SSPSTATbits	set	4039
  1802  0000                     _SSPCON1bits	set	4038
  1803  0000                     _TRISB	set	3987
  1804  0000                     _PORTC	set	3970
  1805  0000                     _TRISA	set	3986
  1806  0000                     _PORTA	set	3968
  1807  0000                     _PORTB	set	3969
  1808  0000                     _TRISC	set	3988
  1809  007BCD                     STR_7:
  1810                           
  1811                           ; BSR set to: 0
  1812  007BCD  4C                 	db	76	;'L'
  1813  007BCE  4E                 	db	78	;'N'
  1814  007BCF  42                 	db	66	;'B'
  1815  007BD0  3A                 	db	58	;':'
  1816  007BD1  46                 	db	70	;'F'
  1817  007BD2  61                 	db	97	;'a'
  1818  007BD3  69                 	db	105	;'i'
  1819  007BD4  6C                 	db	108	;'l'
  1820  007BD5  65                 	db	101	;'e'
  1821  007BD6  64                 	db	100	;'d'
  1822  007BD7  20                 	db	32
  1823  007BD8  74                 	db	116	;'t'
  1824  007BD9  6F                 	db	111	;'o'
  1825  007BDA  20                 	db	32
  1826  007BDB  63                 	db	99	;'c'
  1827  007BDC  6F                 	db	111	;'o'
  1828  007BDD  6E                 	db	110	;'n'
  1829  007BDE  66                 	db	102	;'f'
  1830  007BDF  69                 	db	105	;'i'
  1831  007BE0  67                 	db	103	;'g'
  1832  007BE1  75                 	db	117	;'u'
  1833  007BE2  72                 	db	114	;'r'
  1834  007BE3  65                 	db	101	;'e'
  1835  007BE4  20                 	db	32
  1836  007BE5  4C                 	db	76	;'L'
  1837  007BE6  4E                 	db	78	;'N'
  1838  007BE7  42                 	db	66	;'B'
  1839  007BE8  20                 	db	32
  1840  007BE9  43                 	db	67	;'C'
  1841  007BEA  68                 	db	104	;'h'
  1842  007BEB  69                 	db	105	;'i'
  1843  007BEC  70                 	db	112	;'p'
  1844  007BED  20                 	db	32
  1845  007BEE  28                 	db	40
  1846  007BEF  25                 	db	37
  1847  007BF0  69                 	db	105	;'i'
  1848  007BF1  29                 	db	41
  1849  007BF2  0A                 	db	10
  1850  007BF3  00                 	db	0
  1851  007BF4                     STR_18:
  1852                           
  1853                           ; BSR set to: 0
  1854  007BF4  73                 	db	115	;'s'
  1855  007BF5  69                 	db	105	;'i'
  1856  007BF6  3A                 	db	58	;':'
  1857  007BF7  47                 	db	71	;'G'
  1858  007BF8  50                 	db	80	;'P'
  1859  007BF9  53                 	db	83	;'S'
  1860  007BFA  20                 	db	32
  1861  007BFB  75                 	db	117	;'u'
  1862  007BFC  6E                 	db	110	;'n'
  1863  007BFD  6C                 	db	108	;'l'
  1864  007BFE  6F                 	db	111	;'o'
  1865  007BFF  63                 	db	99	;'c'
  1866  007C00  6B                 	db	107	;'k'
  1867  007C01  65                 	db	101	;'e'
  1868  007C02  64                 	db	100	;'d'
  1869  007C03  2C                 	db	44
  1870  007C04  20                 	db	32
  1871  007C05  54                 	db	84	;'T'
  1872  007C06  43                 	db	67	;'C'
  1873  007C07  58                 	db	88	;'X'
  1874  007C08  4F                 	db	79	;'O'
  1875  007C09  20                 	db	32
  1876  007C0A  33                 	db	51	;'3'
  1877  007C0B  38                 	db	56	;'8'
  1878  007C0C  2C                 	db	44
  1879  007C0D  34                 	db	52	;'4'
  1880  007C0E  20                 	db	32
  1881  007C0F  4D                 	db	77	;'M'
  1882  007C10  48                 	db	72	;'H'
  1883  007C11  7A                 	db	122	;'z'
  1884  007C12  0A                 	db	10
  1885  007C13  00                 	db	0
  1886  007C14                     STR_13:
  1887                           
  1888                           ; BSR set to: 0
  1889  007C14  73                 	db	115	;'s'
  1890  007C15  69                 	db	105	;'i'
  1891  007C16  3A                 	db	58	;':'
  1892  007C17  47                 	db	71	;'G'
  1893  007C18  50                 	db	80	;'P'
  1894  007C19  53                 	db	83	;'S'
  1895  007C1A  20                 	db	32
  1896  007C1B  75                 	db	117	;'u'
  1897  007C1C  6E                 	db	110	;'n'
  1898  007C1D  6C                 	db	108	;'l'
  1899  007C1E  6F                 	db	111	;'o'
  1900  007C1F  63                 	db	99	;'c'
  1901  007C20  6B                 	db	107	;'k'
  1902  007C21  65                 	db	101	;'e'
  1903  007C22  64                 	db	100	;'d'
  1904  007C23  3A                 	db	58	;':'
  1905  007C24  20                 	db	32
  1906  007C25  54                 	db	84	;'T'
  1907  007C26  43                 	db	67	;'C'
  1908  007C27  58                 	db	88	;'X'
  1909  007C28  4F                 	db	79	;'O'
  1910  007C29  20                 	db	32
  1911  007C2A  33                 	db	51	;'3'
  1912  007C2B  38                 	db	56	;'8'
  1913  007C2C  2C                 	db	44
  1914  007C2D  34                 	db	52	;'4'
  1915  007C2E  20                 	db	32
  1916  007C2F  4D                 	db	77	;'M'
  1917  007C30  48                 	db	72	;'H'
  1918  007C31  7A                 	db	122	;'z'
  1919  007C32  0A                 	db	10
  1920  007C33  00                 	db	0
  1921  007C34                     STR_93:
  1922                           
  1923                           ; BSR set to: 0
  1924  007C34  41                 	db	65	;'A'
  1925  007C35  44                 	db	68	;'D'
  1926  007C36  46                 	db	70	;'F'
  1927  007C37  3A                 	db	58	;':'
  1928  007C38  4C                 	db	76	;'L'
  1929  007C39  4E                 	db	78	;'N'
  1930  007C3A  42                 	db	66	;'B'
  1931  007C3B  4C                 	db	76	;'L'
  1932  007C3C  4F                 	db	79	;'O'
  1933  007C3D  3A                 	db	58	;':'
  1934  007C3E  25                 	db	37
  1935  007C3F  64                 	db	100	;'d'
  1936  007C40  0A                 	db	10
  1937  007C41  41                 	db	65	;'A'
  1938  007C42  44                 	db	68	;'D'
  1939  007C43  46                 	db	70	;'F'
  1940  007C44  3A                 	db	58	;':'
  1941  007C45  73                 	db	115	;'s'
  1942  007C46  77                 	db	119	;'w'
  1943  007C47  3A                 	db	58	;':'
  1944  007C48  25                 	db	37
  1945  007C49  64                 	db	100	;'d'
  1946  007C4A  3D                 	db	61	;'='
  1947  007C4B  25                 	db	37
  1948  007C4C  6C                 	db	108	;'l'
  1949  007C4D  64                 	db	100	;'d'
  1950  007C4E  6B                 	db	107	;'k'
  1951  007C4F  48                 	db	72	;'H'
  1952  007C50  7A                 	db	122	;'z'
  1953  007C51  0A                 	db	10
  1954  007C52  00                 	db	0
  1955  007C53                     STR_35:
  1956                           
  1957                           ; BSR set to: 0
  1958  007C53  73                 	db	115	;'s'
  1959  007C54  69                 	db	105	;'i'
  1960  007C55  3A                 	db	58	;':'
  1961  007C56  77                 	db	119	;'w'
  1962  007C57  72                 	db	114	;'r'
  1963  007C58  69                 	db	105	;'i'
  1964  007C59  74                 	db	116	;'t'
  1965  007C5A  65                 	db	101	;'e'
  1966  007C5B  5F                 	db	95	;'_'
  1967  007C5C  72                 	db	114	;'r'
  1968  007C5D  65                 	db	101	;'e'
  1969  007C5E  67                 	db	103	;'g'
  1970  007C5F  73                 	db	115	;'s'
  1971  007C60  65                 	db	101	;'e'
  1972  007C61  74                 	db	116	;'t'
  1973  007C62  20                 	db	32
  1974  007C63  25                 	db	37
  1975  007C64  69                 	db	105	;'i'
  1976  007C65  20                 	db	32
  1977  007C66  65                 	db	101	;'e'
  1978  007C67  72                 	db	114	;'r'
  1979  007C68  72                 	db	114	;'r'
  1980  007C69  6F                 	db	111	;'o'
  1981  007C6A  72                 	db	114	;'r'
  1982  007C6B  73                 	db	115	;'s'
  1983  007C6C  2E                 	db	46
  1984  007C6D  0A                 	db	10
  1985  007C6E  00                 	db	0
  1986  007C6F                     STR_32:
  1987                           
  1988                           ; BSR set to: 0
  1989  007C6F  47                 	db	71	;'G'
  1990  007C70  50                 	db	80	;'P'
  1991  007C71  53                 	db	83	;'S'
  1992  007C72  3A                 	db	58	;':'
  1993  007C73  6C                 	db	108	;'l'
  1994  007C74  6F                 	db	111	;'o'
  1995  007C75  63                 	db	99	;'c'
  1996  007C76  6B                 	db	107	;'k'
  1997  007C77  65                 	db	101	;'e'
  1998  007C78  64                 	db	100	;'d'
  1999  007C79  0A                 	db	10
  2000  007C7A  73                 	db	115	;'s'
  2001  007C7B  69                 	db	105	;'i'
  2002  007C7C  3A                 	db	58	;':'
  2003  007C7D  73                 	db	115	;'s'
  2004  007C7E  79                 	db	121	;'y'
  2005  007C7F  6E                 	db	110	;'n'
  2006  007C80  63                 	db	99	;'c'
  2007  007C81  69                 	db	105	;'i'
  2008  007C82  6E                 	db	110	;'n'
  2009  007C83  67                 	db	103	;'g'
  2010  007C84  20                 	db	32
  2011  007C85  47                 	db	71	;'G'
  2012  007C86  50                 	db	80	;'P'
  2013  007C87  53                 	db	83	;'S'
  2014  007C88  0A                 	db	10
  2015  007C89  00                 	db	0
  2016  007C8A                     STR_91:
  2017                           
  2018                           ; BSR set to: 0
  2019  007C8A  47                 	db	71	;'G'
  2020  007C8B  50                 	db	80	;'P'
  2021  007C8C  53                 	db	83	;'S'
  2022  007C8D  3A                 	db	58	;':'
  2023  007C8E  69                 	db	105	;'i'
  2024  007C8F  6E                 	db	110	;'n'
  2025  007C90  69                 	db	105	;'i'
  2026  007C91  74                 	db	116	;'t'
  2027  007C92  20                 	db	32
  2028  007C93  55                 	db	85	;'U'
  2029  007C94  62                 	db	98	;'b'
  2030  007C95  6C                 	db	108	;'l'
  2031  007C96  6F                 	db	111	;'o'
  2032  007C97  78                 	db	120	;'x'
  2033  007C98  20                 	db	32
  2034  007C99  25                 	db	37
  2035  007C9A  64                 	db	100	;'d'
  2036  007C9B  20                 	db	32
  2037  007C9C  6F                 	db	111	;'o'
  2038  007C9D  66                 	db	102	;'f'
  2039  007C9E  20                 	db	32
  2040  007C9F  31                 	db	49	;'1'
  2041  007CA0  30                 	db	48	;'0'
  2042  007CA1  30                 	db	48	;'0'
  2043  007CA2  0A                 	db	10
  2044  007CA3  00                 	db	0
  2045  007CA4                     STR_5:
  2046                           
  2047                           ; BSR set to: 0
  2048  007CA4  4C                 	db	76	;'L'
  2049  007CA5  4E                 	db	78	;'N'
  2050  007CA6  42                 	db	66	;'B'
  2051  007CA7  3A                 	db	58	;':'
  2052  007CA8  4C                 	db	76	;'L'
  2053  007CA9  4E                 	db	78	;'N'
  2054  007CAA  42                 	db	66	;'B'
  2055  007CAB  20                 	db	32
  2056  007CAC  43                 	db	67	;'C'
  2057  007CAD  68                 	db	104	;'h'
  2058  007CAE  69                 	db	105	;'i'
  2059  007CAF  70                 	db	112	;'p'
  2060  007CB0  20                 	db	32
  2061  007CB1  6E                 	db	110	;'n'
  2062  007CB2  6F                 	db	111	;'o'
  2063  007CB3  74                 	db	116	;'t'
  2064  007CB4  20                 	db	32
  2065  007CB5  66                 	db	102	;'f'
  2066  007CB6  6F                 	db	111	;'o'
  2067  007CB7  75                 	db	117	;'u'
  2068  007CB8  6E                 	db	110	;'n'
  2069  007CB9  64                 	db	100	;'d'
  2070  007CBA  21                 	db	33
  2071  007CBB  0A                 	db	10
  2072  007CBC  00                 	db	0
  2073  007CBD                     STR_6:
  2074                           
  2075                           ; BSR set to: 0
  2076  007CBD  4C                 	db	76	;'L'
  2077  007CBE  4E                 	db	78	;'N'
  2078  007CBF  42                 	db	66	;'B'
  2079  007CC0  3A                 	db	58	;':'
  2080  007CC1  4C                 	db	76	;'L'
  2081  007CC2  4E                 	db	78	;'N'
  2082  007CC3  42                 	db	66	;'B'
  2083  007CC4  20                 	db	32
  2084  007CC5  43                 	db	67	;'C'
  2085  007CC6  68                 	db	104	;'h'
  2086  007CC7  69                 	db	105	;'i'
  2087  007CC8  70                 	db	112	;'p'
  2088  007CC9  20                 	db	32
  2089  007CCA  63                 	db	99	;'c'
  2090  007CCB  6F                 	db	111	;'o'
  2091  007CCC  6E                 	db	110	;'n'
  2092  007CCD  66                 	db	102	;'f'
  2093  007CCE  69                 	db	105	;'i'
  2094  007CCF  67                 	db	103	;'g'
  2095  007CD0  75                 	db	117	;'u'
  2096  007CD1  72                 	db	114	;'r'
  2097  007CD2  65                 	db	101	;'e'
  2098  007CD3  64                 	db	100	;'d'
  2099  007CD4  0A                 	db	10
  2100  007CD5  00                 	db	0
  2101  007CD6                     STR_1:
  2102                           
  2103                           ; BSR set to: 0
  2104  007CD6  41                 	db	65	;'A'
  2105  007CD7  44                 	db	68	;'D'
  2106  007CD8  46                 	db	70	;'F'
  2107  007CD9  3A                 	db	58	;':'
  2108  007CDA  25                 	db	37
  2109  007CDB  6C                 	db	108	;'l'
  2110  007CDC  64                 	db	100	;'d'
  2111  007CDD  20                 	db	32
  2112  007CDE  6B                 	db	107	;'k'
  2113  007CDF  48                 	db	72	;'H'
  2114  007CE0  7A                 	db	122	;'z'
  2115  007CE1  20                 	db	32
  2116  007CE2  28                 	db	40
  2117  007CE3  63                 	db	99	;'c'
  2118  007CE4  6F                 	db	111	;'o'
  2119  007CE5  72                 	db	114	;'r'
  2120  007CE6  72                 	db	114	;'r'
  2121  007CE7  3A                 	db	58	;':'
  2122  007CE8  25                 	db	37
  2123  007CE9  6C                 	db	108	;'l'
  2124  007CEA  64                 	db	100	;'d'
  2125  007CEB  29                 	db	41
  2126  007CEC  0A                 	db	10
  2127  007CED  00                 	db	0
  2128  007CEE                     STR_36:
  2129                           
  2130                           ; BSR set to: 0
  2131  007CEE  4C                 	db	76	;'L'
  2132  007CEF  43                 	db	67	;'C'
  2133  007CF0  44                 	db	68	;'D'
  2134  007CF1  3A                 	db	58	;':'
  2135  007CF2  4F                 	db	79	;'O'
  2136  007CF3  4C                 	db	76	;'L'
  2137  007CF4  45                 	db	69	;'E'
  2138  007CF5  44                 	db	68	;'D'
  2139  007CF6  20                 	db	32
  2140  007CF7  6E                 	db	110	;'n'
  2141  007CF8  6F                 	db	111	;'o'
  2142  007CF9  74                 	db	116	;'t'
  2143  007CFA  20                 	db	32
  2144  007CFB  66                 	db	102	;'f'
  2145  007CFC  6F                 	db	111	;'o'
  2146  007CFD  75                 	db	117	;'u'
  2147  007CFE  6E                 	db	110	;'n'
  2148  007CFF  64                 	db	100	;'d'
  2149  007D00  2E                 	db	46
  2150  007D01  0A                 	db	10
  2151  007D02  00                 	db	0
  2152  007D03                     STR_10:
  2153                           
  2154                           ; BSR set to: 0
  2155  007D03  73                 	db	115	;'s'
  2156  007D04  69                 	db	105	;'i'
  2157  007D05  3A                 	db	58	;':'
  2158  007D06  65                 	db	101	;'e'
  2159  007D07  78                 	db	120	;'x'
  2160  007D08  74                 	db	116	;'t'
  2161  007D09  2E                 	db	46
  2162  007D0A  20                 	db	32
  2163  007D0B  31                 	db	49	;'1'
  2164  007D0C  30                 	db	48	;'0'
  2165  007D0D  20                 	db	32
  2166  007D0E  4D                 	db	77	;'M'
  2167  007D0F  48                 	db	72	;'H'
  2168  007D10  7A                 	db	122	;'z'
  2169  007D11  20                 	db	32
  2170  007D12  72                 	db	114	;'r'
  2171  007D13  65                 	db	101	;'e'
  2172  007D14  66                 	db	102	;'f'
  2173  007D15  0A                 	db	10
  2174  007D16  00                 	db	0
  2175  007D17                     STR_31:
  2176                           
  2177                           ; BSR set to: 0
  2178  007D17  73                 	db	115	;'s'
  2179  007D18  69                 	db	105	;'i'
  2180  007D19  3A                 	db	58	;':'
  2181  007D1A  47                 	db	71	;'G'
  2182  007D1B  50                 	db	80	;'P'
  2183  007D1C  53                 	db	83	;'S'
  2184  007D1D  20                 	db	32
  2185  007D1E  6F                 	db	111	;'o'
  2186  007D1F  6B                 	db	107	;'k'
  2187  007D20  2C                 	db	44
  2188  007D21  20                 	db	32
  2189  007D22  6E                 	db	110	;'n'
  2190  007D23  6F                 	db	111	;'o'
  2191  007D24  20                 	db	32
  2192  007D25  6C                 	db	108	;'l'
  2193  007D26  6F                 	db	111	;'o'
  2194  007D27  63                 	db	99	;'c'
  2195  007D28  6B                 	db	107	;'k'
  2196  007D29  0A                 	db	10
  2197  007D2A  00                 	db	0
  2198  007D2B                     STR_4:
  2199                           
  2200                           ; BSR set to: 0
  2201  007D2B  4C                 	db	76	;'L'
  2202  007D2C  4E                 	db	78	;'N'
  2203  007D2D  42                 	db	66	;'B'
  2204  007D2E  3A                 	db	58	;':'
  2205  007D2F  4C                 	db	76	;'L'
  2206  007D30  4E                 	db	78	;'N'
  2207  007D31  42                 	db	66	;'B'
  2208  007D32  20                 	db	32
  2209  007D33  43                 	db	67	;'C'
  2210  007D34  68                 	db	104	;'h'
  2211  007D35  69                 	db	105	;'i'
  2212  007D36  70                 	db	112	;'p'
  2213  007D37  20                 	db	32
  2214  007D38  66                 	db	102	;'f'
  2215  007D39  6F                 	db	111	;'o'
  2216  007D3A  75                 	db	117	;'u'
  2217  007D3B  6E                 	db	110	;'n'
  2218  007D3C  64                 	db	100	;'d'
  2219  007D3D  0A                 	db	10
  2220  007D3E  00                 	db	0
  2221  007D3F                     STR_40:
  2222                           
  2223                           ; BSR set to: 0
  2224  007D3F  4F                 	db	79	;'O'
  2225  007D40  4C                 	db	76	;'L'
  2226  007D41  44                 	db	68	;'D'
  2227  007D42  20                 	db	32
  2228  007D43  25                 	db	37
  2229  007D44  30                 	db	48	;'0'
  2230  007D45  32                 	db	50	;'2'
  2231  007D46  64                 	db	100	;'d'
  2232  007D47  20                 	db	32
  2233  007D48  25                 	db	37
  2234  007D49  30                 	db	48	;'0'
  2235  007D4A  32                 	db	50	;'2'
  2236  007D4B  64                 	db	100	;'d'
  2237  007D4C  20                 	db	32
  2238  007D4D  25                 	db	37
  2239  007D4E  73                 	db	115	;'s'
  2240  007D4F  0A                 	db	10
  2241  007D50  00                 	db	0
  2242  007D51                     STR_11:
  2243                           
  2244                           ; BSR set to: 0
  2245  007D51  73                 	db	115	;'s'
  2246  007D52  69                 	db	105	;'i'
  2247  007D53  3A                 	db	58	;':'
  2248  007D54  54                 	db	84	;'T'
  2249  007D55  43                 	db	67	;'C'
  2250  007D56  58                 	db	88	;'X'
  2251  007D57  4F                 	db	79	;'O'
  2252  007D58  20                 	db	32
  2253  007D59  33                 	db	51	;'3'
  2254  007D5A  38                 	db	56	;'8'
  2255  007D5B  2C                 	db	44
  2256  007D5C  34                 	db	52	;'4'
  2257  007D5D  20                 	db	32
  2258  007D5E  4D                 	db	77	;'M'
  2259  007D5F  48                 	db	72	;'H'
  2260  007D60  7A                 	db	122	;'z'
  2261  007D61  0A                 	db	10
  2262  007D62  00                 	db	0
  2263  007D63                     STR_9:
  2264                           
  2265                           ; BSR set to: 0
  2266  007D63  4C                 	db	76	;'L'
  2267  007D64  4E                 	db	78	;'N'
  2268  007D65  42                 	db	66	;'B'
  2269  007D66  3A                 	db	58	;':'
  2270  007D67  20                 	db	32
  2271  007D68  65                 	db	101	;'e'
  2272  007D69  72                 	db	114	;'r'
  2273  007D6A  72                 	db	114	;'r'
  2274  007D6B  6F                 	db	111	;'o'
  2275  007D6C  72                 	db	114	;'r'
  2276  007D6D  3A                 	db	58	;':'
  2277  007D6E  20                 	db	32
  2278  007D6F  25                 	db	37
  2279  007D70  30                 	db	48	;'0'
  2280  007D71  32                 	db	50	;'2'
  2281  007D72  58                 	db	88	;'X'
  2282  007D73  0A                 	db	10
  2283  007D74  00                 	db	0
  2284  007D75                     STR_37:
  2285                           
  2286                           ; BSR set to: 0
  2287  007D75  4C                 	db	76	;'L'
  2288  007D76  43                 	db	67	;'C'
  2289  007D77  44                 	db	68	;'D'
  2290  007D78  3A                 	db	58	;':'
  2291  007D79  4F                 	db	79	;'O'
  2292  007D7A  4C                 	db	76	;'L'
  2293  007D7B  45                 	db	69	;'E'
  2294  007D7C  44                 	db	68	;'D'
  2295  007D7D  20                 	db	32
  2296  007D7E  66                 	db	102	;'f'
  2297  007D7F  6F                 	db	111	;'o'
  2298  007D80  75                 	db	117	;'u'
  2299  007D81  6E                 	db	110	;'n'
  2300  007D82  64                 	db	100	;'d'
  2301  007D83  21                 	db	33
  2302  007D84  0A                 	db	10
  2303  007D85  00                 	db	0
  2304  007D86                     STR_59:
  2305                           
  2306                           ; BSR set to: 0
  2307  007D86  20                 	db	32
  2308  007D87  20                 	db	32
  2309  007D88  20                 	db	32
  2310  007D89  20                 	db	32
  2311  007D8A  20                 	db	32
  2312  007D8B  20                 	db	32
  2313  007D8C  20                 	db	32
  2314  007D8D  20                 	db	32
  2315  007D8E  20                 	db	32
  2316  007D8F  20                 	db	32
  2317  007D90  20                 	db	32
  2318  007D91  20                 	db	32
  2319  007D92  20                 	db	32
  2320  007D93  20                 	db	32
  2321  007D94  20                 	db	32
  2322  007D95  20                 	db	32
  2323  007D96  00                 	db	0
  2324  007D97                     STR_44:
  2325                           
  2326                           ; BSR set to: 0
  2327  007D97  6D                 	db	109	;'m'
  2328  007D98  6F                 	db	111	;'o'
  2329  007D99  64                 	db	100	;'d'
  2330  007D9A  65                 	db	101	;'e'
  2331  007D9B  3A                 	db	58	;':'
  2332  007D9C  20                 	db	32
  2333  007D9D  20                 	db	32
  2334  007D9E  20                 	db	32
  2335  007D9F  20                 	db	32
  2336  007DA0  20                 	db	32
  2337  007DA1  20                 	db	32
  2338  007DA2  20                 	db	32
  2339  007DA3  20                 	db	32
  2340  007DA4  20                 	db	32
  2341  007DA5  20                 	db	32
  2342  007DA6  20                 	db	32
  2343  007DA7  00                 	db	0
  2344  007DA8                     STR_41:
  2345                           
  2346                           ; BSR set to: 0
  2347  007DA8  46                 	db	70	;'F'
  2348  007DA9  69                 	db	105	;'i'
  2349  007DAA  72                 	db	114	;'r'
  2350  007DAB  6D                 	db	109	;'m'
  2351  007DAC  77                 	db	119	;'w'
  2352  007DAD  61                 	db	97	;'a'
  2353  007DAE  72                 	db	114	;'r'
  2354  007DAF  65                 	db	101	;'e'
  2355  007DB0  3A                 	db	58	;':'
  2356  007DB1  20                 	db	32
  2357  007DB2  20                 	db	32
  2358  007DB3  20                 	db	32
  2359  007DB4  20                 	db	32
  2360  007DB5  20                 	db	32
  2361  007DB6  20                 	db	32
  2362  007DB7  20                 	db	32
  2363  007DB8  00                 	db	0
  2364  007DB9                     STR_54:
  2365                           
  2366                           ; BSR set to: 0
  2367  007DB9  47                 	db	71	;'G'
  2368  007DBA  50                 	db	80	;'P'
  2369  007DBB  53                 	db	83	;'S'
  2370  007DBC  20                 	db	32
  2371  007DBD  53                 	db	83	;'S'
  2372  007DBE  41                 	db	65	;'A'
  2373  007DBF  54                 	db	84	;'T'
  2374  007DC0  73                 	db	115	;'s'
  2375  007DC1  3A                 	db	58	;':'
  2376  007DC2  20                 	db	32
  2377  007DC3  20                 	db	32
  2378  007DC4  20                 	db	32
  2379  007DC5  20                 	db	32
  2380  007DC6  20                 	db	32
  2381  007DC7  20                 	db	32
  2382  007DC8  20                 	db	32
  2383  007DC9  00                 	db	0
  2384  007DCA                     STR_47:
  2385                           
  2386                           ; BSR set to: 0
  2387  007DCA  53                 	db	83	;'S'
  2388  007DCB  79                 	db	121	;'y'
  2389  007DCC  73                 	db	115	;'s'
  2390  007DCD  63                 	db	99	;'c'
  2391  007DCE  6C                 	db	108	;'l'
  2392  007DCF  6F                 	db	111	;'o'
  2393  007DD0  63                 	db	99	;'c'
  2394  007DD1  6B                 	db	107	;'k'
  2395  007DD2  20                 	db	32
  2396  007DD3  3A                 	db	58	;':'
  2397  007DD4  20                 	db	32
  2398  007DD5  20                 	db	32
  2399  007DD6  20                 	db	32
  2400  007DD7  20                 	db	32
  2401  007DD8  20                 	db	32
  2402  007DD9  20                 	db	32
  2403  007DDA  00                 	db	0
  2404  007DDB                     STR_46:
  2405                           
  2406                           ; BSR set to: 0
  2407  007DDB  4C                 	db	76	;'L'
  2408  007DDC  4E                 	db	78	;'N'
  2409  007DDD  42                 	db	66	;'B'
  2410  007DDE  2D                 	db	45
  2411  007DDF  70                 	db	112	;'p'
  2412  007DE0  6F                 	db	111	;'o'
  2413  007DE1  77                 	db	119	;'w'
  2414  007DE2  65                 	db	101	;'e'
  2415  007DE3  72                 	db	114	;'r'
  2416  007DE4  3A                 	db	58	;':'
  2417  007DE5  20                 	db	32
  2418  007DE6  20                 	db	32
  2419  007DE7  20                 	db	32
  2420  007DE8  20                 	db	32
  2421  007DE9  20                 	db	32
  2422  007DEA  20                 	db	32
  2423  007DEB  00                 	db	0
  2424  007DEC                     STR_48:
  2425                           
  2426                           ; BSR set to: 0
  2427  007DEC  44                 	db	68	;'D'
  2428  007DED  6F                 	db	111	;'o'
  2429  007DEE  77                 	db	119	;'w'
  2430  007DEF  6E                 	db	110	;'n'
  2431  007DF0  6D                 	db	109	;'m'
  2432  007DF1  69                 	db	105	;'i'
  2433  007DF2  78                 	db	120	;'x'
  2434  007DF3  65                 	db	101	;'e'
  2435  007DF4  72                 	db	114	;'r'
  2436  007DF5  3A                 	db	58	;':'
  2437  007DF6  20                 	db	32
  2438  007DF7  20                 	db	32
  2439  007DF8  20                 	db	32
  2440  007DF9  20                 	db	32
  2441  007DFA  20                 	db	32
  2442  007DFB  20                 	db	32
  2443  007DFC  00                 	db	0
  2444  007DFD                     STR_66:
  2445                           
  2446                           ; BSR set to: 0
  2447  007DFD  73                 	db	115	;'s'
  2448  007DFE  61                 	db	97	;'a'
  2449  007DFF  74                 	db	116	;'t'
  2450  007E00  65                 	db	101	;'e'
  2451  007E01  6C                 	db	108	;'l'
  2452  007E02  6C                 	db	108	;'l'
  2453  007E03  69                 	db	105	;'i'
  2454  007E04  74                 	db	116	;'t'
  2455  007E05  65                 	db	101	;'e'
  2456  007E06  73                 	db	115	;'s'
  2457  007E07  3A                 	db	58	;':'
  2458  007E08  20                 	db	32
  2459  007E09  20                 	db	32
  2460  007E0A  20                 	db	32
  2461  007E0B  20                 	db	32
  2462  007E0C  20                 	db	32
  2463  007E0D  00                 	db	0
  2464  007E0E                     STR_45:
  2465                           
  2466                           ; BSR set to: 0
  2467  007E0E  6E                 	db	110	;'n'
  2468  007E0F  6F                 	db	111	;'o'
  2469  007E10  72                 	db	114	;'r'
  2470  007E11  6D                 	db	109	;'m'
  2471  007E12  61                 	db	97	;'a'
  2472  007E13  6C                 	db	108	;'l'
  2473  007E14  20                 	db	32
  2474  007E15  6D                 	db	109	;'m'
  2475  007E16  6F                 	db	111	;'o'
  2476  007E17  64                 	db	100	;'d'
  2477  007E18  65                 	db	101	;'e'
  2478  007E19  20                 	db	32
  2479  007E1A  20                 	db	32
  2480  007E1B  20                 	db	32
  2481  007E1C  20                 	db	32
  2482  007E1D  20                 	db	32
  2483  007E1E  00                 	db	0
  2484  007E1F                     STR_60:
  2485                           
  2486                           ; BSR set to: 0
  2487  007E1F  53                 	db	83	;'S'
  2488  007E20  79                 	db	121	;'y'
  2489  007E21  73                 	db	115	;'s'
  2490  007E22  74                 	db	116	;'t'
  2491  007E23  65                 	db	101	;'e'
  2492  007E24  6D                 	db	109	;'m'
  2493  007E25  20                 	db	32
  2494  007E26  72                 	db	114	;'r'
  2495  007E27  65                 	db	101	;'e'
  2496  007E28  61                 	db	97	;'a'
  2497  007E29  64                 	db	100	;'d'
  2498  007E2A  79                 	db	121	;'y'
  2499  007E2B  20                 	db	32
  2500  007E2C  20                 	db	32
  2501  007E2D  20                 	db	32
  2502  007E2E  20                 	db	32
  2503  007E2F  00                 	db	0
  2504  007E30                     STR_65:
  2505                           
  2506                           ; BSR set to: 0
  2507  007E30  73                 	db	115	;'s'
  2508  007E31  65                 	db	101	;'e'
  2509  007E32  61                 	db	97	;'a'
  2510  007E33  72                 	db	114	;'r'
  2511  007E34  63                 	db	99	;'c'
  2512  007E35  68                 	db	104	;'h'
  2513  007E36  69                 	db	105	;'i'
  2514  007E37  6E                 	db	110	;'n'
  2515  007E38  67                 	db	103	;'g'
  2516  007E39  20                 	db	32
  2517  007E3A  47                 	db	71	;'G'
  2518  007E3B  50                 	db	80	;'P'
  2519  007E3C  53                 	db	83	;'S'
  2520  007E3D  20                 	db	32
  2521  007E3E  20                 	db	32
  2522  007E3F  20                 	db	32
  2523  007E40  00                 	db	0
  2524  007E41                     STR_43:
  2525                           
  2526                           ; BSR set to: 0
  2527  007E41  53                 	db	83	;'S'
  2528  007E42  79                 	db	121	;'y'
  2529  007E43  73                 	db	115	;'s'
  2530  007E44  74                 	db	116	;'t'
  2531  007E45  65                 	db	101	;'e'
  2532  007E46  6D                 	db	109	;'m'
  2533  007E47  20                 	db	32
  2534  007E48  53                 	db	83	;'S'
  2535  007E49  45                 	db	69	;'E'
  2536  007E4A  54                 	db	84	;'T'
  2537  007E4B  55                 	db	85	;'U'
  2538  007E4C  50                 	db	80	;'P'
  2539  007E4D  20                 	db	32
  2540  007E4E  2E                 	db	46
  2541  007E4F  2E                 	db	46
  2542  007E50  2E                 	db	46
  2543  007E51  00                 	db	0
  2544  007E52                     STR_85:
  2545                           
  2546                           ; BSR set to: 0
  2547  007E52  41                 	db	65	;'A'
  2548  007E53  4D                 	db	77	;'M'
  2549  007E54  53                 	db	83	;'S'
  2550  007E55  41                 	db	65	;'A'
  2551  007E56  54                 	db	84	;'T'
  2552  007E57  2D                 	db	45
  2553  007E58  44                 	db	68	;'D'
  2554  007E59  4C                 	db	76	;'L'
  2555  007E5A  20                 	db	32
  2556  007E5B  20                 	db	32
  2557  007E5C  51                 	db	81	;'Q'
  2558  007E5D  4F                 	db	79	;'O'
  2559  007E5E  2D                 	db	45
  2560  007E5F  31                 	db	49	;'1'
  2561  007E60  30                 	db	48	;'0'
  2562  007E61  30                 	db	48	;'0'
  2563  007E62  00                 	db	0
  2564  007E63                     STR_39:
  2565                           
  2566                           ; BSR set to: 0
  2567  007E63  41                 	db	65	;'A'
  2568  007E64  4D                 	db	77	;'M'
  2569  007E65  53                 	db	83	;'S'
  2570  007E66  41                 	db	65	;'A'
  2571  007E67  54                 	db	84	;'T'
  2572  007E68  2D                 	db	45
  2573  007E69  44                 	db	68	;'D'
  2574  007E6A  4C                 	db	76	;'L'
  2575  007E6B  20                 	db	32
  2576  007E6C  20                 	db	32
  2577  007E6D  65                 	db	101	;'e'
  2578  007E6E  78                 	db	120	;'x'
  2579  007E6F  74                 	db	116	;'t'
  2580  007E70  31                 	db	49	;'1'
  2581  007E71  30                 	db	48	;'0'
  2582  007E72  4D                 	db	77	;'M'
  2583  007E73  00                 	db	0
  2584  007E74                     STR_38:
  2585                           
  2586                           ; BSR set to: 0
  2587  007E74  41                 	db	65	;'A'
  2588  007E75  4D                 	db	77	;'M'
  2589  007E76  53                 	db	83	;'S'
  2590  007E77  41                 	db	65	;'A'
  2591  007E78  54                 	db	84	;'T'
  2592  007E79  2D                 	db	45
  2593  007E7A  44                 	db	68	;'D'
  2594  007E7B  4C                 	db	76	;'L'
  2595  007E7C  20                 	db	32
  2596  007E7D  20                 	db	32
  2597  007E7E  69                 	db	105	;'i'
  2598  007E7F  6E                 	db	110	;'n'
  2599  007E80  74                 	db	116	;'t'
  2600  007E81  43                 	db	67	;'C'
  2601  007E82  6C                 	db	108	;'l'
  2602  007E83  6B                 	db	107	;'k'
  2603  007E84  00                 	db	0
  2604  007E85                     STR_95:
  2605                           
  2606                           ; BSR set to: 0
  2607  007E85  47                 	db	71	;'G'
  2608  007E86  50                 	db	80	;'P'
  2609  007E87  53                 	db	83	;'S'
  2610  007E88  3A                 	db	58	;':'
  2611  007E89  20                 	db	32
  2612  007E8A  73                 	db	115	;'s'
  2613  007E8B  68                 	db	104	;'h'
  2614  007E8C  69                 	db	105	;'i'
  2615  007E8D  66                 	db	102	;'f'
  2616  007E8E  74                 	db	116	;'t'
  2617  007E8F  20                 	db	32
  2618  007E90  4F                 	db	79	;'O'
  2619  007E91  46                 	db	70	;'F'
  2620  007E92  46                 	db	70	;'F'
  2621  007E93  0A                 	db	10
  2622  007E94  00                 	db	0
  2623  007E95                     STR_12:
  2624                           
  2625                           ; BSR set to: 0
  2626  007E95  73                 	db	115	;'s'
  2627  007E96  69                 	db	105	;'i'
  2628  007E97  3A                 	db	58	;':'
  2629  007E98  34                 	db	52	;'4'
  2630  007E99  30                 	db	48	;'0'
  2631  007E9A  20                 	db	32
  2632  007E9B  4D                 	db	77	;'M'
  2633  007E9C  48                 	db	72	;'H'
  2634  007E9D  7A                 	db	122	;'z'
  2635  007E9E  20                 	db	32
  2636  007E9F  4F                 	db	79	;'O'
  2637  007EA0  43                 	db	67	;'C'
  2638  007EA1  58                 	db	88	;'X'
  2639  007EA2  4F                 	db	79	;'O'
  2640  007EA3  0A                 	db	10
  2641  007EA4  00                 	db	0
  2642  007EA5                     STR_15:
  2643                           
  2644                           ; BSR set to: 0
  2645  007EA5  73                 	db	115	;'s'
  2646  007EA6  69                 	db	105	;'i'
  2647  007EA7  3A                 	db	58	;':'
  2648  007EA8  65                 	db	101	;'e'
  2649  007EA9  78                 	db	120	;'x'
  2650  007EAA  74                 	db	116	;'t'
  2651  007EAB  2E                 	db	46
  2652  007EAC  20                 	db	32
  2653  007EAD  31                 	db	49	;'1'
  2654  007EAE  30                 	db	48	;'0'
  2655  007EAF  20                 	db	32
  2656  007EB0  4D                 	db	77	;'M'
  2657  007EB1  48                 	db	72	;'H'
  2658  007EB2  7A                 	db	122	;'z'
  2659  007EB3  0A                 	db	10
  2660  007EB4  00                 	db	0
  2661  007EB5                     STR_90:
  2662                           
  2663                           ; BSR set to: 0
  2664  007EB5  47                 	db	71	;'G'
  2665  007EB6  50                 	db	80	;'P'
  2666  007EB7  53                 	db	83	;'S'
  2667  007EB8  3A                 	db	58	;':'
  2668  007EB9  6E                 	db	110	;'n'
  2669  007EBA  6F                 	db	111	;'o'
  2670  007EBB  74                 	db	116	;'t'
  2671  007EBC  20                 	db	32
  2672  007EBD  66                 	db	102	;'f'
  2673  007EBE  6F                 	db	111	;'o'
  2674  007EBF  75                 	db	117	;'u'
  2675  007EC0  6E                 	db	110	;'n'
  2676  007EC1  64                 	db	100	;'d'
  2677  007EC2  0A                 	db	10
  2678  007EC3  00                 	db	0
  2679  007EC4                     STR_27:
  2680                           
  2681                           ; BSR set to: 0
  2682  007EC4  73                 	db	115	;'s'
  2683  007EC5  69                 	db	105	;'i'
  2684  007EC6  3A                 	db	58	;':'
  2685  007EC7  6E                 	db	110	;'n'
  2686  007EC8  6F                 	db	111	;'o'
  2687  007EC9  74                 	db	116	;'t'
  2688  007ECA  20                 	db	32
  2689  007ECB  66                 	db	102	;'f'
  2690  007ECC  6F                 	db	111	;'o'
  2691  007ECD  75                 	db	117	;'u'
  2692  007ECE  6E                 	db	110	;'n'
  2693  007ECF  64                 	db	100	;'d'
  2694  007ED0  21                 	db	33
  2695  007ED1  0A                 	db	10
  2696  007ED2  00                 	db	0
  2697  007ED3                     STR_14:
  2698                           
  2699                           ; BSR set to: 0
  2700  007ED3  73                 	db	115	;'s'
  2701  007ED4  69                 	db	105	;'i'
  2702  007ED5  3A                 	db	58	;':'
  2703  007ED6  47                 	db	71	;'G'
  2704  007ED7  50                 	db	80	;'P'
  2705  007ED8  53                 	db	83	;'S'
  2706  007ED9  20                 	db	32
  2707  007EDA  6C                 	db	108	;'l'
  2708  007EDB  6F                 	db	111	;'o'
  2709  007EDC  63                 	db	99	;'c'
  2710  007EDD  6B                 	db	107	;'k'
  2711  007EDE  65                 	db	101	;'e'
  2712  007EDF  64                 	db	100	;'d'
  2713  007EE0  0A                 	db	10
  2714  007EE1  00                 	db	0
  2715  007EE2                     STR_89:
  2716                           
  2717                           ; BSR set to: 0
  2718  007EE2  70                 	db	112	;'p'
  2719  007EE3  6F                 	db	111	;'o'
  2720  007EE4  77                 	db	119	;'w'
  2721  007EE5  65                 	db	101	;'e'
  2722  007EE6  72                 	db	114	;'r'
  2723  007EE7  20                 	db	32
  2724  007EE8  4F                 	db	79	;'O'
  2725  007EE9  46                 	db	70	;'F'
  2726  007EEA  46                 	db	70	;'F'
  2727  007EEB  20                 	db	32
  2728  007EEC  6E                 	db	110	;'n'
  2729  007EED  6F                 	db	111	;'o'
  2730  007EEE  77                 	db	119	;'w'
  2731  007EEF  00                 	db	0
  2732  007EF0                     STR_2:
  2733                           
  2734                           ; BSR set to: 0
  2735  007EF0  41                 	db	65	;'A'
  2736  007EF1  44                 	db	68	;'D'
  2737  007EF2  46                 	db	70	;'F'
  2738  007EF3  3A                 	db	58	;':'
  2739  007EF4  75                 	db	117	;'u'
  2740  007EF5  6E                 	db	110	;'n'
  2741  007EF6  6C                 	db	108	;'l'
  2742  007EF7  6F                 	db	111	;'o'
  2743  007EF8  63                 	db	99	;'c'
  2744  007EF9  6B                 	db	107	;'k'
  2745  007EFA  65                 	db	101	;'e'
  2746  007EFB  64                 	db	100	;'d'
  2747  007EFC  0A                 	db	10
  2748  007EFD  00                 	db	0
  2749  007EFE                     STR_94:
  2750                           
  2751                           ; BSR set to: 0
  2752  007EFE  41                 	db	65	;'A'
  2753  007EFF  44                 	db	68	;'D'
  2754  007F00  46                 	db	70	;'F'
  2755  007F01  3A                 	db	58	;':'
  2756  007F02  6C                 	db	108	;'l'
  2757  007F03  6F                 	db	111	;'o'
  2758  007F04  63                 	db	99	;'c'
  2759  007F05  6B                 	db	107	;'k'
  2760  007F06  20                 	db	32
  2761  007F07  54                 	db	84	;'T'
  2762  007F08  4F                 	db	79	;'O'
  2763  007F09  0A                 	db	10
  2764  007F0A  00                 	db	0
  2765  007F0B                     STR_33:
  2766                           
  2767                           ; BSR set to: 0
  2768  007F0B  73                 	db	115	;'s'
  2769  007F0C  69                 	db	105	;'i'
  2770  007F0D  3A                 	db	58	;':'
  2771  007F0E  75                 	db	117	;'u'
  2772  007F0F  6E                 	db	110	;'n'
  2773  007F10  6C                 	db	108	;'l'
  2774  007F11  6F                 	db	111	;'o'
  2775  007F12  63                 	db	99	;'c'
  2776  007F13  6B                 	db	107	;'k'
  2777  007F14  65                 	db	101	;'e'
  2778  007F15  64                 	db	100	;'d'
  2779  007F16  0A                 	db	10
  2780  007F17  00                 	db	0
  2781  007F18                     STR_30:
  2782                           
  2783                           ; BSR set to: 0
  2784  007F18  73                 	db	115	;'s'
  2785  007F19  69                 	db	105	;'i'
  2786  007F1A  3A                 	db	58	;':'
  2787  007F1B  49                 	db	73	;'I'
  2788  007F1C  32                 	db	50	;'2'
  2789  007F1D  43                 	db	67	;'C'
  2790  007F1E  20                 	db	32
  2791  007F1F  66                 	db	102	;'f'
  2792  007F20  61                 	db	97	;'a'
  2793  007F21  69                 	db	105	;'i'
  2794  007F22  6C                 	db	108	;'l'
  2795  007F23  0A                 	db	10
  2796  007F24  00                 	db	0
  2797  007F25                     STR_86:
  2798                           
  2799                           ; BSR set to: 0
  2800  007F25  53                 	db	83	;'S'
  2801  007F26  65                 	db	101	;'e'
  2802  007F27  74                 	db	116	;'t'
  2803  007F28  74                 	db	116	;'t'
  2804  007F29  69                 	db	105	;'i'
  2805  007F2A  6E                 	db	110	;'n'
  2806  007F2B  67                 	db	103	;'g'
  2807  007F2C  73                 	db	115	;'s'
  2808  007F2D  20                 	db	32
  2809  007F2E  4F                 	db	79	;'O'
  2810  007F2F  4B                 	db	75	;'K'
  2811  007F30  00                 	db	0
  2812  007F31                     STR_28:
  2813                           
  2814                           ; BSR set to: 0
  2815  007F31  73                 	db	115	;'s'
  2816  007F32  69                 	db	105	;'i'
  2817  007F33  3A                 	db	58	;':'
  2818  007F34  4C                 	db	76	;'L'
  2819  007F35  4E                 	db	78	;'N'
  2820  007F36  42                 	db	66	;'B'
  2821  007F37  3A                 	db	58	;':'
  2822  007F38  20                 	db	32
  2823  007F39  25                 	db	37
  2824  007F3A  64                 	db	100	;'d'
  2825  007F3B  0A                 	db	10
  2826  007F3C  00                 	db	0
  2827  007F3D                     STR_3:
  2828                           
  2829                           ; BSR set to: 0
  2830  007F3D  41                 	db	65	;'A'
  2831  007F3E  44                 	db	68	;'D'
  2832  007F3F  46                 	db	70	;'F'
  2833  007F40  3A                 	db	58	;':'
  2834  007F41  6C                 	db	108	;'l'
  2835  007F42  6F                 	db	111	;'o'
  2836  007F43  63                 	db	99	;'c'
  2837  007F44  6B                 	db	107	;'k'
  2838  007F45  65                 	db	101	;'e'
  2839  007F46  64                 	db	100	;'d'
  2840  007F47  0A                 	db	10
  2841  007F48  00                 	db	0
  2842  007F49                     STR_25:
  2843                           
  2844                           ; BSR set to: 0
  2845  007F49  73                 	db	115	;'s'
  2846  007F4A  69                 	db	105	;'i'
  2847  007F4B  3A                 	db	58	;':'
  2848  007F4C  66                 	db	102	;'f'
  2849  007F4D  6F                 	db	111	;'o'
  2850  007F4E  75                 	db	117	;'u'
  2851  007F4F  6E                 	db	110	;'n'
  2852  007F50  64                 	db	100	;'d'
  2853  007F51  2E                 	db	46
  2854  007F52  0A                 	db	10
  2855  007F53  00                 	db	0
  2856  007F54                     STR_34:
  2857                           
  2858                           ; BSR set to: 0
  2859  007F54  73                 	db	115	;'s'
  2860  007F55  69                 	db	105	;'i'
  2861  007F56  3A                 	db	58	;':'
  2862  007F57  6C                 	db	108	;'l'
  2863  007F58  6F                 	db	111	;'o'
  2864  007F59  63                 	db	99	;'c'
  2865  007F5A  6B                 	db	107	;'k'
  2866  007F5B  65                 	db	101	;'e'
  2867  007F5C  64                 	db	100	;'d'
  2868  007F5D  0A                 	db	10
  2869  007F5E  00                 	db	0
  2870  007F5F                     STR_72:
  2871                           
  2872                           ; BSR set to: 0
  2873  007F5F  4F                 	db	79	;'O'
  2874  007F60  55                 	db	85	;'U'
  2875  007F61  54                 	db	84	;'T'
  2876  007F62  3A                 	db	58	;':'
  2877  007F63  20                 	db	32
  2878  007F64  20                 	db	32
  2879  007F65  20                 	db	32
  2880  007F66  20                 	db	32
  2881  007F67  20                 	db	32
  2882  007F68  00                 	db	0
  2883  007F69                     STR_29:
  2884                           
  2885                           ; BSR set to: 0
  2886  007F69  73                 	db	115	;'s'
  2887  007F6A  69                 	db	105	;'i'
  2888  007F6B  3A                 	db	58	;':'
  2889  007F6C  69                 	db	105	;'i'
  2890  007F6D  63                 	db	99	;'c'
  2891  007F6E  61                 	db	97	;'a'
  2892  007F6F  6C                 	db	108	;'l'
  2893  007F70  0A                 	db	10
  2894  007F71  00                 	db	0
  2895  007F72                     STR_26:
  2896                           
  2897                           ; BSR set to: 0
  2898  007F72  73                 	db	115	;'s'
  2899  007F73  69                 	db	105	;'i'
  2900  007F74  3A                 	db	58	;':'
  2901  007F75  69                 	db	105	;'i'
  2902  007F76  6E                 	db	110	;'n'
  2903  007F77  69                 	db	105	;'i'
  2904  007F78  74                 	db	116	;'t'
  2905  007F79  0A                 	db	10
  2906  007F7A  00                 	db	0
  2907  007F7B                     STR_8:
  2908                           
  2909                           ; BSR set to: 0
  2910  007F7B  4C                 	db	76	;'L'
  2911  007F7C  4E                 	db	78	;'N'
  2912  007F7D  42                 	db	66	;'B'
  2913  007F7E  3A                 	db	58	;':'
  2914  007F7F  4F                 	db	79	;'O'
  2915  007F80  4B                 	db	75	;'K'
  2916  007F81  0A                 	db	10
  2917  007F82  00                 	db	0
  2918  007F83                     STR_62:
  2919                           
  2920                           ; BSR set to: 0
  2921  007F83  20                 	db	32
  2922  007F84  47                 	db	71	;'G'
  2923  007F85  50                 	db	80	;'P'
  2924  007F86  53                 	db	83	;'S'
  2925  007F87  20                 	db	32
  2926  007F88  20                 	db	32
  2927  007F89  00                 	db	0
  2928  007F8A                     STR_81:
  2929                           
  2930                           ; BSR set to: 0
  2931  007F8A  6C                 	db	108	;'l'
  2932  007F8B  6F                 	db	111	;'o'
  2933  007F8C  63                 	db	99	;'c'
  2934  007F8D  6B                 	db	107	;'k'
  2935  007F8E  20                 	db	32
  2936  007F8F  20                 	db	32
  2937  007F90  00                 	db	0
  2938  007F91                     STR_63:
  2939                           
  2940                           ; BSR set to: 0
  2941  007F91  20                 	db	32
  2942  007F92  4F                 	db	79	;'O'
  2943  007F93  43                 	db	67	;'C'
  2944  007F94  58                 	db	88	;'X'
  2945  007F95  4F                 	db	79	;'O'
  2946  007F96  20                 	db	32
  2947  007F97  00                 	db	0
  2948  007F98                     STR_57:
  2949                           
  2950                           ; BSR set to: 0
  2951  007F98  4F                 	db	79	;'O'
  2952  007F99  2F                 	db	47
  2953  007F9A  54                 	db	84	;'T'
  2954  007F9B  43                 	db	67	;'C'
  2955  007F9C  58                 	db	88	;'X'
  2956  007F9D  4F                 	db	79	;'O'
  2957  007F9E  00                 	db	0
  2958  007F9F                     STR_88:
  2959                           
  2960                           ; BSR set to: 0
  2961  007F9F  70                 	db	112	;'p'
  2962  007FA0  6C                 	db	108	;'l'
  2963  007FA1  65                 	db	101	;'e'
  2964  007FA2  61                 	db	97	;'a'
  2965  007FA3  73                 	db	115	;'s'
  2966  007FA4  65                 	db	101	;'e'
  2967  007FA5  00                 	db	0
  2968  007FA6                     STR_82:
  2969                           
  2970                           ; BSR set to: 0
  2971  007FA6  75                 	db	117	;'u'
  2972  007FA7  6E                 	db	110	;'n'
  2973  007FA8  6C                 	db	108	;'l'
  2974  007FA9  6F                 	db	111	;'o'
  2975  007FAA  63                 	db	99	;'c'
  2976  007FAB  6B                 	db	107	;'k'
  2977  007FAC  00                 	db	0
  2978  007FAD                     STR_55:
  2979                           
  2980                           ; BSR set to: 0
  2981  007FAD  4C                 	db	76	;'L'
  2982  007FAE  4F                 	db	79	;'O'
  2983  007FAF  43                 	db	67	;'C'
  2984  007FB0  4B                 	db	75	;'K'
  2985  007FB1  20                 	db	32
  2986  007FB2  00                 	db	0
  2987  007FB3                     STR_76:
  2988                           
  2989                           ; BSR set to: 0
  2990  007FB3  32                 	db	50	;'2'
  2991  007FB4  35                 	db	53	;'5'
  2992  007FB5  2E                 	db	46
  2993  007FB6  34                 	db	52	;'4'
  2994  007FB7  35                 	db	53	;'5'
  2995  007FB8  00                 	db	0
  2996  007FB9                     STR_87:
  2997                           
  2998                           ; BSR set to: 0
  2999  007FB9  4D                 	db	77	;'M'
  3000  007FBA  6F                 	db	111	;'o'
  3001  007FBB  64                 	db	100	;'d'
  3002  007FBC  65                 	db	101	;'e'
  3003  007FBD  3A                 	db	58	;':'
  3004  007FBE  00                 	db	0
  3005  007FBF                     STR_56:
  3006                           
  3007                           ; BSR set to: 0
  3008  007FBF  4E                 	db	78	;'N'
  3009  007FC0  4F                 	db	79	;'O'
  3010  007FC1  6C                 	db	108	;'l'
  3011  007FC2  63                 	db	99	;'c'
  3012  007FC3  6B                 	db	107	;'k'
  3013  007FC4  00                 	db	0
  3014  007FC5                     STR_75:
  3015                           
  3016                           ; BSR set to: 0
  3017  007FC5  4C                 	db	76	;'L'
  3018  007FC6  4E                 	db	78	;'N'
  3019  007FC7  42                 	db	66	;'B'
  3020  007FC8  3A                 	db	58	;':'
  3021  007FC9  00                 	db	0
  3022  007FCA                     STR_84:
  3023                           
  3024                           ; BSR set to: 0
  3025  007FCA  4C                 	db	76	;'L'
  3026  007FCB  4F                 	db	79	;'O'
  3027  007FCC  4E                 	db	78	;'N'
  3028  007FCD  3A                 	db	58	;':'
  3029  007FCE  00                 	db	0
  3030  007FCF                     STR_83:
  3031                           
  3032                           ; BSR set to: 0
  3033  007FCF  4C                 	db	76	;'L'
  3034  007FD0  41                 	db	65	;'A'
  3035  007FD1  54                 	db	84	;'T'
  3036  007FD2  3A                 	db	58	;':'
  3037  007FD3  00                 	db	0
  3038  007FD4                     STR_79:
  3039                           
  3040                           ; BSR set to: 0
  3041  007FD4  53                 	db	83	;'S'
  3042  007FD5  41                 	db	65	;'A'
  3043  007FD6  54                 	db	84	;'T'
  3044  007FD7  3A                 	db	58	;':'
  3045  007FD8  00                 	db	0
  3046  007FD9                     STR_50:
  3047                           
  3048                           ; BSR set to: 0
  3049  007FD9  4C                 	db	76	;'L'
  3050  007FDA  4F                 	db	79	;'O'
  3051  007FDB  43                 	db	67	;'C'
  3052  007FDC  4B                 	db	75	;'K'
  3053  007FDD  00                 	db	0
  3054  007FDE                     STR_51:
  3055                           
  3056                           ; BSR set to: 0
  3057  007FDE  77                 	db	119	;'w'
  3058  007FDF  61                 	db	97	;'a'
  3059  007FE0  69                 	db	105	;'i'
  3060  007FE1  74                 	db	116	;'t'
  3061  007FE2  00                 	db	0
  3062  007FE3                     STR_77:
  3063                           
  3064                           ; BSR set to: 0
  3065  007FE3  2E                 	db	46
  3066  007FE4  30                 	db	48	;'0'
  3067  007FE5  30                 	db	48	;'0'
  3068  007FE6  00                 	db	0
  3069  007FE7                     STR_73:
  3070                           
  3071                           ; BSR set to: 0
  3072  007FE7  2E                 	db	46
  3073  007FE8  35                 	db	53	;'5'
  3074  007FE9  30                 	db	48	;'0'
  3075  007FEA  00                 	db	0
  3076  007FEB                     STR_42:
  3077                           
  3078                           ; BSR set to: 0
  3079  007FEB  31                 	db	49	;'1'
  3080  007FEC  2E                 	db	46
  3081  007FED  32                 	db	50	;'2'
  3082  007FEE  00                 	db	0
  3083  007FEF                     STR_74:
  3084                           
  3085                           ; BSR set to: 0
  3086  007FEF  4D                 	db	77	;'M'
  3087  007FF0  48                 	db	72	;'H'
  3088  007FF1  7A                 	db	122	;'z'
  3089  007FF2  00                 	db	0
  3090  007FF3                     STR_109:
  3091                           
  3092                           ; BSR set to: 0
  3093  007FF3  6C                 	db	108	;'l'
  3094  007FF4  58                 	db	88	;'X'
  3095  007FF5  00                 	db	0
  3096  007FF6                     STR_96:
  3097                           
  3098                           ; BSR set to: 0
  3099  007FF6  6C                 	db	108	;'l'
  3100  007FF7  64                 	db	100	;'d'
  3101  007FF8  00                 	db	0
  3102  007FF9                     STR_100:
  3103                           
  3104                           ; BSR set to: 0
  3105  007FF9  6C                 	db	108	;'l'
  3106  007FFA  69                 	db	105	;'i'
  3107  007FFB  00                 	db	0
  3108  007FFC                     STR_105:
  3109                           
  3110                           ; BSR set to: 0
  3111  007FFC  6C                 	db	108	;'l'
  3112  007FFD  78                 	db	120	;'x'
  3113  007FFE  00                 	db	0
  3114  0000                     
  3115                           ; #config settings
  3116  007FFF  00                 	db	0	; dummy byte at the end
  3117  0000                     
  3118                           	psect	cinit
  3119  005264                     __pcinit:
  3120                           	opt callstack 0
  3121  005264                     start_initialization:
  3122                           	opt callstack 0
  3123  005264                     __initialization:
  3124                           	opt callstack 0
  3125                           
  3126                           ; Initialize objects allocated to BANK3 (27 bytes)
  3127                           ; load TBLPTR registers with __pidataBANK3
  3128  005264  0E9A               	movlw	low __pidataBANK3
  3129  005266  6EF6               	movwf	tblptrl,c
  3130  005268  0E74               	movlw	high __pidataBANK3
  3131  00526A  6EF7               	movwf	tblptrh,c
  3132  00526C  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  3133  00526E  6EF8               	movwf	tblptru,c
  3134  005270  EE03  F0BE         	lfsr	0,__pdataBANK3
  3135  005274  EE10 F01B          	lfsr	1,27
  3136  005278                     copy_data0:
  3137  005278  0009               	tblrd		*+
  3138  00527A  CFF5 FFEE          	movff	tablat,postinc0
  3139  00527E  50E5               	movf	postdec1,w,c
  3140  005280  50E1               	movf	fsr1l,w,c
  3141  005282  E1FA               	bnz	copy_data0
  3142                           
  3143                           ; Initialize objects allocated to BANK2 (160 bytes)
  3144                           ; load TBLPTR registers with __pidataBANK2
  3145  005284  0E7C               	movlw	low __pidataBANK2
  3146  005286  6EF6               	movwf	tblptrl,c
  3147  005288  0E5E               	movlw	high __pidataBANK2
  3148  00528A  6EF7               	movwf	tblptrh,c
  3149  00528C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  3150  00528E  6EF8               	movwf	tblptru,c
  3151  005290  EE02  F000         	lfsr	0,__pdataBANK2
  3152  005294  EE10 F0A0          	lfsr	1,160
  3153  005298                     copy_data1:
  3154  005298  0009               	tblrd		*+
  3155  00529A  CFF5 FFEE          	movff	tablat,postinc0
  3156  00529E  50E5               	movf	postdec1,w,c
  3157  0052A0  50E1               	movf	fsr1l,w,c
  3158  0052A2  E1FA               	bnz	copy_data1
  3159                           
  3160                           ; Initialize objects allocated to BANK1 (4 bytes)
  3161                           ; load TBLPTR registers with __pidataBANK1
  3162  0052A4  0E0C               	movlw	low __pidataBANK1
  3163  0052A6  6EF6               	movwf	tblptrl,c
  3164  0052A8  0E75               	movlw	high __pidataBANK1
  3165  0052AA  6EF7               	movwf	tblptrh,c
  3166  0052AC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  3167  0052AE  6EF8               	movwf	tblptru,c
  3168  0052B0  EE01  F0FC         	lfsr	0,__pdataBANK1
  3169  0052B4  EE10 F004          	lfsr	1,4
  3170  0052B8                     copy_data2:
  3171  0052B8  0009               	tblrd		*+
  3172  0052BA  CFF5 FFEE          	movff	tablat,postinc0
  3173  0052BE  50E5               	movf	postdec1,w,c
  3174  0052C0  50E1               	movf	fsr1l,w,c
  3175  0052C2  E1FA               	bnz	copy_data2
  3176                           
  3177                           ; Initialize objects allocated to BANK0 (15 bytes)
  3178                           ; load TBLPTR registers with __pidataBANK0
  3179  0052C4  0ECE               	movlw	low __pidataBANK0
  3180  0052C6  6EF6               	movwf	tblptrl,c
  3181  0052C8  0E74               	movlw	high __pidataBANK0
  3182  0052CA  6EF7               	movwf	tblptrh,c
  3183  0052CC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  3184  0052CE  6EF8               	movwf	tblptru,c
  3185  0052D0  EE00  F0DA         	lfsr	0,__pdataBANK0
  3186  0052D4  EE10 F00F          	lfsr	1,15
  3187  0052D8                     copy_data3:
  3188  0052D8  0009               	tblrd		*+
  3189  0052DA  CFF5 FFEE          	movff	tablat,postinc0
  3190  0052DE  50E5               	movf	postdec1,w,c
  3191  0052E0  50E1               	movf	fsr1l,w,c
  3192  0052E2  E1FA               	bnz	copy_data3
  3193                           
  3194                           ; Initialize objects allocated to COMRAM (1 bytes)
  3195                           ; load TBLPTR registers with __pidataCOMRAM
  3196  0052E4  0E10               	movlw	low __pidataCOMRAM
  3197  0052E6  6EF6               	movwf	tblptrl,c
  3198  0052E8  0E75               	movlw	high __pidataCOMRAM
  3199  0052EA  6EF7               	movwf	tblptrh,c
  3200  0052EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  3201  0052EE  6EF8               	movwf	tblptru,c
  3202  0052F0  0009               	tblrd		*+	;fetch initializer
  3203  0052F2  CFF5 F071          	movff	tablat,__pdataCOMRAM
  3204                           
  3205                           ; Clear objects allocated to BANK4 (128 bytes)
  3206  0052F6  EE04  F000         	lfsr	0,__pbssBANK4
  3207  0052FA  0E80               	movlw	128
  3208  0052FC                     clear_0:
  3209  0052FC  6AEE               	clrf	postinc0,c
  3210  0052FE  06E8               	decf	wreg,f,c
  3211  005300  E1FD               	bnz	clear_0
  3212                           
  3213                           ; Clear objects allocated to BANK3 (190 bytes)
  3214  005302  EE03  F000         	lfsr	0,__pbssBANK3
  3215  005306  0EBE               	movlw	190
  3216  005308                     clear_1:
  3217  005308  6AEE               	clrf	postinc0,c
  3218  00530A  06E8               	decf	wreg,f,c
  3219  00530C  E1FD               	bnz	clear_1
  3220                           
  3221                           ; Clear objects allocated to BANK2 (84 bytes)
  3222  00530E  EE02  F0A0         	lfsr	0,__pbssBANK2
  3223  005312  0E54               	movlw	84
  3224  005314                     clear_2:
  3225  005314  6AEE               	clrf	postinc0,c
  3226  005316  06E8               	decf	wreg,f,c
  3227  005318  E1FD               	bnz	clear_2
  3228                           
  3229                           ; Clear objects allocated to BANK1 (4 bytes)
  3230  00531A  0101               	movlb	1
  3231  00531C  6BFB               	clrf	(__pbssBANK1+3)& (0+255),b
  3232  00531E  6BFA               	clrf	(__pbssBANK1+2)& (0+255),b
  3233  005320  6BF9               	clrf	(__pbssBANK1+1)& (0+255),b
  3234  005322  6BF8               	clrf	__pbssBANK1& (0+255),b
  3235                           
  3236                           ; Clear objects allocated to BANK0 (21 bytes)
  3237  005324  EE00  F0C5         	lfsr	0,__pbssBANK0
  3238  005328  0E15               	movlw	21
  3239  00532A                     clear_3:
  3240  00532A  6AEE               	clrf	postinc0,c
  3241  00532C  06E8               	decf	wreg,f,c
  3242  00532E  E1FD               	bnz	clear_3
  3243                           
  3244                           ; Clear objects allocated to COMRAM (12 bytes)
  3245  005330  EE00  F065         	lfsr	0,__pbssCOMRAM
  3246  005334  0E0C               	movlw	12
  3247  005336                     clear_4:
  3248  005336  6AEE               	clrf	postinc0,c
  3249  005338  06E8               	decf	wreg,f,c
  3250  00533A  E1FD               	bnz	clear_4
  3251  00533C                     end_of_initialization:
  3252                           	opt callstack 0
  3253  00533C                     __end_of__initialization:
  3254                           	opt callstack 0
  3255  00533C  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3256  00533E  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3257  005340  0E00               	movlw	low (__Lmediumconst shr (0+16))
  3258  005342  6EF8               	movwf	tblptru,c
  3259  005344  0100               	movlb	0
  3260  005346  EF82  F020         	goto	_main	;jump to C main() function
  3261                           
  3262                           	psect	bssCOMRAM
  3263  000065                     __pbssCOMRAM:
  3264                           	opt callstack 0
  3265  000065                     _prec:
  3266                           	opt callstack 0
  3267  000065                     	ds	2
  3268  000067                     _flags:
  3269                           	opt callstack 0
  3270  000067                     	ds	2
  3271  000069                     _g_usart_wpos:
  3272                           	opt callstack 0
  3273  000069                     	ds	2
  3274  00006B                     _g_usart_rpos:
  3275                           	opt callstack 0
  3276  00006B                     	ds	2
  3277  00006D                     _currentLO:
  3278                           	opt callstack 0
  3279  00006D                     	ds	1
  3280  00006E                     _ubx_ack:
  3281                           	opt callstack 0
  3282  00006E                     	ds	1
  3283  00006F                     _tcxo_no_GPS:
  3284                           	opt callstack 0
  3285  00006F                     	ds	1
  3286  000070                     _adf4351_lockstat:
  3287                           	opt callstack 0
  3288  000070                     	ds	1
  3289                           
  3290                           	psect	dataCOMRAM
  3291  000071                     __pdataCOMRAM:
  3292                           	opt callstack 0
  3293  000071                     _gpsbufidx:
  3294                           	opt callstack 0
  3295  000071                     	ds	1
  3296                           
  3297                           	psect	bssBANK0
  3298  0000C5                     __pbssBANK0:
  3299                           	opt callstack 0
  3300  0000C5                     _width:
  3301                           	opt callstack 0
  3302  0000C5                     	ds	2
  3303  0000C7                     main@old_GPS_lock:
  3304                           	opt callstack 0
  3305  0000C7                     	ds	1
  3306  0000C8                     t0_irq@ms500:
  3307                           	opt callstack 0
  3308  0000C8                     	ds	1
  3309  0000C9                     t0_irq@second2:
  3310                           	opt callstack 0
  3311  0000C9                     	ds	1
  3312  0000CA                     _adf4351_set_qrg:
  3313                           	opt callstack 0
  3314  0000CA                     	ds	1
  3315  0000CB                     _cpu_blink_timer:
  3316                           	opt callstack 0
  3317  0000CB                     	ds	1
  3318  0000CC                     send_UBX_string@giveup:
  3319                           	opt callstack 0
  3320  0000CC                     	ds	1
  3321  0000CD                     _gps_init_timer:
  3322                           	opt callstack 0
  3323  0000CD                     	ds	1
  3324  0000CE                     _booting:
  3325                           	opt callstack 0
  3326  0000CE                     	ds	1
  3327  0000CF                     _lcd_available:
  3328                           	opt callstack 0
  3329  0000CF                     	ds	1
  3330  0000D0                     _lcd_addr:
  3331                           	opt callstack 0
  3332  0000D0                     	ds	1
  3333  0000D1                     _GPS_sat:
  3334                           	opt callstack 0
  3335  0000D1                     	ds	1
  3336  0000D2                     _special_cfg:
  3337                           	opt callstack 0
  3338  0000D2                     	ds	1
  3339  0000D3                     si5328_checkGPS@old_ubx_ack:
  3340                           	opt callstack 0
  3341  0000D3                     	ds	1
  3342  0000D4                     si5328_checkGPS@old_GPS_lock:
  3343                           	opt callstack 0
  3344  0000D4                     	ds	1
  3345  0000D5                     _si5328locked:
  3346                           	opt callstack 0
  3347  0000D5                     	ds	1
  3348  0000D6                     _GPS_fix:
  3349                           	opt callstack 0
  3350  0000D6                     	ds	1
  3351  0000D7                     _ext10MHzReference:
  3352                           	opt callstack 0
  3353  0000D7                     	ds	1
  3354  0000D8                     _GPS_lock:
  3355                           	opt callstack 0
  3356  0000D8                     	ds	1
  3357  0000D9                     _LNB_error:
  3358                           	opt callstack 0
  3359  0000D9                     	ds	1
  3360                           
  3361                           	psect	dataBANK0
  3362  0000DA                     __pdataBANK0:
  3363                           	opt callstack 0
  3364  0000DA                     _N31_reg4445:
  3365                           	opt callstack 0
  3366  0000DA                     	ds	2
  3367  0000DC                     show_display@old_adf4351_lockstat:
  3368                           	opt callstack 0
  3369  0000DC                     	ds	1
  3370  0000DD                     show_display@old_si5328locked:
  3371                           	opt callstack 0
  3372  0000DD                     	ds	1
  3373  0000DE                     show_display@old_LNB_laststat:
  3374                           	opt callstack 0
  3375  0000DE                     	ds	1
  3376  0000DF                     show_display@old_GPS_sat:
  3377                           	opt callstack 0
  3378  0000DF                     	ds	1
  3379  0000E0                     show_display@old_lnbqrg:
  3380                           	opt callstack 0
  3381  0000E0                     	ds	1
  3382  0000E1                     show_display@old_ubx_ack:
  3383                           	opt callstack 0
  3384  0000E1                     	ds	1
  3385  0000E2                     show_display@old_GPS_fix:
  3386                           	opt callstack 0
  3387  0000E2                     	ds	1
  3388  0000E3                     show_display@old_GPS_lock:
  3389                           	opt callstack 0
  3390  0000E3                     	ds	1
  3391  0000E4                     _actualADFswitch:
  3392                           	opt callstack 0
  3393  0000E4                     	ds	1
  3394  0000E5                     check_si5328_status@lastinput:
  3395                           	opt callstack 0
  3396  0000E5                     	ds	1
  3397  0000E6                     check_si5328_status@lastlock:
  3398                           	opt callstack 0
  3399  0000E6                     	ds	1
  3400  0000E7                     _LNB_laststat:
  3401                           	opt callstack 0
  3402  0000E7                     	ds	1
  3403  0000E8                     _use_GPS:
  3404                           	opt callstack 0
  3405  0000E8                     	ds	1
  3406                           
  3407                           	psect	bssBANK1
  3408  0001F8                     __pbssBANK1:
  3409                           	opt callstack 0
  3410  0001F8                     _lcd_i2c:
  3411                           	opt callstack 0
  3412  0001F8                     	ds	2
  3413  0001FA                     rx_gps@stat:
  3414                           	opt callstack 0
  3415  0001FA                     	ds	1
  3416  0001FB                     _ubx_class:
  3417                           	opt callstack 0
  3418  0001FB                     	ds	1
  3419                           
  3420                           	psect	dataBANK1
  3421  0001FC                     __pdataBANK1:
  3422                           	opt callstack 0
  3423  0001FC                     _NC1_LS_reg3233:
  3424                           	opt callstack 0
  3425  0001FC                     	ds	2
  3426  0001FE                     _N2L_reg4142:
  3427                           	opt callstack 0
  3428  0001FE                     	ds	2
  3429                           
  3430                           	psect	bssBANK2
  3431  0002A0                     __pbssBANK2:
  3432                           	opt callstack 0
  3433  0002A0                     _g_irq_handler_info:
  3434                           	opt callstack 0
  3435  0002A0                     	ds	8
  3436  0002A8                     _g_freq:
  3437                           	opt callstack 0
  3438  0002A8                     	ds	4
  3439  0002AC                     _errno:
  3440                           	opt callstack 0
  3441  0002AC                     	ds	2
  3442  0002AE                     _nout:
  3443                           	opt callstack 0
  3444  0002AE                     	ds	2
  3445  0002B0                     rx_gps@len_lsb:
  3446                           	opt callstack 0
  3447  0002B0                     	ds	2
  3448  0002B2                     _p_len:
  3449                           	opt callstack 0
  3450  0002B2                     	ds	2
  3451  0002B4                     _ubx_len:
  3452                           	opt callstack 0
  3453  0002B4                     	ds	2
  3454  0002B6                     show_display@old_outqrg:
  3455                           	opt callstack 0
  3456  0002B6                     	ds	2
  3457  0002B8                     _ubx_id:
  3458                           	opt callstack 0
  3459  0002B8                     	ds	1
  3460  0002B9                     _dbuf:
  3461                           	opt callstack 0
  3462  0002B9                     	ds	32
  3463  0002D9                     itoa@buffer:
  3464                           	opt callstack 0
  3465  0002D9                     	ds	12
  3466  0002E5                     _g_i2c_bus:
  3467                           	opt callstack 0
  3468  0002E5                     	ds	8
  3469  0002ED                     CalculateGridSquare@grid:
  3470                           	opt callstack 0
  3471  0002ED                     	ds	7
  3472                           
  3473                           	psect	dataBANK2
  3474  000200                     __pdataBANK2:
  3475                           	opt callstack 0
  3476  000200                     stoa@F1139:
  3477                           	opt callstack 0
  3478  000200                     	ds	7
  3479  000207                     	ds	4
  3480  00020B                     ssd1306_setpos@F3137:
  3481                           	opt callstack 0
  3482  00020B                     	ds	3
  3483  00020E                     	ds	2
  3484  000210                     	ds	2
  3485  000212                     _NC2_LS_reg3536:
  3486                           	opt callstack 0
  3487  000212                     	ds	2
  3488  000214                     _N1HS_reg25:
  3489                           	opt callstack 0
  3490  000214                     	ds	2
  3491  000216                     _N2HS_reg40:
  3492                           	opt callstack 0
  3493  000216                     	ds	2
  3494  000218                     _N32_reg4748:
  3495                           	opt callstack 0
  3496  000218                     	ds	2
  3497  00021A                     _gps_config_data:
  3498                           	opt callstack 0
  3499  00021A                     	ds	32
  3500  00023A                     _reg_set_LNB_LO:
  3501                           	opt callstack 0
  3502  00023A                     	ds	24
  3503  000252                     show_display@old_GPS_lon:
  3504                           	opt callstack 0
  3505  000252                     	ds	15
  3506  000261                     show_display@old_GPS_lat:
  3507                           	opt callstack 0
  3508  000261                     	ds	15
  3509  000270                     _GPS_lon:
  3510                           	opt callstack 0
  3511  000270                     	ds	15
  3512  00027F                     _GPS_lat:
  3513                           	opt callstack 0
  3514  00027F                     	ds	15
  3515  00028E                     show_display@old_GPS_time:
  3516                           	opt callstack 0
  3517  00028E                     	ds	9
  3518  000297                     _GPS_time:
  3519                           	opt callstack 0
  3520  000297                     	ds	9
  3521                           
  3522                           	psect	bssBANK3
  3523  000300                     __pbssBANK3:
  3524                           	opt callstack 0
  3525  000300                     _payload:
  3526                           	opt callstack 0
  3527  000300                     	ds	50
  3528  000332                     _gpsbuf:
  3529                           	opt callstack 0
  3530  000332                     	ds	85
  3531  000387                     _g_adf4351:
  3532                           	opt callstack 0
  3533  000387                     	ds	55
  3534                           
  3535                           	psect	dataBANK3
  3536  0003BE                     __pdataBANK3:
  3537                           	opt callstack 0
  3538  0003BE                     _ssd1306_init_commands:
  3539                           	opt callstack 0
  3540  0003BE                     	ds	27
  3541                           
  3542                           	psect	bssBANK4
  3543  000400                     __pbssBANK4:
  3544                           	opt callstack 0
  3545  000400                     _g_usart_buf:
  3546                           	opt callstack 0
  3547  000400                     	ds	128
  3548                           
  3549                           	psect	cstackBANK1
  3550  000100                     __pcstackBANK1:
  3551                           	opt callstack 0
  3552  000100                     send_UBX_string@txbuf:
  3553                           	opt callstack 0
  3554  000100                     lcd_clear_screen@buf:
  3555                           	opt callstack 0
  3556  000100                     eval_gps@elem:
  3557                           	opt callstack 0
  3558                           
  3559                           ; 240 bytes @ 0x0
  3560  000100                     	ds	50
  3561  000132                     send_UBX_string@class:
  3562                           	opt callstack 0
  3563                           
  3564                           ; 1 bytes @ 0x32
  3565  000132                     	ds	1
  3566  000133                     send_UBX_string@i:
  3567                           	opt callstack 0
  3568                           
  3569                           ; 2 bytes @ 0x33
  3570  000133                     	ds	2
  3571  000135                     send_UBX_string@i_2074:
  3572                           	opt callstack 0
  3573                           
  3574                           ; 2 bytes @ 0x35
  3575  000135                     	ds	2
  3576  000137                     send_UBX_string@i_2075:
  3577                           	opt callstack 0
  3578                           
  3579                           ; 2 bytes @ 0x37
  3580  000137                     	ds	2
  3581  000139                     send_UBX_string@CK_B:
  3582                           	opt callstack 0
  3583                           
  3584                           ; 1 bytes @ 0x39
  3585  000139                     	ds	1
  3586  00013A                     send_UBX_string@CK_A:
  3587                           	opt callstack 0
  3588                           
  3589                           ; 1 bytes @ 0x3A
  3590  00013A                     	ds	1
  3591  00013B                     send_UBX_string@idx:
  3592                           	opt callstack 0
  3593                           
  3594                           ; 2 bytes @ 0x3B
  3595  00013B                     	ds	69
  3596  000180                     lcd_clear_screen@ystart:
  3597                           	opt callstack 0
  3598                           
  3599                           ; 1 bytes @ 0x80
  3600  000180                     	ds	1
  3601  000181                     lcd_clear_screen@row:
  3602                           	opt callstack 0
  3603                           
  3604                           ; 1 bytes @ 0x81
  3605  000181                     	ds	111
  3606  0001F0                     eval_gps@chksumgps:
  3607                           	opt callstack 0
  3608                           
  3609                           ; 1 bytes @ 0xF0
  3610  0001F0                     	ds	1
  3611  0001F1                     eval_gps@chksum:
  3612                           	opt callstack 0
  3613                           
  3614                           ; 1 bytes @ 0xF1
  3615  0001F1                     	ds	1
  3616  0001F2                     eval_gps@i:
  3617                           	opt callstack 0
  3618                           
  3619                           ; 1 bytes @ 0xF2
  3620  0001F2                     	ds	1
  3621  0001F3                     eval_gps@pe:
  3622                           	opt callstack 0
  3623                           
  3624                           ; 2 bytes @ 0xF3
  3625  0001F3                     	ds	2
  3626  0001F5                     eval_gps@eidx:
  3627                           	opt callstack 0
  3628                           
  3629                           ; 1 bytes @ 0xF5
  3630  0001F5                     	ds	1
  3631  0001F6                     eval_gps@ps:
  3632                           	opt callstack 0
  3633                           
  3634                           ; 2 bytes @ 0xF6
  3635  0001F6                     	ds	2
  3636                           
  3637                           	psect	cstackBANK0
  3638  000080                     __pcstackBANK0:
  3639                           	opt callstack 0
  3640  000080                     vfpfcnvrt@cp:
  3641                           	opt callstack 0
  3642  000080                     smbus8_write_data@msg:
  3643                           	opt callstack 0
  3644  000080                     smbus8_read_byte@msg:
  3645                           	opt callstack 0
  3646                           
  3647                           ; 14 bytes @ 0x0
  3648  000080                     	ds	2
  3649  000082                     vfpfcnvrt@done:
  3650                           	opt callstack 0
  3651                           
  3652                           ; 2 bytes @ 0x2
  3653  000082                     	ds	2
  3654  000084                     _vfpfcnvrt$3123:
  3655                           	opt callstack 0
  3656                           
  3657                           ; 2 bytes @ 0x4
  3658  000084                     	ds	2
  3659  000086                     vfpfcnvrt@ll:
  3660                           	opt callstack 0
  3661                           
  3662                           ; 8 bytes @ 0x6
  3663  000086                     	ds	8
  3664  00008E                     ssd1306_setpos@data:
  3665                           	opt callstack 0
  3666  00008E                     vfpfcnvrt@llu:
  3667                           	opt callstack 0
  3668                           
  3669                           ; 8 bytes @ 0xE
  3670  00008E                     	ds	3
  3671  000091                     ssd1306_setpos@x:
  3672                           	opt callstack 0
  3673                           
  3674                           ; 1 bytes @ 0x11
  3675  000091                     	ds	1
  3676  000092                     print_char@xpos:
  3677                           	opt callstack 0
  3678                           
  3679                           ; 1 bytes @ 0x12
  3680  000092                     	ds	1
  3681  000093                     print_char@ypos:
  3682                           	opt callstack 0
  3683                           
  3684                           ; 1 bytes @ 0x13
  3685  000093                     	ds	1
  3686  000094                     print_char@underline:
  3687                           	opt callstack 0
  3688                           
  3689                           ; 1 bytes @ 0x14
  3690  000094                     	ds	1
  3691  000095                     ??_print_char:
  3692                           
  3693                           ; 1 bytes @ 0x15
  3694  000095                     	ds	1
  3695  000096                     vfpfcnvrt@c:
  3696                           	opt callstack 0
  3697                           
  3698                           ; 1 bytes @ 0x16
  3699  000096                     	ds	1
  3700  000097                     ?_printf:
  3701                           	opt callstack 0
  3702  000097                     printf@fmt:
  3703                           	opt callstack 0
  3704                           
  3705                           ; 2 bytes @ 0x17
  3706  000097                     	ds	12
  3707  0000A3                     printf@ap:
  3708                           	opt callstack 0
  3709                           
  3710                           ; 1 bytes @ 0x23
  3711  0000A3                     	ds	1
  3712  0000A4                     send_UBX_string@id:
  3713                           	opt callstack 0
  3714  0000A4                     adf4351_set_freq@ctx:
  3715                           	opt callstack 0
  3716  0000A4                     check_ADF5341_status@ctx:
  3717                           	opt callstack 0
  3718  0000A4                     lnb_do_configure@i2c:
  3719                           	opt callstack 0
  3720  0000A4                     check_LNB_status@i2c:
  3721                           	opt callstack 0
  3722  0000A4                     si5328_perform_ical@i2c:
  3723                           	opt callstack 0
  3724  0000A4                     check_si5328_status@i2c:
  3725                           	opt callstack 0
  3726  0000A4                     write_regset@i2c:
  3727                           	opt callstack 0
  3728                           
  3729                           ; 2 bytes @ 0x24
  3730  0000A4                     	ds	1
  3731  0000A5                     send_UBX_string@len:
  3732                           	opt callstack 0
  3733  0000A5                     print_char@map:
  3734                           	opt callstack 0
  3735                           
  3736                           ; 8 bytes @ 0x25
  3737  0000A5                     	ds	1
  3738  0000A6                     ??_check_ADF5341_status:
  3739  0000A6                     lnb_do_configure@addr:
  3740                           	opt callstack 0
  3741  0000A6                     check_LNB_status@addr:
  3742                           	opt callstack 0
  3743  0000A6                     si5328_perform_ical@addr:
  3744                           	opt callstack 0
  3745  0000A6                     check_si5328_status@addr:
  3746                           	opt callstack 0
  3747  0000A6                     write_regset@addr:
  3748                           	opt callstack 0
  3749  0000A6                     adf4351_set_freq@freq:
  3750                           	opt callstack 0
  3751                           
  3752                           ; 4 bytes @ 0x26
  3753  0000A6                     	ds	1
  3754  0000A7                     ??_check_LNB_status:
  3755  0000A7                     ??_check_si5328_status:
  3756  0000A7                     lnb_do_configure@value:
  3757                           	opt callstack 0
  3758  0000A7                     write_regset@set:
  3759                           	opt callstack 0
  3760  0000A7                     send_UBX_string@payload:
  3761                           	opt callstack 0
  3762                           
  3763                           ; 2 bytes @ 0x27
  3764  0000A7                     	ds	1
  3765  0000A8                     lnb_do_configure@res:
  3766                           	opt callstack 0
  3767                           
  3768                           ; 2 bytes @ 0x28
  3769  0000A8                     	ds	1
  3770  0000A9                     write_regset@len:
  3771                           	opt callstack 0
  3772                           
  3773                           ; 2 bytes @ 0x29
  3774  0000A9                     	ds	1
  3775  0000AA                     ??_adf4351_set_freq:
  3776  0000AA                     check_si5328_status@ret:
  3777                           	opt callstack 0
  3778  0000AA                     lnb_configure@i2c:
  3779                           	opt callstack 0
  3780                           
  3781                           ; 2 bytes @ 0x2A
  3782  0000AA                     	ds	1
  3783  0000AB                     ??_write_regset:
  3784  0000AB                     check_si5328_status@lock:
  3785                           	opt callstack 0
  3786                           
  3787                           ; 1 bytes @ 0x2B
  3788  0000AB                     	ds	1
  3789  0000AC                     lnb_configure@addr:
  3790                           	opt callstack 0
  3791  0000AC                     check_si5328_status@res:
  3792                           	opt callstack 0
  3793                           
  3794                           ; 1 bytes @ 0x2C
  3795  0000AC                     	ds	1
  3796  0000AD                     ??_lnb_configure:
  3797  0000AD                     print_char@c:
  3798                           	opt callstack 0
  3799  0000AD                     write_regset@errors:
  3800                           	opt callstack 0
  3801                           
  3802                           ; 2 bytes @ 0x2D
  3803  0000AD                     	ds	1
  3804  0000AE                     print_char@b:
  3805                           	opt callstack 0
  3806  0000AE                     _adf4351_set_freq$4063:
  3807                           	opt callstack 0
  3808                           
  3809                           ; 4 bytes @ 0x2E
  3810  0000AE                     	ds	1
  3811  0000AF                     print_char@idx:
  3812                           	opt callstack 0
  3813  0000AF                     lnb_configure@res:
  3814                           	opt callstack 0
  3815  0000AF                     si5328_set_freq@i2c:
  3816                           	opt callstack 0
  3817                           
  3818                           ; 2 bytes @ 0x2F
  3819  0000AF                     	ds	1
  3820  0000B0                     print_char@x:
  3821                           	opt callstack 0
  3822                           
  3823                           ; 1 bytes @ 0x30
  3824  0000B0                     	ds	1
  3825  0000B1                     si5328_set_freq@addr:
  3826                           	opt callstack 0
  3827  0000B1                     print_char@y:
  3828                           	opt callstack 0
  3829                           
  3830                           ; 1 bytes @ 0x31
  3831  0000B1                     	ds	1
  3832  0000B2                     si5328_set_freq@freq_MHz:
  3833                           	opt callstack 0
  3834  0000B2                     print_string@s:
  3835                           	opt callstack 0
  3836  0000B2                     adf4351_set_freq@fcorr:
  3837                           	opt callstack 0
  3838                           
  3839                           ; 4 bytes @ 0x32
  3840  0000B2                     	ds	1
  3841  0000B3                     ??_setQRG:
  3842                           
  3843                           ; 1 bytes @ 0x33
  3844  0000B3                     	ds	1
  3845  0000B4                     print_string@x:
  3846                           	opt callstack 0
  3847                           
  3848                           ; 1 bytes @ 0x34
  3849  0000B4                     	ds	1
  3850  0000B5                     print_string@y:
  3851                           	opt callstack 0
  3852                           
  3853                           ; 1 bytes @ 0x35
  3854  0000B5                     	ds	1
  3855  0000B6                     ??_setADF4351frequency:
  3856  0000B6                     print_string@underline:
  3857                           	opt callstack 0
  3858  0000B6                     setQRG@sw:
  3859                           	opt callstack 0
  3860                           
  3861                           ; 1 bytes @ 0x36
  3862  0000B6                     	ds	1
  3863  0000B7                     ??_print_string:
  3864  0000B7                     setQRG@newLO:
  3865                           	opt callstack 0
  3866                           
  3867                           ; 1 bytes @ 0x37
  3868  0000B7                     	ds	1
  3869  0000B8                     setADF4351frequency@force:
  3870                           	opt callstack 0
  3871  0000B8                     si5328_init@i2c:
  3872                           	opt callstack 0
  3873  0000B8                     si5328_checkGPS@i2c:
  3874                           	opt callstack 0
  3875                           
  3876                           ; 2 bytes @ 0x38
  3877  0000B8                     	ds	1
  3878  0000B9                     print_string@i:
  3879                           	opt callstack 0
  3880  0000B9                     setADF4351frequency@timeout:
  3881                           	opt callstack 0
  3882                           
  3883                           ; 2 bytes @ 0x39
  3884  0000B9                     	ds	1
  3885  0000BA                     si5328_init@addr:
  3886                           	opt callstack 0
  3887  0000BA                     si5328_checkGPS@addr:
  3888                           	opt callstack 0
  3889  0000BA                     show_display@xpos:
  3890                           	opt callstack 0
  3891  0000BA                     lcd_settingsOK@mode:
  3892                           	opt callstack 0
  3893  0000BA                     lcd_init@i2c:
  3894                           	opt callstack 0
  3895                           
  3896                           ; 2 bytes @ 0x3A
  3897  0000BA                     	ds	1
  3898  0000BB                     ??_secret_settings_write:
  3899  0000BB                     ??_si5328_init:
  3900  0000BB                     show_display@outqrg:
  3901                           	opt callstack 0
  3902  0000BB                     setADF4351frequency@p:
  3903                           	opt callstack 0
  3904                           
  3905                           ; 2 bytes @ 0x3B
  3906  0000BB                     	ds	1
  3907  0000BC                     lcd_init@addr:
  3908                           	opt callstack 0
  3909                           
  3910                           ; 1 bytes @ 0x3C
  3911  0000BC                     	ds	1
  3912  0000BD                     setADF4351frequency@sw:
  3913                           	opt callstack 0
  3914  0000BD                     si5328_init@res:
  3915                           	opt callstack 0
  3916  0000BD                     lcd_init@res:
  3917                           	opt callstack 0
  3918  0000BD                     show_display@p:
  3919                           	opt callstack 0
  3920                           
  3921                           ; 2 bytes @ 0x3D
  3922  0000BD                     	ds	1
  3923  0000BE                     secret_settings_write@sw:
  3924                           	opt callstack 0
  3925                           
  3926                           ; 1 bytes @ 0x3E
  3927  0000BE                     	ds	1
  3928  0000BF                     ??_secret_settings:
  3929                           
  3930                           ; 1 bytes @ 0x3F
  3931  0000BF                     	ds	2
  3932  0000C1                     ??_main:
  3933                           
  3934                           ; 1 bytes @ 0x41
  3935  0000C1                     	ds	3
  3936  0000C4                     main@lock:
  3937                           	opt callstack 0
  3938                           
  3939                           ; 1 bytes @ 0x44
  3940  0000C4                     	ds	1
  3941                           
  3942                           	psect	cstackCOMRAM
  3943  000001                     __pcstackCOMRAM:
  3944                           	opt callstack 0
  3945  000001                     usart_rx_irq_handler@udata:
  3946                           	opt callstack 0
  3947                           
  3948                           ; 2 bytes @ 0x0
  3949  000001                     	ds	2
  3950  000003                     ??_usart_rx_irq_handler:
  3951                           
  3952                           ; 1 bytes @ 0x2
  3953  000003                     	ds	2
  3954  000005                     usart_rx_irq_handler@c:
  3955                           	opt callstack 0
  3956                           
  3957                           ; 1 bytes @ 0x4
  3958  000005                     	ds	1
  3959  000006                     usart_rx_irq_handler@wposn:
  3960                           	opt callstack 0
  3961                           
  3962                           ; 2 bytes @ 0x5
  3963  000006                     	ds	2
  3964  000008                     ??_global_irq_handler:
  3965                           
  3966                           ; 1 bytes @ 0x7
  3967  000008                     	ds	4
  3968  00000C                     global_irq_handler@dummy:
  3969                           	opt callstack 0
  3970                           
  3971                           ; 1 bytes @ 0xB
  3972  00000C                     	ds	1
  3973  00000D                     global_irq_handler@dummy_1626:
  3974                           	opt callstack 0
  3975                           
  3976                           ; 1 bytes @ 0xC
  3977  00000D                     	ds	1
  3978  00000E                     ??_check_RXTX:
  3979  00000E                     ??_set_reg:
  3980  00000E                     ??islower@read_switch:
  3981  00000E                     ?_strlen:
  3982                           	opt callstack 0
  3983  00000E                     ?_memcmp:
  3984                           	opt callstack 0
  3985  00000E                     ?_strchr:
  3986                           	opt callstack 0
  3987  00000E                     ?_isupper:
  3988                           	opt callstack 0
  3989  00000E                     ?_isalpha:
  3990                           	opt callstack 0
  3991  00000E                     ?_isdigit:
  3992                           	opt callstack 0
  3993  00000E                     ?_strncmp:
  3994                           	opt callstack 0
  3995  00000E                     ?_isspace:
  3996                           	opt callstack 0
  3997  00000E                     ?_islower:
  3998                           	opt callstack 0
  3999  00000E                     ?_adf4351_get_lock:
  4000                           	opt callstack 0
  4001  00000E                     ?_i2c_wait_int:
  4002                           	opt callstack 0
  4003  00000E                     ?_usart_getc:
  4004                           	opt callstack 0
  4005  00000E                     ?___awdiv:
  4006                           	opt callstack 0
  4007  00000E                     ?___awmod:
  4008                           	opt callstack 0
  4009  00000E                     ?___lwdiv:
  4010                           	opt callstack 0
  4011  00000E                     ?_getGPSfrequency:
  4012                           	opt callstack 0
  4013  00000E                     ?___lmul:
  4014                           	opt callstack 0
  4015  00000E                     ?___aldiv:
  4016                           	opt callstack 0
  4017  00000E                     ?___omul:
  4018                           	opt callstack 0
  4019  00000E                     ?___aodiv:
  4020                           	opt callstack 0
  4021  00000E                     ?___aomod:
  4022                           	opt callstack 0
  4023  00000E                     usart_putc@c:
  4024                           	opt callstack 0
  4025  00000E                     clear_GPS_shift@idx:
  4026                           	opt callstack 0
  4027  00000E                     Eeprom_ReadByte@address:
  4028                           	opt callstack 0
  4029  00000E                     Eeprom_WriteByte@data:
  4030                           	opt callstack 0
  4031  00000E                     adf4351_get_lock@ctx:
  4032                           	opt callstack 0
  4033  00000E                     adf4351_set_tune@ctx:
  4034                           	opt callstack 0
  4035  00000E                     adf4351_default@ctx:
  4036                           	opt callstack 0
  4037  00000E                     irq_set_handler@handler:
  4038                           	opt callstack 0
  4039  00000E                     ___awdiv@dividend:
  4040                           	opt callstack 0
  4041  00000E                     ___awmod@dividend:
  4042                           	opt callstack 0
  4043  00000E                     ___lwdiv@dividend:
  4044                           	opt callstack 0
  4045  00000E                     isalpha@c:
  4046                           	opt callstack 0
  4047  00000E                     isdigit@c:
  4048                           	opt callstack 0
  4049  00000E                     isspace@c:
  4050                           	opt callstack 0
  4051  00000E                     isupper@c:
  4052                           	opt callstack 0
  4053  00000E                     memcmp@vl:
  4054                           	opt callstack 0
  4055  00000E                     memcpy@d1:
  4056                           	opt callstack 0
  4057  00000E                     memset@dest:
  4058                           	opt callstack 0
  4059  00000E                     strchr@s:
  4060                           	opt callstack 0
  4061  00000E                     strlen@s:
  4062                           	opt callstack 0
  4063  00000E                     strncmp@_l:
  4064                           	opt callstack 0
  4065  00000E                     islower@c:
  4066                           	opt callstack 0
  4067  00000E                     adf4351_write_latch@value:
  4068                           	opt callstack 0
  4069  00000E                     i2c_wait_int@timeout:
  4070                           	opt callstack 0
  4071  00000E                     ___lmul@multiplier:
  4072                           	opt callstack 0
  4073  00000E                     ___aldiv@dividend:
  4074                           	opt callstack 0
  4075  00000E                     ___omul@multiplier:
  4076                           	opt callstack 0
  4077  00000E                     ___aodiv@dividend:
  4078                           	opt callstack 0
  4079  00000E                     ___aomod@dividend:
  4080                           	opt callstack 0
  4081                           
  4082                           ; 8 bytes @ 0xD
  4083  00000E                     	ds	1
  4084  00000F                     putgps@c:
  4085                           	opt callstack 0
  4086  00000F                     Eeprom_ReadByte@to:
  4087                           	opt callstack 0
  4088  00000F                     Eeprom_WriteByte@address:
  4089                           	opt callstack 0
  4090  00000F                     fputc@c:
  4091                           	opt callstack 0
  4092                           
  4093                           ; 2 bytes @ 0xE
  4094  00000F                     	ds	1
  4095  000010                     ??_isupper:
  4096  000010                     ??_isalpha:
  4097  000010                     ??_isdigit:
  4098  000010                     ??_isspace:
  4099  000010                     ??_islower:
  4100  000010                     ??_adf4351_get_lock:
  4101  000010                     ??_usart_getc:
  4102  000010                     adf4351_set_tune@icp:
  4103                           	opt callstack 0
  4104  000010                     Eeprom_WriteByte@to:
  4105                           	opt callstack 0
  4106  000010                     irq_set_handler@udata:
  4107                           	opt callstack 0
  4108  000010                     ___awdiv@divisor:
  4109                           	opt callstack 0
  4110  000010                     ___awmod@divisor:
  4111                           	opt callstack 0
  4112  000010                     ___lwdiv@divisor:
  4113                           	opt callstack 0
  4114  000010                     memcmp@vr:
  4115                           	opt callstack 0
  4116  000010                     memcpy@s1:
  4117                           	opt callstack 0
  4118  000010                     memset@c:
  4119                           	opt callstack 0
  4120  000010                     strchr@c:
  4121                           	opt callstack 0
  4122  000010                     strlen@a:
  4123                           	opt callstack 0
  4124  000010                     strncmp@_r:
  4125                           	opt callstack 0
  4126                           
  4127                           ; 2 bytes @ 0xF
  4128  000010                     	ds	1
  4129  000011                     adf4351_set_tune@pout:
  4130                           	opt callstack 0
  4131  000011                     read_switch@rb1:
  4132                           	opt callstack 0
  4133  000011                     eeprom_setmode@mode:
  4134                           	opt callstack 0
  4135  000011                     fputc@fp:
  4136                           	opt callstack 0
  4137  000011                     check_RXTX@i:
  4138                           	opt callstack 0
  4139                           
  4140                           ; 2 bytes @ 0x10
  4141  000011                     	ds	1
  4142  000012                     ??_adf4351_write_latch:
  4143  000012                     ?_i2c_start:
  4144                           	opt callstack 0
  4145  000012                     ?_i2c_read:
  4146                           	opt callstack 0
  4147  000012                     ?_i2c_write:
  4148                           	opt callstack 0
  4149  000012                     irq_set_handler@id:
  4150                           	opt callstack 0
  4151  000012                     read_switch@rb2:
  4152                           	opt callstack 0
  4153  000012                     ___awdiv@counter:
  4154                           	opt callstack 0
  4155  000012                     ___awmod@counter:
  4156                           	opt callstack 0
  4157  000012                     adf4351_set_tune@lownoise:
  4158                           	opt callstack 0
  4159  000012                     i2c_start@read:
  4160                           	opt callstack 0
  4161  000012                     i2c_read@data:
  4162                           	opt callstack 0
  4163  000012                     i2c_write@wantack:
  4164                           	opt callstack 0
  4165  000012                     usart_getc@res:
  4166                           	opt callstack 0
  4167  000012                     set_reg@p:
  4168                           	opt callstack 0
  4169  000012                     ___lwdiv@quotient:
  4170                           	opt callstack 0
  4171  000012                     memcmp@n:
  4172                           	opt callstack 0
  4173  000012                     memcpy@n:
  4174                           	opt callstack 0
  4175  000012                     memset@n:
  4176                           	opt callstack 0
  4177  000012                     strncmp@n:
  4178                           	opt callstack 0
  4179  000012                     getGPSfrequency@gf:
  4180                           	opt callstack 0
  4181  000012                     ___lmul@multiplicand:
  4182                           	opt callstack 0
  4183  000012                     ___aldiv@divisor:
  4184                           	opt callstack 0
  4185                           
  4186                           ; 4 bytes @ 0x11
  4187  000012                     	ds	1
  4188  000013                     ??_init_gpios:
  4189  000013                     ?_stoa:
  4190                           	opt callstack 0
  4191  000013                     read_switch@rb3:
  4192                           	opt callstack 0
  4193  000013                     ___awdiv@sign:
  4194                           	opt callstack 0
  4195  000013                     ___awmod@sign:
  4196                           	opt callstack 0
  4197  000013                     stoa@fp:
  4198                           	opt callstack 0
  4199  000013                     fputs@s:
  4200                           	opt callstack 0
  4201                           
  4202                           ; 2 bytes @ 0x12
  4203  000013                     	ds	1
  4204  000014                     ??_memset:
  4205  000014                     ??_memcmp:
  4206  000014                     ??_strncmp:
  4207  000014                     ?_toupper:
  4208                           	opt callstack 0
  4209  000014                     i2c_write@data:
  4210                           	opt callstack 0
  4211  000014                     set_reg@idx:
  4212                           	opt callstack 0
  4213  000014                     read_switch@rb4:
  4214                           	opt callstack 0
  4215  000014                     ___lwdiv@counter:
  4216                           	opt callstack 0
  4217  000014                     _isspace$3627:
  4218                           	opt callstack 0
  4219  000014                     _adf4351_set_tune$505:
  4220                           	opt callstack 0
  4221  000014                     i2c_start@rep:
  4222                           	opt callstack 0
  4223  000014                     i2c_read@ack:
  4224                           	opt callstack 0
  4225  000014                     ___awdiv@quotient:
  4226                           	opt callstack 0
  4227  000014                     memcpy@d:
  4228                           	opt callstack 0
  4229  000014                     toupper@c:
  4230                           	opt callstack 0
  4231                           
  4232                           ; 2 bytes @ 0x13
  4233  000014                     	ds	1
  4234  000015                     ?___wmul:
  4235                           	opt callstack 0
  4236  000015                     i2c_write@res:
  4237                           	opt callstack 0
  4238  000015                     stoa@s:
  4239                           	opt callstack 0
  4240  000015                     ___wmul@multiplier:
  4241                           	opt callstack 0
  4242  000015                     fputs@fp:
  4243                           	opt callstack 0
  4244  000015                     strncmp@l:
  4245                           	opt callstack 0
  4246                           
  4247                           ; 2 bytes @ 0x14
  4248  000015                     	ds	1
  4249  000016                     ??_toupper:
  4250  000016                     ??_i2c_read:
  4251  000016                     ___aldiv@counter:
  4252                           	opt callstack 0
  4253  000016                     i2c_start@wantack:
  4254                           	opt callstack 0
  4255  000016                     memcmp@l:
  4256                           	opt callstack 0
  4257  000016                     memcpy@s:
  4258                           	opt callstack 0
  4259  000016                     memset@k:
  4260                           	opt callstack 0
  4261  000016                     adf4351_write_latch@mask:
  4262                           	opt callstack 0
  4263  000016                     ___lmul@product:
  4264                           	opt callstack 0
  4265  000016                     ___omul@multiplicand:
  4266                           	opt callstack 0
  4267  000016                     ___aodiv@divisor:
  4268                           	opt callstack 0
  4269  000016                     ___aomod@divisor:
  4270                           	opt callstack 0
  4271                           
  4272                           ; 8 bytes @ 0x15
  4273  000016                     	ds	1
  4274  000017                     ??_stoa:
  4275  000017                     ___aldiv@sign:
  4276                           	opt callstack 0
  4277  000017                     fputs@c:
  4278                           	opt callstack 0
  4279  000017                     i2c_read@res:
  4280                           	opt callstack 0
  4281  000017                     ___wmul@multiplicand:
  4282                           	opt callstack 0
  4283  000017                     strncmp@r:
  4284                           	opt callstack 0
  4285                           
  4286                           ; 2 bytes @ 0x16
  4287  000017                     	ds	1
  4288  000018                     i2c_start@addr:
  4289                           	opt callstack 0
  4290  000018                     memcpy@tmp:
  4291                           	opt callstack 0
  4292  000018                     memcmp@r:
  4293                           	opt callstack 0
  4294  000018                     memset@s:
  4295                           	opt callstack 0
  4296  000018                     fputs@i:
  4297                           	opt callstack 0
  4298  000018                     ___aldiv@quotient:
  4299                           	opt callstack 0
  4300  000018                     stoa@nuls:
  4301                           	opt callstack 0
  4302                           
  4303                           ; 7 bytes @ 0x17
  4304  000018                     	ds	1
  4305  000019                     i2c_start@res:
  4306                           	opt callstack 0
  4307  000019                     ___wmul@product:
  4308                           	opt callstack 0
  4309                           
  4310                           ; 2 bytes @ 0x18
  4311  000019                     	ds	1
  4312  00001A                     ?_itoa:
  4313                           	opt callstack 0
  4314  00001A                     ?_pad:
  4315                           	opt callstack 0
  4316  00001A                     ?___lldiv:
  4317                           	opt callstack 0
  4318  00001A                     adf4351_init@ctx:
  4319                           	opt callstack 0
  4320  00001A                     adf4351_write_reg0@ctx:
  4321                           	opt callstack 0
  4322  00001A                     adf4351_write_reg1@ctx:
  4323                           	opt callstack 0
  4324  00001A                     adf4351_write_reg2@ctx:
  4325                           	opt callstack 0
  4326  00001A                     adf4351_write_reg3@ctx:
  4327                           	opt callstack 0
  4328  00001A                     adf4351_write_reg4@ctx:
  4329                           	opt callstack 0
  4330  00001A                     adf4351_write_reg5@ctx:
  4331                           	opt callstack 0
  4332  00001A                     itoa@value:
  4333                           	opt callstack 0
  4334  00001A                     pad@fp:
  4335                           	opt callstack 0
  4336  00001A                     _toupper$3722:
  4337                           	opt callstack 0
  4338  00001A                     ___lldiv@dividend:
  4339                           	opt callstack 0
  4340                           
  4341                           ; 4 bytes @ 0x19
  4342  00001A                     	ds	1
  4343  00001B                     ?_atoi:
  4344                           	opt callstack 0
  4345  00001B                     atoi@s:
  4346                           	opt callstack 0
  4347                           
  4348                           ; 2 bytes @ 0x1A
  4349  00001B                     	ds	1
  4350  00001C                     ??_adf4351_write_reg4:
  4351  00001C                     ??_adf4351_write_reg2:
  4352  00001C                     ??_adf4351_write_reg5:
  4353  00001C                     ??_adf4351_write_reg3:
  4354  00001C                     ??_adf4351_write_reg1:
  4355  00001C                     ??_adf4351_write_reg0:
  4356  00001C                     ??_adf4351_init:
  4357  00001C                     ?___strtoxl:
  4358                           	opt callstack 0
  4359  00001C                     itoa@c:
  4360                           	opt callstack 0
  4361  00001C                     pad@buf:
  4362                           	opt callstack 0
  4363  00001C                     ___strtoxl@s:
  4364                           	opt callstack 0
  4365                           
  4366                           ; 2 bytes @ 0x1B
  4367  00001C                     	ds	1
  4368  00001D                     ??_atoi:
  4369                           
  4370                           ; 1 bytes @ 0x1C
  4371  00001D                     	ds	1
  4372  00001E                     ___aodiv@counter:
  4373                           	opt callstack 0
  4374  00001E                     ___aomod@counter:
  4375                           	opt callstack 0
  4376  00001E                     pad@p:
  4377                           	opt callstack 0
  4378  00001E                     ___strtoxl@endptr:
  4379                           	opt callstack 0
  4380  00001E                     ___lldiv@divisor:
  4381                           	opt callstack 0
  4382  00001E                     ___omul@product:
  4383                           	opt callstack 0
  4384                           
  4385                           ; 8 bytes @ 0x1D
  4386  00001E                     	ds	1
  4387  00001F                     ___aodiv@sign:
  4388                           	opt callstack 0
  4389  00001F                     ___aomod@sign:
  4390                           	opt callstack 0
  4391  00001F                     stoa@i:
  4392                           	opt callstack 0
  4393                           
  4394                           ; 2 bytes @ 0x1E
  4395  00001F                     	ds	1
  4396  000020                     ??_pad:
  4397  000020                     ?_abs:
  4398                           	opt callstack 0
  4399  000020                     abs@a:
  4400                           	opt callstack 0
  4401  000020                     ___strtoxl@base:
  4402                           	opt callstack 0
  4403  000020                     ___aodiv@quotient:
  4404                           	opt callstack 0
  4405                           
  4406                           ; 8 bytes @ 0x1F
  4407  000020                     	ds	1
  4408  000021                     pad@i:
  4409                           	opt callstack 0
  4410  000021                     stoa@w:
  4411                           	opt callstack 0
  4412  000021                     atoi@neg:
  4413                           	opt callstack 0
  4414  000021                     adf4351_write_reg4@data:
  4415                           	opt callstack 0
  4416  000021                     adf4351_write_reg5@data:
  4417                           	opt callstack 0
  4418                           
  4419                           ; 4 bytes @ 0x20
  4420  000021                     	ds	1
  4421  000022                     ??_abs:
  4422  000022                     ___strtoxl@is_signed:
  4423                           	opt callstack 0
  4424  000022                     adf4351_write_reg0@data:
  4425                           	opt callstack 0
  4426  000022                     adf4351_write_reg1@data:
  4427                           	opt callstack 0
  4428  000022                     adf4351_write_reg2@data:
  4429                           	opt callstack 0
  4430  000022                     adf4351_write_reg3@data:
  4431                           	opt callstack 0
  4432  000022                     ___lldiv@quotient:
  4433                           	opt callstack 0
  4434                           
  4435                           ; 4 bytes @ 0x21
  4436  000022                     	ds	1
  4437  000023                     ??___strtoxl:
  4438  000023                     pad@w:
  4439                           	opt callstack 0
  4440  000023                     stoa@cp:
  4441                           	opt callstack 0
  4442  000023                     _atoi$3600:
  4443                           	opt callstack 0
  4444                           
  4445                           ; 2 bytes @ 0x22
  4446  000023                     	ds	2
  4447  000025                     ?_xtoa:
  4448                           	opt callstack 0
  4449  000025                     stoa@p:
  4450                           	opt callstack 0
  4451  000025                     xtoa@fp:
  4452                           	opt callstack 0
  4453  000025                     _atoi$3602:
  4454                           	opt callstack 0
  4455                           
  4456                           ; 2 bytes @ 0x24
  4457  000025                     	ds	1
  4458  000026                     ?___lodiv:
  4459                           	opt callstack 0
  4460  000026                     ___lldiv@counter:
  4461                           	opt callstack 0
  4462  000026                     adf4351_setup@ctx:
  4463                           	opt callstack 0
  4464  000026                     ___lodiv@dividend:
  4465                           	opt callstack 0
  4466                           
  4467                           ; 8 bytes @ 0x25
  4468  000026                     	ds	1
  4469  000027                     ?_CalculateGridSquare:
  4470                           	opt callstack 0
  4471  000027                     _atoi$3601:
  4472                           	opt callstack 0
  4473  000027                     i2c_reset@ctx:
  4474                           	opt callstack 0
  4475  000027                     stoa@l:
  4476                           	opt callstack 0
  4477  000027                     usart_init@baud:
  4478                           	opt callstack 0
  4479  000027                     ___strtoxl@prev_a:
  4480                           	opt callstack 0
  4481  000027                     xtoa@d:
  4482                           	opt callstack 0
  4483                           
  4484                           ; 8 bytes @ 0x26
  4485  000027                     	ds	1
  4486  000028                     ?_dtoa:
  4487                           	opt callstack 0
  4488  000028                     ?_calc_mixer_corr_value:
  4489                           	opt callstack 0
  4490  000028                     adf4351_set_mode@ctx:
  4491                           	opt callstack 0
  4492  000028                     dtoa@fp:
  4493                           	opt callstack 0
  4494  000028                     atoi@n:
  4495                           	opt callstack 0
  4496                           
  4497                           ; 2 bytes @ 0x27
  4498  000028                     	ds	1
  4499  000029                     ??_i2c_reset:
  4500  000029                     ??_CalculateGridSquare:
  4501                           
  4502                           ; 1 bytes @ 0x28
  4503  000029                     	ds	1
  4504  00002A                     adf4351_set_mode@enable:
  4505                           	opt callstack 0
  4506  00002A                     dtoa@d:
  4507                           	opt callstack 0
  4508                           
  4509                           ; 8 bytes @ 0x29
  4510  00002A                     	ds	1
  4511  00002B                     usart_init@spbrg_value:
  4512                           	opt callstack 0
  4513  00002B                     ___strtoxl$3744:
  4514                           	opt callstack 0
  4515                           
  4516                           ; 2 bytes @ 0x2A
  4517  00002B                     	ds	1
  4518  00002C                     ??_calc_mixer_corr_value:
  4519  00002C                     
  4520                           ; 1 bytes @ 0x2B
  4521  00002C                     	ds	1
  4522  00002D                     ___strtoxl$3746:
  4523                           	opt callstack 0
  4524  00002D                     _i2c_reset$1141:
  4525                           	opt callstack 0
  4526  00002D                     CalculateGridSquare@lonm:
  4527                           	opt callstack 0
  4528                           
  4529                           ; 4 bytes @ 0x2C
  4530  00002D                     	ds	1
  4531  00002E                     ___lodiv@divisor:
  4532                           	opt callstack 0
  4533                           
  4534                           ; 8 bytes @ 0x2D
  4535  00002E                     	ds	1
  4536  00002F                     xtoa@x:
  4537                           	opt callstack 0
  4538  00002F                     ___strtoxl$3747:
  4539                           	opt callstack 0
  4540                           
  4541                           ; 2 bytes @ 0x2E
  4542  00002F                     	ds	1
  4543  000030                     ??_xtoa:
  4544                           
  4545                           ; 1 bytes @ 0x2F
  4546  000030                     	ds	1
  4547  000031                     ___strtoxl$3745:
  4548                           	opt callstack 0
  4549  000031                     i2c_reset@reg:
  4550                           	opt callstack 0
  4551  000031                     CalculateGridSquare@longf:
  4552                           	opt callstack 0
  4553                           
  4554                           ; 4 bytes @ 0x30
  4555  000031                     	ds	1
  4556  000032                     ??_dtoa:
  4557  000032                     ___strtoxl@conv_done:
  4558                           	opt callstack 0
  4559                           
  4560                           ; 1 bytes @ 0x31
  4561  000032                     	ds	1
  4562  000033                     ___strtoxl@limit:
  4563                           	opt callstack 0
  4564                           
  4565                           ; 4 bytes @ 0x32
  4566  000033                     	ds	1
  4567  000034                     calc_mixer_corr_value@curLO:
  4568                           	opt callstack 0
  4569                           
  4570                           ; 8 bytes @ 0x33
  4571  000034                     	ds	1
  4572  000035                     i2c_native_init@ctx:
  4573                           	opt callstack 0
  4574  000035                     i2c_stop@ctx:
  4575                           	opt callstack 0
  4576  000035                     CalculateGridSquare@lonrest1:
  4577                           	opt callstack 0
  4578                           
  4579                           ; 4 bytes @ 0x34
  4580  000035                     	ds	1
  4581  000036                     ___lodiv@quotient:
  4582                           	opt callstack 0
  4583                           
  4584                           ; 8 bytes @ 0x35
  4585  000036                     	ds	1
  4586  000037                     ?_i2c_transfer_native:
  4587                           	opt callstack 0
  4588  000037                     ___strtoxl@sign:
  4589                           	opt callstack 0
  4590  000037                     i2c_transfer_native@dev:
  4591                           	opt callstack 0
  4592  000037                     i2c_native_init@baud:
  4593                           	opt callstack 0
  4594                           
  4595                           ; 4 bytes @ 0x36
  4596  000037                     	ds	1
  4597  000038                     ___strtoxl@skip:
  4598                           	opt callstack 0
  4599  000038                     _xtoa$3108:
  4600                           	opt callstack 0
  4601                           
  4602                           ; 2 bytes @ 0x37
  4603  000038                     	ds	1
  4604  000039                     i2c_transfer_native@msg:
  4605                           	opt callstack 0
  4606  000039                     CalculateGridSquare@lonmid:
  4607                           	opt callstack 0
  4608  000039                     ___strtoxl@a:
  4609                           	opt callstack 0
  4610                           
  4611                           ; 4 bytes @ 0x38
  4612  000039                     	ds	1
  4613  00003A                     i2c_transfer_native@num:
  4614                           	opt callstack 0
  4615  00003A                     _dtoa$3087:
  4616                           	opt callstack 0
  4617  00003A                     _xtoa$3109:
  4618                           	opt callstack 0
  4619                           
  4620                           ; 2 bytes @ 0x39
  4621  00003A                     	ds	1
  4622  00003B                     
  4623                           ; 1 bytes @ 0x3A
  4624  00003B                     	ds	1
  4625  00003C                     ??_i2c_transfer_native:
  4626  00003C                     dtoa@p:
  4627                           	opt callstack 0
  4628  00003C                     xtoa@p:
  4629                           	opt callstack 0
  4630  00003C                     calc_mixer_corr_value@v:
  4631                           	opt callstack 0
  4632                           
  4633                           ; 4 bytes @ 0x3B
  4634  00003C                     	ds	1
  4635  00003D                     i2c_transfer_native@ack:
  4636                           	opt callstack 0
  4637  00003D                     ___strtoxl@cp:
  4638                           	opt callstack 0
  4639  00003D                     CalculateGridSquare@latm:
  4640                           	opt callstack 0
  4641                           
  4642                           ; 4 bytes @ 0x3C
  4643  00003D                     	ds	1
  4644  00003E                     ___lodiv@counter:
  4645                           	opt callstack 0
  4646  00003E                     dtoa@w:
  4647                           	opt callstack 0
  4648  00003E                     xtoa@w:
  4649                           	opt callstack 0
  4650                           
  4651                           ; 2 bytes @ 0x3D
  4652  00003E                     	ds	1
  4653  00003F                     ___strtoxl@c:
  4654                           	opt callstack 0
  4655  00003F                     adf4351_calc_counters@ctx:
  4656                           	opt callstack 0
  4657  00003F                     i2c_transfer_native@inmsg:
  4658                           	opt callstack 0
  4659                           
  4660                           ; 2 bytes @ 0x3E
  4661  00003F                     	ds	1
  4662  000040                     ?_strtol:
  4663                           	opt callstack 0
  4664  000040                     dtoa@s:
  4665                           	opt callstack 0
  4666  000040                     strtol@s:
  4667                           	opt callstack 0
  4668  000040                     calc_mixer_corr_value@fgps:
  4669                           	opt callstack 0
  4670  000040                     xtoa@n:
  4671                           	opt callstack 0
  4672                           
  4673                           ; 8 bytes @ 0x3F
  4674  000040                     	ds	1
  4675  000041                     ??_adf4351_calc_counters:
  4676  000041                     i2c_transfer_native@read:
  4677                           	opt callstack 0
  4678  000041                     CalculateGridSquare@latgf:
  4679                           	opt callstack 0
  4680                           
  4681                           ; 4 bytes @ 0x40
  4682  000041                     	ds	1
  4683  000042                     strtol@endptr:
  4684                           	opt callstack 0
  4685  000042                     dtoa@n:
  4686                           	opt callstack 0
  4687                           
  4688                           ; 8 bytes @ 0x41
  4689  000042                     	ds	1
  4690  000043                     i2c_transfer_native@wantack:
  4691                           	opt callstack 0
  4692                           
  4693                           ; 2 bytes @ 0x42
  4694  000043                     	ds	1
  4695  000044                     strtol@base:
  4696                           	opt callstack 0
  4697                           
  4698                           ; 2 bytes @ 0x43
  4699  000044                     	ds	1
  4700  000045                     i2c_transfer_native@i:
  4701                           	opt callstack 0
  4702  000045                     CalculateGridSquare@latrest1:
  4703                           	opt callstack 0
  4704                           
  4705                           ; 4 bytes @ 0x44
  4706  000045                     	ds	1
  4707  000046                     eval_gps@gpsbuf:
  4708                           	opt callstack 0
  4709                           
  4710                           ; 2 bytes @ 0x45
  4711  000046                     	ds	1
  4712  000047                     i2c_transfer_native@bdata:
  4713                           	opt callstack 0
  4714                           
  4715                           ; 2 bytes @ 0x46
  4716  000047                     	ds	1
  4717  000048                     ??_eval_gps:
  4718  000048                     xtoa@i:
  4719                           	opt callstack 0
  4720                           
  4721                           ; 2 bytes @ 0x47
  4722  000048                     	ds	1
  4723  000049                     i2c_transfer_native@ctx:
  4724                           	opt callstack 0
  4725  000049                     adf4351_calc_counters@INT:
  4726                           	opt callstack 0
  4727  000049                     CalculateGridSquare@latmid:
  4728                           	opt callstack 0
  4729                           
  4730                           ; 4 bytes @ 0x48
  4731  000049                     	ds	1
  4732  00004A                     dtoa@i:
  4733                           	opt callstack 0
  4734  00004A                     xtoa@c:
  4735                           	opt callstack 0
  4736                           
  4737                           ; 2 bytes @ 0x49
  4738  00004A                     	ds	1
  4739  00004B                     i2c_transfer_native@left:
  4740                           	opt callstack 0
  4741                           
  4742                           ; 2 bytes @ 0x4A
  4743  00004B                     	ds	1
  4744  00004C                     ?_vfpfcnvrt:
  4745                           	opt callstack 0
  4746  00004C                     rx_gps@c:
  4747                           	opt callstack 0
  4748  00004C                     vfpfcnvrt@fp:
  4749                           	opt callstack 0
  4750                           
  4751                           ; 2 bytes @ 0x4B
  4752  00004C                     	ds	1
  4753  00004D                     i2c_transfer_native@res:
  4754                           	opt callstack 0
  4755  00004D                     adf4351_calc_counters@rest:
  4756                           	opt callstack 0
  4757  00004D                     CalculateGridSquare@lon:
  4758                           	opt callstack 0
  4759                           
  4760                           ; 4 bytes @ 0x4C
  4761  00004D                     	ds	1
  4762  00004E                     ??_rx_gps:
  4763  00004E                     vfpfcnvrt@fmt:
  4764                           	opt callstack 0
  4765                           
  4766                           ; 1 bytes @ 0x4D
  4767  00004E                     	ds	1
  4768  00004F                     i2c_transfer_native@pmsg:
  4769                           	opt callstack 0
  4770  00004F                     vfpfcnvrt@ap:
  4771                           	opt callstack 0
  4772                           
  4773                           ; 1 bytes @ 0x4E
  4774  00004F                     	ds	1
  4775  000050                     ??_vfpfcnvrt:
  4776  000050                     ?_i2c_transfer:
  4777                           	opt callstack 0
  4778  000050                     i2c_transfer@dev:
  4779                           	opt callstack 0
  4780  000050                     rx_usart@c:
  4781                           	opt callstack 0
  4782                           
  4783                           ; 2 bytes @ 0x4F
  4784  000050                     	ds	1
  4785  000051                     _adf4351_calc_counters$4064:
  4786                           	opt callstack 0
  4787  000051                     CalculateGridSquare@lon_min:
  4788                           	opt callstack 0
  4789                           
  4790                           ; 4 bytes @ 0x50
  4791  000051                     	ds	1
  4792  000052                     i2c_transfer@msg:
  4793                           	opt callstack 0
  4794                           
  4795                           ; 1 bytes @ 0x51
  4796  000052                     	ds	1
  4797  000053                     i2c_transfer@num:
  4798                           	opt callstack 0
  4799  000053                     adf4351_calc_counters@vfoout:
  4800                           	opt callstack 0
  4801                           
  4802                           ; 8 bytes @ 0x52
  4803  000053                     	ds	2
  4804  000055                     ?_i2c_probe_addr:
  4805                           	opt callstack 0
  4806  000055                     ?_smbus8_write_byte:
  4807                           	opt callstack 0
  4808  000055                     ?_smbus8_read_byte:
  4809                           	opt callstack 0
  4810  000055                     i2c_probe_addr@dev:
  4811                           	opt callstack 0
  4812  000055                     smbus8_write_byte@dev:
  4813                           	opt callstack 0
  4814  000055                     smbus8_write_data@dev:
  4815                           	opt callstack 0
  4816  000055                     smbus8_read_byte@dev:
  4817                           	opt callstack 0
  4818  000055                     CalculateGridSquare@lat:
  4819                           	opt callstack 0
  4820                           
  4821                           ; 4 bytes @ 0x54
  4822  000055                     	ds	2
  4823  000057                     i2c_probe_addr@addr:
  4824                           	opt callstack 0
  4825  000057                     smbus8_write_byte@addr:
  4826                           	opt callstack 0
  4827  000057                     smbus8_write_data@addr:
  4828                           	opt callstack 0
  4829  000057                     smbus8_read_byte@addr:
  4830                           	opt callstack 0
  4831                           
  4832                           ; 1 bytes @ 0x56
  4833  000057                     	ds	1
  4834  000058                     smbus8_write_byte@reg:
  4835                           	opt callstack 0
  4836  000058                     smbus8_write_data@reg:
  4837                           	opt callstack 0
  4838  000058                     smbus8_read_byte@reg:
  4839                           	opt callstack 0
  4840  000058                     i2c_probe_addr@msg:
  4841                           	opt callstack 0
  4842                           
  4843                           ; 7 bytes @ 0x57
  4844  000058                     	ds	1
  4845  000059                     smbus8_write_byte@data:
  4846                           	opt callstack 0
  4847  000059                     smbus8_read_byte@data:
  4848                           	opt callstack 0
  4849  000059                     smbus8_write_data@data:
  4850                           	opt callstack 0
  4851  000059                     CalculateGridSquare@lat_min:
  4852                           	opt callstack 0
  4853                           
  4854                           ; 4 bytes @ 0x58
  4855  000059                     	ds	1
  4856  00005A                     smbus8_write_byte@tmp:
  4857                           	opt callstack 0
  4858  00005A                     read_reg@i2c:
  4859                           	opt callstack 0
  4860                           
  4861                           ; 2 bytes @ 0x59
  4862  00005A                     	ds	1
  4863  00005B                     smbus8_write_data@len:
  4864                           	opt callstack 0
  4865  00005B                     adf4351_calc_counters@Nmal10000:
  4866                           	opt callstack 0
  4867                           
  4868                           ; 8 bytes @ 0x5A
  4869  00005B                     	ds	1
  4870  00005C                     read_reg@addr:
  4871                           	opt callstack 0
  4872  00005C                     smbus8_write_byte@msg:
  4873                           	opt callstack 0
  4874                           
  4875                           ; 7 bytes @ 0x5B
  4876  00005C                     	ds	1
  4877  00005D                     ?_vfprintf:
  4878                           	opt callstack 0
  4879  00005D                     read_reg@reg:
  4880                           	opt callstack 0
  4881  00005D                     ssd1306_command@cmd:
  4882                           	opt callstack 0
  4883  00005D                     ssd1306_data@data:
  4884                           	opt callstack 0
  4885  00005D                     vfprintf@fp:
  4886                           	opt callstack 0
  4887                           
  4888                           ; 2 bytes @ 0x5C
  4889  00005D                     	ds	1
  4890  00005E                     
  4891                           ; 1 bytes @ 0x5D
  4892  00005E                     	ds	1
  4893  00005F                     ssd1306_command@len:
  4894                           	opt callstack 0
  4895  00005F                     ssd1306_data@len:
  4896                           	opt callstack 0
  4897  00005F                     vfprintf@fmt:
  4898                           	opt callstack 0
  4899                           
  4900                           ; 2 bytes @ 0x5E
  4901  00005F                     	ds	1
  4902  000060                     read_reg@val:
  4903                           	opt callstack 0
  4904                           
  4905                           ; 1 bytes @ 0x5F
  4906  000060                     	ds	1
  4907  000061                     ssd1306_setpos@y:
  4908                           	opt callstack 0
  4909  000061                     vfprintf@ap:
  4910                           	opt callstack 0
  4911                           
  4912                           ; 1 bytes @ 0x60
  4913  000061                     	ds	1
  4914  000062                     lcd_draw8x8@buffer:
  4915                           	opt callstack 0
  4916  000062                     vfprintf@cfmt:
  4917                           	opt callstack 0
  4918                           
  4919                           ; 2 bytes @ 0x61
  4920  000062                     	ds	1
  4921  000063                     ssd1306_commandbyte@cmd:
  4922                           	opt callstack 0
  4923  000063                     lcd_draw8x8@x:
  4924                           	opt callstack 0
  4925                           
  4926                           ; 1 bytes @ 0x62
  4927  000063                     	ds	1
  4928  000064                     ??_send_UBX_string:
  4929  000064                     check_ADF5341_status@stat:
  4930                           	opt callstack 0
  4931  000064                     check_LNB_status@stat:
  4932                           	opt callstack 0
  4933  000064                     lcd_draw8x8@y:
  4934                           	opt callstack 0
  4935                           
  4936                           ; 1 bytes @ 0x63
  4937  000064                     	ds	1
  4938  000065                     
  4939                           ; 1 bytes @ 0x64
  4940 ;;
  4941 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  4942 ;;
  4943 ;; *************** function _main *****************
  4944 ;; Defined at:
  4945 ;;		line 64 in file "src/main.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  lock            1   68[BANK0 ] unsigned char 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 3F/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4959 ;;      Params:         0       0       0       0       0       0       0
  4960 ;;      Locals:         0       1       0       0       0       0       0
  4961 ;;      Temps:          0       3       0       0       0       0       0
  4962 ;;      Totals:         0       4       0       0       0       0       0
  4963 ;;Total ram usage:        4 bytes
  4964 ;; Hardware stack levels required when called:   16
  4965 ;; This function calls:
  4966 ;;		_adf4351_init
  4967 ;;		_adf4351_set_mode
  4968 ;;		_adf4351_set_tune
  4969 ;;		_check_ADF5341_status
  4970 ;;		_check_LNB_status
  4971 ;;		_check_si5328_status
  4972 ;;		_i2c_native_init
  4973 ;;		_init_gpios
  4974 ;;		_init_gps
  4975 ;;		_init_timer
  4976 ;;		_lcd_init
  4977 ;;		_lnb_configure
  4978 ;;		_rx_usart
  4979 ;;		_secret_settings
  4980 ;;		_setADF4351frequency
  4981 ;;		_setQRG
  4982 ;;		_show_display
  4983 ;;		_si5328_checkGPS
  4984 ;;		_si5328_init
  4985 ;;		_usart_init
  4986 ;; This function is called by:
  4987 ;;		Startup code after reset
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           	psect	text0
  4992  004104                     __ptext0:
  4993                           	opt callstack 0
  4994  004104                     _main:
  4995                           	opt callstack 15
  4996                           
  4997                           ;src/main.c: 66:  static u8 old_GPS_lock = 0;;src/main.c: 68:     OSCTUNE = 0x80;
  4998                           
  4999                           ;incstack = 0
  5000  004104  0E80               	movlw	128
  5001  004106  6E9B               	movwf	155,c	;volatile
  5002                           
  5003                           ;src/main.c: 69:     OSCCON = 0xF2;
  5004  004108  0EF2               	movlw	242
  5005  00410A  6ED3               	movwf	211,c	;volatile
  5006  00410C                     l1098:
  5007  00410C  A4D3               	btfss	211,2,c	;volatile
  5008  00410E  D7FE               	goto	l1098
  5009                           
  5010                           ;src/main.c: 75:     PIE1 = 0;
  5011  004110  0E00               	movlw	0
  5012  004112  6E9D               	movwf	157,c	;volatile
  5013                           
  5014                           ;src/main.c: 76:     PIE2 = 0;
  5015  004114  0E00               	movlw	0
  5016  004116  6EA0               	movwf	160,c	;volatile
  5017                           
  5018                           ;src/main.c: 79:     init_gpios();
  5019  004118  EC47  F004         	call	_init_gpios	;wreg free
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;src/main.c: 82:     usart_init(9600);
  5023  00411C  0E80               	movlw	128
  5024  00411E  6E27               	movwf	usart_init@baud^0,c
  5025  004120  0E25               	movlw	37
  5026  004122  6E28               	movwf	(usart_init@baud+1)^0,c
  5027  004124  0E00               	movlw	0
  5028  004126  6E29               	movwf	(usart_init@baud+2)^0,c
  5029  004128  0E00               	movlw	0
  5030  00412A  6E2A               	movwf	(usart_init@baud+3)^0,c
  5031  00412C  EC26  F034         	call	_usart_init	;wreg free
  5032                           
  5033                           ;src/main.c: 86:     i2c_native_init(&g_i2c_bus, 100000);
  5034  004130  0EE5               	movlw	low _g_i2c_bus
  5035  004132  6E35               	movwf	i2c_native_init@ctx^0,c
  5036  004134  0E02               	movlw	high _g_i2c_bus
  5037  004136  6E36               	movwf	(i2c_native_init@ctx+1)^0,c
  5038  004138  0EA0               	movlw	160
  5039  00413A  6E37               	movwf	i2c_native_init@baud^0,c
  5040  00413C  0E86               	movlw	134
  5041  00413E  6E38               	movwf	(i2c_native_init@baud+1)^0,c
  5042  004140  0E01               	movlw	1
  5043  004142  6E39               	movwf	(i2c_native_init@baud+2)^0,c
  5044  004144  0E00               	movlw	0
  5045  004146  6E3A               	movwf	(i2c_native_init@baud+3)^0,c
  5046  004148  EC85  F034         	call	_i2c_native_init	;wreg free
  5047                           
  5048                           ;src/main.c: 89:  lcd_init(&g_i2c_bus,0x3c);
  5049  00414C  0EE5               	movlw	low _g_i2c_bus
  5050  00414E  0100               	movlb	0	; () banked
  5051  004150  6FBA               	movwf	lcd_init@i2c& (0+255),b
  5052  004152  0E02               	movlw	high _g_i2c_bus
  5053  004154  6FBB               	movwf	(lcd_init@i2c+1)& (0+255),b
  5054  004156  0E3C               	movlw	60
  5055  004158  6FBC               	movwf	lcd_init@addr& (0+255),b
  5056  00415A  EC95  F02D         	call	_lcd_init	;wreg free
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;src/main.c: 93:  secret_settings();
  5060  00415E  EC2D  F035         	call	_secret_settings	;wreg free
  5061                           
  5062                           ;src/main.c: 96:  lnb_configure(&g_i2c_bus, 0x08);
  5063  004162  0EE5               	movlw	low _g_i2c_bus
  5064  004164  0100               	movlb	0	; () banked
  5065  004166  6FAA               	movwf	lnb_configure@i2c& (0+255),b
  5066  004168  0E02               	movlw	high _g_i2c_bus
  5067  00416A  6FAB               	movwf	(lnb_configure@i2c+1)& (0+255),b
  5068  00416C  0E08               	movlw	8
  5069  00416E  6FAC               	movwf	lnb_configure@addr& (0+255),b
  5070  004170  EC5D  F031         	call	_lnb_configure	;wreg free
  5071                           
  5072                           ;src/main.c: 101:     si5328_init(&g_i2c_bus, 0x68);
  5073  004174  0EE5               	movlw	low _g_i2c_bus
  5074  004176  0100               	movlb	0	; () banked
  5075  004178  6FB8               	movwf	si5328_init@i2c& (0+255),b
  5076  00417A  0E02               	movlw	high _g_i2c_bus
  5077  00417C  6FB9               	movwf	(si5328_init@i2c+1)& (0+255),b
  5078  00417E  0E68               	movlw	104
  5079  004180  6FBA               	movwf	si5328_init@addr& (0+255),b
  5080  004182  ECE6  F02A         	call	_si5328_init	;wreg free
  5081                           
  5082                           ;src/main.c: 105:     adf4351_init(&g_adf4351);
  5083  004186  0E87               	movlw	low _g_adf4351
  5084  004188  6E1A               	movwf	adf4351_init@ctx^0,c
  5085  00418A  0E03               	movlw	high _g_adf4351
  5086  00418C  6E1B               	movwf	(adf4351_init@ctx+1)^0,c
  5087  00418E  ECDE  F02F         	call	_adf4351_init	;wreg free
  5088                           
  5089                           ;src/main.c: 109:     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  5090  004192  0E87               	movlw	low _g_adf4351
  5091  004194  6E0E               	movwf	adf4351_set_tune@ctx^0,c
  5092  004196  0E03               	movlw	high _g_adf4351
  5093  004198  6E0F               	movwf	(adf4351_set_tune@ctx+1)^0,c
  5094  00419A  0E05               	movlw	5
  5095  00419C  6E10               	movwf	adf4351_set_tune@icp^0,c
  5096  00419E  0E01               	movlw	1
  5097  0041A0  6E11               	movwf	adf4351_set_tune@pout^0,c
  5098  0041A2  0E00               	movlw	0
  5099  0041A4  6E13               	movwf	(adf4351_set_tune@lownoise+1)^0,c
  5100  0041A6  0E01               	movlw	1
  5101  0041A8  6E12               	movwf	adf4351_set_tune@lownoise^0,c
  5102  0041AA  EC94  F036         	call	_adf4351_set_tune	;wreg free
  5103                           
  5104                           ;src/main.c: 112:     adf4351_set_mode(&g_adf4351, 1);
  5105  0041AE  0E87               	movlw	low _g_adf4351
  5106  0041B0  6E28               	movwf	adf4351_set_mode@ctx^0,c
  5107  0041B2  0E03               	movlw	high _g_adf4351
  5108  0041B4  6E29               	movwf	(adf4351_set_mode@ctx+1)^0,c
  5109  0041B6  0E00               	movlw	0
  5110  0041B8  6E2B               	movwf	(adf4351_set_mode@enable+1)^0,c
  5111  0041BA  0E01               	movlw	1
  5112  0041BC  6E2A               	movwf	adf4351_set_mode@enable^0,c
  5113  0041BE  EC8E  F02F         	call	_adf4351_set_mode	;wreg free
  5114                           
  5115                           ;src/main.c: 114:  init_timer();
  5116  0041C2  ECC5  F039         	call	_init_timer	;wreg free
  5117                           
  5118                           ;src/main.c: 117:     RCONbits.IPEN = 0;
  5119  0041C6  9ED0               	bcf	208,7,c	;volatile
  5120                           
  5121                           ;src/main.c: 119:     INTCONbits.PEIE = 1;
  5122  0041C8  8CF2               	bsf	242,6,c	;volatile
  5123                           
  5124                           ;src/main.c: 121:     INTCONbits.GIE = 1;
  5125  0041CA  8EF2               	bsf	242,7,c	;volatile
  5126                           
  5127                           ;src/main.c: 125:  WDTCON=1;
  5128  0041CC  0E01               	movlw	1
  5129  0041CE  6ED1               	movwf	209,c	;volatile
  5130  0041D0                     l1101:
  5131  0041D0  0004               	clrwdt		;# 
  5132                           
  5133                           ;src/main.c: 136:         setQRG();
  5134  0041D2  ECED  F02D         	call	_setQRG	;wreg free
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;src/main.c: 139:   si5328_checkGPS(&g_i2c_bus, 0x68);
  5138  0041D6  0EE5               	movlw	low _g_i2c_bus
  5139  0041D8  6FB8               	movwf	si5328_checkGPS@i2c& (0+255),b
  5140  0041DA  0E02               	movlw	high _g_i2c_bus
  5141  0041DC  6FB9               	movwf	(si5328_checkGPS@i2c+1)& (0+255),b
  5142  0041DE  0E68               	movlw	104
  5143  0041E0  6FBA               	movwf	si5328_checkGPS@addr& (0+255),b
  5144  0041E2  ECC7  F030         	call	_si5328_checkGPS	;wreg free
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;src/main.c: 142:   u8 lock = check_si5328_status(&g_i2c_bus, 0x68);
  5148  0041E6  0EE5               	movlw	low _g_i2c_bus
  5149  0041E8  6FA4               	movwf	check_si5328_status@i2c& (0+255),b
  5150  0041EA  0E02               	movlw	high _g_i2c_bus
  5151  0041EC  6FA5               	movwf	(check_si5328_status@i2c+1)& (0+255),b
  5152  0041EE  0E68               	movlw	104
  5153  0041F0  6FA6               	movwf	check_si5328_status@addr& (0+255),b
  5154  0041F2  EC34  F027         	call	_check_si5328_status	;wreg free
  5155  0041F6  6FC4               	movwf	main@lock& (0+255),b
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;src/main.c: 145:   if(GPS_lock == 1 && GPS_lock != old_GPS_lock)
  5159  0041F8  05D8               	decf	_GPS_lock& (0+255),w,b
  5160  0041FA  A4D8               	btfss	status,2,c
  5161  0041FC  D008               	goto	l11813
  5162                           
  5163                           ; BSR set to: 0
  5164  0041FE  51C7               	movf	main@old_GPS_lock& (0+255),w,b
  5165  004200  19D8               	xorwf	_GPS_lock& (0+255),w,b
  5166  004202  B4D8               	btfsc	status,2,c
  5167  004204  D004               	goto	l11813
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;src/main.c: 146:   {;src/main.c: 147:    lock = 1;
  5171  004206  0E01               	movlw	1
  5172  004208  6FC4               	movwf	main@lock& (0+255),b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;src/main.c: 148:    old_GPS_lock = GPS_lock;
  5176  00420A  C0D8  F0C7         	movff	_GPS_lock,main@old_GPS_lock
  5177  00420E                     l11813:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;src/main.c: 153:         setADF4351frequency(lock);
  5181  00420E  51C4               	movf	main@lock& (0+255),w,b
  5182  004210  EC2B  F022         	call	_setADF4351frequency
  5183                           
  5184                           ;src/main.c: 156:   check_ADF5341_status(&g_adf4351);
  5185  004214  0E87               	movlw	low _g_adf4351
  5186  004216  0100               	movlb	0	; () banked
  5187  004218  6FA4               	movwf	check_ADF5341_status@ctx& (0+255),b
  5188  00421A  0E03               	movlw	high _g_adf4351
  5189  00421C  6FA5               	movwf	(check_ADF5341_status@ctx+1)& (0+255),b
  5190  00421E  EC1C  F02C         	call	_check_ADF5341_status	;wreg free
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;src/main.c: 159:   check_LNB_status(&g_i2c_bus, 0x08);
  5194  004222  0EE5               	movlw	low _g_i2c_bus
  5195  004224  6FA4               	movwf	check_LNB_status@i2c& (0+255),b
  5196  004226  0E02               	movlw	high _g_i2c_bus
  5197  004228  6FA5               	movwf	(check_LNB_status@i2c+1)& (0+255),b
  5198  00422A  0E08               	movlw	8
  5199  00422C  6FA6               	movwf	check_LNB_status@addr& (0+255),b
  5200  00422E  ECBA  F028         	call	_check_LNB_status	;wreg free
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;src/main.c: 162:         rx_usart();
  5204  004232  ECEC  F039         	call	_rx_usart	;wreg free
  5205                           
  5206                           ;src/main.c: 165:   show_display();
  5207  004236  EC09  F000         	call	_show_display	;wreg free
  5208                           
  5209                           ;src/main.c: 168:   if(ext10MHzReference == 0)
  5210  00423A  0100               	movlb	0	; () banked
  5211  00423C  51D7               	movf	_ext10MHzReference& (0+255),w,b
  5212  00423E  B4D8               	btfsc	status,2,c
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;src/main.c: 169:    init_gps();
  5216  004240  ECAF  F039         	call	_init_gps	;wreg free
  5217                           
  5218                           ;src/main.c: 172:   if(cpu_blink_timer)
  5219  004244  0100               	movlb	0	; () banked
  5220  004246  51CB               	movf	_cpu_blink_timer& (0+255),w,b
  5221  004248  B4D8               	btfsc	status,2,c
  5222  00424A  D019               	goto	l11831
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;src/main.c: 173:    *((PIN_LED_CPU_OK)->pPORT) &= ~(PIN_LED_CPU_OK)->mask;
  5226  00424C  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  5227  00424E  6EF6               	movwf	tblptrl,c
  5228  004250  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  5229  004252  6EF7               	movwf	tblptrh,c
  5230  004254                     	if	0	;tblptru may be non-zero
  5231  004254                     	endif
  5232  004254                     	if	0	;tblptru may be non-zero
  5233  004254                     	endif
  5234  004254  0008               	tblrd		*
  5235  004256  50F5               	movf	tablat,w,c
  5236  004258  0AFF               	xorlw	255
  5237  00425A  6FC1               	movwf	??_main& (0+255),b
  5238  00425C  0E9B               	movlw	low _PIN_LED_CPU_OK_DEF
  5239  00425E  6EF6               	movwf	tblptrl,c
  5240  004260                     	if	1	;There is more than 1 active tblptr byte
  5241  004260  0E7B               	movlw	high _PIN_LED_CPU_OK_DEF
  5242  004262  6EF7               	movwf	tblptrh,c
  5243  004264                     	endif
  5244  004264                     	if	0	;There are less than 3 active tblptr bytes
  5245  004264                     	endif
  5246  004264  0009               	tblrd		*+
  5247  004266  CFF5 F0C2          	movff	tablat,??_main+1
  5248  00426A  0009               	tblrd		*+
  5249  00426C  CFF5 F0C3          	movff	tablat,??_main+2
  5250  004270  C0C2  FFD9         	movff	??_main+1,fsr2l
  5251  004274  C0C3  FFDA         	movff	??_main+2,fsr2h
  5252  004278  51C1               	movf	??_main& (0+255),w,b
  5253  00427A  16DF               	andwf	indf2,f,c
  5254  00427C  D7A9               	goto	l1101
  5255  00427E                     l11831:
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;src/main.c: 175:    *((PIN_LED_CPU_OK)->pPORT) |= (PIN_LED_CPU_OK)->mask;
  5259  00427E  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  5260  004280  6EF6               	movwf	tblptrl,c
  5261  004282  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  5262  004284  6EF7               	movwf	tblptrh,c
  5263  004286                     	if	0	;tblptru may be non-zero
  5264  004286                     	endif
  5265  004286                     	if	0	;tblptru may be non-zero
  5266  004286                     	endif
  5267  004286  0008               	tblrd		*
  5268  004288  CFF5 F0C1          	movff	tablat,??_main
  5269  00428C  0E9B               	movlw	low _PIN_LED_CPU_OK_DEF
  5270  00428E  6EF6               	movwf	tblptrl,c
  5271  004290                     	if	1	;There is more than 1 active tblptr byte
  5272  004290  0E7B               	movlw	high _PIN_LED_CPU_OK_DEF
  5273  004292  6EF7               	movwf	tblptrh,c
  5274  004294                     	endif
  5275  004294                     	if	0	;There are less than 3 active tblptr bytes
  5276  004294                     	endif
  5277  004294  0009               	tblrd		*+
  5278  004296  CFF5 F0C2          	movff	tablat,??_main+1
  5279  00429A  0009               	tblrd		*+
  5280  00429C  CFF5 F0C3          	movff	tablat,??_main+2
  5281  0042A0  C0C2  FFD9         	movff	??_main+1,fsr2l
  5282  0042A4  C0C3  FFDA         	movff	??_main+2,fsr2h
  5283  0042A8  51C1               	movf	??_main& (0+255),w,b
  5284  0042AA  12DF               	iorwf	indf2,f,c
  5285  0042AC  D791               	goto	l1101
  5286  0042AE                     __end_of_main:
  5287                           	opt callstack 0
  5288                           
  5289 ;; *************** function _usart_init *****************
  5290 ;; Defined at:
  5291 ;;		line 29 in file "src/driver/usart.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;  baud            4   38[COMRAM] unsigned long 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  spbrg_value     2   42[COMRAM] unsigned short 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 3F/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         4       0       0       0       0       0       0
  5306 ;;      Locals:         2       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         6       0       0       0       0       0       0
  5309 ;;Total ram usage:        6 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    3
  5312 ;; This function calls:
  5313 ;;		___lldiv
  5314 ;;		_irq_set_handler
  5315 ;; This function is called by:
  5316 ;;		_main
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text1
  5321  00684C                     __ptext1:
  5322                           	opt callstack 0
  5323  00684C                     _usart_init:
  5324                           	opt callstack 27
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;src/driver/usart.c: 29: void usart_init(u32 baud);src/driver/usart.c: 30: {;src/driver/
      +                          usart.c: 31:     irq_set_handler(IRQ_HANDLER_ID_USART, usart_rx_irq_handler, ((void*)0))
      +                          ;
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;incstack = 0
  5331  00684C  0E50               	movlw	low _usart_rx_irq_handler
  5332  00684E  6E0E               	movwf	irq_set_handler@handler^0,c
  5333  006850  0E6B               	movlw	high _usart_rx_irq_handler
  5334  006852  6E0F               	movwf	(irq_set_handler@handler+1)^0,c
  5335  006854  0E00               	movlw	0
  5336  006856  6E10               	movwf	irq_set_handler@udata^0,c
  5337  006858  0E00               	movlw	0
  5338  00685A  6E11               	movwf	(irq_set_handler@udata+1)^0,c
  5339  00685C  0E00               	movlw	0
  5340  00685E  EC81  F038         	call	_irq_set_handler
  5341                           
  5342                           ;src/driver/usart.c: 32:     TXSTAbits.TX9 = 0;
  5343  006862  9CAC               	bcf	172,6,c	;volatile
  5344                           
  5345                           ;src/driver/usart.c: 33:     TXSTAbits.SENDB = 0;
  5346  006864  96AC               	bcf	172,3,c	;volatile
  5347                           
  5348                           ;src/driver/usart.c: 34:     TXSTAbits.BRGH = 1;
  5349  006866  84AC               	bsf	172,2,c	;volatile
  5350                           
  5351                           ;src/driver/usart.c: 35:     TXSTAbits.TXEN = 1;
  5352  006868  8AAC               	bsf	172,5,c	;volatile
  5353                           
  5354                           ;src/driver/usart.c: 38:     RCSTAbits.RX9 = 0;
  5355  00686A  9CAB               	bcf	171,6,c	;volatile
  5356                           
  5357                           ;src/driver/usart.c: 39:     RCSTAbits.CREN = 1;
  5358  00686C  88AB               	bsf	171,4,c	;volatile
  5359                           
  5360                           ;src/driver/usart.c: 40:     RCSTAbits.ADDEN = 0;
  5361  00686E  96AB               	bcf	171,3,c	;volatile
  5362                           
  5363                           ;src/driver/usart.c: 42:     BAUDCONbits.BRG16 = 1;
  5364  006870  86B8               	bsf	184,3,c	;volatile
  5365                           
  5366                           ;src/driver/usart.c: 43:     BAUDCONbits.ABDEN = 0;
  5367  006872  90B8               	bcf	184,0,c	;volatile
  5368                           
  5369                           ;src/driver/usart.c: 45:     u16 spbrg_value = ((8000000/4) / baud) - 1;
  5370  006874  0E80               	movlw	128
  5371  006876  6E1A               	movwf	___lldiv@dividend^0,c
  5372  006878  0E84               	movlw	132
  5373  00687A  6E1B               	movwf	(___lldiv@dividend+1)^0,c
  5374  00687C  0E1E               	movlw	30
  5375  00687E  6E1C               	movwf	(___lldiv@dividend+2)^0,c
  5376  006880  0E00               	movlw	0
  5377  006882  6E1D               	movwf	(___lldiv@dividend+3)^0,c
  5378  006884  C027  F01E         	movff	usart_init@baud,___lldiv@divisor
  5379  006888  C028  F01F         	movff	usart_init@baud+1,___lldiv@divisor+1
  5380  00688C  C029  F020         	movff	usart_init@baud+2,___lldiv@divisor+2
  5381  006890  C02A  F021         	movff	usart_init@baud+3,___lldiv@divisor+3
  5382  006894  ECBF  F032         	call	___lldiv	;wreg free
  5383  006898  0EFF               	movlw	255
  5384  00689A  241A               	addwf	?___lldiv^0,w,c
  5385  00689C  6E2B               	movwf	usart_init@spbrg_value^0,c
  5386  00689E  0EFF               	movlw	255
  5387  0068A0  201B               	addwfc	(?___lldiv+1)^0,w,c
  5388  0068A2  6E2C               	movwf	(usart_init@spbrg_value+1)^0,c
  5389                           
  5390                           ;src/driver/usart.c: 47:     SPBRGH = (spbrg_value>>8)&0xFF;
  5391  0068A4  C02C  FFB0         	movff	usart_init@spbrg_value+1,4016	;volatile
  5392                           
  5393                           ;src/driver/usart.c: 48:     SPBRG = (spbrg_value>>0)&0xFF;
  5394  0068A8  C02B  FFAF         	movff	usart_init@spbrg_value,4015	;volatile
  5395                           
  5396                           ;src/driver/usart.c: 50:     TXSTAbits.SYNC = 0;
  5397  0068AC  98AC               	bcf	172,4,c	;volatile
  5398                           
  5399                           ;src/driver/usart.c: 51:     RCSTAbits.SPEN = 1;
  5400  0068AE  8EAB               	bsf	171,7,c	;volatile
  5401                           
  5402                           ;src/driver/usart.c: 53:     PIE1bits.RCIE = 1;
  5403  0068B0  8A9D               	bsf	157,5,c	;volatile
  5404  0068B2  0012               	return		;funcret
  5405  0068B4                     __end_of_usart_init:
  5406                           	opt callstack 0
  5407                           
  5408 ;; *************** function _si5328_init *****************
  5409 ;; Defined at:
  5410 ;;		line 422 in file "src/driver/si5328.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  i2c             2   56[BANK0 ] PTR struct i2c_dev__
  5413 ;;		 -> g_i2c_bus(8), 
  5414 ;;  addr            1   58[BANK0 ] unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  res             2   61[BANK0 ] int 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  2   56[BANK0 ] int 
  5419 ;; Registers used:
  5420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 3F/0
  5423 ;;		On exit  : 3D/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5426 ;;      Params:         0       3       0       0       0       0       0
  5427 ;;      Locals:         0       2       0       0       0       0       0
  5428 ;;      Temps:          0       2       0       0       0       0       0
  5429 ;;      Totals:         0       7       0       0       0       0       0
  5430 ;;Total ram usage:        7 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:   13
  5433 ;; This function calls:
  5434 ;;		_i2c_probe_addr
  5435 ;;		_printf
  5436 ;;		_setQRG
  5437 ;;		_smbus8_write_byte
  5438 ;;		_write_regset
  5439 ;; This function is called by:
  5440 ;;		_main
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text2
  5445  0055CC                     __ptext2:
  5446                           	opt callstack 0
  5447  0055CC                     _si5328_init:
  5448                           	opt callstack 17
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;src/driver/si5328.c: 422: int si5328_init(i2c_dev i2c, u8 addr);src/driver/si5328.c: 42
      +                          3: {;src/driver/si5328.c: 424:     int res = i2c_probe_addr(i2c, addr);
  5452                           
  5453                           ;incstack = 0
  5454  0055CC  C0B8  F055         	movff	si5328_init@i2c,i2c_probe_addr@dev
  5455  0055D0  C0B9  F056         	movff	si5328_init@i2c+1,i2c_probe_addr@dev+1
  5456  0055D4  C0BA  F057         	movff	si5328_init@addr,i2c_probe_addr@addr
  5457  0055D8  EC46  F038         	call	_i2c_probe_addr	;wreg free
  5458  0055DC  C055  F0BD         	movff	?_i2c_probe_addr,si5328_init@res
  5459  0055E0  C056  F0BE         	movff	?_i2c_probe_addr+1,si5328_init@res+1
  5460                           
  5461                           ;src/driver/si5328.c: 425:     if(res == 0)
  5462  0055E4  0100               	movlb	0	; () banked
  5463  0055E6  51BD               	movf	si5328_init@res& (0+255),w,b
  5464  0055E8  11BE               	iorwf	(si5328_init@res+1)& (0+255),w,b
  5465  0055EA  A4D8               	btfss	status,2,c
  5466  0055EC  D051               	goto	l11343
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;src/driver/si5328.c: 426:  {;src/driver/si5328.c: 427:         printf("si:found.\n");
  5470  0055EE  0E49               	movlw	low STR_25
  5471  0055F0  6F97               	movwf	printf@fmt& (0+255),b
  5472  0055F2  0E7F               	movlw	high STR_25
  5473  0055F4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5474  0055F6  EC30  F03A         	call	_printf	;wreg free
  5475                           
  5476                           ; BSR set to: 2
  5477                           ;src/driver/si5328.c: 428:   smbus8_write_byte(i2c, addr, 136, 0x80);
  5478  0055FA  C0B8  F055         	movff	si5328_init@i2c,smbus8_write_byte@dev
  5479  0055FE  C0B9  F056         	movff	si5328_init@i2c+1,smbus8_write_byte@dev+1
  5480  005602  C0BA  F057         	movff	si5328_init@addr,smbus8_write_byte@addr
  5481  005606  0E88               	movlw	136
  5482  005608  6E58               	movwf	smbus8_write_byte@reg^0,c
  5483  00560A  0E80               	movlw	128
  5484  00560C  6E59               	movwf	smbus8_write_byte@data^0,c
  5485  00560E  EC68  F037         	call	_smbus8_write_byte	;wreg free
  5486                           
  5487                           ;src/driver/si5328.c: 429:   _delaywdt((unsigned long)((100)*(8000000/4000.0)));
  5488  005612  0E01               	movlw	1
  5489  005614  0100               	movlb	0	; () banked
  5490  005616  6FBC               	movwf	(??_si5328_init+1)& (0+255),b
  5491  005618  0EC3               	movlw	195
  5492  00561A  6FBB               	movwf	??_si5328_init& (0+255),b
  5493  00561C  0EEC               	movlw	236
  5494  00561E                     u14947:
  5495  00561E  0004               	clrwdt	
  5496  005620  2EE8               	decfsz	wreg,f,c
  5497  005622  D7FD               	bra	u14947
  5498  005624  2FBB               	decfsz	??_si5328_init& (0+255),f,b
  5499  005626  D7FB               	bra	u14947
  5500  005628  2FBC               	decfsz	(??_si5328_init+1)& (0+255),f,b
  5501  00562A  D7F9               	bra	u14947
  5502  00562C  0004               	clrwdt	
  5503  00562E  F000               	nop	
  5504  005630  0004               	clrwdt	
  5505                           
  5506                           ;src/driver/si5328.c: 431:   printf("si:init\n");
  5507  005632  0E72               	movlw	low STR_26
  5508  005634  0100               	movlb	0	; () banked
  5509  005636  6F97               	movwf	printf@fmt& (0+255),b
  5510  005638  0E7F               	movlw	high STR_26
  5511  00563A  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5512  00563C  EC30  F03A         	call	_printf	;wreg free
  5513                           
  5514                           ; BSR set to: 2
  5515                           ;src/driver/si5328.c: 432:   if(ext10MHzReference == 0)
  5516  005640  0100               	movlb	0	; () banked
  5517  005642  51D7               	movf	_ext10MHzReference& (0+255),w,b
  5518  005644  A4D8               	btfss	status,2,c
  5519  005646  D011               	goto	l11341
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;src/driver/si5328.c: 433:   {;src/driver/si5328.c: 435:    write_regset(i2c, addr, reg_
      +                          set_univ_CKIN2_XAXB, (sizeof(reg_set_univ_CKIN2_XAXB)/sizeof(reg_set_univ_CKIN2_XAXB[0])
      +                          ));
  5523  005648  C0B8  F0A4         	movff	si5328_init@i2c,write_regset@i2c
  5524  00564C  C0B9  F0A5         	movff	si5328_init@i2c+1,write_regset@i2c+1
  5525  005650  C0BA  F0A6         	movff	si5328_init@addr,write_regset@addr
  5526  005654  0E33               	movlw	low _reg_set_univ_CKIN2_XAXB
  5527  005656  6FA7               	movwf	write_regset@set& (0+255),b
  5528  005658  0E7B               	movlw	high _reg_set_univ_CKIN2_XAXB
  5529  00565A  6FA8               	movwf	(write_regset@set+1)& (0+255),b
  5530  00565C  0E00               	movlw	0
  5531  00565E  6FAA               	movwf	(write_regset@len+1)& (0+255),b
  5532  005660  0E0C               	movlw	12
  5533  005662  6FA9               	movwf	write_regset@len& (0+255),b
  5534  005664  ECDF  F02C         	call	_write_regset	;wreg free
  5535                           
  5536                           ;src/driver/si5328.c: 436:   }
  5537  005668  D010               	goto	l486
  5538  00566A                     l11341:
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;src/driver/si5328.c: 438:   {;src/driver/si5328.c: 440:    write_regset(i2c, addr, reg_
      +                          set_univ_CKIN1_GPS, (sizeof(reg_set_univ_CKIN1_GPS)/sizeof(reg_set_univ_CKIN1_GPS[0])));
  5542  00566A  C0B8  F0A4         	movff	si5328_init@i2c,write_regset@i2c
  5543  00566E  C0B9  F0A5         	movff	si5328_init@i2c+1,write_regset@i2c+1
  5544  005672  C0BA  F0A6         	movff	si5328_init@addr,write_regset@addr
  5545  005676  0E19               	movlw	low _reg_set_univ_CKIN1_GPS
  5546  005678  6FA7               	movwf	write_regset@set& (0+255),b
  5547  00567A  0E7B               	movlw	high _reg_set_univ_CKIN1_GPS
  5548  00567C  6FA8               	movwf	(write_regset@set+1)& (0+255),b
  5549  00567E  0E00               	movlw	0
  5550  005680  6FAA               	movwf	(write_regset@len+1)& (0+255),b
  5551  005682  0E0D               	movlw	13
  5552  005684  6FA9               	movwf	write_regset@len& (0+255),b
  5553  005686  ECDF  F02C         	call	_write_regset	;wreg free
  5554  00568A                     l486:
  5555                           
  5556                           ;src/driver/si5328.c: 443:   setQRG();
  5557  00568A  ECED  F02D         	call	_setQRG	;wreg free
  5558                           
  5559                           ;src/driver/si5328.c: 444:     }
  5560  00568E  0012               	return	
  5561  005690                     l11343:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;src/driver/si5328.c: 446:  {;src/driver/si5328.c: 447:         printf("si:not found!\n"
      +                          );
  5565  005690  0EC4               	movlw	low STR_27
  5566  005692  6F97               	movwf	printf@fmt& (0+255),b
  5567  005694  0E7E               	movlw	high STR_27
  5568  005696  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5569  005698  EC30  F03A         	call	_printf	;wreg free
  5570  00569C  0012               	return		;funcret
  5571  00569E                     __end_of_si5328_init:
  5572                           	opt callstack 0
  5573                           
  5574 ;; *************** function _si5328_checkGPS *****************
  5575 ;; Defined at:
  5576 ;;		line 482 in file "src/driver/si5328.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  i2c             2   56[BANK0 ] PTR struct i2c_dev__
  5579 ;;		 -> g_i2c_bus(8), 
  5580 ;;  addr            1   58[BANK0 ] unsigned char 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 3F/0
  5589 ;;		On exit  : 3F/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5592 ;;      Params:         0       3       0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0
  5595 ;;      Totals:         0       3       0       0       0       0       0
  5596 ;;Total ram usage:        3 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:   13
  5599 ;; This function calls:
  5600 ;;		_printf
  5601 ;;		_setQRG
  5602 ;;		_write_regset
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text3
  5609  00618E                     __ptext3:
  5610                           	opt callstack 0
  5611  00618E                     _si5328_checkGPS:
  5612                           	opt callstack 17
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;src/driver/si5328.c: 482: void si5328_checkGPS(i2c_dev i2c, u8 addr);src/driver/si5328.
      +                          c: 483: {;src/driver/si5328.c: 484: static u8 old_GPS_lock = 0;;src/driver/si5328.c: 485
      +                          : static u8 old_ubx_ack = 0;;src/driver/si5328.c: 487:  if(old_ubx_ack == 0 && ubx_ack =
      +                          = 1 && GPS_lock == 0)
  5616                           
  5617                           ;incstack = 0
  5618  00618E  51D3               	movf	si5328_checkGPS@old_ubx_ack& (0+255),w,b
  5619  006190  A4D8               	btfss	status,2,c
  5620  006192  D022               	goto	l11363
  5621                           
  5622                           ; BSR set to: 0
  5623  006194  046E               	decf	_ubx_ack^0,w,c
  5624  006196  A4D8               	btfss	status,2,c
  5625  006198  D01F               	goto	l11363
  5626                           
  5627                           ; BSR set to: 0
  5628  00619A  51D8               	movf	_GPS_lock& (0+255),w,b
  5629  00619C  A4D8               	btfss	status,2,c
  5630  00619E  D01C               	goto	l11363
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;src/driver/si5328.c: 488:  {;src/driver/si5328.c: 489:   old_ubx_ack = ubx_ack;
  5634  0061A0  C06E  F0D3         	movff	_ubx_ack,si5328_checkGPS@old_ubx_ack
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;src/driver/si5328.c: 493:   printf("si:GPS ok, no lock\n");
  5638  0061A4  0E17               	movlw	low STR_31
  5639  0061A6  6F97               	movwf	printf@fmt& (0+255),b
  5640  0061A8  0E7D               	movlw	high STR_31
  5641  0061AA  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5642  0061AC  EC30  F03A         	call	_printf	;wreg free
  5643                           
  5644                           ; BSR set to: 2
  5645                           ;src/driver/si5328.c: 494:         write_regset(i2c, addr, reg_set_univ_CKIN2_XAXB, (siz
      +                          eof(reg_set_univ_CKIN2_XAXB)/sizeof(reg_set_univ_CKIN2_XAXB[0])));
  5646  0061B0  C0B8  F0A4         	movff	si5328_checkGPS@i2c,write_regset@i2c
  5647  0061B4  C0B9  F0A5         	movff	si5328_checkGPS@i2c+1,write_regset@i2c+1
  5648  0061B8  C0BA  F0A6         	movff	si5328_checkGPS@addr,write_regset@addr
  5649  0061BC  0E33               	movlw	low _reg_set_univ_CKIN2_XAXB
  5650  0061BE  0100               	movlb	0	; () banked
  5651  0061C0  6FA7               	movwf	write_regset@set& (0+255),b
  5652  0061C2  0E7B               	movlw	high _reg_set_univ_CKIN2_XAXB
  5653  0061C4  6FA8               	movwf	(write_regset@set+1)& (0+255),b
  5654  0061C6  0E00               	movlw	0
  5655  0061C8  6FAA               	movwf	(write_regset@len+1)& (0+255),b
  5656  0061CA  0E0C               	movlw	12
  5657  0061CC  6FA9               	movwf	write_regset@len& (0+255),b
  5658  0061CE  ECDF  F02C         	call	_write_regset	;wreg free
  5659                           
  5660                           ;src/driver/si5328.c: 496:   currentLO = 0xff;
  5661  0061D2  686D               	setf	_currentLO^0,c
  5662                           
  5663                           ;src/driver/si5328.c: 497:   setQRG();
  5664  0061D4  ECED  F02D         	call	_setQRG	;wreg free
  5665  0061D8                     l11363:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;src/driver/si5328.c: 500:  if(old_GPS_lock == 0 && GPS_lock == 1 && use_GPS == 1)
  5669  0061D8  51D4               	movf	si5328_checkGPS@old_GPS_lock& (0+255),w,b
  5670  0061DA  A4D8               	btfss	status,2,c
  5671  0061DC  0012               	return	
  5672                           
  5673                           ; BSR set to: 0
  5674  0061DE  05D8               	decf	_GPS_lock& (0+255),w,b
  5675  0061E0  A4D8               	btfss	status,2,c
  5676  0061E2  0012               	return	
  5677                           
  5678                           ; BSR set to: 0
  5679  0061E4  05E8               	decf	_use_GPS& (0+255),w,b
  5680  0061E6  A4D8               	btfss	status,2,c
  5681  0061E8  0012               	return	
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;src/driver/si5328.c: 501:  {;src/driver/si5328.c: 502:   old_GPS_lock = 1;
  5685  0061EA  0E01               	movlw	1
  5686  0061EC  6FD4               	movwf	si5328_checkGPS@old_GPS_lock& (0+255),b
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;src/driver/si5328.c: 505:   printf("GPS:locked\nsi:syncing GPS\n");
  5690  0061EE  0E6F               	movlw	low STR_32
  5691  0061F0  6F97               	movwf	printf@fmt& (0+255),b
  5692  0061F2  0E7C               	movlw	high STR_32
  5693  0061F4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5694  0061F6  EC30  F03A         	call	_printf	;wreg free
  5695                           
  5696                           ; BSR set to: 2
  5697                           ;src/driver/si5328.c: 506:         write_regset(i2c, addr, reg_set_univ_CKIN1_GPS, (size
      +                          of(reg_set_univ_CKIN1_GPS)/sizeof(reg_set_univ_CKIN1_GPS[0])));
  5698  0061FA  C0B8  F0A4         	movff	si5328_checkGPS@i2c,write_regset@i2c
  5699  0061FE  C0B9  F0A5         	movff	si5328_checkGPS@i2c+1,write_regset@i2c+1
  5700  006202  C0BA  F0A6         	movff	si5328_checkGPS@addr,write_regset@addr
  5701  006206  0E19               	movlw	low _reg_set_univ_CKIN1_GPS
  5702  006208  0100               	movlb	0	; () banked
  5703  00620A  6FA7               	movwf	write_regset@set& (0+255),b
  5704  00620C  0E7B               	movlw	high _reg_set_univ_CKIN1_GPS
  5705  00620E  6FA8               	movwf	(write_regset@set+1)& (0+255),b
  5706  006210  0E00               	movlw	0
  5707  006212  6FAA               	movwf	(write_regset@len+1)& (0+255),b
  5708  006214  0E0D               	movlw	13
  5709  006216  6FA9               	movwf	write_regset@len& (0+255),b
  5710  006218  ECDF  F02C         	call	_write_regset	;wreg free
  5711                           
  5712                           ;src/driver/si5328.c: 508:   currentLO = 0xff;
  5713  00621C  686D               	setf	_currentLO^0,c
  5714                           
  5715                           ;src/driver/si5328.c: 509:   setQRG();
  5716  00621E  ECED  F02D         	call	_setQRG	;wreg free
  5717                           
  5718                           ; BSR set to: 0
  5719  006222  0012               	return		;funcret
  5720  006224                     __end_of_si5328_checkGPS:
  5721                           	opt callstack 0
  5722                           
  5723 ;; *************** function _setQRG *****************
  5724 ;; Defined at:
  5725 ;;		line 251 in file "src/main.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  newLO           1   55[BANK0 ] unsigned char 
  5730 ;;  sw              1   54[BANK0 ] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 3F/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5740 ;;      Params:         0       0       0       0       0       0       0
  5741 ;;      Locals:         0       2       0       0       0       0       0
  5742 ;;      Temps:          0       3       0       0       0       0       0
  5743 ;;      Totals:         0       5       0       0       0       0       0
  5744 ;;Total ram usage:        5 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:   12
  5747 ;; This function calls:
  5748 ;;		_si5328_set_freq
  5749 ;; This function is called by:
  5750 ;;		_si5328_init
  5751 ;;		_si5328_checkGPS
  5752 ;;		_main
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text4
  5757  005BDA                     __ptext4:
  5758                           	opt callstack 0
  5759  005BDA                     _setQRG:
  5760                           	opt callstack 17
  5761                           
  5762                           ;src/main.c: 253:  u8 sw;;src/main.c: 254:  u8 newLO;;src/main.c: 257:     sw = ((*((PIN
      +                          _LNB_QRG2)->pPORT) & (PIN_LNB_QRG2)->mask) != 0)?1:0;
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;incstack = 0
  5766  005BDA  0E59               	movlw	low (_PIN_LNB_QRG2_DEF+4)
  5767  005BDC  6EF6               	movwf	tblptrl,c
  5768  005BDE  0E7B               	movlw	high (_PIN_LNB_QRG2_DEF+4)
  5769  005BE0  6EF7               	movwf	tblptrh,c
  5770  005BE2                     	if	0	;tblptru may be non-zero
  5771  005BE2                     	endif
  5772  005BE2                     	if	0	;tblptru may be non-zero
  5773  005BE2                     	endif
  5774  005BE2  0008               	tblrd		*
  5775  005BE4  CFF5 F0B3          	movff	tablat,??_setQRG
  5776  005BE8  0E55               	movlw	low _PIN_LNB_QRG2_DEF
  5777  005BEA  6EF6               	movwf	tblptrl,c
  5778  005BEC                     	if	1	;There is more than 1 active tblptr byte
  5779  005BEC  0E7B               	movlw	high _PIN_LNB_QRG2_DEF
  5780  005BEE  6EF7               	movwf	tblptrh,c
  5781  005BF0                     	endif
  5782  005BF0                     	if	0	;There are less than 3 active tblptr bytes
  5783  005BF0                     	endif
  5784  005BF0  0009               	tblrd		*+
  5785  005BF2  CFF5 F0B4          	movff	tablat,??_setQRG+1
  5786  005BF6  0009               	tblrd		*+
  5787  005BF8  CFF5 F0B5          	movff	tablat,??_setQRG+2
  5788  005BFC  C0B4  FFD9         	movff	??_setQRG+1,fsr2l
  5789  005C00  C0B5  FFDA         	movff	??_setQRG+2,fsr2h
  5790  005C04  50DF               	movf	indf2,w,c
  5791  005C06  0100               	movlb	0	; () banked
  5792  005C08  15B3               	andwf	??_setQRG& (0+255),w,b
  5793  005C0A  0900               	iorlw	0
  5794  005C0C  B4D8               	btfsc	status,2,c
  5795  005C0E  D002               	goto	u13850
  5796  005C10  0E01               	movlw	1
  5797  005C12  D001               	goto	u13860
  5798  005C14                     u13850:
  5799  005C14  0E00               	movlw	0
  5800  005C16                     u13860:
  5801  005C16  6FB6               	movwf	setQRG@sw& (0+255),b
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;src/main.c: 258:  sw <<= 1;
  5805  005C18  90D8               	bcf	status,0,c
  5806  005C1A  37B6               	rlcf	setQRG@sw& (0+255),f,b
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;src/main.c: 259:     sw |= ((*((PIN_LNB_QRG1)->pPORT) & (PIN_LNB_QRG1)->mask) != 0)?1:0
      +                          ;
  5810  005C1C  0E54               	movlw	low (_PIN_LNB_QRG1_DEF+4)
  5811  005C1E  6EF6               	movwf	tblptrl,c
  5812  005C20  0E7B               	movlw	high (_PIN_LNB_QRG1_DEF+4)
  5813  005C22  6EF7               	movwf	tblptrh,c
  5814  005C24                     	if	0	;tblptru may be non-zero
  5815  005C24                     	endif
  5816  005C24                     	if	0	;tblptru may be non-zero
  5817  005C24                     	endif
  5818  005C24  0008               	tblrd		*
  5819  005C26  CFF5 F0B3          	movff	tablat,??_setQRG
  5820  005C2A  0E50               	movlw	low _PIN_LNB_QRG1_DEF
  5821  005C2C  6EF6               	movwf	tblptrl,c
  5822  005C2E                     	if	1	;There is more than 1 active tblptr byte
  5823  005C2E  0E7B               	movlw	high _PIN_LNB_QRG1_DEF
  5824  005C30  6EF7               	movwf	tblptrh,c
  5825  005C32                     	endif
  5826  005C32                     	if	0	;There are less than 3 active tblptr bytes
  5827  005C32                     	endif
  5828  005C32  0009               	tblrd		*+
  5829  005C34  CFF5 F0B4          	movff	tablat,??_setQRG+1
  5830  005C38  0009               	tblrd		*+
  5831  005C3A  CFF5 F0B5          	movff	tablat,??_setQRG+2
  5832  005C3E  C0B4  FFD9         	movff	??_setQRG+1,fsr2l
  5833  005C42  C0B5  FFDA         	movff	??_setQRG+2,fsr2h
  5834  005C46  50DF               	movf	indf2,w,c
  5835  005C48  15B3               	andwf	??_setQRG& (0+255),w,b
  5836  005C4A  0900               	iorlw	0
  5837  005C4C  B4D8               	btfsc	status,2,c
  5838  005C4E  D002               	goto	u13870
  5839  005C50  0E01               	movlw	1
  5840  005C52  D001               	goto	u13880
  5841  005C54                     u13870:
  5842  005C54  0E00               	movlw	0
  5843  005C56                     u13880:
  5844  005C56  13B6               	iorwf	setQRG@sw& (0+255),f,b
  5845                           
  5846                           ;src/main.c: 265:  newLO = 27 - sw;
  5847  005C58  51B6               	movf	setQRG@sw& (0+255),w,b
  5848  005C5A  081B               	sublw	27
  5849  005C5C  6FB7               	movwf	setQRG@newLO& (0+255),b
  5850                           
  5851                           ;src/main.c: 267:  if(newLO != currentLO)
  5852  005C5E  506D               	movf	_currentLO^0,w,c
  5853  005C60  19B7               	xorwf	setQRG@newLO& (0+255),w,b
  5854  005C62  B4D8               	btfsc	status,2,c
  5855  005C64  0012               	return	
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;src/main.c: 268:  {;src/main.c: 270:   currentLO = newLO;
  5859  005C66  C0B7  F06D         	movff	setQRG@newLO,_currentLO
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;src/main.c: 271:   si5328_set_freq(&g_i2c_bus, 0x68, currentLO);
  5863  005C6A  0EE5               	movlw	low _g_i2c_bus
  5864  005C6C  6FAF               	movwf	si5328_set_freq@i2c& (0+255),b
  5865  005C6E  0E02               	movlw	high _g_i2c_bus
  5866  005C70  6FB0               	movwf	(si5328_set_freq@i2c+1)& (0+255),b
  5867  005C72  0E68               	movlw	104
  5868  005C74  6FB1               	movwf	si5328_set_freq@addr& (0+255),b
  5869  005C76  C06D  F0B2         	movff	_currentLO,si5328_set_freq@freq_MHz
  5870  005C7A  EC79  F033         	call	_si5328_set_freq	;wreg free
  5871                           
  5872                           ;src/main.c: 274:   actualADFswitch = 0xff;
  5873  005C7E  0100               	movlb	0	; () banked
  5874  005C80  69E4               	setf	_actualADFswitch& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877  005C82  0012               	return		;funcret
  5878  005C84                     __end_of_setQRG:
  5879                           	opt callstack 0
  5880                           
  5881 ;; *************** function _si5328_set_freq *****************
  5882 ;; Defined at:
  5883 ;;		line 453 in file "src/driver/si5328.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  i2c             2   47[BANK0 ] PTR struct i2c_dev__
  5886 ;;		 -> g_i2c_bus(8), 
  5887 ;;  addr            1   49[BANK0 ] unsigned char 
  5888 ;;  freq_MHz        1   50[BANK0 ] unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 3F/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5900 ;;      Params:         0       4       0       0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0
  5903 ;;      Totals:         0       4       0       0       0       0       0
  5904 ;;Total ram usage:        4 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:   11
  5907 ;; This function calls:
  5908 ;;		_printf
  5909 ;;		_set_reg24
  5910 ;;		_set_reg25
  5911 ;;		_set_reg26
  5912 ;;		_set_reg27
  5913 ;;		_si5328_perform_ical
  5914 ;;		_write_regset
  5915 ;; This function is called by:
  5916 ;;		_setQRG
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text5
  5921  0066F2                     __ptext5:
  5922                           	opt callstack 0
  5923  0066F2                     _si5328_set_freq:
  5924                           	opt callstack 17
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;src/driver/si5328.c: 453: void si5328_set_freq(i2c_dev i2c, u8 addr, u8 freq_MHz);src/d
      +                          river/si5328.c: 454: {;src/driver/si5328.c: 455:  if(freq_MHz == 24)
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;incstack = 0
  5931  0066F2  0E18               	movlw	24
  5932  0066F4  19B2               	xorwf	si5328_set_freq@freq_MHz& (0+255),w,b
  5933  0066F6  B4D8               	btfsc	status,2,c
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;src/driver/si5328.c: 456:   set_reg24();
  5937  0066F8  EC7B  F02A         	call	_set_reg24	;wreg free
  5938                           
  5939                           ;src/driver/si5328.c: 458:  if(freq_MHz == 25)
  5940  0066FC  0E19               	movlw	25
  5941  0066FE  0100               	movlb	0	; () banked
  5942  006700  19B2               	xorwf	si5328_set_freq@freq_MHz& (0+255),w,b
  5943  006702  B4D8               	btfsc	status,2,c
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;src/driver/si5328.c: 459:   set_reg25();
  5947  006704  EC10  F02A         	call	_set_reg25	;wreg free
  5948                           
  5949                           ;src/driver/si5328.c: 461:  if(freq_MHz == 26)
  5950  006708  0E1A               	movlw	26
  5951  00670A  0100               	movlb	0	; () banked
  5952  00670C  19B2               	xorwf	si5328_set_freq@freq_MHz& (0+255),w,b
  5953  00670E  B4D8               	btfsc	status,2,c
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;src/driver/si5328.c: 462:   set_reg26();
  5957  006710  ECA5  F029         	call	_set_reg26	;wreg free
  5958                           
  5959                           ;src/driver/si5328.c: 464:  if(freq_MHz == 27)
  5960  006714  0E1B               	movlw	27
  5961  006716  0100               	movlb	0	; () banked
  5962  006718  19B2               	xorwf	si5328_set_freq@freq_MHz& (0+255),w,b
  5963  00671A  B4D8               	btfsc	status,2,c
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;src/driver/si5328.c: 465:   set_reg27();
  5967  00671C  ECAA  F037         	call	_set_reg27	;wreg free
  5968                           
  5969                           ;src/driver/si5328.c: 467:  write_regset(i2c, addr, reg_set_LNB_LO, (sizeof(reg_set_LNB_
      +                          LO)/sizeof(reg_set_LNB_LO[0])));
  5970  006720  C0AF  F0A4         	movff	si5328_set_freq@i2c,write_regset@i2c
  5971  006724  C0B0  F0A5         	movff	si5328_set_freq@i2c+1,write_regset@i2c+1
  5972  006728  C0B1  F0A6         	movff	si5328_set_freq@addr,write_regset@addr
  5973  00672C  0E3A               	movlw	low _reg_set_LNB_LO
  5974  00672E  0100               	movlb	0	; () banked
  5975  006730  6FA7               	movwf	write_regset@set& (0+255),b
  5976  006732  0E02               	movlw	high _reg_set_LNB_LO
  5977  006734  6FA8               	movwf	(write_regset@set+1)& (0+255),b
  5978  006736  0E00               	movlw	0
  5979  006738  6FAA               	movwf	(write_regset@len+1)& (0+255),b
  5980  00673A  0E0C               	movlw	12
  5981  00673C  6FA9               	movwf	write_regset@len& (0+255),b
  5982  00673E  ECDF  F02C         	call	_write_regset	;wreg free
  5983                           
  5984                           ;src/driver/si5328.c: 468:  printf("si:LNB: %d\n",freq_MHz);
  5985  006742  0E31               	movlw	low STR_28
  5986  006744  0100               	movlb	0	; () banked
  5987  006746  6F97               	movwf	printf@fmt& (0+255),b
  5988  006748  0E7F               	movlw	high STR_28
  5989  00674A  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5990  00674C  C0B2  F099         	movff	si5328_set_freq@freq_MHz,?_printf+2
  5991  006750  6B9A               	clrf	(?_printf+3)& (0+255),b
  5992  006752  EC30  F03A         	call	_printf	;wreg free
  5993                           
  5994                           ; BSR set to: 2
  5995                           ;src/driver/si5328.c: 469:  si5328_perform_ical(i2c, addr);
  5996  006756  C0AF  F0A4         	movff	si5328_set_freq@i2c,si5328_perform_ical@i2c
  5997  00675A  C0B0  F0A5         	movff	si5328_set_freq@i2c+1,si5328_perform_ical@i2c+1
  5998  00675E  C0B1  F0A6         	movff	si5328_set_freq@addr,si5328_perform_ical@addr
  5999  006762  ECEA  F037         	call	_si5328_perform_ical	;wreg free
  6000  006766  0012               	return		;funcret
  6001  006768                     __end_of_si5328_set_freq:
  6002                           	opt callstack 0
  6003                           
  6004 ;; *************** function _write_regset *****************
  6005 ;; Defined at:
  6006 ;;		line 588 in file "src/driver/si5328.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  i2c             2   36[BANK0 ] PTR struct i2c_dev__
  6009 ;;		 -> g_i2c_bus(8), 
  6010 ;;  addr            1   38[BANK0 ] unsigned char 
  6011 ;;  set             2   39[BANK0 ] PTR const struct .
  6012 ;;		 -> reg_set_LNB_LO(24), reg_set_univ_CKIN2_XAXB(24), reg_set_univ_CKIN1_GPS(26), 
  6013 ;;  len             2   41[BANK0 ] unsigned short 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  errors          2   45[BANK0 ] int 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 3F/0
  6022 ;;		On exit  : 3D/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6025 ;;      Params:         0       7       0       0       0       0       0
  6026 ;;      Locals:         0       2       0       0       0       0       0
  6027 ;;      Temps:          0       2       0       0       0       0       0
  6028 ;;      Totals:         0      11       0       0       0       0       0
  6029 ;;Total ram usage:       11 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:   10
  6032 ;; This function calls:
  6033 ;;		_printf
  6034 ;;		_smbus8_write_byte
  6035 ;; This function is called by:
  6036 ;;		_si5328_init
  6037 ;;		_si5328_set_freq
  6038 ;;		_si5328_checkGPS
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text6
  6043  0059BE                     __ptext6:
  6044                           	opt callstack 0
  6045  0059BE                     _write_regset:
  6046                           	opt callstack 19
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;src/driver/si5328.c: 588: static void write_regset(i2c_dev i2c, u8 addr, const reg_set 
      +                          *set, u16 len);src/driver/si5328.c: 589: {;src/driver/si5328.c: 590:     int errors = 0;
  6050                           
  6051                           ;incstack = 0
  6052  0059BE  0E00               	movlw	0
  6053  0059C0  6FAE               	movwf	(write_regset@errors+1)& (0+255),b
  6054  0059C2  0E00               	movlw	0
  6055  0059C4  6FAD               	movwf	write_regset@errors& (0+255),b
  6056                           
  6057                           ;src/driver/si5328.c: 592:     while(len--) {
  6058  0059C6  D03D               	goto	l10511
  6059  0059C8                     l10505:
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;src/driver/si5328.c: 593:         if (0 != smbus8_write_byte(i2c, addr, set->addr, set-
      +                          >value)) errors++;
  6063  0059C8  C0A4  F055         	movff	write_regset@i2c,smbus8_write_byte@dev
  6064  0059CC  C0A5  F056         	movff	write_regset@i2c+1,smbus8_write_byte@dev+1
  6065  0059D0  C0A6  F057         	movff	write_regset@addr,smbus8_write_byte@addr
  6066  0059D4  C0A7  FFF6         	movff	write_regset@set,tblptrl
  6067  0059D8  C0A8  FFF7         	movff	write_regset@set+1,tblptrh
  6068  0059DC  6AF8               	clrf	tblptru,c
  6069  0059DE  0E05               	movlw	(high __ramtop+-1)
  6070  0059E0  64F7               	cpfsgt	tblptrh,c
  6071  0059E2  D003               	bra	u13067
  6072  0059E4  0008               	tblrd		*
  6073  0059E6  50F5               	movf	tablat,w,c
  6074  0059E8  D005               	bra	u13060
  6075  0059EA                     u13067:
  6076  0059EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  6077  0059EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  6078  0059F2  50EF               	movf	indf0,w,c
  6079  0059F4                     u13060:
  6080  0059F4  6E58               	movwf	smbus8_write_byte@reg^0,c
  6081  0059F6  0E01               	movlw	1
  6082  0059F8  0100               	movlb	0	; () banked
  6083  0059FA  25A7               	addwf	write_regset@set& (0+255),w,b
  6084  0059FC  6FAB               	movwf	??_write_regset& (0+255),b
  6085  0059FE  0E00               	movlw	0
  6086  005A00  21A8               	addwfc	(write_regset@set+1)& (0+255),w,b
  6087  005A02  6FAC               	movwf	(??_write_regset+1)& (0+255),b
  6088  005A04  C0AB  FFF6         	movff	??_write_regset,tblptrl
  6089  005A08  C0AC  FFF7         	movff	??_write_regset+1,tblptrh
  6090  005A0C  6AF8               	clrf	tblptru,c
  6091  005A0E  0E05               	movlw	(high __ramtop+-1)
  6092  005A10  64F7               	cpfsgt	tblptrh,c
  6093  005A12  D003               	bra	u13077
  6094  005A14  0008               	tblrd		*
  6095  005A16  50F5               	movf	tablat,w,c
  6096  005A18  D005               	bra	u13070
  6097  005A1A                     u13077:
  6098  005A1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6099  005A1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6100  005A22  50EF               	movf	indf0,w,c
  6101  005A24                     u13070:
  6102  005A24  6E59               	movwf	smbus8_write_byte@data^0,c
  6103  005A26  EC68  F037         	call	_smbus8_write_byte	;wreg free
  6104  005A2A  5055               	movf	?_smbus8_write_byte^0,w,c
  6105  005A2C  1056               	iorwf	(?_smbus8_write_byte+1)^0,w,c
  6106  005A2E  B4D8               	btfsc	status,2,c
  6107  005A30  D003               	goto	l10509
  6108  005A32  0100               	movlb	0	; () banked
  6109  005A34  4BAD               	infsnz	write_regset@errors& (0+255),f,b
  6110  005A36  2BAE               	incf	(write_regset@errors+1)& (0+255),f,b
  6111  005A38                     l10509:
  6112                           
  6113                           ;src/driver/si5328.c: 594:         set++;
  6114  005A38  0E02               	movlw	2
  6115  005A3A  0100               	movlb	0	; () banked
  6116  005A3C  27A7               	addwf	write_regset@set& (0+255),f,b
  6117  005A3E  0E00               	movlw	0
  6118  005A40  23A8               	addwfc	(write_regset@set+1)& (0+255),f,b
  6119  005A42                     l10511:
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;src/driver/si5328.c: 592:     while(len--) {
  6123  005A42  07A9               	decf	write_regset@len& (0+255),f,b
  6124  005A44  A0D8               	btfss	status,0,c
  6125  005A46  07AA               	decf	(write_regset@len+1)& (0+255),f,b
  6126  005A48  29A9               	incf	write_regset@len& (0+255),w,b
  6127  005A4A  E1BE               	bnz	l10505
  6128  005A4C  29AA               	incf	(write_regset@len+1)& (0+255),w,b
  6129  005A4E  A4D8               	btfss	status,2,c
  6130  005A50  D7BB               	goto	l10505
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;src/driver/si5328.c: 597:   if(errors > 0)
  6134  005A52  BFAE               	btfsc	(write_regset@errors+1)& (0+255),7,b
  6135  005A54  0012               	return	
  6136  005A56  51AE               	movf	(write_regset@errors+1)& (0+255),w,b
  6137  005A58  E103               	bnz	u13100
  6138  005A5A  05AD               	decf	write_regset@errors& (0+255),w,b
  6139  005A5C  A0D8               	btfss	status,0,c
  6140  005A5E  0012               	return	
  6141  005A60                     u13100:
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;src/driver/si5328.c: 598:  {;src/driver/si5328.c: 599:   printf("si:write_regset %i err
      +                          ors.\n", errors);
  6145  005A60  0E53               	movlw	low STR_35
  6146  005A62  6F97               	movwf	printf@fmt& (0+255),b
  6147  005A64  0E7C               	movlw	high STR_35
  6148  005A66  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6149  005A68  C0AD  F099         	movff	write_regset@errors,?_printf+2
  6150  005A6C  C0AE  F09A         	movff	write_regset@errors+1,?_printf+3
  6151  005A70  EC30  F03A         	call	_printf	;wreg free
  6152  005A74  0012               	return		;funcret
  6153  005A76                     __end_of_write_regset:
  6154                           	opt callstack 0
  6155                           
  6156 ;; *************** function _si5328_perform_ical *****************
  6157 ;; Defined at:
  6158 ;;		line 472 in file "src/driver/si5328.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  i2c             2   36[BANK0 ] PTR struct i2c_dev__
  6161 ;;		 -> g_i2c_bus(8), 
  6162 ;;  addr            1   38[BANK0 ] unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;		None
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 3F/2
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6174 ;;      Params:         0       3       0       0       0       0       0
  6175 ;;      Locals:         0       0       0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0
  6177 ;;      Totals:         0       3       0       0       0       0       0
  6178 ;;Total ram usage:        3 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:   10
  6181 ;; This function calls:
  6182 ;;		_printf
  6183 ;;		_smbus8_write_byte
  6184 ;; This function is called by:
  6185 ;;		_si5328_set_freq
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text7
  6190  006FD4                     __ptext7:
  6191                           	opt callstack 0
  6192  006FD4                     _si5328_perform_ical:
  6193                           	opt callstack 17
  6194                           
  6195                           ; BSR set to: 2
  6196                           ;src/driver/si5328.c: 472: static void si5328_perform_ical(i2c_dev i2c, u8 addr);src/dri
      +                          ver/si5328.c: 473: {;src/driver/si5328.c: 474:  printf("si:ical\n");
  6197                           
  6198                           ;incstack = 0
  6199  006FD4  0E69               	movlw	low STR_29
  6200  006FD6  0100               	movlb	0	; () banked
  6201  006FD8  6F97               	movwf	printf@fmt& (0+255),b
  6202  006FDA  0E7F               	movlw	high STR_29
  6203  006FDC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6204  006FDE  EC30  F03A         	call	_printf	;wreg free
  6205                           
  6206                           ; BSR set to: 2
  6207                           ;src/driver/si5328.c: 475:  if (smbus8_write_byte(i2c, addr, 136, 0x40) != 0)
  6208  006FE2  C0A4  F055         	movff	si5328_perform_ical@i2c,smbus8_write_byte@dev
  6209  006FE6  C0A5  F056         	movff	si5328_perform_ical@i2c+1,smbus8_write_byte@dev+1
  6210  006FEA  C0A6  F057         	movff	si5328_perform_ical@addr,smbus8_write_byte@addr
  6211  006FEE  0E88               	movlw	136
  6212  006FF0  6E58               	movwf	smbus8_write_byte@reg^0,c
  6213  006FF2  0E40               	movlw	64
  6214  006FF4  6E59               	movwf	smbus8_write_byte@data^0,c
  6215  006FF6  EC68  F037         	call	_smbus8_write_byte	;wreg free
  6216  006FFA  5055               	movf	?_smbus8_write_byte^0,w,c
  6217  006FFC  1056               	iorwf	(?_smbus8_write_byte+1)^0,w,c
  6218  006FFE  B4D8               	btfsc	status,2,c
  6219  007000  0012               	return	
  6220                           
  6221                           ;src/driver/si5328.c: 476:  {;src/driver/si5328.c: 477:   printf("si:I2C fail\n");
  6222  007002  0E18               	movlw	low STR_30
  6223  007004  0100               	movlb	0	; () banked
  6224  007006  6F97               	movwf	printf@fmt& (0+255),b
  6225  007008  0E7F               	movlw	high STR_30
  6226  00700A  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6227  00700C  EC30  F03A         	call	_printf	;wreg free
  6228  007010  0012               	return		;funcret
  6229  007012                     __end_of_si5328_perform_ical:
  6230                           	opt callstack 0
  6231                           
  6232 ;; *************** function _set_reg27 *****************
  6233 ;; Defined at:
  6234 ;;		line 404 in file "src/driver/si5328.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 3F/0
  6245 ;;		On exit  : 3F/2
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6248 ;;      Params:         0       0       0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0
  6251 ;;      Totals:         0       0       0       0       0       0       0
  6252 ;;Total ram usage:        0 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    3
  6255 ;; This function calls:
  6256 ;;		_set_reg
  6257 ;; This function is called by:
  6258 ;;		_si5328_set_freq
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text8
  6263  006F54                     __ptext8:
  6264                           	opt callstack 0
  6265  006F54                     _set_reg27:
  6266                           	opt callstack 24
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;src/driver/si5328.c: 406:  N31_reg4445 = 133;
  6270                           
  6271                           ;incstack = 0
  6272  006F54  0E00               	movlw	0
  6273  006F56  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6274  006F58  0E85               	movlw	133
  6275  006F5A  6FDA               	movwf	_N31_reg4445& (0+255),b
  6276                           
  6277                           ;src/driver/si5328.c: 407:  N2HS_reg40 = 8;
  6278  006F5C  0E00               	movlw	0
  6279  006F5E  0102               	movlb	2	; () banked
  6280  006F60  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6281  006F62  0E08               	movlw	8
  6282  006F64  6F16               	movwf	_N2HS_reg40& (0+255),b
  6283                           
  6284                           ;src/driver/si5328.c: 408:  N2L_reg4142 = 4760;
  6285  006F66  0E12               	movlw	18
  6286  006F68  0101               	movlb	1	; () banked
  6287  006F6A  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6288  006F6C  0E98               	movlw	152
  6289  006F6E  6FFE               	movwf	_N2L_reg4142& (0+255),b
  6290                           
  6291                           ;src/driver/si5328.c: 409:  N1HS_reg25 = 4;
  6292  006F70  0E00               	movlw	0
  6293  006F72  0102               	movlb	2	; () banked
  6294  006F74  6F15               	movwf	(_N1HS_reg25+1)& (0+255),b
  6295  006F76  0E04               	movlw	4
  6296  006F78  6F14               	movwf	_N1HS_reg25& (0+255),b
  6297                           
  6298                           ;src/driver/si5328.c: 410:  NC1_LS_reg3233 = 50;
  6299  006F7A  0E00               	movlw	0
  6300  006F7C  0101               	movlb	1	; () banked
  6301  006F7E  6FFD               	movwf	(_NC1_LS_reg3233+1)& (0+255),b
  6302  006F80  0E32               	movlw	50
  6303  006F82  6FFC               	movwf	_NC1_LS_reg3233& (0+255),b
  6304                           
  6305                           ;src/driver/si5328.c: 411:  NC2_LS_reg3536 = 34;
  6306  006F84  0E00               	movlw	0
  6307  006F86  0102               	movlb	2	; () banked
  6308  006F88  6F13               	movwf	(_NC2_LS_reg3536+1)& (0+255),b
  6309  006F8A  0E22               	movlw	34
  6310  006F8C  6F12               	movwf	_NC2_LS_reg3536& (0+255),b
  6311                           
  6312                           ; BSR set to: 2
  6313                           ;src/driver/si5328.c: 413:  set_reg();
  6314  006F8E  ECAC  F01F         	call	_set_reg	;wreg free
  6315                           
  6316                           ; BSR set to: 2
  6317  006F92  0012               	return		;funcret
  6318  006F94                     __end_of_set_reg27:
  6319                           	opt callstack 0
  6320                           
  6321 ;; *************** function _set_reg26 *****************
  6322 ;; Defined at:
  6323 ;;		line 350 in file "src/driver/si5328.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;		None
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      void 
  6330 ;; Registers used:
  6331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 3F/0
  6334 ;;		On exit  : 3F/2
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6337 ;;      Params:         0       0       0       0       0       0       0
  6338 ;;      Locals:         0       0       0       0       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0
  6340 ;;      Totals:         0       0       0       0       0       0       0
  6341 ;;Total ram usage:        0 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:   10
  6344 ;; This function calls:
  6345 ;;		_printf
  6346 ;;		_set_reg
  6347 ;; This function is called by:
  6348 ;;		_si5328_set_freq
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text9
  6353  00534A                     __ptext9:
  6354                           	opt callstack 0
  6355  00534A                     _set_reg26:
  6356                           	opt callstack 17
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;src/driver/si5328.c: 352:  if(ext10MHzReference == 0)
  6360                           
  6361                           ; BSR set to: 2
  6362                           ;incstack = 0
  6363  00534A  51D7               	movf	_ext10MHzReference& (0+255),w,b
  6364  00534C  A4D8               	btfss	status,2,c
  6365  00534E  D004               	goto	l10445
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;src/driver/si5328.c: 353:   N31_reg4445 = 19;
  6369  005350  0E00               	movlw	0
  6370  005352  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6371  005354  0E13               	movlw	19
  6372  005356  D003               	goto	L1
  6373  005358                     l10445:
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;src/driver/si5328.c: 355:   N31_reg4445 =10;
  6377  005358  0E00               	movlw	0
  6378  00535A  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6379  00535C  0E0A               	movlw	10
  6380  00535E                     L1:
  6381  00535E  6FDA               	movwf	_N31_reg4445& (0+255),b
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;src/driver/si5328.c: 357:  if(ext10MHzReference == 1)
  6385  005360  05D7               	decf	_ext10MHzReference& (0+255),w,b
  6386  005362  A4D8               	btfss	status,2,c
  6387  005364  D00F               	goto	l10455
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;src/driver/si5328.c: 358:  {;src/driver/si5328.c: 360:   printf("si:ext. 10 MHz\n");
  6391  005366  0EA5               	movlw	low STR_15
  6392  005368  6F97               	movwf	printf@fmt& (0+255),b
  6393  00536A  0E7E               	movlw	high STR_15
  6394  00536C  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6395  00536E  EC30  F03A         	call	_printf	;wreg free
  6396  005372                     l10451:
  6397                           
  6398                           ; BSR set to: 2
  6399                           ;src/driver/si5328.c: 361:   N2HS_reg40 = 5;
  6400  005372  0E00               	movlw	0
  6401  005374  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6402  005376  0E05               	movlw	5
  6403  005378  6F16               	movwf	_N2HS_reg40& (0+255),b
  6404                           
  6405                           ; BSR set to: 2
  6406                           ;src/driver/si5328.c: 362:   N2L_reg4142 = 1040;
  6407  00537A  0E04               	movlw	4
  6408  00537C  0101               	movlb	1	; () banked
  6409  00537E  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6410  005380  0E10               	movlw	16
  6411  005382  D018               	goto	L2
  6412  005384                     l10455:
  6413                           
  6414                           ; BSR set to: 0
  6415  005384  046F               	decf	_tcxo_no_GPS^0,w,c
  6416  005386  A4D8               	btfss	status,2,c
  6417  005388  D017               	goto	l10467
  6418                           
  6419                           ; BSR set to: 0
  6420  00538A  506E               	movf	_ubx_ack^0,w,c
  6421  00538C  A4D8               	btfss	status,2,c
  6422  00538E  D014               	goto	l10467
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;src/driver/si5328.c: 365:  {;src/driver/si5328.c: 367:   printf("si:TCXO 38,4 MHz\n");
  6426  005390  0E51               	movlw	low STR_11
  6427  005392  6F97               	movwf	printf@fmt& (0+255),b
  6428  005394  0E7D               	movlw	high STR_11
  6429  005396  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6430  005398  EC30  F03A         	call	_printf	;wreg free
  6431  00539C                     l10461:
  6432                           
  6433                           ; BSR set to: 2
  6434                           ;src/driver/si5328.c: 368:   N32_reg4748 = 24;
  6435  00539C  0E00               	movlw	0
  6436  00539E  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6437  0053A0  0E18               	movlw	24
  6438  0053A2  6F18               	movwf	_N32_reg4748& (0+255),b
  6439                           
  6440                           ; BSR set to: 2
  6441                           ;src/driver/si5328.c: 369:   N2HS_reg40 = 5;
  6442  0053A4  0E00               	movlw	0
  6443  0053A6  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6444  0053A8  0E05               	movlw	5
  6445  0053AA  6F16               	movwf	_N2HS_reg40& (0+255),b
  6446                           
  6447                           ; BSR set to: 2
  6448                           ;src/driver/si5328.c: 370:   N2L_reg4142 = 650;
  6449  0053AC  0E02               	movlw	2
  6450  0053AE  0101               	movlb	1	; () banked
  6451  0053B0  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6452  0053B2  0E8A               	movlw	138
  6453  0053B4                     L2:
  6454  0053B4  6FFE               	movwf	_N2L_reg4142& (0+255),b
  6455                           
  6456                           ;src/driver/si5328.c: 371:  }
  6457  0053B6  D022               	goto	l10495
  6458  0053B8                     l10467:
  6459                           
  6460                           ; BSR set to: 0
  6461  0053B8  506E               	movf	_ubx_ack^0,w,c
  6462  0053BA  B4D8               	btfsc	status,2,c
  6463  0053BC  D003               	goto	u13040
  6464                           
  6465                           ; BSR set to: 0
  6466  0053BE  51E8               	movf	_use_GPS& (0+255),w,b
  6467  0053C0  A4D8               	btfss	status,2,c
  6468  0053C2  D00B               	goto	l10479
  6469  0053C4                     u13040:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;src/driver/si5328.c: 373:  {;src/driver/si5328.c: 376:   printf("si:40 MHz OCXO\n");
  6473  0053C4  0E95               	movlw	low STR_12
  6474  0053C6  6F97               	movwf	printf@fmt& (0+255),b
  6475  0053C8  0E7E               	movlw	high STR_12
  6476  0053CA  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6477  0053CC  EC30  F03A         	call	_printf	;wreg free
  6478                           
  6479                           ; BSR set to: 2
  6480                           ;src/driver/si5328.c: 377:   N32_reg4748 = 40;
  6481  0053D0  0E00               	movlw	0
  6482  0053D2  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6483  0053D4  0E28               	movlw	40
  6484  0053D6  6F18               	movwf	_N32_reg4748& (0+255),b
  6485  0053D8  D7CC               	goto	l10451
  6486  0053DA                     l10479:
  6487                           
  6488                           ; BSR set to: 0
  6489  0053DA  51D8               	movf	_GPS_lock& (0+255),w,b
  6490  0053DC  A4D8               	btfss	status,2,c
  6491  0053DE  D007               	goto	l10489
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;src/driver/si5328.c: 382:  {;src/driver/si5328.c: 384:   printf("si:GPS unlocked, TCXO 
      +                          38,4 MHz\n");
  6495  0053E0  0EF4               	movlw	low STR_18
  6496  0053E2  6F97               	movwf	printf@fmt& (0+255),b
  6497  0053E4  0E7B               	movlw	high STR_18
  6498  0053E6  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6499  0053E8  EC30  F03A         	call	_printf	;wreg free
  6500  0053EC  D7D7               	goto	l10461
  6501  0053EE                     l10489:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;src/driver/si5328.c: 390:  {;src/driver/si5328.c: 392:   printf("si:GPS locked\n");
  6505  0053EE  0ED3               	movlw	low STR_14
  6506  0053F0  6F97               	movwf	printf@fmt& (0+255),b
  6507  0053F2  0E7E               	movlw	high STR_14
  6508  0053F4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6509  0053F6  EC30  F03A         	call	_printf	;wreg free
  6510  0053FA  D7BB               	goto	l10451
  6511  0053FC                     l10495:
  6512                           
  6513                           ; BSR set to: 1
  6514                           ;src/driver/si5328.c: 397:  N1HS_reg25 = 5;
  6515  0053FC  0E00               	movlw	0
  6516  0053FE  0102               	movlb	2	; () banked
  6517  005400  6F15               	movwf	(_N1HS_reg25+1)& (0+255),b
  6518  005402  0E05               	movlw	5
  6519  005404  6F14               	movwf	_N1HS_reg25& (0+255),b
  6520                           
  6521                           ; BSR set to: 2
  6522                           ;src/driver/si5328.c: 398:  NC1_LS_reg3233 = 40;
  6523  005406  0E00               	movlw	0
  6524  005408  0101               	movlb	1	; () banked
  6525  00540A  6FFD               	movwf	(_NC1_LS_reg3233+1)& (0+255),b
  6526  00540C  0E28               	movlw	40
  6527  00540E  6FFC               	movwf	_NC1_LS_reg3233& (0+255),b
  6528                           
  6529                           ; BSR set to: 1
  6530                           ;src/driver/si5328.c: 399:  NC2_LS_reg3536 = 26;
  6531  005410  0E00               	movlw	0
  6532  005412  0102               	movlb	2	; () banked
  6533  005414  6F13               	movwf	(_NC2_LS_reg3536+1)& (0+255),b
  6534  005416  0E1A               	movlw	26
  6535  005418  6F12               	movwf	_NC2_LS_reg3536& (0+255),b
  6536                           
  6537                           ; BSR set to: 2
  6538                           ;src/driver/si5328.c: 401:  set_reg();
  6539  00541A  ECAC  F01F         	call	_set_reg	;wreg free
  6540                           
  6541                           ; BSR set to: 2
  6542  00541E  0012               	return		;funcret
  6543  005420                     __end_of_set_reg26:
  6544                           	opt callstack 0
  6545                           
  6546 ;; *************** function _set_reg25 *****************
  6547 ;; Defined at:
  6548 ;;		line 296 in file "src/driver/si5328.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;		None
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 3F/0
  6559 ;;		On exit  : 3F/2
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       0       0       0       0       0
  6563 ;;      Locals:         0       0       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0
  6565 ;;      Totals:         0       0       0       0       0       0       0
  6566 ;;Total ram usage:        0 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:   10
  6569 ;; This function calls:
  6570 ;;		_printf
  6571 ;;		_set_reg
  6572 ;; This function is called by:
  6573 ;;		_si5328_set_freq
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text10
  6578  005420                     __ptext10:
  6579                           	opt callstack 0
  6580  005420                     _set_reg25:
  6581                           	opt callstack 17
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;src/driver/si5328.c: 298:  if(ext10MHzReference == 0)
  6585                           
  6586                           ; BSR set to: 2
  6587                           ;incstack = 0
  6588  005420  51D7               	movf	_ext10MHzReference& (0+255),w,b
  6589  005422  A4D8               	btfss	status,2,c
  6590  005424  D004               	goto	l10383
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;src/driver/si5328.c: 299:   N31_reg4445 = 19;
  6594  005426  0E00               	movlw	0
  6595  005428  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6596  00542A  0E13               	movlw	19
  6597  00542C  D003               	goto	L3
  6598  00542E                     l10383:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;src/driver/si5328.c: 301:   N31_reg4445 =10;
  6602  00542E  0E00               	movlw	0
  6603  005430  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6604  005432  0E0A               	movlw	10
  6605  005434                     L3:
  6606  005434  6FDA               	movwf	_N31_reg4445& (0+255),b
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;src/driver/si5328.c: 303:  if(ext10MHzReference == 1)
  6610  005436  05D7               	decf	_ext10MHzReference& (0+255),w,b
  6611  005438  A4D8               	btfss	status,2,c
  6612  00543A  D00F               	goto	l10393
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;src/driver/si5328.c: 304:  {;src/driver/si5328.c: 306:   printf("si:ext. 10 MHz\n");
  6616  00543C  0EA5               	movlw	low STR_15
  6617  00543E  6F97               	movwf	printf@fmt& (0+255),b
  6618  005440  0E7E               	movlw	high STR_15
  6619  005442  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6620  005444  EC30  F03A         	call	_printf	;wreg free
  6621  005448                     l10389:
  6622                           
  6623                           ; BSR set to: 2
  6624                           ;src/driver/si5328.c: 307:   N2HS_reg40 = 5;
  6625  005448  0E00               	movlw	0
  6626  00544A  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6627  00544C  0E05               	movlw	5
  6628  00544E  6F16               	movwf	_N2HS_reg40& (0+255),b
  6629                           
  6630                           ; BSR set to: 2
  6631                           ;src/driver/si5328.c: 308:   N2L_reg4142 = 1120;
  6632  005450  0E04               	movlw	4
  6633  005452  0101               	movlb	1	; () banked
  6634  005454  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6635  005456  0E60               	movlw	96
  6636  005458  D018               	goto	L4
  6637  00545A                     l10393:
  6638                           
  6639                           ; BSR set to: 0
  6640  00545A  046F               	decf	_tcxo_no_GPS^0,w,c
  6641  00545C  A4D8               	btfss	status,2,c
  6642  00545E  D017               	goto	l10405
  6643                           
  6644                           ; BSR set to: 0
  6645  005460  506E               	movf	_ubx_ack^0,w,c
  6646  005462  A4D8               	btfss	status,2,c
  6647  005464  D014               	goto	l10405
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;src/driver/si5328.c: 311:  {;src/driver/si5328.c: 313:   printf("si:TCXO 38,4 MHz\n");
  6651  005466  0E51               	movlw	low STR_11
  6652  005468  6F97               	movwf	printf@fmt& (0+255),b
  6653  00546A  0E7D               	movlw	high STR_11
  6654  00546C  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6655  00546E  EC30  F03A         	call	_printf	;wreg free
  6656  005472                     l10399:
  6657                           
  6658                           ; BSR set to: 2
  6659                           ;src/driver/si5328.c: 314:   N32_reg4748 = 24;
  6660  005472  0E00               	movlw	0
  6661  005474  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6662  005476  0E18               	movlw	24
  6663  005478  6F18               	movwf	_N32_reg4748& (0+255),b
  6664                           
  6665                           ; BSR set to: 2
  6666                           ;src/driver/si5328.c: 315:   N2HS_reg40 = 5;
  6667  00547A  0E00               	movlw	0
  6668  00547C  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6669  00547E  0E05               	movlw	5
  6670  005480  6F16               	movwf	_N2HS_reg40& (0+255),b
  6671                           
  6672                           ; BSR set to: 2
  6673                           ;src/driver/si5328.c: 316:   N2L_reg4142 = 700;
  6674  005482  0E02               	movlw	2
  6675  005484  0101               	movlb	1	; () banked
  6676  005486  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6677  005488  0EBC               	movlw	188
  6678  00548A                     L4:
  6679  00548A  6FFE               	movwf	_N2L_reg4142& (0+255),b
  6680                           
  6681                           ;src/driver/si5328.c: 317:  }
  6682  00548C  D022               	goto	l10433
  6683  00548E                     l10405:
  6684                           
  6685                           ; BSR set to: 0
  6686  00548E  506E               	movf	_ubx_ack^0,w,c
  6687  005490  B4D8               	btfsc	status,2,c
  6688  005492  D003               	goto	u12970
  6689                           
  6690                           ; BSR set to: 0
  6691  005494  51E8               	movf	_use_GPS& (0+255),w,b
  6692  005496  A4D8               	btfss	status,2,c
  6693  005498  D00B               	goto	l10417
  6694  00549A                     u12970:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;src/driver/si5328.c: 319:  {;src/driver/si5328.c: 322:   printf("si:40 MHz OCXO\n");
  6698  00549A  0E95               	movlw	low STR_12
  6699  00549C  6F97               	movwf	printf@fmt& (0+255),b
  6700  00549E  0E7E               	movlw	high STR_12
  6701  0054A0  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6702  0054A2  EC30  F03A         	call	_printf	;wreg free
  6703                           
  6704                           ; BSR set to: 2
  6705                           ;src/driver/si5328.c: 323:   N32_reg4748 = 40;
  6706  0054A6  0E00               	movlw	0
  6707  0054A8  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6708  0054AA  0E28               	movlw	40
  6709  0054AC  6F18               	movwf	_N32_reg4748& (0+255),b
  6710  0054AE  D7CC               	goto	l10389
  6711  0054B0                     l10417:
  6712                           
  6713                           ; BSR set to: 0
  6714  0054B0  51D8               	movf	_GPS_lock& (0+255),w,b
  6715  0054B2  A4D8               	btfss	status,2,c
  6716  0054B4  D007               	goto	l10427
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;src/driver/si5328.c: 328:  {;src/driver/si5328.c: 330:   printf("si:GPS unlocked, TCXO 
      +                          38,4 MHz\n");
  6720  0054B6  0EF4               	movlw	low STR_18
  6721  0054B8  6F97               	movwf	printf@fmt& (0+255),b
  6722  0054BA  0E7B               	movlw	high STR_18
  6723  0054BC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6724  0054BE  EC30  F03A         	call	_printf	;wreg free
  6725  0054C2  D7D7               	goto	l10399
  6726  0054C4                     l10427:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;src/driver/si5328.c: 336:  {;src/driver/si5328.c: 338:   printf("si:GPS locked\n");
  6730  0054C4  0ED3               	movlw	low STR_14
  6731  0054C6  6F97               	movwf	printf@fmt& (0+255),b
  6732  0054C8  0E7E               	movlw	high STR_14
  6733  0054CA  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6734  0054CC  EC30  F03A         	call	_printf	;wreg free
  6735  0054D0  D7BB               	goto	l10389
  6736  0054D2                     l10433:
  6737                           
  6738                           ; BSR set to: 1
  6739                           ;src/driver/si5328.c: 343:  N1HS_reg25 = 7;
  6740  0054D2  0E00               	movlw	0
  6741  0054D4  0102               	movlb	2	; () banked
  6742  0054D6  6F15               	movwf	(_N1HS_reg25+1)& (0+255),b
  6743  0054D8  0E07               	movlw	7
  6744  0054DA  6F14               	movwf	_N1HS_reg25& (0+255),b
  6745                           
  6746                           ; BSR set to: 2
  6747                           ;src/driver/si5328.c: 344:  NC1_LS_reg3233 = 32;
  6748  0054DC  0E00               	movlw	0
  6749  0054DE  0101               	movlb	1	; () banked
  6750  0054E0  6FFD               	movwf	(_NC1_LS_reg3233+1)& (0+255),b
  6751  0054E2  0E20               	movlw	32
  6752  0054E4  6FFC               	movwf	_NC1_LS_reg3233& (0+255),b
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;src/driver/si5328.c: 345:  NC2_LS_reg3536 = 20;
  6756  0054E6  0E00               	movlw	0
  6757  0054E8  0102               	movlb	2	; () banked
  6758  0054EA  6F13               	movwf	(_NC2_LS_reg3536+1)& (0+255),b
  6759  0054EC  0E14               	movlw	20
  6760  0054EE  6F12               	movwf	_NC2_LS_reg3536& (0+255),b
  6761                           
  6762                           ; BSR set to: 2
  6763                           ;src/driver/si5328.c: 347:  set_reg();
  6764  0054F0  ECAC  F01F         	call	_set_reg	;wreg free
  6765                           
  6766                           ; BSR set to: 2
  6767  0054F4  0012               	return		;funcret
  6768  0054F6                     __end_of_set_reg25:
  6769                           	opt callstack 0
  6770                           
  6771 ;; *************** function _set_reg24 *****************
  6772 ;; Defined at:
  6773 ;;		line 242 in file "src/driver/si5328.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 3F/0
  6784 ;;		On exit  : 3F/2
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:   10
  6794 ;; This function calls:
  6795 ;;		_printf
  6796 ;;		_set_reg
  6797 ;; This function is called by:
  6798 ;;		_si5328_set_freq
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text11
  6803  0054F6                     __ptext11:
  6804                           	opt callstack 0
  6805  0054F6                     _set_reg24:
  6806                           	opt callstack 17
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;src/driver/si5328.c: 244:  if(ext10MHzReference == 0)
  6810                           
  6811                           ; BSR set to: 2
  6812                           ;incstack = 0
  6813  0054F6  51D7               	movf	_ext10MHzReference& (0+255),w,b
  6814  0054F8  A4D8               	btfss	status,2,c
  6815  0054FA  D004               	goto	l10321
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;src/driver/si5328.c: 245:   N31_reg4445 = 19;
  6819  0054FC  0E00               	movlw	0
  6820  0054FE  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6821  005500  0E13               	movlw	19
  6822  005502  D003               	goto	L5
  6823  005504                     l10321:
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;src/driver/si5328.c: 247:   N31_reg4445 =10;
  6827  005504  0E00               	movlw	0
  6828  005506  6FDB               	movwf	(_N31_reg4445+1)& (0+255),b
  6829  005508  0E0A               	movlw	10
  6830  00550A                     L5:
  6831  00550A  6FDA               	movwf	_N31_reg4445& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;src/driver/si5328.c: 249:  if(ext10MHzReference == 1)
  6835  00550C  05D7               	decf	_ext10MHzReference& (0+255),w,b
  6836  00550E  A4D8               	btfss	status,2,c
  6837  005510  D00F               	goto	l10331
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;src/driver/si5328.c: 250:  {;src/driver/si5328.c: 252:   printf("si:ext. 10 MHz ref\n")
      +                          ;
  6841  005512  0E03               	movlw	low STR_10
  6842  005514  6F97               	movwf	printf@fmt& (0+255),b
  6843  005516  0E7D               	movlw	high STR_10
  6844  005518  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6845  00551A  EC30  F03A         	call	_printf	;wreg free
  6846  00551E                     l10327:
  6847                           
  6848                           ; BSR set to: 2
  6849                           ;src/driver/si5328.c: 253:   N2HS_reg40 = 10;
  6850  00551E  0E00               	movlw	0
  6851  005520  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6852  005522  0E0A               	movlw	10
  6853  005524  6F16               	movwf	_N2HS_reg40& (0+255),b
  6854                           
  6855                           ; BSR set to: 2
  6856                           ;src/driver/si5328.c: 254:   N2L_reg4142 = 528;
  6857  005526  0E02               	movlw	2
  6858  005528  0101               	movlb	1	; () banked
  6859  00552A  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6860  00552C  0E10               	movlw	16
  6861  00552E  D018               	goto	L6
  6862  005530                     l10331:
  6863                           
  6864                           ; BSR set to: 0
  6865  005530  046F               	decf	_tcxo_no_GPS^0,w,c
  6866  005532  A4D8               	btfss	status,2,c
  6867  005534  D017               	goto	l10343
  6868                           
  6869                           ; BSR set to: 0
  6870  005536  506E               	movf	_ubx_ack^0,w,c
  6871  005538  A4D8               	btfss	status,2,c
  6872  00553A  D014               	goto	l10343
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;src/driver/si5328.c: 257:  {;src/driver/si5328.c: 259:   printf("si:TCXO 38,4 MHz\n");
  6876  00553C  0E51               	movlw	low STR_11
  6877  00553E  6F97               	movwf	printf@fmt& (0+255),b
  6878  005540  0E7D               	movlw	high STR_11
  6879  005542  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6880  005544  EC30  F03A         	call	_printf	;wreg free
  6881  005548                     l10337:
  6882                           
  6883                           ; BSR set to: 2
  6884                           ;src/driver/si5328.c: 260:   N32_reg4748 = 20;
  6885  005548  0E00               	movlw	0
  6886  00554A  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6887  00554C  0E14               	movlw	20
  6888  00554E  6F18               	movwf	_N32_reg4748& (0+255),b
  6889                           
  6890                           ; BSR set to: 2
  6891                           ;src/driver/si5328.c: 261:   N2HS_reg40 = 5;
  6892  005550  0E00               	movlw	0
  6893  005552  6F17               	movwf	(_N2HS_reg40+1)& (0+255),b
  6894  005554  0E05               	movlw	5
  6895  005556  6F16               	movwf	_N2HS_reg40& (0+255),b
  6896                           
  6897                           ; BSR set to: 2
  6898                           ;src/driver/si5328.c: 262:   N2L_reg4142 = 550;
  6899  005558  0E02               	movlw	2
  6900  00555A  0101               	movlb	1	; () banked
  6901  00555C  6FFF               	movwf	(_N2L_reg4142+1)& (0+255),b
  6902  00555E  0E26               	movlw	38
  6903  005560                     L6:
  6904  005560  6FFE               	movwf	_N2L_reg4142& (0+255),b
  6905                           
  6906                           ;src/driver/si5328.c: 263:  }
  6907  005562  D022               	goto	l10371
  6908  005564                     l10343:
  6909                           
  6910                           ; BSR set to: 0
  6911  005564  506E               	movf	_ubx_ack^0,w,c
  6912  005566  B4D8               	btfsc	status,2,c
  6913  005568  D003               	goto	u12900
  6914                           
  6915                           ; BSR set to: 0
  6916  00556A  51E8               	movf	_use_GPS& (0+255),w,b
  6917  00556C  A4D8               	btfss	status,2,c
  6918  00556E  D00B               	goto	l10355
  6919  005570                     u12900:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;src/driver/si5328.c: 265:  {;src/driver/si5328.c: 268:   printf("si:40 MHz OCXO\n");
  6923  005570  0E95               	movlw	low STR_12
  6924  005572  6F97               	movwf	printf@fmt& (0+255),b
  6925  005574  0E7E               	movlw	high STR_12
  6926  005576  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6927  005578  EC30  F03A         	call	_printf	;wreg free
  6928                           
  6929                           ; BSR set to: 2
  6930                           ;src/driver/si5328.c: 269:   N32_reg4748 = 40;
  6931  00557C  0E00               	movlw	0
  6932  00557E  6F19               	movwf	(_N32_reg4748+1)& (0+255),b
  6933  005580  0E28               	movlw	40
  6934  005582  6F18               	movwf	_N32_reg4748& (0+255),b
  6935  005584  D7CC               	goto	l10327
  6936  005586                     l10355:
  6937                           
  6938                           ; BSR set to: 0
  6939  005586  51D8               	movf	_GPS_lock& (0+255),w,b
  6940  005588  A4D8               	btfss	status,2,c
  6941  00558A  D007               	goto	l10365
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;src/driver/si5328.c: 274:  {;src/driver/si5328.c: 276:   printf("si:GPS unlocked: TCXO 
      +                          38,4 MHz\n");
  6945  00558C  0E14               	movlw	low STR_13
  6946  00558E  6F97               	movwf	printf@fmt& (0+255),b
  6947  005590  0E7C               	movlw	high STR_13
  6948  005592  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6949  005594  EC30  F03A         	call	_printf	;wreg free
  6950  005598  D7D7               	goto	l10337
  6951  00559A                     l10365:
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;src/driver/si5328.c: 282:  {;src/driver/si5328.c: 284:   printf("si:GPS locked\n");
  6955  00559A  0ED3               	movlw	low STR_14
  6956  00559C  6F97               	movwf	printf@fmt& (0+255),b
  6957  00559E  0E7E               	movlw	high STR_14
  6958  0055A0  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6959  0055A2  EC30  F03A         	call	_printf	;wreg free
  6960  0055A6  D7BB               	goto	l10327
  6961  0055A8                     l10371:
  6962                           
  6963                           ; BSR set to: 1
  6964                           ;src/driver/si5328.c: 289:  N1HS_reg25 = 11;
  6965  0055A8  0E00               	movlw	0
  6966  0055AA  0102               	movlb	2	; () banked
  6967  0055AC  6F15               	movwf	(_N1HS_reg25+1)& (0+255),b
  6968  0055AE  0E0B               	movlw	11
  6969  0055B0  6F14               	movwf	_N1HS_reg25& (0+255),b
  6970                           
  6971                           ; BSR set to: 2
  6972                           ;src/driver/si5328.c: 290:  NC1_LS_reg3233 = 20;
  6973  0055B2  0E00               	movlw	0
  6974  0055B4  0101               	movlb	1	; () banked
  6975  0055B6  6FFD               	movwf	(_NC1_LS_reg3233+1)& (0+255),b
  6976  0055B8  0E14               	movlw	20
  6977  0055BA  6FFC               	movwf	_NC1_LS_reg3233& (0+255),b
  6978                           
  6979                           ; BSR set to: 1
  6980                           ;src/driver/si5328.c: 291:  NC2_LS_reg3536 = 12;
  6981  0055BC  0E00               	movlw	0
  6982  0055BE  0102               	movlb	2	; () banked
  6983  0055C0  6F13               	movwf	(_NC2_LS_reg3536+1)& (0+255),b
  6984  0055C2  0E0C               	movlw	12
  6985  0055C4  6F12               	movwf	_NC2_LS_reg3536& (0+255),b
  6986                           
  6987                           ; BSR set to: 2
  6988                           ;src/driver/si5328.c: 293:  set_reg();
  6989  0055C6  ECAC  F01F         	call	_set_reg	;wreg free
  6990                           
  6991                           ; BSR set to: 2
  6992  0055CA  0012               	return		;funcret
  6993  0055CC                     __end_of_set_reg24:
  6994                           	opt callstack 0
  6995                           
  6996 ;; *************** function _set_reg *****************
  6997 ;; Defined at:
  6998 ;;		line 211 in file "src/driver/si5328.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  p               2   17[COMRAM] PTR unsigned char 
  7003 ;;		 -> reg_set_LNB_LO(24), 
  7004 ;;  idx             1   19[COMRAM] unsigned char 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7009 ;; Tracked objects:
  7010 ;;		On entry : 3F/2
  7011 ;;		On exit  : 3F/2
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7014 ;;      Params:         0       0       0       0       0       0       0
  7015 ;;      Locals:         3       0       0       0       0       0       0
  7016 ;;      Temps:          4       0       0       0       0       0       0
  7017 ;;      Totals:         7       0       0       0       0       0       0
  7018 ;;Total ram usage:        7 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    2
  7021 ;; This function calls:
  7022 ;;		Nothing
  7023 ;; This function is called by:
  7024 ;;		_set_reg24
  7025 ;;		_set_reg25
  7026 ;;		_set_reg26
  7027 ;;		_set_reg27
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text12
  7032  003F58                     __ptext12:
  7033                           	opt callstack 0
  7034  003F58                     _set_reg:
  7035                           	opt callstack 24
  7036                           
  7037                           ; BSR set to: 2
  7038                           ;src/driver/si5328.c: 213:  u8 idx = 1;
  7039                           
  7040                           ; BSR set to: 2
  7041                           ;incstack = 0
  7042  003F58  0E01               	movlw	1
  7043  003F5A  6E14               	movwf	set_reg@idx^0,c
  7044                           
  7045                           ; BSR set to: 2
  7046                           ;src/driver/si5328.c: 214:  u8 *p = (u8 *)reg_set_LNB_LO;
  7047  003F5C  0E3A               	movlw	low _reg_set_LNB_LO
  7048  003F5E  6E12               	movwf	set_reg@p^0,c
  7049  003F60  0E02               	movlw	high _reg_set_LNB_LO
  7050  003F62  6E13               	movwf	(set_reg@p+1)^0,c
  7051                           
  7052                           ; BSR set to: 2
  7053                           ;src/driver/si5328.c: 216:  p[idx] = ((((N31_reg4445 - 1) >> 8)));
  7054  003F64  EE20 F001          	lfsr	2,1
  7055  003F68  5012               	movf	set_reg@p^0,w,c
  7056  003F6A  26D9               	addwf	fsr2l,f,c
  7057  003F6C  5013               	movf	(set_reg@p+1)^0,w,c
  7058  003F6E  22DA               	addwfc	fsr2h,f,c
  7059  003F70  0EFF               	movlw	255
  7060  003F72  6E0E               	movwf	??_set_reg^0,c
  7061  003F74  0EFF               	movlw	255
  7062  003F76  6E0F               	movwf	(??_set_reg+1)^0,c
  7063  003F78  C0DA  F010         	movff	_N31_reg4445,??_set_reg+2
  7064  003F7C  C0DB  F011         	movff	_N31_reg4445+1,??_set_reg+3
  7065  003F80  500E               	movf	??_set_reg^0,w,c
  7066  003F82  2610               	addwf	(??_set_reg+2)^0,f,c
  7067  003F84  500F               	movf	(??_set_reg+1)^0,w,c
  7068  003F86  2211               	addwfc	(??_set_reg+3)^0,f,c
  7069  003F88  C011  F010         	movff	??_set_reg+3,??_set_reg+2
  7070  003F8C  6A11               	clrf	(??_set_reg+3)^0,c
  7071  003F8E  5010               	movf	(??_set_reg+2)^0,w,c
  7072  003F90  6EDF               	movwf	indf2,c
  7073                           
  7074                           ; BSR set to: 2
  7075                           ;src/driver/si5328.c: 217:  idx += 2;
  7076  003F92  0E02               	movlw	2
  7077  003F94  2614               	addwf	set_reg@idx^0,f,c
  7078                           
  7079                           ; BSR set to: 2
  7080                           ;src/driver/si5328.c: 218:  p[idx] = (N31_reg4445 - 1 & 0xff);
  7081  003F96  5014               	movf	set_reg@idx^0,w,c
  7082  003F98  2412               	addwf	set_reg@p^0,w,c
  7083  003F9A  6ED9               	movwf	fsr2l,c
  7084  003F9C  0E00               	movlw	0
  7085  003F9E  2013               	addwfc	(set_reg@p+1)^0,w,c
  7086  003FA0  6EDA               	movwf	fsr2h,c
  7087  003FA2  0100               	movlb	0	; () banked
  7088  003FA4  05DA               	decf	_N31_reg4445& (0+255),w,b
  7089  003FA6  6EDF               	movwf	indf2,c
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;src/driver/si5328.c: 219:  idx += 2;
  7093  003FA8  0E02               	movlw	2
  7094  003FAA  2614               	addwf	set_reg@idx^0,f,c
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;src/driver/si5328.c: 220:  p[idx] = ((((N32_reg4748 - 1) >> 8)));
  7098  003FAC  5014               	movf	set_reg@idx^0,w,c
  7099  003FAE  2412               	addwf	set_reg@p^0,w,c
  7100  003FB0  6ED9               	movwf	fsr2l,c
  7101  003FB2  0E00               	movlw	0
  7102  003FB4  2013               	addwfc	(set_reg@p+1)^0,w,c
  7103  003FB6  6EDA               	movwf	fsr2h,c
  7104  003FB8  0EFF               	movlw	255
  7105  003FBA  6E0E               	movwf	??_set_reg^0,c
  7106  003FBC  0EFF               	movlw	255
  7107  003FBE  6E0F               	movwf	(??_set_reg+1)^0,c
  7108  003FC0  C218  F010         	movff	_N32_reg4748,??_set_reg+2
  7109  003FC4  C219  F011         	movff	_N32_reg4748+1,??_set_reg+3
  7110  003FC8  500E               	movf	??_set_reg^0,w,c
  7111  003FCA  2610               	addwf	(??_set_reg+2)^0,f,c
  7112  003FCC  500F               	movf	(??_set_reg+1)^0,w,c
  7113  003FCE  2211               	addwfc	(??_set_reg+3)^0,f,c
  7114  003FD0  C011  F010         	movff	??_set_reg+3,??_set_reg+2
  7115  003FD4  6A11               	clrf	(??_set_reg+3)^0,c
  7116  003FD6  5010               	movf	(??_set_reg+2)^0,w,c
  7117  003FD8  6EDF               	movwf	indf2,c
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;src/driver/si5328.c: 221:  idx += 2;
  7121  003FDA  0E02               	movlw	2
  7122  003FDC  2614               	addwf	set_reg@idx^0,f,c
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;src/driver/si5328.c: 222:  p[idx] = (N32_reg4748 - 1 & 0xff);
  7126  003FDE  5014               	movf	set_reg@idx^0,w,c
  7127  003FE0  2412               	addwf	set_reg@p^0,w,c
  7128  003FE2  6ED9               	movwf	fsr2l,c
  7129  003FE4  0E00               	movlw	0
  7130  003FE6  2013               	addwfc	(set_reg@p+1)^0,w,c
  7131  003FE8  6EDA               	movwf	fsr2h,c
  7132  003FEA  0102               	movlb	2	; () banked
  7133  003FEC  0518               	decf	_N32_reg4748& (0+255),w,b
  7134  003FEE  6EDF               	movwf	indf2,c
  7135                           
  7136                           ; BSR set to: 2
  7137                           ;src/driver/si5328.c: 223:  idx += 2;
  7138  003FF0  0E02               	movlw	2
  7139  003FF2  2614               	addwf	set_reg@idx^0,f,c
  7140                           
  7141                           ; BSR set to: 2
  7142                           ;src/driver/si5328.c: 224:  p[idx] = ((N2HS_reg40-4)<<5);
  7143  003FF4  5014               	movf	set_reg@idx^0,w,c
  7144  003FF6  2412               	addwf	set_reg@p^0,w,c
  7145  003FF8  6ED9               	movwf	fsr2l,c
  7146  003FFA  0E00               	movlw	0
  7147  003FFC  2013               	addwfc	(set_reg@p+1)^0,w,c
  7148  003FFE  6EDA               	movwf	fsr2h,c
  7149  004000  5116               	movf	_N2HS_reg40& (0+255),w,b
  7150  004002  0D20               	mullw	32
  7151  004004  50F3               	movf	243,w,c
  7152  004006  0F80               	addlw	128
  7153  004008  6EDF               	movwf	indf2,c
  7154                           
  7155                           ; BSR set to: 2
  7156                           ;src/driver/si5328.c: 225:  idx += 2;
  7157  00400A  0E02               	movlw	2
  7158  00400C  2614               	addwf	set_reg@idx^0,f,c
  7159                           
  7160                           ; BSR set to: 2
  7161                           ;src/driver/si5328.c: 226:  p[idx] = ((((N2L_reg4142 - 1) >> 8)));
  7162  00400E  5014               	movf	set_reg@idx^0,w,c
  7163  004010  2412               	addwf	set_reg@p^0,w,c
  7164  004012  6ED9               	movwf	fsr2l,c
  7165  004014  0E00               	movlw	0
  7166  004016  2013               	addwfc	(set_reg@p+1)^0,w,c
  7167  004018  6EDA               	movwf	fsr2h,c
  7168  00401A  0EFF               	movlw	255
  7169  00401C  6E0E               	movwf	??_set_reg^0,c
  7170  00401E  0EFF               	movlw	255
  7171  004020  6E0F               	movwf	(??_set_reg+1)^0,c
  7172  004022  C1FE  F010         	movff	_N2L_reg4142,??_set_reg+2
  7173  004026  C1FF  F011         	movff	_N2L_reg4142+1,??_set_reg+3
  7174  00402A  500E               	movf	??_set_reg^0,w,c
  7175  00402C  2610               	addwf	(??_set_reg+2)^0,f,c
  7176  00402E  500F               	movf	(??_set_reg+1)^0,w,c
  7177  004030  2211               	addwfc	(??_set_reg+3)^0,f,c
  7178  004032  C011  F010         	movff	??_set_reg+3,??_set_reg+2
  7179  004036  6A11               	clrf	(??_set_reg+3)^0,c
  7180  004038  5010               	movf	(??_set_reg+2)^0,w,c
  7181  00403A  6EDF               	movwf	indf2,c
  7182                           
  7183                           ; BSR set to: 2
  7184                           ;src/driver/si5328.c: 227:  idx += 2;
  7185  00403C  0E02               	movlw	2
  7186  00403E  2614               	addwf	set_reg@idx^0,f,c
  7187                           
  7188                           ; BSR set to: 2
  7189                           ;src/driver/si5328.c: 228:  p[idx] = (N2L_reg4142 - 1 & 0xff);
  7190  004040  5014               	movf	set_reg@idx^0,w,c
  7191  004042  2412               	addwf	set_reg@p^0,w,c
  7192  004044  6ED9               	movwf	fsr2l,c
  7193  004046  0E00               	movlw	0
  7194  004048  2013               	addwfc	(set_reg@p+1)^0,w,c
  7195  00404A  6EDA               	movwf	fsr2h,c
  7196  00404C  0101               	movlb	1	; () banked
  7197  00404E  05FE               	decf	_N2L_reg4142& (0+255),w,b
  7198  004050  6EDF               	movwf	indf2,c
  7199                           
  7200                           ; BSR set to: 1
  7201                           ;src/driver/si5328.c: 229:  idx += 2;
  7202  004052  0E02               	movlw	2
  7203  004054  2614               	addwf	set_reg@idx^0,f,c
  7204                           
  7205                           ; BSR set to: 1
  7206                           ;src/driver/si5328.c: 230:  p[idx] = ((N1HS_reg25-4)<<5);
  7207  004056  5014               	movf	set_reg@idx^0,w,c
  7208  004058  2412               	addwf	set_reg@p^0,w,c
  7209  00405A  6ED9               	movwf	fsr2l,c
  7210  00405C  0E00               	movlw	0
  7211  00405E  2013               	addwfc	(set_reg@p+1)^0,w,c
  7212  004060  6EDA               	movwf	fsr2h,c
  7213  004062  0102               	movlb	2	; () banked
  7214  004064  5114               	movf	_N1HS_reg25& (0+255),w,b
  7215  004066  0D20               	mullw	32
  7216  004068  50F3               	movf	243,w,c
  7217  00406A  0F80               	addlw	128
  7218  00406C  6EDF               	movwf	indf2,c
  7219                           
  7220                           ; BSR set to: 2
  7221                           ;src/driver/si5328.c: 231:  idx += 2;
  7222  00406E  0E02               	movlw	2
  7223  004070  2614               	addwf	set_reg@idx^0,f,c
  7224                           
  7225                           ; BSR set to: 2
  7226                           ;src/driver/si5328.c: 232:  p[idx] = ((((NC1_LS_reg3233 - 1) >> 8)));
  7227  004072  5014               	movf	set_reg@idx^0,w,c
  7228  004074  2412               	addwf	set_reg@p^0,w,c
  7229  004076  6ED9               	movwf	fsr2l,c
  7230  004078  0E00               	movlw	0
  7231  00407A  2013               	addwfc	(set_reg@p+1)^0,w,c
  7232  00407C  6EDA               	movwf	fsr2h,c
  7233  00407E  0EFF               	movlw	255
  7234  004080  6E0E               	movwf	??_set_reg^0,c
  7235  004082  0EFF               	movlw	255
  7236  004084  6E0F               	movwf	(??_set_reg+1)^0,c
  7237  004086  C1FC  F010         	movff	_NC1_LS_reg3233,??_set_reg+2
  7238  00408A  C1FD  F011         	movff	_NC1_LS_reg3233+1,??_set_reg+3
  7239  00408E  500E               	movf	??_set_reg^0,w,c
  7240  004090  2610               	addwf	(??_set_reg+2)^0,f,c
  7241  004092  500F               	movf	(??_set_reg+1)^0,w,c
  7242  004094  2211               	addwfc	(??_set_reg+3)^0,f,c
  7243  004096  C011  F010         	movff	??_set_reg+3,??_set_reg+2
  7244  00409A  6A11               	clrf	(??_set_reg+3)^0,c
  7245  00409C  5010               	movf	(??_set_reg+2)^0,w,c
  7246  00409E  6EDF               	movwf	indf2,c
  7247                           
  7248                           ; BSR set to: 2
  7249                           ;src/driver/si5328.c: 233:  idx += 2;
  7250  0040A0  0E02               	movlw	2
  7251  0040A2  2614               	addwf	set_reg@idx^0,f,c
  7252                           
  7253                           ; BSR set to: 2
  7254                           ;src/driver/si5328.c: 234:  p[idx] = (NC1_LS_reg3233 - 1 & 0xff);
  7255  0040A4  5014               	movf	set_reg@idx^0,w,c
  7256  0040A6  2412               	addwf	set_reg@p^0,w,c
  7257  0040A8  6ED9               	movwf	fsr2l,c
  7258  0040AA  0E00               	movlw	0
  7259  0040AC  2013               	addwfc	(set_reg@p+1)^0,w,c
  7260  0040AE  6EDA               	movwf	fsr2h,c
  7261  0040B0  0101               	movlb	1	; () banked
  7262  0040B2  05FC               	decf	_NC1_LS_reg3233& (0+255),w,b
  7263  0040B4  6EDF               	movwf	indf2,c
  7264                           
  7265                           ; BSR set to: 1
  7266                           ;src/driver/si5328.c: 235:  idx += 2;
  7267  0040B6  0E02               	movlw	2
  7268  0040B8  2614               	addwf	set_reg@idx^0,f,c
  7269                           
  7270                           ; BSR set to: 1
  7271                           ;src/driver/si5328.c: 236:  p[idx] = ((((NC2_LS_reg3536 - 1) >> 8)));
  7272  0040BA  5014               	movf	set_reg@idx^0,w,c
  7273  0040BC  2412               	addwf	set_reg@p^0,w,c
  7274  0040BE  6ED9               	movwf	fsr2l,c
  7275  0040C0  0E00               	movlw	0
  7276  0040C2  2013               	addwfc	(set_reg@p+1)^0,w,c
  7277  0040C4  6EDA               	movwf	fsr2h,c
  7278  0040C6  0EFF               	movlw	255
  7279  0040C8  6E0E               	movwf	??_set_reg^0,c
  7280  0040CA  0EFF               	movlw	255
  7281  0040CC  6E0F               	movwf	(??_set_reg+1)^0,c
  7282  0040CE  C212  F010         	movff	_NC2_LS_reg3536,??_set_reg+2
  7283  0040D2  C213  F011         	movff	_NC2_LS_reg3536+1,??_set_reg+3
  7284  0040D6  500E               	movf	??_set_reg^0,w,c
  7285  0040D8  2610               	addwf	(??_set_reg+2)^0,f,c
  7286  0040DA  500F               	movf	(??_set_reg+1)^0,w,c
  7287  0040DC  2211               	addwfc	(??_set_reg+3)^0,f,c
  7288  0040DE  C011  F010         	movff	??_set_reg+3,??_set_reg+2
  7289  0040E2  6A11               	clrf	(??_set_reg+3)^0,c
  7290  0040E4  5010               	movf	(??_set_reg+2)^0,w,c
  7291  0040E6  6EDF               	movwf	indf2,c
  7292                           
  7293                           ; BSR set to: 1
  7294                           ;src/driver/si5328.c: 237:  idx += 2;
  7295  0040E8  0E02               	movlw	2
  7296  0040EA  2614               	addwf	set_reg@idx^0,f,c
  7297                           
  7298                           ; BSR set to: 1
  7299                           ;src/driver/si5328.c: 238:  p[idx] = (NC2_LS_reg3536 - 1 & 0xff);
  7300  0040EC  5014               	movf	set_reg@idx^0,w,c
  7301  0040EE  2412               	addwf	set_reg@p^0,w,c
  7302  0040F0  6ED9               	movwf	fsr2l,c
  7303  0040F2  0E00               	movlw	0
  7304  0040F4  2013               	addwfc	(set_reg@p+1)^0,w,c
  7305  0040F6  6EDA               	movwf	fsr2h,c
  7306  0040F8  0102               	movlb	2	; () banked
  7307  0040FA  0512               	decf	_NC2_LS_reg3536& (0+255),w,b
  7308  0040FC  6EDF               	movwf	indf2,c
  7309                           
  7310                           ; BSR set to: 2
  7311                           ;src/driver/si5328.c: 239:  idx += 2;
  7312  0040FE  0E02               	movlw	2
  7313  004100  2614               	addwf	set_reg@idx^0,f,c
  7314                           
  7315                           ; BSR set to: 2
  7316  004102  0012               	return		;funcret
  7317  004104                     __end_of_set_reg:
  7318                           	opt callstack 0
  7319                           
  7320 ;; *************** function _show_display *****************
  7321 ;; Defined at:
  7322 ;;		line 237 in file "src/driver/lcd.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  p               2   61[BANK0 ] PTR unsigned char 
  7327 ;;		 -> itoa@buffer(12), 
  7328 ;;  outqrg          2   59[BANK0 ] unsigned short 
  7329 ;;  xpos            1   58[BANK0 ] unsigned char 
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  1    wreg      void 
  7332 ;; Registers used:
  7333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7339 ;;      Params:         0       0       0       0       0       0       0
  7340 ;;      Locals:         0       5       0       0       0       0       0
  7341 ;;      Temps:          0       0       0       0       0       0       0
  7342 ;;      Totals:         0       5       0       0       0       0       0
  7343 ;;Total ram usage:        5 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:   13
  7346 ;; This function calls:
  7347 ;;		_CalculateGridSquare
  7348 ;;		_itoa
  7349 ;;		_lcd_clear_screen
  7350 ;;		_memcmp
  7351 ;;		_memcpy
  7352 ;;		_print_string
  7353 ;;		_strlen
  7354 ;; This function is called by:
  7355 ;;		_main
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text13
  7360  000012                     __ptext13:
  7361                           	opt callstack 0
  7362  000012                     _show_display:
  7363                           	opt callstack 17
  7364                           
  7365                           ;src/driver/lcd.c: 241:  static u8 old_GPS_lock = 0xff;;src/driver/lcd.c: 242:  static u
      +                          8 old_GPS_fix = 0xff;;src/driver/lcd.c: 243:  static u8 old_ubx_ack = 0xff;;src/driver/l
      +                          cd.c: 244:  static u16 old_outqrg = 0;;src/driver/lcd.c: 245:  static u8 old_lnbqrg = 0x
      +                          ff;;src/driver/lcd.c: 246:  static u8 old_GPS_sat = 0xff;;src/driver/lcd.c: 247:  static
      +                           char old_GPS_lat[15] = {"             "};;src/driver/lcd.c: 248:  static char old_GPS_l
      +                          on[15] = {"             "};;src/driver/lcd.c: 249:  static char old_GPS_time[9] = {"x"};
  7366                           
  7367                           ; BSR set to: 2
  7368                           ;incstack = 0
  7369  000012  0E02               	movlw	2
  7370  000014  0100               	movlb	0	; () banked
  7371  000016  19CE               	xorwf	_booting& (0+255),w,b
  7372  000018  A4D8               	btfss	status,2,c
  7373  00001A  D00B               	goto	l683
  7374                           
  7375                           ; BSR set to: 0
  7376  00001C  5070               	movf	_adf4351_lockstat^0,w,c
  7377  00001E  B4D8               	btfsc	status,2,c
  7378  000020  D006               	goto	u14330
  7379                           
  7380                           ; BSR set to: 0
  7381  000022  51D5               	movf	_si5328locked& (0+255),w,b
  7382  000024  B4D8               	btfsc	status,2,c
  7383  000026  D003               	goto	u14330
  7384                           
  7385                           ; BSR set to: 0
  7386  000028  51E7               	movf	_LNB_laststat& (0+255),w,b
  7387  00002A  A4D8               	btfss	status,2,c
  7388  00002C  D002               	goto	l683
  7389  00002E                     u14330:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;src/driver/lcd.c: 256:   booting = 0;
  7393  00002E  0E00               	movlw	0
  7394  000030  6FCE               	movwf	_booting& (0+255),b
  7395  000032                     l683:
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;src/driver/lcd.c: 258:  if(booting == 0)
  7399  000032  51CE               	movf	_booting& (0+255),w,b
  7400  000034  A4D8               	btfss	status,2,c
  7401  000036  D083               	goto	l11485
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;src/driver/lcd.c: 259:  {;src/driver/lcd.c: 261:   lcd_clear_screen(1);
  7405  000038  0E01               	movlw	1
  7406  00003A  EC56  F035         	call	_lcd_clear_screen
  7407                           
  7408                           ; BSR set to: 1
  7409                           ;src/driver/lcd.c: 262:   print_string("Firmware:       ",0,1,0);
  7410  00003E  0EA8               	movlw	low STR_41
  7411  000040  0100               	movlb	0	; () banked
  7412  000042  6FB2               	movwf	print_string@s& (0+255),b
  7413  000044  0E7D               	movlw	high STR_41
  7414  000046  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7415  000048  0E00               	movlw	0
  7416  00004A  6FB4               	movwf	print_string@x& (0+255),b
  7417  00004C  0E01               	movlw	1
  7418  00004E  6FB5               	movwf	print_string@y& (0+255),b
  7419  000050  0E00               	movlw	0
  7420  000052  6FB6               	movwf	print_string@underline& (0+255),b
  7421  000054  ECF0  F031         	call	_print_string	;wreg free
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;src/driver/lcd.c: 263:   print_string("1.2",10*8,1,0);
  7425  000058  0EEB               	movlw	low STR_42
  7426  00005A  6FB2               	movwf	print_string@s& (0+255),b
  7427  00005C  0E7F               	movlw	high STR_42
  7428  00005E  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7429  000060  0E50               	movlw	80
  7430  000062  6FB4               	movwf	print_string@x& (0+255),b
  7431  000064  0E01               	movlw	1
  7432  000066  6FB5               	movwf	print_string@y& (0+255),b
  7433  000068  0E00               	movlw	0
  7434  00006A  6FB6               	movwf	print_string@underline& (0+255),b
  7435  00006C  ECF0  F031         	call	_print_string	;wreg free
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;src/driver/lcd.c: 264:   print_string("System SETUP ...",0,2,0);
  7439  000070  0E41               	movlw	low STR_43
  7440  000072  6FB2               	movwf	print_string@s& (0+255),b
  7441  000074  0E7E               	movlw	high STR_43
  7442  000076  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7443  000078  0E00               	movlw	0
  7444  00007A  6FB4               	movwf	print_string@x& (0+255),b
  7445  00007C  0E02               	movlw	2
  7446  00007E  6FB5               	movwf	print_string@y& (0+255),b
  7447  000080  0E00               	movlw	0
  7448  000082  6FB6               	movwf	print_string@underline& (0+255),b
  7449  000084  ECF0  F031         	call	_print_string	;wreg free
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;src/driver/lcd.c: 265:   if(special_cfg != 0 && special_cfg != 255)
  7453  000088  51D2               	movf	_special_cfg& (0+255),w,b
  7454  00008A  B4D8               	btfsc	status,2,c
  7455  00008C  D022               	goto	l11473
  7456                           
  7457                           ; BSR set to: 0
  7458  00008E  29D2               	incf	_special_cfg& (0+255),w,b
  7459  000090  B4D8               	btfsc	status,2,c
  7460  000092  D01F               	goto	l11473
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;src/driver/lcd.c: 266:   {;src/driver/lcd.c: 267:    print_string("mode:           ",0,
      +                          3,0);
  7464  000094  0E97               	movlw	low STR_44
  7465  000096  6FB2               	movwf	print_string@s& (0+255),b
  7466  000098  0E7D               	movlw	high STR_44
  7467  00009A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7468  00009C  0E00               	movlw	0
  7469  00009E  6FB4               	movwf	print_string@x& (0+255),b
  7470  0000A0  0E03               	movlw	3
  7471  0000A2  6FB5               	movwf	print_string@y& (0+255),b
  7472  0000A4  0E00               	movlw	0
  7473  0000A6  6FB6               	movwf	print_string@underline& (0+255),b
  7474  0000A8  ECF0  F031         	call	_print_string	;wreg free
  7475                           
  7476                           ;src/driver/lcd.c: 268:    print_string(itoa(special_cfg),8*6,3,0);
  7477  0000AC  C0D2  F01A         	movff	_special_cfg,itoa@value
  7478  0000B0  6A1B               	clrf	(itoa@value+1)^0,c
  7479  0000B2  EC00  F033         	call	_itoa	;wreg free
  7480  0000B6  C01A  F0B2         	movff	?_itoa,print_string@s
  7481  0000BA  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  7482  0000BE  0E30               	movlw	48
  7483  0000C0  0100               	movlb	0	; () banked
  7484  0000C2  6FB4               	movwf	print_string@x& (0+255),b
  7485  0000C4  0E03               	movlw	3
  7486  0000C6  6FB5               	movwf	print_string@y& (0+255),b
  7487  0000C8  0E00               	movlw	0
  7488  0000CA  6FB6               	movwf	print_string@underline& (0+255),b
  7489  0000CC  ECF0  F031         	call	_print_string	;wreg free
  7490                           
  7491                           ;src/driver/lcd.c: 269:   }
  7492  0000D0  D00C               	goto	l688
  7493  0000D2                     l11473:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;src/driver/lcd.c: 271:    print_string("normal mode     ",0,3,0);
  7497  0000D2  0E0E               	movlw	low STR_45
  7498  0000D4  6FB2               	movwf	print_string@s& (0+255),b
  7499  0000D6  0E7E               	movlw	high STR_45
  7500  0000D8  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7501  0000DA  0E00               	movlw	0
  7502  0000DC  6FB4               	movwf	print_string@x& (0+255),b
  7503  0000DE  0E03               	movlw	3
  7504  0000E0  6FB5               	movwf	print_string@y& (0+255),b
  7505  0000E2  0E00               	movlw	0
  7506  0000E4  6FB6               	movwf	print_string@underline& (0+255),b
  7507  0000E6  ECF0  F031         	call	_print_string	;wreg free
  7508  0000EA                     l688:
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;src/driver/lcd.c: 272:   print_string("LNB-power:      ",0,4,0);
  7512  0000EA  0EDB               	movlw	low STR_46
  7513  0000EC  6FB2               	movwf	print_string@s& (0+255),b
  7514  0000EE  0E7D               	movlw	high STR_46
  7515  0000F0  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7516  0000F2  0E00               	movlw	0
  7517  0000F4  6FB4               	movwf	print_string@x& (0+255),b
  7518  0000F6  0E04               	movlw	4
  7519  0000F8  6FB5               	movwf	print_string@y& (0+255),b
  7520  0000FA  0E00               	movlw	0
  7521  0000FC  6FB6               	movwf	print_string@underline& (0+255),b
  7522  0000FE  ECF0  F031         	call	_print_string	;wreg free
  7523                           
  7524                           ;src/driver/lcd.c: 273:   print_string("Sysclock :      ",0,5,0);
  7525  000102  0ECA               	movlw	low STR_47
  7526  000104  6FB2               	movwf	print_string@s& (0+255),b
  7527  000106  0E7D               	movlw	high STR_47
  7528  000108  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7529  00010A  0E00               	movlw	0
  7530  00010C  6FB4               	movwf	print_string@x& (0+255),b
  7531  00010E  0E05               	movlw	5
  7532  000110  6FB5               	movwf	print_string@y& (0+255),b
  7533  000112  0E00               	movlw	0
  7534  000114  6FB6               	movwf	print_string@underline& (0+255),b
  7535  000116  ECF0  F031         	call	_print_string	;wreg free
  7536                           
  7537                           ;src/driver/lcd.c: 274:   print_string("Downmixer:      ",0,6,0);
  7538  00011A  0EEC               	movlw	low STR_48
  7539  00011C  6FB2               	movwf	print_string@s& (0+255),b
  7540  00011E  0E7D               	movlw	high STR_48
  7541  000120  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7542  000122  0E00               	movlw	0
  7543  000124  6FB4               	movwf	print_string@x& (0+255),b
  7544  000126  0E06               	movlw	6
  7545  000128  6FB5               	movwf	print_string@y& (0+255),b
  7546  00012A  0E00               	movlw	0
  7547  00012C  6FB6               	movwf	print_string@underline& (0+255),b
  7548  00012E  ECF0  F031         	call	_print_string	;wreg free
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;src/driver/lcd.c: 275:   booting = 1;
  7552  000132  0E01               	movlw	1
  7553  000134  6FCE               	movwf	_booting& (0+255),b
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;src/driver/lcd.c: 276:   old_LNB_laststat = 255;
  7557  000136  69DE               	setf	show_display@old_LNB_laststat& (0+255),b
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;src/driver/lcd.c: 277:   old_si5328locked = 255;
  7561  000138  69DD               	setf	show_display@old_si5328locked& (0+255),b
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;src/driver/lcd.c: 278:   old_adf4351_lockstat = 255;
  7565  00013A  69DC               	setf	show_display@old_adf4351_lockstat& (0+255),b
  7566  00013C  0012               	return	
  7567  00013E                     l11485:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;src/driver/lcd.c: 282:  if(booting == 1 && (!adf4351_lockstat || !si5328locked || !LNB_
      +                          laststat))
  7571  00013E  05CE               	decf	_booting& (0+255),w,b
  7572  000140  A4D8               	btfss	status,2,c
  7573  000142  D0B9               	goto	l11541
  7574                           
  7575                           ; BSR set to: 0
  7576  000144  5070               	movf	_adf4351_lockstat^0,w,c
  7577  000146  B4D8               	btfsc	status,2,c
  7578  000148  D006               	goto	u14400
  7579                           
  7580                           ; BSR set to: 0
  7581  00014A  51D5               	movf	_si5328locked& (0+255),w,b
  7582  00014C  B4D8               	btfsc	status,2,c
  7583  00014E  D003               	goto	u14400
  7584                           
  7585                           ; BSR set to: 0
  7586  000150  51E7               	movf	_LNB_laststat& (0+255),w,b
  7587  000152  A4D8               	btfss	status,2,c
  7588  000154  D0B0               	goto	l11541
  7589  000156                     u14400:
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;src/driver/lcd.c: 283:  {;src/driver/lcd.c: 285:   if(LNB_laststat != old_LNB_laststat)
  7593  000156  51DE               	movf	show_display@old_LNB_laststat& (0+255),w,b
  7594  000158  19E7               	xorwf	_LNB_laststat& (0+255),w,b
  7595  00015A  B4D8               	btfsc	status,2,c
  7596  00015C  D024               	goto	l11503
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;src/driver/lcd.c: 286:   {;src/driver/lcd.c: 287:    if(LNB_laststat)
  7600  00015E  51E7               	movf	_LNB_laststat& (0+255),w,b
  7601  000160  B4D8               	btfsc	status,2,c
  7602  000162  D00D               	goto	l11499
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;src/driver/lcd.c: 288:     print_string("OK",11*8,4,0);
  7606  000164  0E2E               	movlw	low (STR_86+9)
  7607  000166  6FB2               	movwf	print_string@s& (0+255),b
  7608  000168  0E7F               	movlw	high (STR_86+9)
  7609  00016A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7610  00016C  0E58               	movlw	88
  7611  00016E  6FB4               	movwf	print_string@x& (0+255),b
  7612  000170  0E04               	movlw	4
  7613  000172  6FB5               	movwf	print_string@y& (0+255),b
  7614  000174  0E00               	movlw	0
  7615  000176  6FB6               	movwf	print_string@underline& (0+255),b
  7616  000178  ECF0  F031         	call	_print_string	;wreg free
  7617  00017C  D012               	goto	l11501
  7618  00017E                     l11499:
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;src/driver/lcd.c: 290:     print_string(itoa(LNB_error),11*8,4,0);
  7622  00017E  C0D9  F01A         	movff	_LNB_error,itoa@value
  7623  000182  6A1B               	clrf	(itoa@value+1)^0,c
  7624  000184  EC00  F033         	call	_itoa	;wreg free
  7625  000188  C01A  F0B2         	movff	?_itoa,print_string@s
  7626  00018C  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  7627  000190  0E58               	movlw	88
  7628  000192  0100               	movlb	0	; () banked
  7629  000194  6FB4               	movwf	print_string@x& (0+255),b
  7630  000196  0E04               	movlw	4
  7631  000198  6FB5               	movwf	print_string@y& (0+255),b
  7632  00019A  0E00               	movlw	0
  7633  00019C  6FB6               	movwf	print_string@underline& (0+255),b
  7634  00019E  ECF0  F031         	call	_print_string	;wreg free
  7635  0001A2                     l11501:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;src/driver/lcd.c: 292:    old_LNB_laststat = LNB_laststat;
  7639  0001A2  C0E7  F0DE         	movff	_LNB_laststat,show_display@old_LNB_laststat
  7640  0001A6                     l11503:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;src/driver/lcd.c: 295:   if(si5328locked != old_si5328locked)
  7644  0001A6  51DD               	movf	show_display@old_si5328locked& (0+255),w,b
  7645  0001A8  19D5               	xorwf	_si5328locked& (0+255),w,b
  7646  0001AA  B4D8               	btfsc	status,2,c
  7647  0001AC  D01E               	goto	l11513
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;src/driver/lcd.c: 296:   {;src/driver/lcd.c: 297:    if(si5328locked) print_string("LOC
      +                          K",11*8,5,0); else print_string("wait",11*8,5,0);
  7651  0001AE  51D5               	movf	_si5328locked& (0+255),w,b
  7652  0001B0  B4D8               	btfsc	status,2,c
  7653  0001B2  D00D               	goto	l11509
  7654                           
  7655                           ; BSR set to: 0
  7656  0001B4  0ED9               	movlw	low STR_50
  7657  0001B6  6FB2               	movwf	print_string@s& (0+255),b
  7658  0001B8  0E7F               	movlw	high STR_50
  7659  0001BA  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7660  0001BC  0E58               	movlw	88
  7661  0001BE  6FB4               	movwf	print_string@x& (0+255),b
  7662  0001C0  0E05               	movlw	5
  7663  0001C2  6FB5               	movwf	print_string@y& (0+255),b
  7664  0001C4  0E00               	movlw	0
  7665  0001C6  6FB6               	movwf	print_string@underline& (0+255),b
  7666  0001C8  ECF0  F031         	call	_print_string	;wreg free
  7667  0001CC  D00C               	goto	l11511
  7668  0001CE                     l11509:
  7669                           
  7670                           ; BSR set to: 0
  7671  0001CE  0EDE               	movlw	low STR_51
  7672  0001D0  6FB2               	movwf	print_string@s& (0+255),b
  7673  0001D2  0E7F               	movlw	high STR_51
  7674  0001D4  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7675  0001D6  0E58               	movlw	88
  7676  0001D8  6FB4               	movwf	print_string@x& (0+255),b
  7677  0001DA  0E05               	movlw	5
  7678  0001DC  6FB5               	movwf	print_string@y& (0+255),b
  7679  0001DE  0E00               	movlw	0
  7680  0001E0  6FB6               	movwf	print_string@underline& (0+255),b
  7681  0001E2  ECF0  F031         	call	_print_string	;wreg free
  7682  0001E6                     l11511:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;src/driver/lcd.c: 298:    old_si5328locked = si5328locked;
  7686  0001E6  C0D5  F0DD         	movff	_si5328locked,show_display@old_si5328locked
  7687  0001EA                     l11513:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;src/driver/lcd.c: 301:   if(adf4351_lockstat != old_adf4351_lockstat)
  7691  0001EA  51DC               	movf	show_display@old_adf4351_lockstat& (0+255),w,b
  7692  0001EC  1870               	xorwf	_adf4351_lockstat^0,w,c
  7693  0001EE  B4D8               	btfsc	status,2,c
  7694  0001F0  D01E               	goto	l11523
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;src/driver/lcd.c: 302:   {;src/driver/lcd.c: 303:    if(adf4351_lockstat) print_string(
      +                          "LOCK",11*8,6,0); else print_string("wait",11*8,6,0);
  7698  0001F2  5070               	movf	_adf4351_lockstat^0,w,c
  7699  0001F4  B4D8               	btfsc	status,2,c
  7700  0001F6  D00D               	goto	l11519
  7701                           
  7702                           ; BSR set to: 0
  7703  0001F8  0ED9               	movlw	low STR_50
  7704  0001FA  6FB2               	movwf	print_string@s& (0+255),b
  7705  0001FC  0E7F               	movlw	high STR_50
  7706  0001FE  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7707  000200  0E58               	movlw	88
  7708  000202  6FB4               	movwf	print_string@x& (0+255),b
  7709  000204  0E06               	movlw	6
  7710  000206  6FB5               	movwf	print_string@y& (0+255),b
  7711  000208  0E00               	movlw	0
  7712  00020A  6FB6               	movwf	print_string@underline& (0+255),b
  7713  00020C  ECF0  F031         	call	_print_string	;wreg free
  7714  000210  D00C               	goto	l11521
  7715  000212                     l11519:
  7716                           
  7717                           ; BSR set to: 0
  7718  000212  0EDE               	movlw	low STR_51
  7719  000214  6FB2               	movwf	print_string@s& (0+255),b
  7720  000216  0E7F               	movlw	high STR_51
  7721  000218  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7722  00021A  0E58               	movlw	88
  7723  00021C  6FB4               	movwf	print_string@x& (0+255),b
  7724  00021E  0E06               	movlw	6
  7725  000220  6FB5               	movwf	print_string@y& (0+255),b
  7726  000222  0E00               	movlw	0
  7727  000224  6FB6               	movwf	print_string@underline& (0+255),b
  7728  000226  ECF0  F031         	call	_print_string	;wreg free
  7729  00022A                     l11521:
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;src/driver/lcd.c: 304:    old_adf4351_lockstat = adf4351_lockstat;
  7733  00022A  C070  F0DC         	movff	_adf4351_lockstat,show_display@old_adf4351_lockstat
  7734  00022E                     l11523:
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;src/driver/lcd.c: 307:   if(ubx_ack && old_GPS_sat != GPS_sat)
  7738  00022E  506E               	movf	_ubx_ack^0,w,c
  7739  000230  B4D8               	btfsc	status,2,c
  7740  000232  0012               	return	
  7741                           
  7742                           ; BSR set to: 0
  7743  000234  51D1               	movf	_GPS_sat& (0+255),w,b
  7744  000236  19DF               	xorwf	show_display@old_GPS_sat& (0+255),w,b
  7745  000238  B4D8               	btfsc	status,2,c
  7746  00023A  0012               	return	
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;src/driver/lcd.c: 308:   {;src/driver/lcd.c: 309:    print_string("GPS SATs:       ",0,
      +                          7,0);
  7750  00023C  0EB9               	movlw	low STR_54
  7751  00023E  6FB2               	movwf	print_string@s& (0+255),b
  7752  000240  0E7D               	movlw	high STR_54
  7753  000242  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7754  000244  0E00               	movlw	0
  7755  000246  6FB4               	movwf	print_string@x& (0+255),b
  7756  000248  0E07               	movlw	7
  7757  00024A  6FB5               	movwf	print_string@y& (0+255),b
  7758  00024C  0E00               	movlw	0
  7759  00024E  6FB6               	movwf	print_string@underline& (0+255),b
  7760  000250  ECF0  F031         	call	_print_string	;wreg free
  7761                           
  7762                           ;src/driver/lcd.c: 310:    print_string(itoa(GPS_sat),9*8,7,0);
  7763  000254  C0D1  F01A         	movff	_GPS_sat,itoa@value
  7764  000258  6A1B               	clrf	(itoa@value+1)^0,c
  7765  00025A  EC00  F033         	call	_itoa	;wreg free
  7766  00025E  C01A  F0B2         	movff	?_itoa,print_string@s
  7767  000262  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  7768  000266  0E48               	movlw	72
  7769  000268  0100               	movlb	0	; () banked
  7770  00026A  6FB4               	movwf	print_string@x& (0+255),b
  7771  00026C  0E07               	movlw	7
  7772  00026E  6FB5               	movwf	print_string@y& (0+255),b
  7773  000270  0E00               	movlw	0
  7774  000272  6FB6               	movwf	print_string@underline& (0+255),b
  7775  000274  ECF0  F031         	call	_print_string	;wreg free
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;src/driver/lcd.c: 311:    if(GPS_lock == 1)
  7779  000278  05D8               	decf	_GPS_lock& (0+255),w,b
  7780  00027A  A4D8               	btfss	status,2,c
  7781  00027C  D00D               	goto	l11533
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;src/driver/lcd.c: 312:     print_string("LOCK ",11*8,7,0);
  7785  00027E  0EAD               	movlw	low STR_55
  7786  000280  6FB2               	movwf	print_string@s& (0+255),b
  7787  000282  0E7F               	movlw	high STR_55
  7788  000284  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7789  000286  0E58               	movlw	88
  7790  000288  6FB4               	movwf	print_string@x& (0+255),b
  7791  00028A  0E07               	movlw	7
  7792  00028C  6FB5               	movwf	print_string@y& (0+255),b
  7793  00028E  0E00               	movlw	0
  7794  000290  6FB6               	movwf	print_string@underline& (0+255),b
  7795  000292  ECF0  F031         	call	_print_string	;wreg free
  7796  000296  D00C               	goto	l11535
  7797  000298                     l11533:
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;src/driver/lcd.c: 314:     print_string("NOlck",11*8,7,0);
  7801  000298  0EBF               	movlw	low STR_56
  7802  00029A  6FB2               	movwf	print_string@s& (0+255),b
  7803  00029C  0E7F               	movlw	high STR_56
  7804  00029E  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7805  0002A0  0E58               	movlw	88
  7806  0002A2  6FB4               	movwf	print_string@x& (0+255),b
  7807  0002A4  0E07               	movlw	7
  7808  0002A6  6FB5               	movwf	print_string@y& (0+255),b
  7809  0002A8  0E00               	movlw	0
  7810  0002AA  6FB6               	movwf	print_string@underline& (0+255),b
  7811  0002AC  ECF0  F031         	call	_print_string	;wreg free
  7812  0002B0                     l11535:
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;src/driver/lcd.c: 315:    old_GPS_sat = GPS_sat;
  7816  0002B0  C0D1  F0DF         	movff	_GPS_sat,show_display@old_GPS_sat
  7817  0002B4  0012               	return	
  7818  0002B6                     l11541:
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;src/driver/lcd.c: 320:  {;src/driver/lcd.c: 321:   if(booting != 2)
  7822  0002B6  0E02               	movlw	2
  7823  0002B8  19CE               	xorwf	_booting& (0+255),w,b
  7824  0002BA  B4D8               	btfsc	status,2,c
  7825  0002BC  D015               	goto	l11561
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;src/driver/lcd.c: 322:   {;src/driver/lcd.c: 324:    lcd_clear_screen(1);
  7829  0002BE  0E01               	movlw	1
  7830  0002C0  EC56  F035         	call	_lcd_clear_screen
  7831                           
  7832                           ; BSR set to: 1
  7833                           ;src/driver/lcd.c: 325:    booting = 2;
  7834  0002C4  0E02               	movlw	2
  7835  0002C6  0100               	movlb	0	; () banked
  7836  0002C8  6FCE               	movwf	_booting& (0+255),b
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;src/driver/lcd.c: 326:    old_GPS_lock = 0xff;
  7840  0002CA  69E3               	setf	show_display@old_GPS_lock& (0+255),b
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;src/driver/lcd.c: 327:    old_outqrg = 0;
  7844  0002CC  0E00               	movlw	0
  7845  0002CE  0102               	movlb	2	; () banked
  7846  0002D0  6FB7               	movwf	(show_display@old_outqrg+1)& (0+255),b
  7847  0002D2  0E00               	movlw	0
  7848  0002D4  6FB6               	movwf	show_display@old_outqrg& (0+255),b
  7849                           
  7850                           ; BSR set to: 2
  7851                           ;src/driver/lcd.c: 328:    old_lnbqrg = 0xff;
  7852  0002D6  0100               	movlb	0	; () banked
  7853  0002D8  69E0               	setf	show_display@old_lnbqrg& (0+255),b
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;src/driver/lcd.c: 329:    old_GPS_sat = 0xff;
  7857  0002DA  69DF               	setf	show_display@old_GPS_sat& (0+255),b
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;src/driver/lcd.c: 330:    old_GPS_fix = 0xff;
  7861  0002DC  69E2               	setf	show_display@old_GPS_fix& (0+255),b
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;src/driver/lcd.c: 331:    *old_GPS_lat = 0;
  7865  0002DE  0E00               	movlw	0
  7866  0002E0  0102               	movlb	2	; () banked
  7867  0002E2  6F61               	movwf	show_display@old_GPS_lat& (0+255),b
  7868                           
  7869                           ; BSR set to: 2
  7870                           ;src/driver/lcd.c: 332:    *old_GPS_lon = 0;
  7871  0002E4  0E00               	movlw	0
  7872  0002E6  6F52               	movwf	show_display@old_GPS_lon& (0+255),b
  7873  0002E8                     l11561:
  7874                           
  7875                           ;src/driver/lcd.c: 338:  char *p;;src/driver/lcd.c: 339:  u8 xpos;;src/driver/lcd.c: 341
      +                          :  u16 outqrg = out_freq_table[actualADFswitch];
  7876  0002E8  0100               	movlb	0	; () banked
  7877  0002EA  51E4               	movf	_actualADFswitch& (0+255),w,b
  7878  0002EC  0D02               	mullw	2
  7879  0002EE  0E31               	movlw	low _out_freq_table
  7880  0002F0  24F3               	addwf	243,w,c
  7881  0002F2  6EF6               	movwf	tblptrl,c
  7882  0002F4  0E7A               	movlw	high _out_freq_table
  7883  0002F6  20F4               	addwfc	244,w,c
  7884  0002F8  6EF7               	movwf	tblptrh,c
  7885  0002FA                     	if	0	;There are less than 3 active tblptr bytes
  7886  0002FA                     	endif
  7887  0002FA  0009               	tblrd		*+
  7888  0002FC  CFF5 F0BB          	movff	tablat,show_display@outqrg
  7889  000300  000A               	tblrd		*-
  7890  000302  CFF5 F0BC          	movff	tablat,show_display@outqrg+1
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;src/driver/lcd.c: 343:  if(old_GPS_lock != GPS_lock || old_ubx_ack != ubx_ack)
  7894  000306  51D8               	movf	_GPS_lock& (0+255),w,b
  7895  000308  19E3               	xorwf	show_display@old_GPS_lock& (0+255),w,b
  7896  00030A  A4D8               	btfss	status,2,c
  7897  00030C  D004               	goto	u14520
  7898                           
  7899                           ; BSR set to: 0
  7900  00030E  506E               	movf	_ubx_ack^0,w,c
  7901  000310  19E1               	xorwf	show_display@old_ubx_ack& (0+255),w,b
  7902  000312  B4D8               	btfsc	status,2,c
  7903  000314  D0EF               	goto	l11607
  7904  000316                     u14520:
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;src/driver/lcd.c: 344:  {;src/driver/lcd.c: 345:   if(!GPS_lock && !ubx_ack)
  7908  000316  51D8               	movf	_GPS_lock& (0+255),w,b
  7909  000318  A4D8               	btfss	status,2,c
  7910  00031A  D044               	goto	l11577
  7911                           
  7912                           ; BSR set to: 0
  7913  00031C  506E               	movf	_ubx_ack^0,w,c
  7914  00031E  A4D8               	btfss	status,2,c
  7915  000320  D041               	goto	l11577
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;src/driver/lcd.c: 346:   {;src/driver/lcd.c: 347:    if(ext10MHzReference == 0)
  7919  000322  51D7               	movf	_ext10MHzReference& (0+255),w,b
  7920  000324  A4D8               	btfss	status,2,c
  7921  000326  D00D               	goto	l11575
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;src/driver/lcd.c: 348:     print_string("O/TCXO",10*8,0,0);
  7925  000328  0E98               	movlw	low STR_57
  7926  00032A  6FB2               	movwf	print_string@s& (0+255),b
  7927  00032C  0E7F               	movlw	high STR_57
  7928  00032E  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7929  000330  0E50               	movlw	80
  7930  000332  6FB4               	movwf	print_string@x& (0+255),b
  7931  000334  0E00               	movlw	0
  7932  000336  6FB5               	movwf	print_string@y& (0+255),b
  7933  000338  0E00               	movlw	0
  7934  00033A  6FB6               	movwf	print_string@underline& (0+255),b
  7935  00033C  ECF0  F031         	call	_print_string	;wreg free
  7936  000340  D00C               	goto	l712
  7937  000342                     l11575:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;src/driver/lcd.c: 350:     print_string("ext10M",10*8,0,0);
  7941  000342  0E6D               	movlw	low (STR_39+10)
  7942  000344  6FB2               	movwf	print_string@s& (0+255),b
  7943  000346  0E7E               	movlw	high (STR_39+10)
  7944  000348  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7945  00034A  0E50               	movlw	80
  7946  00034C  6FB4               	movwf	print_string@x& (0+255),b
  7947  00034E  0E00               	movlw	0
  7948  000350  6FB5               	movwf	print_string@y& (0+255),b
  7949  000352  0E00               	movlw	0
  7950  000354  6FB6               	movwf	print_string@underline& (0+255),b
  7951  000356  ECF0  F031         	call	_print_string	;wreg free
  7952  00035A                     l712:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;src/driver/lcd.c: 352:    print_string("                ",0,5,0);
  7956  00035A  0E86               	movlw	low STR_59
  7957  00035C  6FB2               	movwf	print_string@s& (0+255),b
  7958  00035E  0E7D               	movlw	high STR_59
  7959  000360  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7960  000362  0E00               	movlw	0
  7961  000364  6FB4               	movwf	print_string@x& (0+255),b
  7962  000366  0E05               	movlw	5
  7963  000368  6FB5               	movwf	print_string@y& (0+255),b
  7964  00036A  0E00               	movlw	0
  7965  00036C  6FB6               	movwf	print_string@underline& (0+255),b
  7966  00036E  ECF0  F031         	call	_print_string	;wreg free
  7967                           
  7968                           ;src/driver/lcd.c: 353:    print_string("System ready    ",0,6,0);
  7969  000372  0E1F               	movlw	low STR_60
  7970  000374  6FB2               	movwf	print_string@s& (0+255),b
  7971  000376  0E7E               	movlw	high STR_60
  7972  000378  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7973  00037A  0E00               	movlw	0
  7974  00037C  6FB4               	movwf	print_string@x& (0+255),b
  7975  00037E  0E06               	movlw	6
  7976  000380  6FB5               	movwf	print_string@y& (0+255),b
  7977  000382  0E00               	movlw	0
  7978  000384  6FB6               	movwf	print_string@underline& (0+255),b
  7979  000386  ECF0  F031         	call	_print_string	;wreg free
  7980                           
  7981                           ;src/driver/lcd.c: 354:    print_string("                ",0,7,0);
  7982  00038A  0E86               	movlw	low STR_59
  7983  00038C  6FB2               	movwf	print_string@s& (0+255),b
  7984  00038E  0E7D               	movlw	high STR_59
  7985  000390  6FB3               	movwf	(print_string@s+1)& (0+255),b
  7986  000392  0E00               	movlw	0
  7987  000394  6FB4               	movwf	print_string@x& (0+255),b
  7988  000396  0E07               	movlw	7
  7989  000398  6FB5               	movwf	print_string@y& (0+255),b
  7990  00039A  0E00               	movlw	0
  7991  00039C  6FB6               	movwf	print_string@underline& (0+255),b
  7992  00039E  ECF0  F031         	call	_print_string	;wreg free
  7993                           
  7994                           ;src/driver/lcd.c: 355:   }
  7995  0003A2  D0A0               	goto	l11601
  7996  0003A4                     l11577:
  7997                           
  7998                           ; BSR set to: 0
  7999  0003A4  506E               	movf	_ubx_ack^0,w,c
  8000  0003A6  B4D8               	btfsc	status,2,c
  8001  0003A8  D056               	goto	l11587
  8002                           
  8003                           ; BSR set to: 0
  8004  0003AA  51D8               	movf	_GPS_lock& (0+255),w,b
  8005  0003AC  A4D8               	btfss	status,2,c
  8006  0003AE  D053               	goto	l11587
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;src/driver/lcd.c: 357:   {;src/driver/lcd.c: 358:    if(use_GPS)
  8010  0003B0  51E8               	movf	_use_GPS& (0+255),w,b
  8011  0003B2  B4D8               	btfsc	status,2,c
  8012  0003B4  D00D               	goto	l11585
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;src/driver/lcd.c: 359:     print_string(" GPS  ",10*8,0,0);
  8016  0003B6  0E83               	movlw	low STR_62
  8017  0003B8  6FB2               	movwf	print_string@s& (0+255),b
  8018  0003BA  0E7F               	movlw	high STR_62
  8019  0003BC  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8020  0003BE  0E50               	movlw	80
  8021  0003C0  6FB4               	movwf	print_string@x& (0+255),b
  8022  0003C2  0E00               	movlw	0
  8023  0003C4  6FB5               	movwf	print_string@y& (0+255),b
  8024  0003C6  0E00               	movlw	0
  8025  0003C8  6FB6               	movwf	print_string@underline& (0+255),b
  8026  0003CA  ECF0  F031         	call	_print_string	;wreg free
  8027  0003CE  D00C               	goto	l716
  8028  0003D0                     l11585:
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;src/driver/lcd.c: 361:     print_string(" OCXO ",10*8,0,0);
  8032  0003D0  0E91               	movlw	low STR_63
  8033  0003D2  6FB2               	movwf	print_string@s& (0+255),b
  8034  0003D4  0E7F               	movlw	high STR_63
  8035  0003D6  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8036  0003D8  0E50               	movlw	80
  8037  0003DA  6FB4               	movwf	print_string@x& (0+255),b
  8038  0003DC  0E00               	movlw	0
  8039  0003DE  6FB5               	movwf	print_string@y& (0+255),b
  8040  0003E0  0E00               	movlw	0
  8041  0003E2  6FB6               	movwf	print_string@underline& (0+255),b
  8042  0003E4  ECF0  F031         	call	_print_string	;wreg free
  8043  0003E8                     l716:
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;src/driver/lcd.c: 362:    print_string("                ",0,5,0);
  8047  0003E8  0E86               	movlw	low STR_59
  8048  0003EA  6FB2               	movwf	print_string@s& (0+255),b
  8049  0003EC  0E7D               	movlw	high STR_59
  8050  0003EE  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8051  0003F0  0E00               	movlw	0
  8052  0003F2  6FB4               	movwf	print_string@x& (0+255),b
  8053  0003F4  0E05               	movlw	5
  8054  0003F6  6FB5               	movwf	print_string@y& (0+255),b
  8055  0003F8  0E00               	movlw	0
  8056  0003FA  6FB6               	movwf	print_string@underline& (0+255),b
  8057  0003FC  ECF0  F031         	call	_print_string	;wreg free
  8058                           
  8059                           ;src/driver/lcd.c: 363:    print_string("searching GPS   ",0,6,0);
  8060  000400  0E30               	movlw	low STR_65
  8061  000402  6FB2               	movwf	print_string@s& (0+255),b
  8062  000404  0E7E               	movlw	high STR_65
  8063  000406  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8064  000408  0E00               	movlw	0
  8065  00040A  6FB4               	movwf	print_string@x& (0+255),b
  8066  00040C  0E06               	movlw	6
  8067  00040E  6FB5               	movwf	print_string@y& (0+255),b
  8068  000410  0E00               	movlw	0
  8069  000412  6FB6               	movwf	print_string@underline& (0+255),b
  8070  000414  ECF0  F031         	call	_print_string	;wreg free
  8071                           
  8072                           ;src/driver/lcd.c: 364:    print_string("satellites:     ",0,7,0);
  8073  000418  0EFD               	movlw	low STR_66
  8074  00041A  6FB2               	movwf	print_string@s& (0+255),b
  8075  00041C  0E7D               	movlw	high STR_66
  8076  00041E  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8077  000420  0E00               	movlw	0
  8078  000422  6FB4               	movwf	print_string@x& (0+255),b
  8079  000424  0E07               	movlw	7
  8080  000426  6FB5               	movwf	print_string@y& (0+255),b
  8081  000428  0E00               	movlw	0
  8082  00042A  6FB6               	movwf	print_string@underline& (0+255),b
  8083  00042C  ECF0  F031         	call	_print_string	;wreg free
  8084                           
  8085                           ;src/driver/lcd.c: 365:    print_string(itoa(GPS_sat),12*8,7,0);
  8086  000430  C0D1  F01A         	movff	_GPS_sat,itoa@value
  8087  000434  6A1B               	clrf	(itoa@value+1)^0,c
  8088  000436  EC00  F033         	call	_itoa	;wreg free
  8089  00043A  C01A  F0B2         	movff	?_itoa,print_string@s
  8090  00043E  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  8091  000442  0E60               	movlw	96
  8092  000444  0100               	movlb	0	; () banked
  8093  000446  6FB4               	movwf	print_string@x& (0+255),b
  8094  000448  0E07               	movlw	7
  8095  00044A  6FB5               	movwf	print_string@y& (0+255),b
  8096  00044C  0E00               	movlw	0
  8097  00044E  6FB6               	movwf	print_string@underline& (0+255),b
  8098  000450  ECF0  F031         	call	_print_string	;wreg free
  8099                           
  8100                           ;src/driver/lcd.c: 366:   }
  8101  000454  D047               	goto	l11601
  8102  000456                     l11587:
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;src/driver/lcd.c: 368:   {;src/driver/lcd.c: 369:    if(use_GPS)
  8106  000456  51E8               	movf	_use_GPS& (0+255),w,b
  8107  000458  B4D8               	btfsc	status,2,c
  8108  00045A  D00D               	goto	l11591
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;src/driver/lcd.c: 370:     print_string(" GPS  ",10*8,0,0);
  8112  00045C  0E83               	movlw	low STR_62
  8113  00045E  6FB2               	movwf	print_string@s& (0+255),b
  8114  000460  0E7F               	movlw	high STR_62
  8115  000462  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8116  000464  0E50               	movlw	80
  8117  000466  6FB4               	movwf	print_string@x& (0+255),b
  8118  000468  0E00               	movlw	0
  8119  00046A  6FB5               	movwf	print_string@y& (0+255),b
  8120  00046C  0E00               	movlw	0
  8121  00046E  6FB6               	movwf	print_string@underline& (0+255),b
  8122  000470  ECF0  F031         	call	_print_string	;wreg free
  8123  000474  D00C               	goto	l719
  8124  000476                     l11591:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;src/driver/lcd.c: 372:     print_string(" OCXO ",10*8,0,0);
  8128  000476  0E91               	movlw	low STR_63
  8129  000478  6FB2               	movwf	print_string@s& (0+255),b
  8130  00047A  0E7F               	movlw	high STR_63
  8131  00047C  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8132  00047E  0E50               	movlw	80
  8133  000480  6FB4               	movwf	print_string@x& (0+255),b
  8134  000482  0E00               	movlw	0
  8135  000484  6FB5               	movwf	print_string@y& (0+255),b
  8136  000486  0E00               	movlw	0
  8137  000488  6FB6               	movwf	print_string@underline& (0+255),b
  8138  00048A  ECF0  F031         	call	_print_string	;wreg free
  8139  00048E                     l719:
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;src/driver/lcd.c: 373:    print_string("                ",0,5,0);
  8143  00048E  0E86               	movlw	low STR_59
  8144  000490  6FB2               	movwf	print_string@s& (0+255),b
  8145  000492  0E7D               	movlw	high STR_59
  8146  000494  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8147  000496  0E00               	movlw	0
  8148  000498  6FB4               	movwf	print_string@x& (0+255),b
  8149  00049A  0E05               	movlw	5
  8150  00049C  6FB5               	movwf	print_string@y& (0+255),b
  8151  00049E  0E00               	movlw	0
  8152  0004A0  6FB6               	movwf	print_string@underline& (0+255),b
  8153  0004A2  ECF0  F031         	call	_print_string	;wreg free
  8154                           
  8155                           ;src/driver/lcd.c: 374:    print_string("                ",0,6,0);
  8156  0004A6  0E86               	movlw	low STR_59
  8157  0004A8  6FB2               	movwf	print_string@s& (0+255),b
  8158  0004AA  0E7D               	movlw	high STR_59
  8159  0004AC  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8160  0004AE  0E00               	movlw	0
  8161  0004B0  6FB4               	movwf	print_string@x& (0+255),b
  8162  0004B2  0E06               	movlw	6
  8163  0004B4  6FB5               	movwf	print_string@y& (0+255),b
  8164  0004B6  0E00               	movlw	0
  8165  0004B8  6FB6               	movwf	print_string@underline& (0+255),b
  8166  0004BA  ECF0  F031         	call	_print_string	;wreg free
  8167                           
  8168                           ;src/driver/lcd.c: 375:    print_string("                ",0,7,0);
  8169  0004BE  0E86               	movlw	low STR_59
  8170  0004C0  6FB2               	movwf	print_string@s& (0+255),b
  8171  0004C2  0E7D               	movlw	high STR_59
  8172  0004C4  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8173  0004C6  0E00               	movlw	0
  8174  0004C8  6FB4               	movwf	print_string@x& (0+255),b
  8175  0004CA  0E07               	movlw	7
  8176  0004CC  6FB5               	movwf	print_string@y& (0+255),b
  8177  0004CE  0E00               	movlw	0
  8178  0004D0  6FB6               	movwf	print_string@underline& (0+255),b
  8179  0004D2  ECF0  F031         	call	_print_string	;wreg free
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;src/driver/lcd.c: 376:    old_GPS_sat = 0xff;
  8183  0004D6  69DF               	setf	show_display@old_GPS_sat& (0+255),b
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;src/driver/lcd.c: 377:    old_GPS_fix = 0xff;
  8187  0004D8  69E2               	setf	show_display@old_GPS_fix& (0+255),b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;src/driver/lcd.c: 378:    *old_GPS_lat = 0;
  8191  0004DA  0E00               	movlw	0
  8192  0004DC  0102               	movlb	2	; () banked
  8193  0004DE  6F61               	movwf	show_display@old_GPS_lat& (0+255),b
  8194                           
  8195                           ; BSR set to: 2
  8196                           ;src/driver/lcd.c: 379:    *old_GPS_lon = 0;
  8197  0004E0  0E00               	movlw	0
  8198  0004E2  6F52               	movwf	show_display@old_GPS_lon& (0+255),b
  8199  0004E4                     l11601:
  8200                           
  8201                           ;src/driver/lcd.c: 382:   old_GPS_lock = GPS_lock;
  8202  0004E4  C0D8  F0E3         	movff	_GPS_lock,show_display@old_GPS_lock
  8203                           
  8204                           ;src/driver/lcd.c: 384:   if(old_ubx_ack != ubx_ack)
  8205  0004E8  506E               	movf	_ubx_ack^0,w,c
  8206  0004EA  0100               	movlb	0	; () banked
  8207  0004EC  19E1               	xorwf	show_display@old_ubx_ack& (0+255),w,b
  8208  0004EE  A4D8               	btfss	status,2,c
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;src/driver/lcd.c: 385:    old_ubx_ack = ubx_ack;
  8212  0004F0  C06E  F0E1         	movff	_ubx_ack,show_display@old_ubx_ack
  8213  0004F4                     l11607:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;src/driver/lcd.c: 388:  if(GPS_time[0] != ' ' && memcmp(GPS_time,old_GPS_time,9))
  8217  0004F4  0E20               	movlw	32
  8218  0004F6  0102               	movlb	2	; () banked
  8219  0004F8  1997               	xorwf	_GPS_time& (0+255),w,b
  8220  0004FA  B4D8               	btfsc	status,2,c
  8221  0004FC  D02D               	goto	l11615
  8222                           
  8223                           ; BSR set to: 2
  8224  0004FE  0E97               	movlw	low _GPS_time
  8225  000500  6E0E               	movwf	memcmp@vl^0,c
  8226  000502  0E02               	movlw	high _GPS_time
  8227  000504  6E0F               	movwf	(memcmp@vl+1)^0,c
  8228  000506  0E8E               	movlw	low show_display@old_GPS_time
  8229  000508  6E10               	movwf	memcmp@vr^0,c
  8230  00050A  0E02               	movlw	high show_display@old_GPS_time
  8231  00050C  6E11               	movwf	(memcmp@vr+1)^0,c
  8232  00050E  0E00               	movlw	0
  8233  000510  6E13               	movwf	(memcmp@n+1)^0,c
  8234  000512  0E09               	movlw	9
  8235  000514  6E12               	movwf	memcmp@n^0,c
  8236  000516  EC3D  F033         	call	_memcmp	;wreg free
  8237  00051A  500E               	movf	?_memcmp^0,w,c
  8238  00051C  100F               	iorwf	(?_memcmp+1)^0,w,c
  8239  00051E  B4D8               	btfsc	status,2,c
  8240  000520  D01B               	goto	l11615
  8241                           
  8242                           ;src/driver/lcd.c: 389:  {;src/driver/lcd.c: 390:   print_string(GPS_time,0,1,0);
  8243  000522  0E97               	movlw	low _GPS_time
  8244  000524  0100               	movlb	0	; () banked
  8245  000526  6FB2               	movwf	print_string@s& (0+255),b
  8246  000528  0E02               	movlw	high _GPS_time
  8247  00052A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8248  00052C  0E00               	movlw	0
  8249  00052E  6FB4               	movwf	print_string@x& (0+255),b
  8250  000530  0E01               	movlw	1
  8251  000532  6FB5               	movwf	print_string@y& (0+255),b
  8252  000534  0E00               	movlw	0
  8253  000536  6FB6               	movwf	print_string@underline& (0+255),b
  8254  000538  ECF0  F031         	call	_print_string	;wreg free
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;src/driver/lcd.c: 391:   memcpy(old_GPS_time,GPS_time,9);
  8258  00053C  0E8E               	movlw	low show_display@old_GPS_time
  8259  00053E  6E0E               	movwf	memcpy@d1^0,c
  8260  000540  0E02               	movlw	high show_display@old_GPS_time
  8261  000542  6E0F               	movwf	(memcpy@d1+1)^0,c
  8262  000544  0E97               	movlw	low _GPS_time
  8263  000546  6E10               	movwf	memcpy@s1^0,c
  8264  000548  0E02               	movlw	high _GPS_time
  8265  00054A  6E11               	movwf	(memcpy@s1+1)^0,c
  8266  00054C  0E00               	movlw	0
  8267  00054E  6E13               	movwf	(memcpy@n+1)^0,c
  8268  000550  0E09               	movlw	9
  8269  000552  6E12               	movwf	memcpy@n^0,c
  8270  000554  EC24  F037         	call	_memcpy	;wreg free
  8271  000558                     l11615:
  8272                           
  8273                           ;src/driver/lcd.c: 394:  if(old_outqrg != outqrg)
  8274  000558  0100               	movlb	0	; () banked
  8275  00055A  51BB               	movf	show_display@outqrg& (0+255),w,b
  8276  00055C  0102               	movlb	2	; () banked
  8277  00055E  19B6               	xorwf	show_display@old_outqrg& (0+255),w,b
  8278  000560  E106               	bnz	u14630
  8279  000562  0100               	movlb	0	; () banked
  8280  000564  51BC               	movf	(show_display@outqrg+1)& (0+255),w,b
  8281  000566  0102               	movlb	2	; () banked
  8282  000568  19B7               	xorwf	(show_display@old_outqrg+1)& (0+255),w,b
  8283  00056A  B4D8               	btfsc	status,2,c
  8284  00056C  D04B               	goto	l11631
  8285  00056E                     u14630:
  8286                           
  8287                           ; BSR set to: 2
  8288                           ;src/driver/lcd.c: 395:  {;src/driver/lcd.c: 396:   print_string("OUT:     ",0,3,0);
  8289  00056E  0E5F               	movlw	low STR_72
  8290  000570  0100               	movlb	0	; () banked
  8291  000572  6FB2               	movwf	print_string@s& (0+255),b
  8292  000574  0E7F               	movlw	high STR_72
  8293  000576  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8294  000578  0E00               	movlw	0
  8295  00057A  6FB4               	movwf	print_string@x& (0+255),b
  8296  00057C  0E03               	movlw	3
  8297  00057E  6FB5               	movwf	print_string@y& (0+255),b
  8298  000580  0E00               	movlw	0
  8299  000582  6FB6               	movwf	print_string@underline& (0+255),b
  8300  000584  ECF0  F031         	call	_print_string	;wreg free
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;src/driver/lcd.c: 397:   p = itoa(outqrg);
  8304  000588  C0BB  F01A         	movff	show_display@outqrg,itoa@value
  8305  00058C  C0BC  F01B         	movff	show_display@outqrg+1,itoa@value+1
  8306  000590  EC00  F033         	call	_itoa	;wreg free
  8307  000594  C01A  F0BD         	movff	?_itoa,show_display@p
  8308  000598  C01B  F0BE         	movff	?_itoa+1,show_display@p+1
  8309                           
  8310                           ;src/driver/lcd.c: 398:   xpos = 8-strlen(p);
  8311  00059C  C0BD  F00E         	movff	show_display@p,strlen@s
  8312  0005A0  C0BE  F00F         	movff	show_display@p+1,strlen@s+1
  8313  0005A4  EC89  F037         	call	_strlen	;wreg free
  8314  0005A8  500E               	movf	?_strlen^0,w,c
  8315  0005AA  0808               	sublw	8
  8316  0005AC  0100               	movlb	0	; () banked
  8317  0005AE  6FBA               	movwf	show_display@xpos& (0+255),b
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;src/driver/lcd.c: 399:   print_string(p, xpos*8, 3, 0);
  8321  0005B0  C0BD  F0B2         	movff	show_display@p,print_string@s
  8322  0005B4  C0BE  F0B3         	movff	show_display@p+1,print_string@s+1
  8323  0005B8  51BA               	movf	show_display@xpos& (0+255),w,b
  8324  0005BA  0D08               	mullw	8
  8325  0005BC  CFF3 F0B4          	movff	prodl,print_string@x
  8326  0005C0  0E03               	movlw	3
  8327  0005C2  6FB5               	movwf	print_string@y& (0+255),b
  8328  0005C4  0E00               	movlw	0
  8329  0005C6  6FB6               	movwf	print_string@underline& (0+255),b
  8330  0005C8  ECF0  F031         	call	_print_string	;wreg free
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;src/driver/lcd.c: 400:   print_string(".50", 8*8, 3, 0);
  8334  0005CC  0EE7               	movlw	low STR_73
  8335  0005CE  6FB2               	movwf	print_string@s& (0+255),b
  8336  0005D0  0E7F               	movlw	high STR_73
  8337  0005D2  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8338  0005D4  0E40               	movlw	64
  8339  0005D6  6FB4               	movwf	print_string@x& (0+255),b
  8340  0005D8  0E03               	movlw	3
  8341  0005DA  6FB5               	movwf	print_string@y& (0+255),b
  8342  0005DC  0E00               	movlw	0
  8343  0005DE  6FB6               	movwf	print_string@underline& (0+255),b
  8344  0005E0  ECF0  F031         	call	_print_string	;wreg free
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;src/driver/lcd.c: 401:   print_string("MHz",12*8,3,0);
  8348  0005E4  0EEF               	movlw	low STR_74
  8349  0005E6  6FB2               	movwf	print_string@s& (0+255),b
  8350  0005E8  0E7F               	movlw	high STR_74
  8351  0005EA  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8352  0005EC  0E60               	movlw	96
  8353  0005EE  6FB4               	movwf	print_string@x& (0+255),b
  8354  0005F0  0E03               	movlw	3
  8355  0005F2  6FB5               	movwf	print_string@y& (0+255),b
  8356  0005F4  0E00               	movlw	0
  8357  0005F6  6FB6               	movwf	print_string@underline& (0+255),b
  8358  0005F8  ECF0  F031         	call	_print_string	;wreg free
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;src/driver/lcd.c: 403:   old_outqrg = outqrg;
  8362  0005FC  C0BB  F2B6         	movff	show_display@outqrg,show_display@old_outqrg
  8363  000600  C0BC  F2B7         	movff	show_display@outqrg+1,show_display@old_outqrg+1
  8364  000604                     l11631:
  8365                           
  8366                           ;src/driver/lcd.c: 406:  if(old_lnbqrg != currentLO)
  8367  000604  506D               	movf	_currentLO^0,w,c
  8368  000606  0100               	movlb	0	; () banked
  8369  000608  19E0               	xorwf	show_display@old_lnbqrg& (0+255),w,b
  8370  00060A  B4D8               	btfsc	status,2,c
  8371  00060C  D049               	goto	l11643
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;src/driver/lcd.c: 407:  {;src/driver/lcd.c: 408:   print_string("LNB:",0,4,0);
  8375  00060E  0EC5               	movlw	low STR_75
  8376  000610  6FB2               	movwf	print_string@s& (0+255),b
  8377  000612  0E7F               	movlw	high STR_75
  8378  000614  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8379  000616  0E00               	movlw	0
  8380  000618  6FB4               	movwf	print_string@x& (0+255),b
  8381  00061A  0E04               	movlw	4
  8382  00061C  6FB5               	movwf	print_string@y& (0+255),b
  8383  00061E  0E00               	movlw	0
  8384  000620  6FB6               	movwf	print_string@underline& (0+255),b
  8385  000622  ECF0  F031         	call	_print_string	;wreg free
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;src/driver/lcd.c: 409:   if(currentLO == 27)
  8389  000626  0E1B               	movlw	27
  8390  000628  186D               	xorwf	_currentLO^0,w,c
  8391  00062A  A4D8               	btfss	status,2,c
  8392  00062C  D00D               	goto	l11639
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;src/driver/lcd.c: 410:    print_string("25.45", 6*8, 4, 0);
  8396  00062E  0EB3               	movlw	low STR_76
  8397  000630  6FB2               	movwf	print_string@s& (0+255),b
  8398  000632  0E7F               	movlw	high STR_76
  8399  000634  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8400  000636  0E30               	movlw	48
  8401  000638  6FB4               	movwf	print_string@x& (0+255),b
  8402  00063A  0E04               	movlw	4
  8403  00063C  6FB5               	movwf	print_string@y& (0+255),b
  8404  00063E  0E00               	movlw	0
  8405  000640  6FB6               	movwf	print_string@underline& (0+255),b
  8406  000642  ECF0  F031         	call	_print_string	;wreg free
  8407  000646  D01E               	goto	l725
  8408  000648                     l11639:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;src/driver/lcd.c: 412:   {;src/driver/lcd.c: 413:    print_string(itoa(currentLO), 6*8,
      +                           4, 0);
  8412  000648  C06D  F01A         	movff	_currentLO,itoa@value
  8413  00064C  6A1B               	clrf	(itoa@value+1)^0,c
  8414  00064E  EC00  F033         	call	_itoa	;wreg free
  8415  000652  C01A  F0B2         	movff	?_itoa,print_string@s
  8416  000656  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  8417  00065A  0E30               	movlw	48
  8418  00065C  0100               	movlb	0	; () banked
  8419  00065E  6FB4               	movwf	print_string@x& (0+255),b
  8420  000660  0E04               	movlw	4
  8421  000662  6FB5               	movwf	print_string@y& (0+255),b
  8422  000664  0E00               	movlw	0
  8423  000666  6FB6               	movwf	print_string@underline& (0+255),b
  8424  000668  ECF0  F031         	call	_print_string	;wreg free
  8425                           
  8426                           ;src/driver/lcd.c: 414:    print_string(".00", 8*8, 4, 0);
  8427  00066C  0EE3               	movlw	low STR_77
  8428  00066E  6FB2               	movwf	print_string@s& (0+255),b
  8429  000670  0E7F               	movlw	high STR_77
  8430  000672  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8431  000674  0E40               	movlw	64
  8432  000676  6FB4               	movwf	print_string@x& (0+255),b
  8433  000678  0E04               	movlw	4
  8434  00067A  6FB5               	movwf	print_string@y& (0+255),b
  8435  00067C  0E00               	movlw	0
  8436  00067E  6FB6               	movwf	print_string@underline& (0+255),b
  8437  000680  ECF0  F031         	call	_print_string	;wreg free
  8438  000684                     l725:
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;src/driver/lcd.c: 416:   print_string("MHz",12*8,4,0);
  8442  000684  0EEF               	movlw	low STR_74
  8443  000686  6FB2               	movwf	print_string@s& (0+255),b
  8444  000688  0E7F               	movlw	high STR_74
  8445  00068A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8446  00068C  0E60               	movlw	96
  8447  00068E  6FB4               	movwf	print_string@x& (0+255),b
  8448  000690  0E04               	movlw	4
  8449  000692  6FB5               	movwf	print_string@y& (0+255),b
  8450  000694  0E00               	movlw	0
  8451  000696  6FB6               	movwf	print_string@underline& (0+255),b
  8452  000698  ECF0  F031         	call	_print_string	;wreg free
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;src/driver/lcd.c: 418:   old_lnbqrg = currentLO;
  8456  00069C  C06D  F0E0         	movff	_currentLO,show_display@old_lnbqrg
  8457  0006A0                     l11643:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;src/driver/lcd.c: 421:  if(GPS_lock)
  8461  0006A0  51D8               	movf	_GPS_lock& (0+255),w,b
  8462  0006A2  B4D8               	btfsc	status,2,c
  8463  0006A4  0012               	return	
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;src/driver/lcd.c: 422:  {;src/driver/lcd.c: 423:   if( old_GPS_sat != GPS_sat ||
  8467  0006A6  51D1               	movf	_GPS_sat& (0+255),w,b
  8468  0006A8  19DF               	xorwf	show_display@old_GPS_sat& (0+255),w,b
  8469  0006AA  A4D8               	btfss	status,2,c
  8470  0006AC  D02B               	goto	u14710
  8471                           
  8472                           ; BSR set to: 0
  8473  0006AE  51D6               	movf	_GPS_fix& (0+255),w,b
  8474  0006B0  19E2               	xorwf	show_display@old_GPS_fix& (0+255),w,b
  8475  0006B2  B4D8               	btfsc	status,2,c
  8476  0006B4  D003               	goto	u14690
  8477                           
  8478                           ; BSR set to: 0
  8479  0006B6  51E8               	movf	_use_GPS& (0+255),w,b
  8480  0006B8  A4D8               	btfss	status,2,c
  8481  0006BA  D024               	goto	u14710
  8482  0006BC                     u14690:
  8483                           
  8484                           ; BSR set to: 0
  8485  0006BC  0E61               	movlw	low show_display@old_GPS_lat
  8486  0006BE  6E0E               	movwf	memcmp@vl^0,c
  8487  0006C0  0E02               	movlw	high show_display@old_GPS_lat
  8488  0006C2  6E0F               	movwf	(memcmp@vl+1)^0,c
  8489  0006C4  0E7F               	movlw	low _GPS_lat
  8490  0006C6  6E10               	movwf	memcmp@vr^0,c
  8491  0006C8  0E02               	movlw	high _GPS_lat
  8492  0006CA  6E11               	movwf	(memcmp@vr+1)^0,c
  8493  0006CC  0E00               	movlw	0
  8494  0006CE  6E13               	movwf	(memcmp@n+1)^0,c
  8495  0006D0  0E0F               	movlw	15
  8496  0006D2  6E12               	movwf	memcmp@n^0,c
  8497  0006D4  EC3D  F033         	call	_memcmp	;wreg free
  8498  0006D8  500E               	movf	?_memcmp^0,w,c
  8499  0006DA  100F               	iorwf	(?_memcmp+1)^0,w,c
  8500  0006DC  A4D8               	btfss	status,2,c
  8501  0006DE  D012               	goto	u14710
  8502  0006E0  0E52               	movlw	low show_display@old_GPS_lon
  8503  0006E2  6E0E               	movwf	memcmp@vl^0,c
  8504  0006E4  0E02               	movlw	high show_display@old_GPS_lon
  8505  0006E6  6E0F               	movwf	(memcmp@vl+1)^0,c
  8506  0006E8  0E70               	movlw	low _GPS_lon
  8507  0006EA  6E10               	movwf	memcmp@vr^0,c
  8508  0006EC  0E02               	movlw	high _GPS_lon
  8509  0006EE  6E11               	movwf	(memcmp@vr+1)^0,c
  8510  0006F0  0E00               	movlw	0
  8511  0006F2  6E13               	movwf	(memcmp@n+1)^0,c
  8512  0006F4  0E0F               	movlw	15
  8513  0006F6  6E12               	movwf	memcmp@n^0,c
  8514  0006F8  EC3D  F033         	call	_memcmp	;wreg free
  8515  0006FC  500E               	movf	?_memcmp^0,w,c
  8516  0006FE  100F               	iorwf	(?_memcmp+1)^0,w,c
  8517  000700  B4D8               	btfsc	status,2,c
  8518  000702  0012               	return	
  8519  000704                     u14710:
  8520                           
  8521                           ;src/driver/lcd.c: 427:   {;src/driver/lcd.c: 428:    print_string("SAT:",0,5,0);
  8522  000704  0ED4               	movlw	low STR_79
  8523  000706  0100               	movlb	0	; () banked
  8524  000708  6FB2               	movwf	print_string@s& (0+255),b
  8525  00070A  0E7F               	movlw	high STR_79
  8526  00070C  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8527  00070E  0E00               	movlw	0
  8528  000710  6FB4               	movwf	print_string@x& (0+255),b
  8529  000712  0E05               	movlw	5
  8530  000714  6FB5               	movwf	print_string@y& (0+255),b
  8531  000716  0E00               	movlw	0
  8532  000718  6FB6               	movwf	print_string@underline& (0+255),b
  8533  00071A  ECF0  F031         	call	_print_string	;wreg free
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;src/driver/lcd.c: 429:    p = itoa(GPS_sat);
  8537  00071E  C0D1  F01A         	movff	_GPS_sat,itoa@value
  8538  000722  6A1B               	clrf	(itoa@value+1)^0,c
  8539  000724  EC00  F033         	call	_itoa	;wreg free
  8540  000728  C01A  F0BD         	movff	?_itoa,show_display@p
  8541  00072C  C01B  F0BE         	movff	?_itoa+1,show_display@p+1
  8542                           
  8543                           ;src/driver/lcd.c: 430:    xpos = 8-strlen(p);
  8544  000730  C0BD  F00E         	movff	show_display@p,strlen@s
  8545  000734  C0BE  F00F         	movff	show_display@p+1,strlen@s+1
  8546  000738  EC89  F037         	call	_strlen	;wreg free
  8547  00073C  500E               	movf	?_strlen^0,w,c
  8548  00073E  0808               	sublw	8
  8549  000740  0100               	movlb	0	; () banked
  8550  000742  6FBA               	movwf	show_display@xpos& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;src/driver/lcd.c: 431:    print_string("       ",4*8,5,0);
  8554  000744  0E8F               	movlw	low (STR_59+9)
  8555  000746  6FB2               	movwf	print_string@s& (0+255),b
  8556  000748  0E7D               	movlw	high (STR_59+9)
  8557  00074A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8558  00074C  0E20               	movlw	32
  8559  00074E  6FB4               	movwf	print_string@x& (0+255),b
  8560  000750  0E05               	movlw	5
  8561  000752  6FB5               	movwf	print_string@y& (0+255),b
  8562  000754  0E00               	movlw	0
  8563  000756  6FB6               	movwf	print_string@underline& (0+255),b
  8564  000758  ECF0  F031         	call	_print_string	;wreg free
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;src/driver/lcd.c: 432:    print_string(itoa(GPS_sat),xpos*8,5,0);
  8568  00075C  C0D1  F01A         	movff	_GPS_sat,itoa@value
  8569  000760  6A1B               	clrf	(itoa@value+1)^0,c
  8570  000762  EC00  F033         	call	_itoa	;wreg free
  8571  000766  C01A  F0B2         	movff	?_itoa,print_string@s
  8572  00076A  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
  8573  00076E  0100               	movlb	0	; () banked
  8574  000770  51BA               	movf	show_display@xpos& (0+255),w,b
  8575  000772  0D08               	mullw	8
  8576  000774  CFF3 F0B4          	movff	prodl,print_string@x
  8577  000778  0E05               	movlw	5
  8578  00077A  6FB5               	movwf	print_string@y& (0+255),b
  8579  00077C  0E00               	movlw	0
  8580  00077E  6FB6               	movwf	print_string@underline& (0+255),b
  8581  000780  ECF0  F031         	call	_print_string	;wreg free
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;src/driver/lcd.c: 434:    if(GPS_fix)
  8585  000784  51D6               	movf	_GPS_fix& (0+255),w,b
  8586  000786  B4D8               	btfsc	status,2,c
  8587  000788  D00D               	goto	l11669
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;src/driver/lcd.c: 435:     print_string("lock  ",10*8,5,0);
  8591  00078A  0E8A               	movlw	low STR_81
  8592  00078C  6FB2               	movwf	print_string@s& (0+255),b
  8593  00078E  0E7F               	movlw	high STR_81
  8594  000790  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8595  000792  0E50               	movlw	80
  8596  000794  6FB4               	movwf	print_string@x& (0+255),b
  8597  000796  0E05               	movlw	5
  8598  000798  6FB5               	movwf	print_string@y& (0+255),b
  8599  00079A  0E00               	movlw	0
  8600  00079C  6FB6               	movwf	print_string@underline& (0+255),b
  8601  00079E  ECF0  F031         	call	_print_string	;wreg free
  8602  0007A2  D00C               	goto	l733
  8603  0007A4                     l11669:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;src/driver/lcd.c: 437:     print_string("unlock",10*8,5,0);
  8607  0007A4  0EA6               	movlw	low STR_82
  8608  0007A6  6FB2               	movwf	print_string@s& (0+255),b
  8609  0007A8  0E7F               	movlw	high STR_82
  8610  0007AA  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8611  0007AC  0E50               	movlw	80
  8612  0007AE  6FB4               	movwf	print_string@x& (0+255),b
  8613  0007B0  0E05               	movlw	5
  8614  0007B2  6FB5               	movwf	print_string@y& (0+255),b
  8615  0007B4  0E00               	movlw	0
  8616  0007B6  6FB6               	movwf	print_string@underline& (0+255),b
  8617  0007B8  ECF0  F031         	call	_print_string	;wreg free
  8618  0007BC                     l733:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;src/driver/lcd.c: 439:    print_string("LAT:",0,6,0);
  8622  0007BC  0ECF               	movlw	low STR_83
  8623  0007BE  6FB2               	movwf	print_string@s& (0+255),b
  8624  0007C0  0E7F               	movlw	high STR_83
  8625  0007C2  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8626  0007C4  0E00               	movlw	0
  8627  0007C6  6FB4               	movwf	print_string@x& (0+255),b
  8628  0007C8  0E06               	movlw	6
  8629  0007CA  6FB5               	movwf	print_string@y& (0+255),b
  8630  0007CC  0E00               	movlw	0
  8631  0007CE  6FB6               	movwf	print_string@underline& (0+255),b
  8632  0007D0  ECF0  F031         	call	_print_string	;wreg free
  8633                           
  8634                           ;src/driver/lcd.c: 440:    print_string(GPS_lat,8*6,6,0);
  8635  0007D4  0E7F               	movlw	low _GPS_lat
  8636  0007D6  6FB2               	movwf	print_string@s& (0+255),b
  8637  0007D8  0E02               	movlw	high _GPS_lat
  8638  0007DA  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8639  0007DC  0E30               	movlw	48
  8640  0007DE  6FB4               	movwf	print_string@x& (0+255),b
  8641  0007E0  0E06               	movlw	6
  8642  0007E2  6FB5               	movwf	print_string@y& (0+255),b
  8643  0007E4  0E00               	movlw	0
  8644  0007E6  6FB6               	movwf	print_string@underline& (0+255),b
  8645  0007E8  ECF0  F031         	call	_print_string	;wreg free
  8646                           
  8647                           ;src/driver/lcd.c: 442:    print_string("LON:",0,7,0);
  8648  0007EC  0ECA               	movlw	low STR_84
  8649  0007EE  6FB2               	movwf	print_string@s& (0+255),b
  8650  0007F0  0E7F               	movlw	high STR_84
  8651  0007F2  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8652  0007F4  0E00               	movlw	0
  8653  0007F6  6FB4               	movwf	print_string@x& (0+255),b
  8654  0007F8  0E07               	movlw	7
  8655  0007FA  6FB5               	movwf	print_string@y& (0+255),b
  8656  0007FC  0E00               	movlw	0
  8657  0007FE  6FB6               	movwf	print_string@underline& (0+255),b
  8658  000800  ECF0  F031         	call	_print_string	;wreg free
  8659                           
  8660                           ;src/driver/lcd.c: 443:    print_string(GPS_lon,8*5,7,0);
  8661  000804  0E70               	movlw	low _GPS_lon
  8662  000806  6FB2               	movwf	print_string@s& (0+255),b
  8663  000808  0E02               	movlw	high _GPS_lon
  8664  00080A  6FB3               	movwf	(print_string@s+1)& (0+255),b
  8665  00080C  0E28               	movlw	40
  8666  00080E  6FB4               	movwf	print_string@x& (0+255),b
  8667  000810  0E07               	movlw	7
  8668  000812  6FB5               	movwf	print_string@y& (0+255),b
  8669  000814  0E00               	movlw	0
  8670  000816  6FB6               	movwf	print_string@underline& (0+255),b
  8671  000818  ECF0  F031         	call	_print_string	;wreg free
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;src/driver/lcd.c: 445:    if(GPS_lon[0] != ' ' && GPS_lat[0] != ' ')
  8675  00081C  0E20               	movlw	32
  8676  00081E  0102               	movlb	2	; () banked
  8677  000820  1970               	xorwf	_GPS_lon& (0+255),w,b
  8678  000822  B4D8               	btfsc	status,2,c
  8679  000824  D013               	goto	l11677
  8680                           
  8681                           ; BSR set to: 2
  8682  000826  0E20               	movlw	32
  8683  000828  197F               	xorwf	_GPS_lat& (0+255),w,b
  8684  00082A  B4D8               	btfsc	status,2,c
  8685  00082C  D00F               	goto	l11677
  8686                           
  8687                           ; BSR set to: 2
  8688                           ;src/driver/lcd.c: 446:     print_string(CalculateGridSquare(),8*9,1,0);
  8689  00082E  EC2E  F007         	call	_CalculateGridSquare	;wreg free
  8690  000832  C027  F0B2         	movff	?_CalculateGridSquare,print_string@s
  8691  000836  C028  F0B3         	movff	?_CalculateGridSquare+1,print_string@s+1
  8692  00083A  0E48               	movlw	72
  8693  00083C  0100               	movlb	0	; () banked
  8694  00083E  6FB4               	movwf	print_string@x& (0+255),b
  8695  000840  0E01               	movlw	1
  8696  000842  6FB5               	movwf	print_string@y& (0+255),b
  8697  000844  0E00               	movlw	0
  8698  000846  6FB6               	movwf	print_string@underline& (0+255),b
  8699  000848  ECF0  F031         	call	_print_string	;wreg free
  8700  00084C                     l11677:
  8701                           
  8702                           ;src/driver/lcd.c: 448:    old_GPS_sat = GPS_sat;
  8703  00084C  C0D1  F0DF         	movff	_GPS_sat,show_display@old_GPS_sat
  8704                           
  8705                           ;src/driver/lcd.c: 449:    old_GPS_fix = GPS_fix;
  8706  000850  C0D6  F0E2         	movff	_GPS_fix,show_display@old_GPS_fix
  8707                           
  8708                           ;src/driver/lcd.c: 450:    memcpy(old_GPS_lat,GPS_lat,15);
  8709  000854  0E61               	movlw	low show_display@old_GPS_lat
  8710  000856  6E0E               	movwf	memcpy@d1^0,c
  8711  000858  0E02               	movlw	high show_display@old_GPS_lat
  8712  00085A  6E0F               	movwf	(memcpy@d1+1)^0,c
  8713  00085C  0E7F               	movlw	low _GPS_lat
  8714  00085E  6E10               	movwf	memcpy@s1^0,c
  8715  000860  0E02               	movlw	high _GPS_lat
  8716  000862  6E11               	movwf	(memcpy@s1+1)^0,c
  8717  000864  0E00               	movlw	0
  8718  000866  6E13               	movwf	(memcpy@n+1)^0,c
  8719  000868  0E0F               	movlw	15
  8720  00086A  6E12               	movwf	memcpy@n^0,c
  8721  00086C  EC24  F037         	call	_memcpy	;wreg free
  8722                           
  8723                           ;src/driver/lcd.c: 451:    memcpy(old_GPS_lon,GPS_lon,15);
  8724  000870  0E52               	movlw	low show_display@old_GPS_lon
  8725  000872  6E0E               	movwf	memcpy@d1^0,c
  8726  000874  0E02               	movlw	high show_display@old_GPS_lon
  8727  000876  6E0F               	movwf	(memcpy@d1+1)^0,c
  8728  000878  0E70               	movlw	low _GPS_lon
  8729  00087A  6E10               	movwf	memcpy@s1^0,c
  8730  00087C  0E02               	movlw	high _GPS_lon
  8731  00087E  6E11               	movwf	(memcpy@s1+1)^0,c
  8732  000880  0E00               	movlw	0
  8733  000882  6E13               	movwf	(memcpy@n+1)^0,c
  8734  000884  0E0F               	movlw	15
  8735  000886  6E12               	movwf	memcpy@n^0,c
  8736  000888  EC24  F037         	call	_memcpy	;wreg free
  8737  00088C  0012               	return		;funcret
  8738  00088E                     __end_of_show_display:
  8739                           	opt callstack 0
  8740                           
  8741 ;; *************** function _memcmp *****************
  8742 ;; Defined at:
  8743 ;;		line 3 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memcmp.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  vl              2   13[COMRAM] PTR const void 
  8746 ;;		 -> GPS_time(9), show_display@old_GPS_lon(15), show_display@old_GPS_lat(15), 
  8747 ;;  vr              2   15[COMRAM] PTR const void 
  8748 ;;		 -> GPS_lon(15), GPS_lat(15), show_display@old_GPS_time(9), 
  8749 ;;  n               2   17[COMRAM] unsigned int 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  r               2   23[COMRAM] PTR const unsigned char 
  8752 ;;		 -> GPS_lon(15), GPS_lat(15), show_display@old_GPS_time(9), 
  8753 ;;  l               2   21[COMRAM] PTR const unsigned char 
  8754 ;;		 -> GPS_time(9), show_display@old_GPS_lon(15), show_display@old_GPS_lat(15), 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  2   13[COMRAM] int 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/2
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8764 ;;      Params:         6       0       0       0       0       0       0
  8765 ;;      Locals:         4       0       0       0       0       0       0
  8766 ;;      Temps:          2       0       0       0       0       0       0
  8767 ;;      Totals:        12       0       0       0       0       0       0
  8768 ;;Total ram usage:       12 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    2
  8771 ;; This function calls:
  8772 ;;		Nothing
  8773 ;; This function is called by:
  8774 ;;		_show_display
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text14
  8779  00667A                     __ptext14:
  8780                           	opt callstack 0
  8781  00667A                     _memcmp:
  8782                           	opt callstack 27
  8783                           
  8784                           ;incstack = 0
  8785  00667A  C00E  F016         	movff	memcmp@vl,memcmp@l
  8786  00667E  C00F  F017         	movff	memcmp@vl+1,memcmp@l+1
  8787  006682  C010  F018         	movff	memcmp@vr,memcmp@r
  8788  006686  C011  F019         	movff	memcmp@vr+1,memcmp@r+1
  8789  00668A  D007               	goto	l8033
  8790  00668C                     l8031:
  8791  00668C  0612               	decf	memcmp@n^0,f,c
  8792  00668E  A0D8               	btfss	status,0,c
  8793  006690  0613               	decf	(memcmp@n+1)^0,f,c
  8794  006692  4A16               	infsnz	memcmp@l^0,f,c
  8795  006694  2A17               	incf	(memcmp@l+1)^0,f,c
  8796  006696  4A18               	infsnz	memcmp@r^0,f,c
  8797  006698  2A19               	incf	(memcmp@r+1)^0,f,c
  8798  00669A                     l8033:
  8799  00669A  5012               	movf	memcmp@n^0,w,c
  8800  00669C  1013               	iorwf	(memcmp@n+1)^0,w,c
  8801  00669E  B4D8               	btfsc	status,2,c
  8802  0066A0  D00C               	goto	u9150
  8803  0066A2  C018  FFD9         	movff	memcmp@r,fsr2l
  8804  0066A6  C019  FFDA         	movff	memcmp@r+1,fsr2h
  8805  0066AA  C016  FFE1         	movff	memcmp@l,fsr1l
  8806  0066AE  C017  FFE2         	movff	memcmp@l+1,fsr1h
  8807  0066B2  50DE               	movf	postinc2,w,c
  8808  0066B4  18E6               	xorwf	postinc1,w,c
  8809  0066B6  B4D8               	btfsc	status,2,c
  8810  0066B8  D7E9               	goto	l8031
  8811  0066BA                     u9150:
  8812  0066BA  5012               	movf	memcmp@n^0,w,c
  8813  0066BC  1013               	iorwf	(memcmp@n+1)^0,w,c
  8814  0066BE  A4D8               	btfss	status,2,c
  8815  0066C0  D005               	goto	l8041
  8816  0066C2  0E00               	movlw	0
  8817  0066C4  6E0F               	movwf	(?_memcmp+1)^0,c
  8818  0066C6  0E00               	movlw	0
  8819  0066C8  6E0E               	movwf	?_memcmp^0,c
  8820  0066CA  0012               	return	
  8821  0066CC                     l8041:
  8822  0066CC  C016  FFD9         	movff	memcmp@l,fsr2l
  8823  0066D0  C017  FFDA         	movff	memcmp@l+1,fsr2h
  8824  0066D4  50DF               	movf	indf2,w,c
  8825  0066D6  6E14               	movwf	??_memcmp^0,c
  8826  0066D8  C018  FFD9         	movff	memcmp@r,fsr2l
  8827  0066DC  C019  FFDA         	movff	memcmp@r+1,fsr2h
  8828  0066E0  50DF               	movf	indf2,w,c
  8829  0066E2  6E15               	movwf	(??_memcmp+1)^0,c
  8830  0066E4  5015               	movf	(??_memcmp+1)^0,w,c
  8831  0066E6  5C14               	subwf	??_memcmp^0,w,c
  8832  0066E8  6E0E               	movwf	?_memcmp^0,c
  8833  0066EA  6A0F               	clrf	(?_memcmp+1)^0,c
  8834  0066EC  A0D8               	btfss	status,0,c
  8835  0066EE  060F               	decf	(?_memcmp+1)^0,f,c
  8836  0066F0  0012               	return		;funcret
  8837  0066F2                     __end_of_memcmp:
  8838                           	opt callstack 0
  8839                           
  8840 ;; *************** function _CalculateGridSquare *****************
  8841 ;; Defined at:
  8842 ;;		line 396 in file "src/gps.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;		None
  8845 ;; Auto vars:     Size  Location     Type
  8846 ;;  lat_min         4   88[COMRAM] unsigned long 
  8847 ;;  lat             4   84[COMRAM] unsigned long 
  8848 ;;  lon_min         4   80[COMRAM] unsigned long 
  8849 ;;  lon             4   76[COMRAM] unsigned long 
  8850 ;;  latmid          4   72[COMRAM] unsigned long 
  8851 ;;  latrest1        4   68[COMRAM] unsigned long 
  8852 ;;  latgf           4   64[COMRAM] unsigned long 
  8853 ;;  latm            4   60[COMRAM] unsigned long 
  8854 ;;  lonmid          4   56[COMRAM] unsigned long 
  8855 ;;  lonrest1        4   52[COMRAM] unsigned long 
  8856 ;;  longf           4   48[COMRAM] unsigned long 
  8857 ;;  lonm            4   44[COMRAM] unsigned long 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  2   38[COMRAM] PTR unsigned char 
  8860 ;; Registers used:
  8861 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 3F/2
  8864 ;;		On exit  : 3F/2
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8867 ;;      Params:         2       0       0       0       0       0       0
  8868 ;;      Locals:        48       0       0       0       0       0       0
  8869 ;;      Temps:          4       0       0       0       0       0       0
  8870 ;;      Totals:        54       0       0       0       0       0       0
  8871 ;;Total ram usage:       54 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    3
  8874 ;; This function calls:
  8875 ;;		___lldiv
  8876 ;;		___lmul
  8877 ;; This function is called by:
  8878 ;;		_show_display
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           	psect	text15
  8883  000E5C                     __ptext15:
  8884                           	opt callstack 0
  8885  000E5C                     _CalculateGridSquare:
  8886                           	opt callstack 26
  8887                           
  8888                           ; BSR set to: 2
  8889                           ;src/gps.c: 398: static char grid[7];;src/gps.c: 401:  u32 lon = ((GPS_lon[0]-'0')*100) 
      +                          + ((GPS_lon[1]-'0')*10) + ((GPS_lon[2]-'0')*1);
  8890                           
  8891                           ;incstack = 0
  8892  000E5C  0E30               	movlw	48
  8893  000E5E  6E29               	movwf	??_CalculateGridSquare^0,c
  8894  000E60  0EEB               	movlw	235
  8895  000E62  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  8896  000E64  5170               	movf	_GPS_lon& (0+255),w,b
  8897  000E66  0D64               	mullw	100
  8898  000E68  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  8899  000E6C  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  8900  000E70  5171               	movf	(_GPS_lon+1)& (0+255),w,b
  8901  000E72  0D0A               	mullw	10
  8902  000E74  50F3               	movf	243,w,c
  8903  000E76  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8904  000E78  50F4               	movf	244,w,c
  8905  000E7A  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8906  000E7C  5172               	movf	(_GPS_lon+2)& (0+255),w,b
  8907  000E7E  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8908  000E80  0E00               	movlw	0
  8909  000E82  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8910  000E84  5029               	movf	??_CalculateGridSquare^0,w,c
  8911  000E86  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8912  000E88  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  8913  000E8A  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8914  000E8C  C02B  F04D         	movff	??_CalculateGridSquare+2,CalculateGridSquare@lon
  8915  000E90  C02C  F04E         	movff	??_CalculateGridSquare+3,CalculateGridSquare@lon+1
  8916  000E94  6A4F               	clrf	(CalculateGridSquare@lon+2)^0,c
  8917  000E96  6A50               	clrf	(CalculateGridSquare@lon+3)^0,c
  8918                           
  8919                           ;src/gps.c: 402:  u32 lon_min = ((GPS_lon[4]-'0')*10) + ((GPS_lon[5]-'0')*1);
  8920  000E98  0EF0               	movlw	240
  8921  000E9A  6E29               	movwf	??_CalculateGridSquare^0,c
  8922  000E9C  0EFD               	movlw	253
  8923  000E9E  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  8924  000EA0  5174               	movf	(_GPS_lon+4)& (0+255),w,b
  8925  000EA2  0D0A               	mullw	10
  8926  000EA4  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  8927  000EA8  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  8928  000EAC  5175               	movf	(_GPS_lon+5)& (0+255),w,b
  8929  000EAE  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8930  000EB0  0E00               	movlw	0
  8931  000EB2  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8932  000EB4  5029               	movf	??_CalculateGridSquare^0,w,c
  8933  000EB6  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8934  000EB8  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  8935  000EBA  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8936  000EBC  C02B  F051         	movff	??_CalculateGridSquare+2,CalculateGridSquare@lon_min
  8937  000EC0  C02C  F052         	movff	??_CalculateGridSquare+3,CalculateGridSquare@lon_min+1
  8938  000EC4  6A53               	clrf	(CalculateGridSquare@lon_min+2)^0,c
  8939  000EC6  6A54               	clrf	(CalculateGridSquare@lon_min+3)^0,c
  8940                           
  8941                           ; BSR set to: 2
  8942                           ;src/gps.c: 403:  lon_min *= 100;
  8943  000EC8  C051  F00E         	movff	CalculateGridSquare@lon_min,___lmul@multiplier
  8944  000ECC  C052  F00F         	movff	CalculateGridSquare@lon_min+1,___lmul@multiplier+1
  8945  000ED0  C053  F010         	movff	CalculateGridSquare@lon_min+2,___lmul@multiplier+2
  8946  000ED4  C054  F011         	movff	CalculateGridSquare@lon_min+3,___lmul@multiplier+3
  8947  000ED8  0E64               	movlw	100
  8948  000EDA  6E12               	movwf	___lmul@multiplicand^0,c
  8949  000EDC  0E00               	movlw	0
  8950  000EDE  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  8951  000EE0  0E00               	movlw	0
  8952  000EE2  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  8953  000EE4  0E00               	movlw	0
  8954  000EE6  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  8955  000EE8  EC5A  F034         	call	___lmul	;wreg free
  8956  000EEC  C00E  F051         	movff	?___lmul,CalculateGridSquare@lon_min
  8957  000EF0  C00F  F052         	movff	?___lmul+1,CalculateGridSquare@lon_min+1
  8958  000EF4  C010  F053         	movff	?___lmul+2,CalculateGridSquare@lon_min+2
  8959  000EF8  C011  F054         	movff	?___lmul+3,CalculateGridSquare@lon_min+3
  8960                           
  8961                           ;src/gps.c: 404:  lon_min += (((GPS_lon[7]-'0')*10) + ((GPS_lon[8]-'0')*1));
  8962  000EFC  0EF0               	movlw	240
  8963  000EFE  6E29               	movwf	??_CalculateGridSquare^0,c
  8964  000F00  0EFD               	movlw	253
  8965  000F02  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  8966  000F04  0102               	movlb	2	; () banked
  8967  000F06  5177               	movf	(_GPS_lon+7)& (0+255),w,b
  8968  000F08  0D0A               	mullw	10
  8969  000F0A  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  8970  000F0E  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  8971  000F12  5178               	movf	(_GPS_lon+8)& (0+255),w,b
  8972  000F14  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8973  000F16  0E00               	movlw	0
  8974  000F18  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8975  000F1A  5029               	movf	??_CalculateGridSquare^0,w,c
  8976  000F1C  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  8977  000F1E  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  8978  000F20  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  8979  000F22  502B               	movf	(??_CalculateGridSquare+2)^0,w,c
  8980  000F24  2651               	addwf	CalculateGridSquare@lon_min^0,f,c
  8981  000F26  502C               	movf	(??_CalculateGridSquare+3)^0,w,c
  8982  000F28  2252               	addwfc	(CalculateGridSquare@lon_min+1)^0,f,c
  8983  000F2A  0E00               	movlw	0
  8984  000F2C  2253               	addwfc	(CalculateGridSquare@lon_min+2)^0,f,c
  8985  000F2E  0E00               	movlw	0
  8986  000F30  2254               	addwfc	(CalculateGridSquare@lon_min+3)^0,f,c
  8987                           
  8988                           ;src/gps.c: 405:  lon_min = (lon_min * 100) / 60;
  8989  000F32  C051  F00E         	movff	CalculateGridSquare@lon_min,___lmul@multiplier
  8990  000F36  C052  F00F         	movff	CalculateGridSquare@lon_min+1,___lmul@multiplier+1
  8991  000F3A  C053  F010         	movff	CalculateGridSquare@lon_min+2,___lmul@multiplier+2
  8992  000F3E  C054  F011         	movff	CalculateGridSquare@lon_min+3,___lmul@multiplier+3
  8993  000F42  0E64               	movlw	100
  8994  000F44  6E12               	movwf	___lmul@multiplicand^0,c
  8995  000F46  0E00               	movlw	0
  8996  000F48  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  8997  000F4A  0E00               	movlw	0
  8998  000F4C  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  8999  000F4E  0E00               	movlw	0
  9000  000F50  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9001  000F52  EC5A  F034         	call	___lmul	;wreg free
  9002  000F56  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  9003  000F5A  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  9004  000F5E  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  9005  000F62  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  9006  000F66  0E3C               	movlw	60
  9007  000F68  6E1E               	movwf	___lldiv@divisor^0,c
  9008  000F6A  0E00               	movlw	0
  9009  000F6C  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9010  000F6E  0E00               	movlw	0
  9011  000F70  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9012  000F72  0E00               	movlw	0
  9013  000F74  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9014  000F76  ECBF  F032         	call	___lldiv	;wreg free
  9015  000F7A  C01A  F051         	movff	?___lldiv,CalculateGridSquare@lon_min
  9016  000F7E  C01B  F052         	movff	?___lldiv+1,CalculateGridSquare@lon_min+1
  9017  000F82  C01C  F053         	movff	?___lldiv+2,CalculateGridSquare@lon_min+2
  9018  000F86  C01D  F054         	movff	?___lldiv+3,CalculateGridSquare@lon_min+3
  9019                           
  9020                           ;src/gps.c: 406:  lon = lon*10000 + lon_min;
  9021  000F8A  C04D  F00E         	movff	CalculateGridSquare@lon,___lmul@multiplier
  9022  000F8E  C04E  F00F         	movff	CalculateGridSquare@lon+1,___lmul@multiplier+1
  9023  000F92  C04F  F010         	movff	CalculateGridSquare@lon+2,___lmul@multiplier+2
  9024  000F96  C050  F011         	movff	CalculateGridSquare@lon+3,___lmul@multiplier+3
  9025  000F9A  0E10               	movlw	16
  9026  000F9C  6E12               	movwf	___lmul@multiplicand^0,c
  9027  000F9E  0E27               	movlw	39
  9028  000FA0  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9029  000FA2  0E00               	movlw	0
  9030  000FA4  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9031  000FA6  0E00               	movlw	0
  9032  000FA8  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9033  000FAA  EC5A  F034         	call	___lmul	;wreg free
  9034  000FAE  5051               	movf	CalculateGridSquare@lon_min^0,w,c
  9035  000FB0  240E               	addwf	?___lmul^0,w,c
  9036  000FB2  6E4D               	movwf	CalculateGridSquare@lon^0,c
  9037  000FB4  5052               	movf	(CalculateGridSquare@lon_min+1)^0,w,c
  9038  000FB6  200F               	addwfc	(?___lmul+1)^0,w,c
  9039  000FB8  6E4E               	movwf	(CalculateGridSquare@lon+1)^0,c
  9040  000FBA  5053               	movf	(CalculateGridSquare@lon_min+2)^0,w,c
  9041  000FBC  2010               	addwfc	(?___lmul+2)^0,w,c
  9042  000FBE  6E4F               	movwf	(CalculateGridSquare@lon+2)^0,c
  9043  000FC0  5054               	movf	(CalculateGridSquare@lon_min+3)^0,w,c
  9044  000FC2  2011               	addwfc	(?___lmul+3)^0,w,c
  9045  000FC4  6E50               	movwf	(CalculateGridSquare@lon+3)^0,c
  9046                           
  9047                           ;src/gps.c: 409:     if(GPS_lon[9] == 'W') lon = -lon;
  9048  000FC6  0E57               	movlw	87
  9049  000FC8  0102               	movlb	2	; () banked
  9050  000FCA  1979               	xorwf	(_GPS_lon+9)& (0+255),w,b
  9051  000FCC  A4D8               	btfss	status,2,c
  9052  000FCE  D008               	goto	l11037
  9053                           
  9054                           ; BSR set to: 2
  9055  000FD0  1E50               	comf	(CalculateGridSquare@lon+3)^0,f,c
  9056  000FD2  1E4F               	comf	(CalculateGridSquare@lon+2)^0,f,c
  9057  000FD4  1E4E               	comf	(CalculateGridSquare@lon+1)^0,f,c
  9058  000FD6  6C4D               	negf	CalculateGridSquare@lon^0,c
  9059  000FD8  0E00               	movlw	0
  9060  000FDA  224E               	addwfc	(CalculateGridSquare@lon+1)^0,f,c
  9061  000FDC  224F               	addwfc	(CalculateGridSquare@lon+2)^0,f,c
  9062  000FDE  2250               	addwfc	(CalculateGridSquare@lon+3)^0,f,c
  9063  000FE0                     l11037:
  9064                           
  9065                           ; BSR set to: 2
  9066                           ;src/gps.c: 411:     lon += 1800000;
  9067  000FE0  0E40               	movlw	64
  9068  000FE2  264D               	addwf	CalculateGridSquare@lon^0,f,c
  9069  000FE4  0E77               	movlw	119
  9070  000FE6  224E               	addwfc	(CalculateGridSquare@lon+1)^0,f,c
  9071  000FE8  0E1B               	movlw	27
  9072  000FEA  224F               	addwfc	(CalculateGridSquare@lon+2)^0,f,c
  9073  000FEC  0E00               	movlw	0
  9074  000FEE  2250               	addwfc	(CalculateGridSquare@lon+3)^0,f,c
  9075                           
  9076                           ; BSR set to: 2
  9077                           ;src/gps.c: 414:  u32 lat = ((GPS_lat[0]-'0')*10) + ((GPS_lat[1]-'0')*1);
  9078  000FF0  0EF0               	movlw	240
  9079  000FF2  6E29               	movwf	??_CalculateGridSquare^0,c
  9080  000FF4  0EFD               	movlw	253
  9081  000FF6  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  9082  000FF8  517F               	movf	_GPS_lat& (0+255),w,b
  9083  000FFA  0D0A               	mullw	10
  9084  000FFC  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  9085  001000  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  9086  001004  5180               	movf	(_GPS_lat+1)& (0+255),w,b
  9087  001006  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9088  001008  0E00               	movlw	0
  9089  00100A  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9090  00100C  5029               	movf	??_CalculateGridSquare^0,w,c
  9091  00100E  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9092  001010  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  9093  001012  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9094  001014  C02B  F055         	movff	??_CalculateGridSquare+2,CalculateGridSquare@lat
  9095  001018  C02C  F056         	movff	??_CalculateGridSquare+3,CalculateGridSquare@lat+1
  9096  00101C  6A57               	clrf	(CalculateGridSquare@lat+2)^0,c
  9097  00101E  6A58               	clrf	(CalculateGridSquare@lat+3)^0,c
  9098                           
  9099                           ; BSR set to: 2
  9100                           ;src/gps.c: 415:  u32 lat_min = ((GPS_lat[3]-'0')*10) + ((GPS_lat[4]-'0')*1);
  9101  001020  0EF0               	movlw	240
  9102  001022  6E29               	movwf	??_CalculateGridSquare^0,c
  9103  001024  0EFD               	movlw	253
  9104  001026  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  9105  001028  5182               	movf	(_GPS_lat+3)& (0+255),w,b
  9106  00102A  0D0A               	mullw	10
  9107  00102C  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  9108  001030  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  9109  001034  5183               	movf	(_GPS_lat+4)& (0+255),w,b
  9110  001036  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9111  001038  0E00               	movlw	0
  9112  00103A  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9113  00103C  5029               	movf	??_CalculateGridSquare^0,w,c
  9114  00103E  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9115  001040  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  9116  001042  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9117  001044  C02B  F059         	movff	??_CalculateGridSquare+2,CalculateGridSquare@lat_min
  9118  001048  C02C  F05A         	movff	??_CalculateGridSquare+3,CalculateGridSquare@lat_min+1
  9119  00104C  6A5B               	clrf	(CalculateGridSquare@lat_min+2)^0,c
  9120  00104E  6A5C               	clrf	(CalculateGridSquare@lat_min+3)^0,c
  9121                           
  9122                           ; BSR set to: 2
  9123                           ;src/gps.c: 416:  lat_min *= 100;
  9124  001050  C059  F00E         	movff	CalculateGridSquare@lat_min,___lmul@multiplier
  9125  001054  C05A  F00F         	movff	CalculateGridSquare@lat_min+1,___lmul@multiplier+1
  9126  001058  C05B  F010         	movff	CalculateGridSquare@lat_min+2,___lmul@multiplier+2
  9127  00105C  C05C  F011         	movff	CalculateGridSquare@lat_min+3,___lmul@multiplier+3
  9128  001060  0E64               	movlw	100
  9129  001062  6E12               	movwf	___lmul@multiplicand^0,c
  9130  001064  0E00               	movlw	0
  9131  001066  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9132  001068  0E00               	movlw	0
  9133  00106A  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9134  00106C  0E00               	movlw	0
  9135  00106E  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9136  001070  EC5A  F034         	call	___lmul	;wreg free
  9137  001074  C00E  F059         	movff	?___lmul,CalculateGridSquare@lat_min
  9138  001078  C00F  F05A         	movff	?___lmul+1,CalculateGridSquare@lat_min+1
  9139  00107C  C010  F05B         	movff	?___lmul+2,CalculateGridSquare@lat_min+2
  9140  001080  C011  F05C         	movff	?___lmul+3,CalculateGridSquare@lat_min+3
  9141                           
  9142                           ;src/gps.c: 417:  lat_min += (((GPS_lat[6]-'0')*10) + ((GPS_lat[7]-'0')*1));
  9143  001084  0EF0               	movlw	240
  9144  001086  6E29               	movwf	??_CalculateGridSquare^0,c
  9145  001088  0EFD               	movlw	253
  9146  00108A  6E2A               	movwf	(??_CalculateGridSquare+1)^0,c
  9147  00108C  0102               	movlb	2	; () banked
  9148  00108E  5185               	movf	(_GPS_lat+6)& (0+255),w,b
  9149  001090  0D0A               	mullw	10
  9150  001092  CFF3 F02B          	movff	prodl,??_CalculateGridSquare+2
  9151  001096  CFF4 F02C          	movff	prodh,??_CalculateGridSquare+3
  9152  00109A  5186               	movf	(_GPS_lat+7)& (0+255),w,b
  9153  00109C  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9154  00109E  0E00               	movlw	0
  9155  0010A0  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9156  0010A2  5029               	movf	??_CalculateGridSquare^0,w,c
  9157  0010A4  262B               	addwf	(??_CalculateGridSquare+2)^0,f,c
  9158  0010A6  502A               	movf	(??_CalculateGridSquare+1)^0,w,c
  9159  0010A8  222C               	addwfc	(??_CalculateGridSquare+3)^0,f,c
  9160  0010AA  502B               	movf	(??_CalculateGridSquare+2)^0,w,c
  9161  0010AC  2659               	addwf	CalculateGridSquare@lat_min^0,f,c
  9162  0010AE  502C               	movf	(??_CalculateGridSquare+3)^0,w,c
  9163  0010B0  225A               	addwfc	(CalculateGridSquare@lat_min+1)^0,f,c
  9164  0010B2  0E00               	movlw	0
  9165  0010B4  225B               	addwfc	(CalculateGridSquare@lat_min+2)^0,f,c
  9166  0010B6  0E00               	movlw	0
  9167  0010B8  225C               	addwfc	(CalculateGridSquare@lat_min+3)^0,f,c
  9168                           
  9169                           ; BSR set to: 2
  9170                           ;src/gps.c: 418:  lat_min = (lat_min * 100) / 60;
  9171  0010BA  C059  F00E         	movff	CalculateGridSquare@lat_min,___lmul@multiplier
  9172  0010BE  C05A  F00F         	movff	CalculateGridSquare@lat_min+1,___lmul@multiplier+1
  9173  0010C2  C05B  F010         	movff	CalculateGridSquare@lat_min+2,___lmul@multiplier+2
  9174  0010C6  C05C  F011         	movff	CalculateGridSquare@lat_min+3,___lmul@multiplier+3
  9175  0010CA  0E64               	movlw	100
  9176  0010CC  6E12               	movwf	___lmul@multiplicand^0,c
  9177  0010CE  0E00               	movlw	0
  9178  0010D0  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9179  0010D2  0E00               	movlw	0
  9180  0010D4  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9181  0010D6  0E00               	movlw	0
  9182  0010D8  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9183  0010DA  EC5A  F034         	call	___lmul	;wreg free
  9184  0010DE  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  9185  0010E2  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  9186  0010E6  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  9187  0010EA  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  9188  0010EE  0E3C               	movlw	60
  9189  0010F0  6E1E               	movwf	___lldiv@divisor^0,c
  9190  0010F2  0E00               	movlw	0
  9191  0010F4  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9192  0010F6  0E00               	movlw	0
  9193  0010F8  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9194  0010FA  0E00               	movlw	0
  9195  0010FC  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9196  0010FE  ECBF  F032         	call	___lldiv	;wreg free
  9197  001102  C01A  F059         	movff	?___lldiv,CalculateGridSquare@lat_min
  9198  001106  C01B  F05A         	movff	?___lldiv+1,CalculateGridSquare@lat_min+1
  9199  00110A  C01C  F05B         	movff	?___lldiv+2,CalculateGridSquare@lat_min+2
  9200  00110E  C01D  F05C         	movff	?___lldiv+3,CalculateGridSquare@lat_min+3
  9201                           
  9202                           ;src/gps.c: 419:  lat = lat*10000 + lat_min;
  9203  001112  C055  F00E         	movff	CalculateGridSquare@lat,___lmul@multiplier
  9204  001116  C056  F00F         	movff	CalculateGridSquare@lat+1,___lmul@multiplier+1
  9205  00111A  C057  F010         	movff	CalculateGridSquare@lat+2,___lmul@multiplier+2
  9206  00111E  C058  F011         	movff	CalculateGridSquare@lat+3,___lmul@multiplier+3
  9207  001122  0E10               	movlw	16
  9208  001124  6E12               	movwf	___lmul@multiplicand^0,c
  9209  001126  0E27               	movlw	39
  9210  001128  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9211  00112A  0E00               	movlw	0
  9212  00112C  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9213  00112E  0E00               	movlw	0
  9214  001130  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9215  001132  EC5A  F034         	call	___lmul	;wreg free
  9216  001136  5059               	movf	CalculateGridSquare@lat_min^0,w,c
  9217  001138  240E               	addwf	?___lmul^0,w,c
  9218  00113A  6E55               	movwf	CalculateGridSquare@lat^0,c
  9219  00113C  505A               	movf	(CalculateGridSquare@lat_min+1)^0,w,c
  9220  00113E  200F               	addwfc	(?___lmul+1)^0,w,c
  9221  001140  6E56               	movwf	(CalculateGridSquare@lat+1)^0,c
  9222  001142  505B               	movf	(CalculateGridSquare@lat_min+2)^0,w,c
  9223  001144  2010               	addwfc	(?___lmul+2)^0,w,c
  9224  001146  6E57               	movwf	(CalculateGridSquare@lat+2)^0,c
  9225  001148  505C               	movf	(CalculateGridSquare@lat_min+3)^0,w,c
  9226  00114A  2011               	addwfc	(?___lmul+3)^0,w,c
  9227  00114C  6E58               	movwf	(CalculateGridSquare@lat+3)^0,c
  9228                           
  9229                           ;src/gps.c: 423:     if(GPS_lat[8] == 'S') lat = -lat;
  9230  00114E  0E53               	movlw	83
  9231  001150  0102               	movlb	2	; () banked
  9232  001152  1987               	xorwf	(_GPS_lat+8)& (0+255),w,b
  9233  001154  A4D8               	btfss	status,2,c
  9234  001156  D008               	goto	l11055
  9235                           
  9236                           ; BSR set to: 2
  9237  001158  1E58               	comf	(CalculateGridSquare@lat+3)^0,f,c
  9238  00115A  1E57               	comf	(CalculateGridSquare@lat+2)^0,f,c
  9239  00115C  1E56               	comf	(CalculateGridSquare@lat+1)^0,f,c
  9240  00115E  6C55               	negf	CalculateGridSquare@lat^0,c
  9241  001160  0E00               	movlw	0
  9242  001162  2256               	addwfc	(CalculateGridSquare@lat+1)^0,f,c
  9243  001164  2257               	addwfc	(CalculateGridSquare@lat+2)^0,f,c
  9244  001166  2258               	addwfc	(CalculateGridSquare@lat+3)^0,f,c
  9245  001168                     l11055:
  9246                           
  9247                           ; BSR set to: 2
  9248                           ;src/gps.c: 425:     lat += 900000;
  9249  001168  0EA0               	movlw	160
  9250  00116A  2655               	addwf	CalculateGridSquare@lat^0,f,c
  9251  00116C  0EBB               	movlw	187
  9252  00116E  2256               	addwfc	(CalculateGridSquare@lat+1)^0,f,c
  9253  001170  0E0D               	movlw	13
  9254  001172  2257               	addwfc	(CalculateGridSquare@lat+2)^0,f,c
  9255  001174  0E00               	movlw	0
  9256  001176  2258               	addwfc	(CalculateGridSquare@lat+3)^0,f,c
  9257                           
  9258                           ; BSR set to: 2
  9259                           ;src/gps.c: 427:     u32 lonm = lon * 60L;
  9260  001178  C04D  F00E         	movff	CalculateGridSquare@lon,___lmul@multiplier
  9261  00117C  C04E  F00F         	movff	CalculateGridSquare@lon+1,___lmul@multiplier+1
  9262  001180  C04F  F010         	movff	CalculateGridSquare@lon+2,___lmul@multiplier+2
  9263  001184  C050  F011         	movff	CalculateGridSquare@lon+3,___lmul@multiplier+3
  9264  001188  0E3C               	movlw	60
  9265  00118A  6E12               	movwf	___lmul@multiplicand^0,c
  9266  00118C  0E00               	movlw	0
  9267  00118E  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9268  001190  0E00               	movlw	0
  9269  001192  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9270  001194  0E00               	movlw	0
  9271  001196  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9272  001198  EC5A  F034         	call	___lmul	;wreg free
  9273  00119C  C00E  F02D         	movff	?___lmul,CalculateGridSquare@lonm
  9274  0011A0  C00F  F02E         	movff	?___lmul+1,CalculateGridSquare@lonm+1
  9275  0011A4  C010  F02F         	movff	?___lmul+2,CalculateGridSquare@lonm+2
  9276  0011A8  C011  F030         	movff	?___lmul+3,CalculateGridSquare@lonm+3
  9277                           
  9278                           ;src/gps.c: 428:     u32 longf = lonm / (20L*60L*10000L);
  9279  0011AC  C02D  F01A         	movff	CalculateGridSquare@lonm,___lldiv@dividend
  9280  0011B0  C02E  F01B         	movff	CalculateGridSquare@lonm+1,___lldiv@dividend+1
  9281  0011B4  C02F  F01C         	movff	CalculateGridSquare@lonm+2,___lldiv@dividend+2
  9282  0011B8  C030  F01D         	movff	CalculateGridSquare@lonm+3,___lldiv@dividend+3
  9283  0011BC  0E00               	movlw	0
  9284  0011BE  6E1E               	movwf	___lldiv@divisor^0,c
  9285  0011C0  0E1B               	movlw	27
  9286  0011C2  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9287  0011C4  0EB7               	movlw	183
  9288  0011C6  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9289  0011C8  0E00               	movlw	0
  9290  0011CA  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9291  0011CC  ECBF  F032         	call	___lldiv	;wreg free
  9292  0011D0  C01A  F031         	movff	?___lldiv,CalculateGridSquare@longf
  9293  0011D4  C01B  F032         	movff	?___lldiv+1,CalculateGridSquare@longf+1
  9294  0011D8  C01C  F033         	movff	?___lldiv+2,CalculateGridSquare@longf+2
  9295  0011DC  C01D  F034         	movff	?___lldiv+3,CalculateGridSquare@longf+3
  9296                           
  9297                           ;src/gps.c: 429:     u32 lonrest1 = lonm - longf*(20L*60L*10000L);
  9298  0011E0  C031  F00E         	movff	CalculateGridSquare@longf,___lmul@multiplier
  9299  0011E4  C032  F00F         	movff	CalculateGridSquare@longf+1,___lmul@multiplier+1
  9300  0011E8  C033  F010         	movff	CalculateGridSquare@longf+2,___lmul@multiplier+2
  9301  0011EC  C034  F011         	movff	CalculateGridSquare@longf+3,___lmul@multiplier+3
  9302  0011F0  0E00               	movlw	0
  9303  0011F2  6E12               	movwf	___lmul@multiplicand^0,c
  9304  0011F4  0EE5               	movlw	229
  9305  0011F6  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9306  0011F8  0E48               	movlw	72
  9307  0011FA  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9308  0011FC  0EFF               	movlw	255
  9309  0011FE  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9310  001200  EC5A  F034         	call	___lmul	;wreg free
  9311  001204  502D               	movf	CalculateGridSquare@lonm^0,w,c
  9312  001206  240E               	addwf	?___lmul^0,w,c
  9313  001208  6E35               	movwf	CalculateGridSquare@lonrest1^0,c
  9314  00120A  502E               	movf	(CalculateGridSquare@lonm+1)^0,w,c
  9315  00120C  200F               	addwfc	(?___lmul+1)^0,w,c
  9316  00120E  6E36               	movwf	(CalculateGridSquare@lonrest1+1)^0,c
  9317  001210  502F               	movf	(CalculateGridSquare@lonm+2)^0,w,c
  9318  001212  2010               	addwfc	(?___lmul+2)^0,w,c
  9319  001214  6E37               	movwf	(CalculateGridSquare@lonrest1+2)^0,c
  9320  001216  5030               	movf	(CalculateGridSquare@lonm+3)^0,w,c
  9321  001218  2011               	addwfc	(?___lmul+3)^0,w,c
  9322  00121A  6E38               	movwf	(CalculateGridSquare@lonrest1+3)^0,c
  9323                           
  9324                           ;src/gps.c: 430:     u32 lonmid = lonrest1 / (2L*60L*10000L);
  9325  00121C  C035  F01A         	movff	CalculateGridSquare@lonrest1,___lldiv@dividend
  9326  001220  C036  F01B         	movff	CalculateGridSquare@lonrest1+1,___lldiv@dividend+1
  9327  001224  C037  F01C         	movff	CalculateGridSquare@lonrest1+2,___lldiv@dividend+2
  9328  001228  C038  F01D         	movff	CalculateGridSquare@lonrest1+3,___lldiv@dividend+3
  9329  00122C  0E80               	movlw	128
  9330  00122E  6E1E               	movwf	___lldiv@divisor^0,c
  9331  001230  0E4F               	movlw	79
  9332  001232  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9333  001234  0E12               	movlw	18
  9334  001236  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9335  001238  0E00               	movlw	0
  9336  00123A  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9337  00123C  ECBF  F032         	call	___lldiv	;wreg free
  9338  001240  C01A  F039         	movff	?___lldiv,CalculateGridSquare@lonmid
  9339  001244  C01B  F03A         	movff	?___lldiv+1,CalculateGridSquare@lonmid+1
  9340  001248  C01C  F03B         	movff	?___lldiv+2,CalculateGridSquare@lonmid+2
  9341  00124C  C01D  F03C         	movff	?___lldiv+3,CalculateGridSquare@lonmid+3
  9342                           
  9343                           ;src/gps.c: 432:     u32 latm = lat * 60L;
  9344  001250  C055  F00E         	movff	CalculateGridSquare@lat,___lmul@multiplier
  9345  001254  C056  F00F         	movff	CalculateGridSquare@lat+1,___lmul@multiplier+1
  9346  001258  C057  F010         	movff	CalculateGridSquare@lat+2,___lmul@multiplier+2
  9347  00125C  C058  F011         	movff	CalculateGridSquare@lat+3,___lmul@multiplier+3
  9348  001260  0E3C               	movlw	60
  9349  001262  6E12               	movwf	___lmul@multiplicand^0,c
  9350  001264  0E00               	movlw	0
  9351  001266  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9352  001268  0E00               	movlw	0
  9353  00126A  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9354  00126C  0E00               	movlw	0
  9355  00126E  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9356  001270  EC5A  F034         	call	___lmul	;wreg free
  9357  001274  C00E  F03D         	movff	?___lmul,CalculateGridSquare@latm
  9358  001278  C00F  F03E         	movff	?___lmul+1,CalculateGridSquare@latm+1
  9359  00127C  C010  F03F         	movff	?___lmul+2,CalculateGridSquare@latm+2
  9360  001280  C011  F040         	movff	?___lmul+3,CalculateGridSquare@latm+3
  9361                           
  9362                           ;src/gps.c: 433:     u32 latgf = latm / (10L*60L*10000L);
  9363  001284  C03D  F01A         	movff	CalculateGridSquare@latm,___lldiv@dividend
  9364  001288  C03E  F01B         	movff	CalculateGridSquare@latm+1,___lldiv@dividend+1
  9365  00128C  C03F  F01C         	movff	CalculateGridSquare@latm+2,___lldiv@dividend+2
  9366  001290  C040  F01D         	movff	CalculateGridSquare@latm+3,___lldiv@dividend+3
  9367  001294  0E80               	movlw	128
  9368  001296  6E1E               	movwf	___lldiv@divisor^0,c
  9369  001298  0E8D               	movlw	141
  9370  00129A  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9371  00129C  0E5B               	movlw	91
  9372  00129E  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9373  0012A0  0E00               	movlw	0
  9374  0012A2  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9375  0012A4  ECBF  F032         	call	___lldiv	;wreg free
  9376  0012A8  C01A  F041         	movff	?___lldiv,CalculateGridSquare@latgf
  9377  0012AC  C01B  F042         	movff	?___lldiv+1,CalculateGridSquare@latgf+1
  9378  0012B0  C01C  F043         	movff	?___lldiv+2,CalculateGridSquare@latgf+2
  9379  0012B4  C01D  F044         	movff	?___lldiv+3,CalculateGridSquare@latgf+3
  9380                           
  9381                           ;src/gps.c: 434:     u32 latrest1 = latm - latgf*(10L*60L*10000L);
  9382  0012B8  C041  F00E         	movff	CalculateGridSquare@latgf,___lmul@multiplier
  9383  0012BC  C042  F00F         	movff	CalculateGridSquare@latgf+1,___lmul@multiplier+1
  9384  0012C0  C043  F010         	movff	CalculateGridSquare@latgf+2,___lmul@multiplier+2
  9385  0012C4  C044  F011         	movff	CalculateGridSquare@latgf+3,___lmul@multiplier+3
  9386  0012C8  0E80               	movlw	128
  9387  0012CA  6E12               	movwf	___lmul@multiplicand^0,c
  9388  0012CC  0E72               	movlw	114
  9389  0012CE  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9390  0012D0  0EA4               	movlw	164
  9391  0012D2  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9392  0012D4  0EFF               	movlw	255
  9393  0012D6  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9394  0012D8  EC5A  F034         	call	___lmul	;wreg free
  9395  0012DC  503D               	movf	CalculateGridSquare@latm^0,w,c
  9396  0012DE  240E               	addwf	?___lmul^0,w,c
  9397  0012E0  6E45               	movwf	CalculateGridSquare@latrest1^0,c
  9398  0012E2  503E               	movf	(CalculateGridSquare@latm+1)^0,w,c
  9399  0012E4  200F               	addwfc	(?___lmul+1)^0,w,c
  9400  0012E6  6E46               	movwf	(CalculateGridSquare@latrest1+1)^0,c
  9401  0012E8  503F               	movf	(CalculateGridSquare@latm+2)^0,w,c
  9402  0012EA  2010               	addwfc	(?___lmul+2)^0,w,c
  9403  0012EC  6E47               	movwf	(CalculateGridSquare@latrest1+2)^0,c
  9404  0012EE  5040               	movf	(CalculateGridSquare@latm+3)^0,w,c
  9405  0012F0  2011               	addwfc	(?___lmul+3)^0,w,c
  9406  0012F2  6E48               	movwf	(CalculateGridSquare@latrest1+3)^0,c
  9407                           
  9408                           ;src/gps.c: 435:     u32 latmid = latrest1 / (1L*60L*10000L);
  9409  0012F4  C045  F01A         	movff	CalculateGridSquare@latrest1,___lldiv@dividend
  9410  0012F8  C046  F01B         	movff	CalculateGridSquare@latrest1+1,___lldiv@dividend+1
  9411  0012FC  C047  F01C         	movff	CalculateGridSquare@latrest1+2,___lldiv@dividend+2
  9412  001300  C048  F01D         	movff	CalculateGridSquare@latrest1+3,___lldiv@dividend+3
  9413  001304  0EC0               	movlw	192
  9414  001306  6E1E               	movwf	___lldiv@divisor^0,c
  9415  001308  0E27               	movlw	39
  9416  00130A  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9417  00130C  0E09               	movlw	9
  9418  00130E  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9419  001310  0E00               	movlw	0
  9420  001312  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9421  001314  ECBF  F032         	call	___lldiv	;wreg free
  9422  001318  C01A  F049         	movff	?___lldiv,CalculateGridSquare@latmid
  9423  00131C  C01B  F04A         	movff	?___lldiv+1,CalculateGridSquare@latmid+1
  9424  001320  C01C  F04B         	movff	?___lldiv+2,CalculateGridSquare@latmid+2
  9425  001324  C01D  F04C         	movff	?___lldiv+3,CalculateGridSquare@latmid+3
  9426                           
  9427                           ;src/gps.c: 437:     grid[0] = 'A' + longf;
  9428  001328  5031               	movf	CalculateGridSquare@longf^0,w,c
  9429  00132A  0F41               	addlw	65
  9430  00132C  0102               	movlb	2	; () banked
  9431  00132E  6FED               	movwf	CalculateGridSquare@grid& (0+255),b
  9432                           
  9433                           ; BSR set to: 2
  9434                           ;src/gps.c: 438:     grid[2] = '0' + lonmid;
  9435  001330  5039               	movf	CalculateGridSquare@lonmid^0,w,c
  9436  001332  0F30               	addlw	48
  9437  001334  6FEF               	movwf	(CalculateGridSquare@grid+2)& (0+255),b
  9438                           
  9439                           ; BSR set to: 2
  9440                           ;src/gps.c: 439:     grid[4] = 'A' + ((lonrest1 - lonmid*(2L*60L*10000L)) / (5L*10000L))
      +                          ;
  9441  001336  C039  F00E         	movff	CalculateGridSquare@lonmid,___lmul@multiplier
  9442  00133A  C03A  F00F         	movff	CalculateGridSquare@lonmid+1,___lmul@multiplier+1
  9443  00133E  C03B  F010         	movff	CalculateGridSquare@lonmid+2,___lmul@multiplier+2
  9444  001342  C03C  F011         	movff	CalculateGridSquare@lonmid+3,___lmul@multiplier+3
  9445  001346  0E80               	movlw	128
  9446  001348  6E12               	movwf	___lmul@multiplicand^0,c
  9447  00134A  0EB0               	movlw	176
  9448  00134C  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9449  00134E  0EED               	movlw	237
  9450  001350  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9451  001352  0EFF               	movlw	255
  9452  001354  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9453  001356  EC5A  F034         	call	___lmul	;wreg free
  9454  00135A  5035               	movf	CalculateGridSquare@lonrest1^0,w,c
  9455  00135C  240E               	addwf	?___lmul^0,w,c
  9456  00135E  6E1A               	movwf	___lldiv@dividend^0,c
  9457  001360  5036               	movf	(CalculateGridSquare@lonrest1+1)^0,w,c
  9458  001362  200F               	addwfc	(?___lmul+1)^0,w,c
  9459  001364  6E1B               	movwf	(___lldiv@dividend+1)^0,c
  9460  001366  5037               	movf	(CalculateGridSquare@lonrest1+2)^0,w,c
  9461  001368  2010               	addwfc	(?___lmul+2)^0,w,c
  9462  00136A  6E1C               	movwf	(___lldiv@dividend+2)^0,c
  9463  00136C  5038               	movf	(CalculateGridSquare@lonrest1+3)^0,w,c
  9464  00136E  2011               	addwfc	(?___lmul+3)^0,w,c
  9465  001370  6E1D               	movwf	(___lldiv@dividend+3)^0,c
  9466  001372  0E50               	movlw	80
  9467  001374  6E1E               	movwf	___lldiv@divisor^0,c
  9468  001376  0EC3               	movlw	195
  9469  001378  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9470  00137A  0E00               	movlw	0
  9471  00137C  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9472  00137E  0E00               	movlw	0
  9473  001380  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9474  001382  ECBF  F032         	call	___lldiv	;wreg free
  9475  001386  501A               	movf	?___lldiv^0,w,c
  9476  001388  0F41               	addlw	65
  9477  00138A  0102               	movlb	2	; () banked
  9478  00138C  6FF1               	movwf	(CalculateGridSquare@grid+4)& (0+255),b
  9479                           
  9480                           ; BSR set to: 2
  9481                           ;src/gps.c: 441:     grid[1] = 'A' + latgf;
  9482  00138E  5041               	movf	CalculateGridSquare@latgf^0,w,c
  9483  001390  0F41               	addlw	65
  9484  001392  6FEE               	movwf	(CalculateGridSquare@grid+1)& (0+255),b
  9485                           
  9486                           ; BSR set to: 2
  9487                           ;src/gps.c: 442:     grid[3] = '0' + latmid;
  9488  001394  5049               	movf	CalculateGridSquare@latmid^0,w,c
  9489  001396  0F30               	addlw	48
  9490  001398  6FF0               	movwf	(CalculateGridSquare@grid+3)& (0+255),b
  9491                           
  9492                           ; BSR set to: 2
  9493                           ;src/gps.c: 443:     grid[5] = 'A' + ((latrest1 - latmid*(1L*60L*10000L)) / (25L*1000L))
      +                          ;
  9494  00139A  C049  F00E         	movff	CalculateGridSquare@latmid,___lmul@multiplier
  9495  00139E  C04A  F00F         	movff	CalculateGridSquare@latmid+1,___lmul@multiplier+1
  9496  0013A2  C04B  F010         	movff	CalculateGridSquare@latmid+2,___lmul@multiplier+2
  9497  0013A6  C04C  F011         	movff	CalculateGridSquare@latmid+3,___lmul@multiplier+3
  9498  0013AA  0E40               	movlw	64
  9499  0013AC  6E12               	movwf	___lmul@multiplicand^0,c
  9500  0013AE  0ED8               	movlw	216
  9501  0013B0  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  9502  0013B2  0EF6               	movlw	246
  9503  0013B4  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  9504  0013B6  0EFF               	movlw	255
  9505  0013B8  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  9506  0013BA  EC5A  F034         	call	___lmul	;wreg free
  9507  0013BE  5045               	movf	CalculateGridSquare@latrest1^0,w,c
  9508  0013C0  240E               	addwf	?___lmul^0,w,c
  9509  0013C2  6E1A               	movwf	___lldiv@dividend^0,c
  9510  0013C4  5046               	movf	(CalculateGridSquare@latrest1+1)^0,w,c
  9511  0013C6  200F               	addwfc	(?___lmul+1)^0,w,c
  9512  0013C8  6E1B               	movwf	(___lldiv@dividend+1)^0,c
  9513  0013CA  5047               	movf	(CalculateGridSquare@latrest1+2)^0,w,c
  9514  0013CC  2010               	addwfc	(?___lmul+2)^0,w,c
  9515  0013CE  6E1C               	movwf	(___lldiv@dividend+2)^0,c
  9516  0013D0  5048               	movf	(CalculateGridSquare@latrest1+3)^0,w,c
  9517  0013D2  2011               	addwfc	(?___lmul+3)^0,w,c
  9518  0013D4  6E1D               	movwf	(___lldiv@dividend+3)^0,c
  9519  0013D6  0EA8               	movlw	168
  9520  0013D8  6E1E               	movwf	___lldiv@divisor^0,c
  9521  0013DA  0E61               	movlw	97
  9522  0013DC  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  9523  0013DE  0E00               	movlw	0
  9524  0013E0  6E20               	movwf	(___lldiv@divisor+2)^0,c
  9525  0013E2  0E00               	movlw	0
  9526  0013E4  6E21               	movwf	(___lldiv@divisor+3)^0,c
  9527  0013E6  ECBF  F032         	call	___lldiv	;wreg free
  9528  0013EA  501A               	movf	?___lldiv^0,w,c
  9529  0013EC  0F41               	addlw	65
  9530  0013EE  0102               	movlb	2	; () banked
  9531  0013F0  6FF2               	movwf	(CalculateGridSquare@grid+5)& (0+255),b
  9532                           
  9533                           ; BSR set to: 2
  9534                           ;src/gps.c: 445:     grid[6] = 0;
  9535  0013F2  0E00               	movlw	0
  9536  0013F4  6FF3               	movwf	(CalculateGridSquare@grid+6)& (0+255),b
  9537                           
  9538                           ; BSR set to: 2
  9539                           ;src/gps.c: 447:  return grid;
  9540  0013F6  0EED               	movlw	low CalculateGridSquare@grid
  9541  0013F8  6E27               	movwf	?_CalculateGridSquare^0,c
  9542  0013FA  0E02               	movlw	high CalculateGridSquare@grid
  9543  0013FC  6E28               	movwf	(?_CalculateGridSquare+1)^0,c
  9544                           
  9545                           ; BSR set to: 2
  9546  0013FE  0012               	return		;funcret
  9547  001400                     __end_of_CalculateGridSquare:
  9548                           	opt callstack 0
  9549                           
  9550 ;; *************** function _setADF4351frequency *****************
  9551 ;; Defined at:
  9552 ;;		line 204 in file "src/main.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;  force           1    wreg     unsigned char 
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;  force           1   56[BANK0 ] unsigned char 
  9557 ;;  timeout         2   57[BANK0 ] int 
  9558 ;;  p               2   59[BANK0 ] PTR const unsigned long 
  9559 ;;		 -> freq_table_27_OPT(40), freq_table_27_26(40), freq_table_25_25(40), freq_table_25_24(40), 
  9560 ;;  sw              1   61[BANK0 ] unsigned char 
  9561 ;; Return value:  Size  Location     Type
  9562 ;;                  1    wreg      void 
  9563 ;; Registers used:
  9564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9565 ;; Tracked objects:
  9566 ;;		On entry : 3F/0
  9567 ;;		On exit  : 3D/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9570 ;;      Params:         0       0       0       0       0       0       0
  9571 ;;      Locals:         0       6       0       0       0       0       0
  9572 ;;      Temps:          0       2       0       0       0       0       0
  9573 ;;      Totals:         0       8       0       0       0       0       0
  9574 ;;Total ram usage:        8 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:   11
  9577 ;; This function calls:
  9578 ;;		_adf4351_get_lock
  9579 ;;		_adf4351_set_freq
  9580 ;;		_printf
  9581 ;;		_read_switch
  9582 ;; This function is called by:
  9583 ;;		_main
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           	psect	text16
  9588  004456                     __ptext16:
  9589                           	opt callstack 0
  9590  004456                     _setADF4351frequency:
  9591                           	opt callstack 19
  9592                           
  9593                           ; BSR set to: 2
  9594                           ;incstack = 0
  9595                           ;setADF4351frequency@force stored from wreg
  9596  004456  6FB8               	movwf	setADF4351frequency@force& (0+255),b
  9597                           
  9598                           ;src/main.c: 204: static void setADF4351frequency(u8 force);src/main.c: 205: {;src/main.
      +                          c: 206:  const u32 *p = freq_table_25_24;
  9599  004458  0EF1               	movlw	low _freq_table_25_24
  9600  00445A  0100               	movlb	0	; () banked
  9601  00445C  6FBB               	movwf	setADF4351frequency@p& (0+255),b
  9602  00445E  0E7A               	movlw	high _freq_table_25_24
  9603  004460  6FBC               	movwf	(setADF4351frequency@p+1)& (0+255),b
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;src/main.c: 207:  if(currentLO == 25) p = freq_table_25_25;
  9607  004462  0E19               	movlw	25
  9608  004464  186D               	xorwf	_currentLO^0,w,c
  9609  004466  A4D8               	btfss	status,2,c
  9610  004468  D004               	goto	l1114
  9611                           
  9612                           ; BSR set to: 0
  9613  00446A  0EC9               	movlw	low _freq_table_25_25
  9614  00446C  6FBB               	movwf	setADF4351frequency@p& (0+255),b
  9615  00446E  0E7A               	movlw	high _freq_table_25_25
  9616  004470  6FBC               	movwf	(setADF4351frequency@p+1)& (0+255),b
  9617  004472                     l1114:
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;src/main.c: 208:  if(currentLO == 26) p = freq_table_27_26;
  9621  004472  0E1A               	movlw	26
  9622  004474  186D               	xorwf	_currentLO^0,w,c
  9623  004476  A4D8               	btfss	status,2,c
  9624  004478  D004               	goto	l1115
  9625                           
  9626                           ; BSR set to: 0
  9627  00447A  0EA1               	movlw	low _freq_table_27_26
  9628  00447C  6FBB               	movwf	setADF4351frequency@p& (0+255),b
  9629  00447E  0E7A               	movlw	high _freq_table_27_26
  9630  004480  6FBC               	movwf	(setADF4351frequency@p+1)& (0+255),b
  9631  004482                     l1115:
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;src/main.c: 209:  if(currentLO == 27) p = freq_table_27_OPT;
  9635  004482  0E1B               	movlw	27
  9636  004484  186D               	xorwf	_currentLO^0,w,c
  9637  004486  A4D8               	btfss	status,2,c
  9638  004488  D004               	goto	l11723
  9639                           
  9640                           ; BSR set to: 0
  9641  00448A  0E79               	movlw	low _freq_table_27_OPT
  9642  00448C  6FBB               	movwf	setADF4351frequency@p& (0+255),b
  9643  00448E  0E7A               	movlw	high _freq_table_27_OPT
  9644  004490  6FBC               	movwf	(setADF4351frequency@p+1)& (0+255),b
  9645  004492                     l11723:
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;src/main.c: 213:  if(force)
  9649  004492  51B8               	movf	setADF4351frequency@force& (0+255),w,b
  9650  004494  B4D8               	btfsc	status,2,c
  9651  004496  D002               	goto	l11727
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;src/main.c: 214:  {;src/main.c: 215:   adf4351_set_qrg = 1;
  9655  004498  0E01               	movlw	1
  9656  00449A  6FCA               	movwf	_adf4351_set_qrg& (0+255),b
  9657  00449C                     l11727:
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;src/main.c: 219:  u8 sw = read_switch();
  9661  00449C  EC1F  F026         	call	_read_switch	;wreg free
  9662  0044A0  6FBD               	movwf	setADF4351frequency@sw& (0+255),b
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;src/main.c: 220:  if(sw > 9) return;
  9666  0044A2  0E09               	movlw	9
  9667  0044A4  65BD               	cpfsgt	setADF4351frequency@sw& (0+255),b
  9668  0044A6  D001               	goto	l11733
  9669  0044A8  0012               	return	
  9670  0044AA                     l11733:
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;src/main.c: 222:  if(sw != actualADFswitch || force || adf4351_set_qrg == 3)
  9674  0044AA  51E4               	movf	_actualADFswitch& (0+255),w,b
  9675  0044AC  19BD               	xorwf	setADF4351frequency@sw& (0+255),w,b
  9676  0044AE  A4D8               	btfss	status,2,c
  9677  0044B0  D007               	goto	u14840
  9678                           
  9679                           ; BSR set to: 0
  9680  0044B2  51B8               	movf	setADF4351frequency@force& (0+255),w,b
  9681  0044B4  A4D8               	btfss	status,2,c
  9682  0044B6  D004               	goto	u14840
  9683                           
  9684                           ; BSR set to: 0
  9685  0044B8  0E03               	movlw	3
  9686  0044BA  19CA               	xorwf	_adf4351_set_qrg& (0+255),w,b
  9687  0044BC  A4D8               	btfss	status,2,c
  9688  0044BE  0012               	return	
  9689  0044C0                     u14840:
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;src/main.c: 223:  {;src/main.c: 224:   if(adf4351_set_qrg == 3)
  9693  0044C0  0E03               	movlw	3
  9694  0044C2  19CA               	xorwf	_adf4351_set_qrg& (0+255),w,b
  9695  0044C4  A4D8               	btfss	status,2,c
  9696  0044C6  D002               	goto	l11743
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;src/main.c: 225:    adf4351_set_qrg = 0;
  9700  0044C8  0E00               	movlw	0
  9701  0044CA  6FCA               	movwf	_adf4351_set_qrg& (0+255),b
  9702  0044CC                     l11743:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;src/main.c: 227:   printf("ADF:LNBLO:%d\nADF:sw:%d=%ldkHz\n",currentLO,sw,p[sw]);
  9706  0044CC  0E34               	movlw	low STR_93
  9707  0044CE  6F97               	movwf	printf@fmt& (0+255),b
  9708  0044D0  0E7C               	movlw	high STR_93
  9709  0044D2  6F98               	movwf	(printf@fmt+1)& (0+255),b
  9710  0044D4  C06D  F099         	movff	_currentLO,?_printf+2
  9711  0044D8  6B9A               	clrf	(?_printf+3)& (0+255),b
  9712  0044DA  C0BD  F09B         	movff	setADF4351frequency@sw,?_printf+4
  9713  0044DE  6B9C               	clrf	(?_printf+5)& (0+255),b
  9714  0044E0  51BD               	movf	setADF4351frequency@sw& (0+255),w,b
  9715  0044E2  0D04               	mullw	4
  9716  0044E4  C0BB  F0B6         	movff	setADF4351frequency@p,??_setADF4351frequency
  9717  0044E8  C0BC  F0B7         	movff	setADF4351frequency@p+1,??_setADF4351frequency+1
  9718  0044EC  50F3               	movf	243,w,c
  9719  0044EE  27B6               	addwf	??_setADF4351frequency& (0+255),f,b
  9720  0044F0  50F4               	movf	244,w,c
  9721  0044F2  23B7               	addwfc	(??_setADF4351frequency+1)& (0+255),f,b
  9722  0044F4  C0B6  FFF6         	movff	??_setADF4351frequency,tblptrl
  9723  0044F8  C0B7  FFF7         	movff	??_setADF4351frequency+1,tblptrh
  9724  0044FC                     	if	0	;tblptru may be non-zero
  9725  0044FC                     	endif
  9726  0044FC                     	if	0	;tblptru may be non-zero
  9727  0044FC                     	endif
  9728  0044FC  0009               	tblrd		*+
  9729  0044FE  CFF5 F09D          	movff	tablat,?_printf+6
  9730  004502  0009               	tblrd		*+
  9731  004504  CFF5 F09E          	movff	tablat,?_printf+7
  9732  004508  0009               	tblrd		*+
  9733  00450A  CFF5 F09F          	movff	tablat,?_printf+8
  9734  00450E  000A               	tblrd		*-
  9735  004510  CFF5 F0A0          	movff	tablat,?_printf+9
  9736  004514  EC30  F03A         	call	_printf	;wreg free
  9737                           
  9738                           ; BSR set to: 2
  9739                           ;src/main.c: 228:   actualADFswitch = sw;
  9740  004518  C0BD  F0E4         	movff	setADF4351frequency@sw,_actualADFswitch
  9741                           
  9742                           ; BSR set to: 2
  9743                           ;src/main.c: 230:   int timeout = 1000;
  9744  00451C  0E03               	movlw	3
  9745  00451E  0100               	movlb	0	; () banked
  9746  004520  6FBA               	movwf	(setADF4351frequency@timeout+1)& (0+255),b
  9747  004522  0EE8               	movlw	232
  9748  004524  6FB9               	movwf	setADF4351frequency@timeout& (0+255),b
  9749                           
  9750                           ;src/main.c: 235:   adf4351_set_freq(&g_adf4351, 700000);
  9751  004526  0E87               	movlw	low _g_adf4351
  9752  004528  6FA4               	movwf	adf4351_set_freq@ctx& (0+255),b
  9753  00452A  0E03               	movlw	high _g_adf4351
  9754  00452C  6FA5               	movwf	(adf4351_set_freq@ctx+1)& (0+255),b
  9755  00452E  0E60               	movlw	96
  9756  004530  6FA6               	movwf	adf4351_set_freq@freq& (0+255),b
  9757  004532  0EAE               	movlw	174
  9758  004534  6FA7               	movwf	(adf4351_set_freq@freq+1)& (0+255),b
  9759  004536  0E0A               	movlw	10
  9760  004538  6FA8               	movwf	(adf4351_set_freq@freq+2)& (0+255),b
  9761  00453A  0E00               	movlw	0
  9762  00453C  6FA9               	movwf	(adf4351_set_freq@freq+3)& (0+255),b
  9763  00453E  EC1A  F015         	call	_adf4351_set_freq	;wreg free
  9764                           
  9765                           ;src/main.c: 236:   _delaywdt((unsigned long)((250)*(8000000/4000.0)));
  9766  004542  0E02               	movlw	2
  9767  004544  0100               	movlb	0	; () banked
  9768  004546  6FB7               	movwf	(??_setADF4351frequency+1)& (0+255),b
  9769  004548  0EE8               	movlw	232
  9770  00454A  6FB6               	movwf	??_setADF4351frequency& (0+255),b
  9771  00454C  0E51               	movlw	81
  9772  00454E                     u14957:
  9773  00454E  0004               	clrwdt	
  9774  004550  2EE8               	decfsz	wreg,f,c
  9775  004552  D7FD               	bra	u14957
  9776  004554  2FB6               	decfsz	??_setADF4351frequency& (0+255),f,b
  9777  004556  D7FB               	bra	u14957
  9778  004558  2FB7               	decfsz	(??_setADF4351frequency+1)& (0+255),f,b
  9779  00455A  D7F9               	bra	u14957
  9780  00455C  0004               	clrwdt	
  9781  00455E  F000               	nop	
  9782  004560  0004               	clrwdt	
  9783                           
  9784                           ;src/main.c: 238:   adf4351_set_freq(&g_adf4351, p[sw]);
  9785  004562  0E87               	movlw	low _g_adf4351
  9786  004564  0100               	movlb	0	; () banked
  9787  004566  6FA4               	movwf	adf4351_set_freq@ctx& (0+255),b
  9788  004568  0E03               	movlw	high _g_adf4351
  9789  00456A  6FA5               	movwf	(adf4351_set_freq@ctx+1)& (0+255),b
  9790  00456C  51BD               	movf	setADF4351frequency@sw& (0+255),w,b
  9791  00456E  0D04               	mullw	4
  9792  004570  C0BB  F0B6         	movff	setADF4351frequency@p,??_setADF4351frequency
  9793  004574  C0BC  F0B7         	movff	setADF4351frequency@p+1,??_setADF4351frequency+1
  9794  004578  50F3               	movf	243,w,c
  9795  00457A  27B6               	addwf	??_setADF4351frequency& (0+255),f,b
  9796  00457C  50F4               	movf	244,w,c
  9797  00457E  23B7               	addwfc	(??_setADF4351frequency+1)& (0+255),f,b
  9798  004580  C0B6  FFF6         	movff	??_setADF4351frequency,tblptrl
  9799  004584  C0B7  FFF7         	movff	??_setADF4351frequency+1,tblptrh
  9800  004588                     	if	0	;tblptru may be non-zero
  9801  004588                     	endif
  9802  004588                     	if	0	;tblptru may be non-zero
  9803  004588                     	endif
  9804  004588  0009               	tblrd		*+
  9805  00458A  CFF5 F0A6          	movff	tablat,adf4351_set_freq@freq
  9806  00458E  0009               	tblrd		*+
  9807  004590  CFF5 F0A7          	movff	tablat,adf4351_set_freq@freq+1
  9808  004594  0009               	tblrd		*+
  9809  004596  CFF5 F0A8          	movff	tablat,adf4351_set_freq@freq+2
  9810  00459A  000A               	tblrd		*-
  9811  00459C  CFF5 F0A9          	movff	tablat,adf4351_set_freq@freq+3
  9812  0045A0  EC1A  F015         	call	_adf4351_set_freq	;wreg free
  9813                           
  9814                           ;src/main.c: 240:         while((adf4351_get_lock(&g_adf4351) == 0) && timeout)
  9815  0045A4  D00D               	goto	l11757
  9816  0045A6                     l11753:
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;src/main.c: 241:   {;src/main.c: 242:             timeout--;
  9820  0045A6  07B9               	decf	setADF4351frequency@timeout& (0+255),f,b
  9821  0045A8  A0D8               	btfss	status,0,c
  9822  0045AA  07BA               	decf	(setADF4351frequency@timeout+1)& (0+255),f,b
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;src/main.c: 243:             _delaywdt((unsigned long)((1)*(8000000/4000.0)));
  9826  0045AC  0E02               	movlw	2
  9827  0045AE  0100               	movlb	0	; () banked
  9828  0045B0  6FB6               	movwf	??_setADF4351frequency& (0+255),b
  9829  0045B2  0EF2               	movlw	242
  9830  0045B4                     u14967:
  9831  0045B4  0004               	clrwdt	
  9832  0045B6  2EE8               	decfsz	wreg,f,c
  9833  0045B8  D7FD               	bra	u14967
  9834  0045BA  2FB6               	decfsz	??_setADF4351frequency& (0+255),f,b
  9835  0045BC  D7FB               	bra	u14967
  9836  0045BE  0004               	clrwdt	
  9837  0045C0                     l11757:
  9838                           
  9839                           ;src/main.c: 240:         while((adf4351_get_lock(&g_adf4351) == 0) && timeout)
  9840  0045C0  0E87               	movlw	low _g_adf4351
  9841  0045C2  6E0E               	movwf	adf4351_get_lock@ctx^0,c
  9842  0045C4  0E03               	movlw	high _g_adf4351
  9843  0045C6  6E0F               	movwf	(adf4351_get_lock@ctx+1)^0,c
  9844  0045C8  ECCA  F037         	call	_adf4351_get_lock	;wreg free
  9845  0045CC  500E               	movf	?_adf4351_get_lock^0,w,c
  9846  0045CE  100F               	iorwf	(?_adf4351_get_lock+1)^0,w,c
  9847  0045D0  A4D8               	btfss	status,2,c
  9848  0045D2  D005               	goto	u14870
  9849  0045D4  0100               	movlb	0	; () banked
  9850  0045D6  51B9               	movf	setADF4351frequency@timeout& (0+255),w,b
  9851  0045D8  11BA               	iorwf	(setADF4351frequency@timeout+1)& (0+255),w,b
  9852  0045DA  A4D8               	btfss	status,2,c
  9853  0045DC  D7E4               	goto	l11753
  9854  0045DE                     u14870:
  9855                           
  9856                           ;src/main.c: 245:         if(timeout <= 0)
  9857  0045DE  0100               	movlb	0	; () banked
  9858  0045E0  BFBA               	btfsc	(setADF4351frequency@timeout+1)& (0+255),7,b
  9859  0045E2  D005               	goto	u14880
  9860  0045E4  51BA               	movf	(setADF4351frequency@timeout+1)& (0+255),w,b
  9861  0045E6  E109               	bnz	l1119
  9862  0045E8  05B9               	decf	setADF4351frequency@timeout& (0+255),w,b
  9863  0045EA  B0D8               	btfsc	status,0,c
  9864  0045EC  0012               	return	
  9865  0045EE                     u14880:
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;src/main.c: 246:             printf("ADF:lock TO\n");
  9869  0045EE  0EFE               	movlw	low STR_94
  9870  0045F0  6F97               	movwf	printf@fmt& (0+255),b
  9871  0045F2  0E7E               	movlw	high STR_94
  9872  0045F4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  9873  0045F6  EC30  F03A         	call	_printf	;wreg free
  9874  0045FA                     l1119:
  9875  0045FA  0012               	return		;funcret
  9876  0045FC                     __end_of_setADF4351frequency:
  9877                           	opt callstack 0
  9878                           
  9879 ;; *************** function _read_switch *****************
  9880 ;; Defined at:
  9881 ;;		line 191 in file "src/main.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;  rb4             1   19[COMRAM] unsigned char 
  9886 ;;  rb3             1   18[COMRAM] unsigned char 
  9887 ;;  rb2             1   17[COMRAM] unsigned char 
  9888 ;;  rb1             1   16[COMRAM] unsigned char 
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      unsigned char 
  9891 ;; Registers used:
  9892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9893 ;; Tracked objects:
  9894 ;;		On entry : 3F/0
  9895 ;;		On exit  : 3F/0
  9896 ;;		Unchanged: 3F/0
  9897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9898 ;;      Params:         0       0       0       0       0       0       0
  9899 ;;      Locals:         4       0       0       0       0       0       0
  9900 ;;      Temps:          3       0       0       0       0       0       0
  9901 ;;      Totals:         7       0       0       0       0       0       0
  9902 ;;Total ram usage:        7 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    2
  9905 ;; This function calls:
  9906 ;;		Nothing
  9907 ;; This function is called by:
  9908 ;;		_setADF4351frequency
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text17
  9913  004C3E                     __ptext17:
  9914                           	opt callstack 0
  9915  004C3E                     _read_switch:
  9916                           	opt callstack 27
  9917                           
  9918                           ; BSR set to: 0
  9919                           ;src/main.c: 193:     u8 rb1, rb2, rb3, rb4;;src/main.c: 196:     rb1 = ((*((PIN_SJ3)->p
      +                          PORT) & (PIN_SJ3)->mask) != 0)?0:1;
  9920                           
  9921                           ;incstack = 0
  9922  004C3E  0E6D               	movlw	low (_PIN_SJ3_DEF+4)
  9923  004C40  6EF6               	movwf	tblptrl,c
  9924  004C42  0E7B               	movlw	high (_PIN_SJ3_DEF+4)
  9925  004C44  6EF7               	movwf	tblptrh,c
  9926  004C46                     	if	0	;tblptru may be non-zero
  9927  004C46                     	endif
  9928  004C46                     	if	0	;tblptru may be non-zero
  9929  004C46                     	endif
  9930  004C46  0008               	tblrd		*
  9931  004C48  CFF5 F00E          	movff	tablat,??islower@read_switch
  9932  004C4C  0E69               	movlw	low _PIN_SJ3_DEF
  9933  004C4E  6EF6               	movwf	tblptrl,c
  9934  004C50                     	if	1	;There is more than 1 active tblptr byte
  9935  004C50  0E7B               	movlw	high _PIN_SJ3_DEF
  9936  004C52  6EF7               	movwf	tblptrh,c
  9937  004C54                     	endif
  9938  004C54                     	if	0	;There are less than 3 active tblptr bytes
  9939  004C54                     	endif
  9940  004C54  0009               	tblrd		*+
  9941  004C56  CFF5 F00F          	movff	tablat,??islower@read_switch+1
  9942  004C5A  0009               	tblrd		*+
  9943  004C5C  CFF5 F010          	movff	tablat,??islower@read_switch+2
  9944  004C60  C00F  FFD9         	movff	??islower@read_switch+1,fsr2l
  9945  004C64  C010  FFDA         	movff	??islower@read_switch+2,fsr2h
  9946  004C68  50DF               	movf	indf2,w,c
  9947  004C6A  140E               	andwf	??islower@read_switch^0,w,c
  9948  004C6C  0900               	iorlw	0
  9949  004C6E  A4D8               	btfss	status,2,c
  9950  004C70  D002               	goto	u9280
  9951  004C72  0E01               	movlw	1
  9952  004C74  D001               	goto	u9290
  9953  004C76                     u9280:
  9954  004C76  0E00               	movlw	0
  9955  004C78                     u9290:
  9956  004C78  6E11               	movwf	read_switch@rb1^0,c
  9957                           
  9958                           ;src/main.c: 197:     rb2 = ((*((PIN_SJ4)->pPORT) & (PIN_SJ4)->mask) != 0)?0:1;
  9959  004C7A  0E68               	movlw	low (_PIN_SJ4_DEF+4)
  9960  004C7C  6EF6               	movwf	tblptrl,c
  9961  004C7E  0E7B               	movlw	high (_PIN_SJ4_DEF+4)
  9962  004C80  6EF7               	movwf	tblptrh,c
  9963  004C82                     	if	0	;tblptru may be non-zero
  9964  004C82                     	endif
  9965  004C82                     	if	0	;tblptru may be non-zero
  9966  004C82                     	endif
  9967  004C82  0008               	tblrd		*
  9968  004C84  CFF5 F00E          	movff	tablat,??islower@read_switch
  9969  004C88  0E64               	movlw	low _PIN_SJ4_DEF
  9970  004C8A  6EF6               	movwf	tblptrl,c
  9971  004C8C                     	if	1	;There is more than 1 active tblptr byte
  9972  004C8C  0E7B               	movlw	high _PIN_SJ4_DEF
  9973  004C8E  6EF7               	movwf	tblptrh,c
  9974  004C90                     	endif
  9975  004C90                     	if	0	;There are less than 3 active tblptr bytes
  9976  004C90                     	endif
  9977  004C90  0009               	tblrd		*+
  9978  004C92  CFF5 F00F          	movff	tablat,??islower@read_switch+1
  9979  004C96  0009               	tblrd		*+
  9980  004C98  CFF5 F010          	movff	tablat,??islower@read_switch+2
  9981  004C9C  C00F  FFD9         	movff	??islower@read_switch+1,fsr2l
  9982  004CA0  C010  FFDA         	movff	??islower@read_switch+2,fsr2h
  9983  004CA4  50DF               	movf	indf2,w,c
  9984  004CA6  140E               	andwf	??islower@read_switch^0,w,c
  9985  004CA8  0900               	iorlw	0
  9986  004CAA  A4D8               	btfss	status,2,c
  9987  004CAC  D002               	goto	u9300
  9988  004CAE  0E01               	movlw	1
  9989  004CB0  D001               	goto	u9310
  9990  004CB2                     u9300:
  9991  004CB2  0E00               	movlw	0
  9992  004CB4                     u9310:
  9993  004CB4  6E12               	movwf	read_switch@rb2^0,c
  9994                           
  9995                           ;src/main.c: 198:     rb3 = ((*((PIN_SJ5)->pPORT) & (PIN_SJ5)->mask) != 0)?0:1;
  9996  004CB6  0E63               	movlw	low (_PIN_SJ5_DEF+4)
  9997  004CB8  6EF6               	movwf	tblptrl,c
  9998  004CBA  0E7B               	movlw	high (_PIN_SJ5_DEF+4)
  9999  004CBC  6EF7               	movwf	tblptrh,c
 10000  004CBE                     	if	0	;tblptru may be non-zero
 10001  004CBE                     	endif
 10002  004CBE                     	if	0	;tblptru may be non-zero
 10003  004CBE                     	endif
 10004  004CBE  0008               	tblrd		*
 10005  004CC0  CFF5 F00E          	movff	tablat,??islower@read_switch
 10006  004CC4  0E5F               	movlw	low _PIN_SJ5_DEF
 10007  004CC6  6EF6               	movwf	tblptrl,c
 10008  004CC8                     	if	1	;There is more than 1 active tblptr byte
 10009  004CC8  0E7B               	movlw	high _PIN_SJ5_DEF
 10010  004CCA  6EF7               	movwf	tblptrh,c
 10011  004CCC                     	endif
 10012  004CCC                     	if	0	;There are less than 3 active tblptr bytes
 10013  004CCC                     	endif
 10014  004CCC  0009               	tblrd		*+
 10015  004CCE  CFF5 F00F          	movff	tablat,??islower@read_switch+1
 10016  004CD2  0009               	tblrd		*+
 10017  004CD4  CFF5 F010          	movff	tablat,??islower@read_switch+2
 10018  004CD8  C00F  FFD9         	movff	??islower@read_switch+1,fsr2l
 10019  004CDC  C010  FFDA         	movff	??islower@read_switch+2,fsr2h
 10020  004CE0  50DF               	movf	indf2,w,c
 10021  004CE2  140E               	andwf	??islower@read_switch^0,w,c
 10022  004CE4  0900               	iorlw	0
 10023  004CE6  A4D8               	btfss	status,2,c
 10024  004CE8  D002               	goto	u9320
 10025  004CEA  0E01               	movlw	1
 10026  004CEC  D001               	goto	u9330
 10027  004CEE                     u9320:
 10028  004CEE  0E00               	movlw	0
 10029  004CF0                     u9330:
 10030  004CF0  6E13               	movwf	read_switch@rb3^0,c
 10031                           
 10032                           ;src/main.c: 199:     rb4 = ((*((PIN_SJ6)->pPORT) & (PIN_SJ6)->mask) != 0)?0:1;
 10033  004CF2  0E5E               	movlw	low (_PIN_SJ6_DEF+4)
 10034  004CF4  6EF6               	movwf	tblptrl,c
 10035  004CF6  0E7B               	movlw	high (_PIN_SJ6_DEF+4)
 10036  004CF8  6EF7               	movwf	tblptrh,c
 10037  004CFA                     	if	0	;tblptru may be non-zero
 10038  004CFA                     	endif
 10039  004CFA                     	if	0	;tblptru may be non-zero
 10040  004CFA                     	endif
 10041  004CFA  0008               	tblrd		*
 10042  004CFC  CFF5 F00E          	movff	tablat,??islower@read_switch
 10043  004D00  0E5A               	movlw	low _PIN_SJ6_DEF
 10044  004D02  6EF6               	movwf	tblptrl,c
 10045  004D04                     	if	1	;There is more than 1 active tblptr byte
 10046  004D04  0E7B               	movlw	high _PIN_SJ6_DEF
 10047  004D06  6EF7               	movwf	tblptrh,c
 10048  004D08                     	endif
 10049  004D08                     	if	0	;There are less than 3 active tblptr bytes
 10050  004D08                     	endif
 10051  004D08  0009               	tblrd		*+
 10052  004D0A  CFF5 F00F          	movff	tablat,??islower@read_switch+1
 10053  004D0E  0009               	tblrd		*+
 10054  004D10  CFF5 F010          	movff	tablat,??islower@read_switch+2
 10055  004D14  C00F  FFD9         	movff	??islower@read_switch+1,fsr2l
 10056  004D18  C010  FFDA         	movff	??islower@read_switch+2,fsr2h
 10057  004D1C  50DF               	movf	indf2,w,c
 10058  004D1E  140E               	andwf	??islower@read_switch^0,w,c
 10059  004D20  0900               	iorlw	0
 10060  004D22  A4D8               	btfss	status,2,c
 10061  004D24  D002               	goto	u9340
 10062  004D26  0E01               	movlw	1
 10063  004D28  D001               	goto	u9350
 10064  004D2A                     u9340:
 10065  004D2A  0E00               	movlw	0
 10066  004D2C                     u9350:
 10067  004D2C  6E14               	movwf	read_switch@rb4^0,c
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;src/main.c: 201:     return (rb4<<0) | (rb3<<1) | (rb2<<2) | (rb1<<3);
 10071  004D2E  C011  F00E         	movff	read_switch@rb1,??islower@read_switch
 10072  004D32  90D8               	bcf	status,0,c
 10073  004D34  360E               	rlcf	??islower@read_switch^0,f,c
 10074  004D36  90D8               	bcf	status,0,c
 10075  004D38  360E               	rlcf	??islower@read_switch^0,f,c
 10076  004D3A  90D8               	bcf	status,0,c
 10077  004D3C  360E               	rlcf	??islower@read_switch^0,f,c
 10078  004D3E  C012  F00F         	movff	read_switch@rb2,??islower@read_switch+1
 10079  004D42  90D8               	bcf	status,0,c
 10080  004D44  360F               	rlcf	(??islower@read_switch+1)^0,f,c
 10081  004D46  90D8               	bcf	status,0,c
 10082  004D48  360F               	rlcf	(??islower@read_switch+1)^0,f,c
 10083  004D4A  5013               	movf	read_switch@rb3^0,w,c
 10084  004D4C  2413               	addwf	read_switch@rb3^0,w,c
 10085  004D4E  100F               	iorwf	(??islower@read_switch+1)^0,w,c
 10086  004D50  100E               	iorwf	??islower@read_switch^0,w,c
 10087  004D52  1014               	iorwf	read_switch@rb4^0,w,c
 10088                           
 10089                           ; BSR set to: 0
 10090  004D54  0012               	return		;funcret
 10091  004D56                     __end_of_read_switch:
 10092                           	opt callstack 0
 10093                           
 10094 ;; *************** function _adf4351_set_freq *****************
 10095 ;; Defined at:
 10096 ;;		line 86 in file "src/driver/adf4351.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  ctx             2   36[BANK0 ] PTR struct adf4351_ctx
 10099 ;;		 -> g_adf4351(55), 
 10100 ;;  freq            4   38[BANK0 ] unsigned long 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  fcorr           4   50[BANK0 ] long 
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  2   36[BANK0 ] int 
 10105 ;; Registers used:
 10106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 3F/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10112 ;;      Params:         0       6       0       0       0       0       0
 10113 ;;      Locals:         0       8       0       0       0       0       0
 10114 ;;      Temps:          0       4       0       0       0       0       0
 10115 ;;      Totals:         0      18       0       0       0       0       0
 10116 ;;Total ram usage:       18 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:   10
 10119 ;; This function calls:
 10120 ;;		___aldiv
 10121 ;;		___lldiv
 10122 ;;		_adf4351_calc_counters
 10123 ;;		_adf4351_setup
 10124 ;;		_calc_mixer_corr_value
 10125 ;;		_printf
 10126 ;; This function is called by:
 10127 ;;		_setADF4351frequency
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           	psect	text18
 10132  002A34                     __ptext18:
 10133                           	opt callstack 0
 10134  002A34                     _adf4351_set_freq:
 10135                           	opt callstack 19
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;src/driver/adf4351.c: 86: int adf4351_set_freq(adf4351_ctx* ctx, u32 freq);src/driver/a
      +                          df4351.c: 87: {;src/driver/adf4351.c: 89:  if(!ctx->init) return -3;
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;incstack = 0
 10142  002A34  C0A4  FFD9         	movff	adf4351_set_freq@ctx,fsr2l
 10143  002A38  C0A5  FFDA         	movff	adf4351_set_freq@ctx+1,fsr2h
 10144  002A3C  50DE               	movf	postinc2,w,c
 10145  002A3E  10DE               	iorwf	postinc2,w,c
 10146  002A40  B4D8               	btfsc	status,2,c
 10147  002A42  0012               	return	
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;src/driver/adf4351.c: 92:  s32 fcorr = 0;
 10151  002A44  0E00               	movlw	0
 10152  002A46  6FB2               	movwf	adf4351_set_freq@fcorr& (0+255),b
 10153  002A48  0E00               	movlw	0
 10154  002A4A  6FB3               	movwf	(adf4351_set_freq@fcorr+1)& (0+255),b
 10155  002A4C  0E00               	movlw	0
 10156  002A4E  6FB4               	movwf	(adf4351_set_freq@fcorr+2)& (0+255),b
 10157  002A50  0E00               	movlw	0
 10158  002A52  6FB5               	movwf	(adf4351_set_freq@fcorr+3)& (0+255),b
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;src/driver/adf4351.c: 93:  if(GPS_lock == 1 && ext10MHzReference == 0 && use_GPS == 1)
 10162  002A54  05D8               	decf	_GPS_lock& (0+255),w,b
 10163  002A56  A4D8               	btfss	status,2,c
 10164  002A58  D019               	goto	l10785
 10165                           
 10166                           ; BSR set to: 0
 10167  002A5A  51D7               	movf	_ext10MHzReference& (0+255),w,b
 10168  002A5C  A4D8               	btfss	status,2,c
 10169  002A5E  D016               	goto	l10785
 10170                           
 10171                           ; BSR set to: 0
 10172  002A60  05E8               	decf	_use_GPS& (0+255),w,b
 10173  002A62  A4D8               	btfss	status,2,c
 10174  002A64  D013               	goto	l10785
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;src/driver/adf4351.c: 94:  {;src/driver/adf4351.c: 95:   fcorr = calc_mixer_corr_value(
      +                          );
 10178  002A66  ECD2  F00C         	call	_calc_mixer_corr_value	;wreg free
 10179  002A6A  C028  F0B2         	movff	?_calc_mixer_corr_value,adf4351_set_freq@fcorr
 10180  002A6E  C029  F0B3         	movff	?_calc_mixer_corr_value+1,adf4351_set_freq@fcorr+1
 10181  002A72  C02A  F0B4         	movff	?_calc_mixer_corr_value+2,adf4351_set_freq@fcorr+2
 10182  002A76  C02B  F0B5         	movff	?_calc_mixer_corr_value+3,adf4351_set_freq@fcorr+3
 10183                           
 10184                           ;src/driver/adf4351.c: 96:   freq -= fcorr;
 10185  002A7A  0100               	movlb	0	; () banked
 10186  002A7C  51B2               	movf	adf4351_set_freq@fcorr& (0+255),w,b
 10187  002A7E  5FA6               	subwf	adf4351_set_freq@freq& (0+255),f,b
 10188  002A80  51B3               	movf	(adf4351_set_freq@fcorr+1)& (0+255),w,b
 10189  002A82  5BA7               	subwfb	(adf4351_set_freq@freq+1)& (0+255),f,b
 10190  002A84  51B4               	movf	(adf4351_set_freq@fcorr+2)& (0+255),w,b
 10191  002A86  5BA8               	subwfb	(adf4351_set_freq@freq+2)& (0+255),f,b
 10192  002A88  51B5               	movf	(adf4351_set_freq@fcorr+3)& (0+255),w,b
 10193  002A8A  5BA9               	subwfb	(adf4351_set_freq@freq+3)& (0+255),f,b
 10194  002A8C                     l10785:
 10195                           
 10196                           ; BSR set to: 0
 10197                           ;src/driver/adf4351.c: 99:  if(freq < 699980 || freq > 700020)
 10198  002A8C  51A9               	movf	(adf4351_set_freq@freq+3)& (0+255),w,b
 10199  002A8E  E108               	bnz	u13400
 10200  002A90  0E4C               	movlw	76
 10201  002A92  5DA6               	subwf	adf4351_set_freq@freq& (0+255),w,b
 10202  002A94  0EAE               	movlw	174
 10203  002A96  59A7               	subwfb	(adf4351_set_freq@freq+1)& (0+255),w,b
 10204  002A98  0E0A               	movlw	10
 10205  002A9A  59A8               	subwfb	(adf4351_set_freq@freq+2)& (0+255),w,b
 10206  002A9C  A0D8               	btfss	status,0,c
 10207  002A9E  D00A               	goto	u13410
 10208  002AA0                     u13400:
 10209                           
 10210                           ; BSR set to: 0
 10211  002AA0  51A9               	movf	(adf4351_set_freq@freq+3)& (0+255),w,b
 10212  002AA2  E108               	bnz	u13410
 10213  002AA4  0E75               	movlw	117
 10214  002AA6  5DA6               	subwf	adf4351_set_freq@freq& (0+255),w,b
 10215  002AA8  0EAE               	movlw	174
 10216  002AAA  59A7               	subwfb	(adf4351_set_freq@freq+1)& (0+255),w,b
 10217  002AAC  0E0A               	movlw	10
 10218  002AAE  59A8               	subwfb	(adf4351_set_freq@freq+2)& (0+255),w,b
 10219  002AB0  A0D8               	btfss	status,0,c
 10220  002AB2  D016               	goto	l10791
 10221  002AB4                     u13410:
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;src/driver/adf4351.c: 100:   printf("ADF:%ld kHz (corr:%ld)\n",freq,fcorr);
 10225  002AB4  0ED6               	movlw	low STR_1
 10226  002AB6  6F97               	movwf	printf@fmt& (0+255),b
 10227  002AB8  0E7C               	movlw	high STR_1
 10228  002ABA  6F98               	movwf	(printf@fmt+1)& (0+255),b
 10229  002ABC  C0A6  F099         	movff	adf4351_set_freq@freq,?_printf+2
 10230  002AC0  C0A7  F09A         	movff	adf4351_set_freq@freq+1,?_printf+3
 10231  002AC4  C0A8  F09B         	movff	adf4351_set_freq@freq+2,?_printf+4
 10232  002AC8  C0A9  F09C         	movff	adf4351_set_freq@freq+3,?_printf+5
 10233  002ACC  C0B2  F09D         	movff	adf4351_set_freq@fcorr,?_printf+6
 10234  002AD0  C0B3  F09E         	movff	adf4351_set_freq@fcorr+1,?_printf+7
 10235  002AD4  C0B4  F09F         	movff	adf4351_set_freq@fcorr+2,?_printf+8
 10236  002AD8  C0B5  F0A0         	movff	adf4351_set_freq@fcorr+3,?_printf+9
 10237  002ADC  EC30  F03A         	call	_printf	;wreg free
 10238  002AE0                     l10791:
 10239                           
 10240                           ;src/driver/adf4351.c: 102:     g_freq = freq;
 10241  002AE0  C0A6  F2A8         	movff	adf4351_set_freq@freq,_g_freq
 10242  002AE4  C0A7  F2A9         	movff	adf4351_set_freq@freq+1,_g_freq+1
 10243  002AE8  C0A8  F2AA         	movff	adf4351_set_freq@freq+2,_g_freq+2
 10244  002AEC  C0A9  F2AB         	movff	adf4351_set_freq@freq+3,_g_freq+3
 10245                           
 10246                           ;src/driver/adf4351.c: 104:  ctx->ref = 40000;
 10247  002AF0  0100               	movlb	0	; () banked
 10248  002AF2  EE20 F02B          	lfsr	2,43
 10249  002AF6  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10250  002AF8  26D9               	addwf	fsr2l,f,c
 10251  002AFA  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10252  002AFC  22DA               	addwfc	fsr2h,f,c
 10253  002AFE  0E40               	movlw	64
 10254  002B00  6EDE               	movwf	postinc2,c
 10255  002B02  0E9C               	movlw	156
 10256  002B04  6EDE               	movwf	postinc2,c
 10257  002B06  0E00               	movlw	0
 10258  002B08  6EDE               	movwf	postinc2,c
 10259  002B0A  0E00               	movlw	0
 10260  002B0C  6EDD               	movwf	postdec2,c
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;src/driver/adf4351.c: 105:  ctx->vco_freq = freq;
 10264  002B0E  EE20 F033          	lfsr	2,51
 10265  002B12  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10266  002B14  26D9               	addwf	fsr2l,f,c
 10267  002B16  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10268  002B18  22DA               	addwfc	fsr2h,f,c
 10269  002B1A  C0A6  FFDE         	movff	adf4351_set_freq@freq,postinc2
 10270  002B1E  C0A7  FFDE         	movff	adf4351_set_freq@freq+1,postinc2
 10271  002B22  C0A8  FFDE         	movff	adf4351_set_freq@freq+2,postinc2
 10272  002B26  C0A9  FFDE         	movff	adf4351_set_freq@freq+3,postinc2
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;src/driver/adf4351.c: 106:     ctx->reg1.prescaler = 1;
 10276  002B2A  EE20 F006          	lfsr	2,6
 10277  002B2E  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10278  002B30  26D9               	addwf	fsr2l,f,c
 10279  002B32  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10280  002B34  22DA               	addwfc	fsr2h,f,c
 10281  002B36  0E01               	movlw	1
 10282  002B38  6EDF               	movwf	indf2,c
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;src/driver/adf4351.c: 109:  if(ctx->vco_freq < 550000)
 10286  002B3A  EE20 F033          	lfsr	2,51
 10287  002B3E  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10288  002B40  26D9               	addwf	fsr2l,f,c
 10289  002B42  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10290  002B44  22DA               	addwfc	fsr2h,f,c
 10291  002B46  0E03               	movlw	3
 10292  002B48  50DB               	movf	plusw2,w,c
 10293  002B4A  E110               	bnz	l10803
 10294  002B4C  0E70               	movlw	112
 10295  002B4E  5CDE               	subwf	postinc2,w,c
 10296  002B50  0E64               	movlw	100
 10297  002B52  58DE               	subwfb	postinc2,w,c
 10298  002B54  0E08               	movlw	8
 10299  002B56  58DE               	subwfb	postinc2,w,c
 10300  002B58  B0D8               	btfsc	status,0,c
 10301  002B5A  D008               	goto	l10803
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;src/driver/adf4351.c: 110:   ctx->reg4.divsel = 3;
 10305  002B5C  EE20 F021          	lfsr	2,33
 10306  002B60  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10307  002B62  26D9               	addwf	fsr2l,f,c
 10308  002B64  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10309  002B66  22DA               	addwfc	fsr2h,f,c
 10310  002B68  0E03               	movlw	3
 10311  002B6A  D020               	goto	L7
 10312  002B6C                     l10803:
 10313                           
 10314                           ; BSR set to: 0
 10315  002B6C  EE20 F033          	lfsr	2,51
 10316  002B70  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10317  002B72  26D9               	addwf	fsr2l,f,c
 10318  002B74  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10319  002B76  22DA               	addwfc	fsr2h,f,c
 10320  002B78  0E03               	movlw	3
 10321  002B7A  50DB               	movf	plusw2,w,c
 10322  002B7C  E110               	bnz	l10807
 10323  002B7E  0EE0               	movlw	224
 10324  002B80  5CDE               	subwf	postinc2,w,c
 10325  002B82  0EC8               	movlw	200
 10326  002B84  58DE               	subwfb	postinc2,w,c
 10327  002B86  0E10               	movlw	16
 10328  002B88  58DE               	subwfb	postinc2,w,c
 10329  002B8A  B0D8               	btfsc	status,0,c
 10330  002B8C  D008               	goto	l10807
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;src/driver/adf4351.c: 112:   ctx->reg4.divsel = 2;
 10334  002B8E  EE20 F021          	lfsr	2,33
 10335  002B92  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10336  002B94  26D9               	addwf	fsr2l,f,c
 10337  002B96  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10338  002B98  22DA               	addwfc	fsr2h,f,c
 10339  002B9A  0E02               	movlw	2
 10340  002B9C  D007               	goto	L7
 10341  002B9E                     l10807:
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;src/driver/adf4351.c: 114:   ctx->reg4.divsel = 1;
 10345  002B9E  EE20 F021          	lfsr	2,33
 10346  002BA2  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10347  002BA4  26D9               	addwf	fsr2l,f,c
 10348  002BA6  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10349  002BA8  22DA               	addwfc	fsr2h,f,c
 10350  002BAA  0E01               	movlw	1
 10351  002BAC                     L7:
 10352  002BAC  6EDF               	movwf	indf2,c
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;src/driver/adf4351.c: 116:  ctx->reg2.rcnt = 5;
 10356  002BAE  EE20 F00F          	lfsr	2,15
 10357  002BB2  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10358  002BB4  26D9               	addwf	fsr2l,f,c
 10359  002BB6  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10360  002BB8  22DA               	addwfc	fsr2h,f,c
 10361  002BBA  0E05               	movlw	5
 10362  002BBC  6EDE               	movwf	postinc2,c
 10363  002BBE  0E00               	movlw	0
 10364  002BC0  6EDD               	movwf	postdec2,c
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;src/driver/adf4351.c: 117:  ctx->pfd = ctx->ref / ctx->reg2.rcnt;
 10368  002BC2  EE20 F02B          	lfsr	2,43
 10369  002BC6  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10370  002BC8  26D9               	addwf	fsr2l,f,c
 10371  002BCA  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10372  002BCC  22DA               	addwfc	fsr2h,f,c
 10373  002BCE  CFDE F01A          	movff	postinc2,___lldiv@dividend
 10374  002BD2  CFDE F01B          	movff	postinc2,___lldiv@dividend+1
 10375  002BD6  CFDE F01C          	movff	postinc2,___lldiv@dividend+2
 10376  002BDA  CFDE F01D          	movff	postinc2,___lldiv@dividend+3
 10377  002BDE  EE20 F00F          	lfsr	2,15
 10378  002BE2  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10379  002BE4  26D9               	addwf	fsr2l,f,c
 10380  002BE6  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10381  002BE8  22DA               	addwfc	fsr2h,f,c
 10382  002BEA  CFDE F0AA          	movff	postinc2,??_adf4351_set_freq
 10383  002BEE  CFDD F0AB          	movff	postdec2,??_adf4351_set_freq+1
 10384  002BF2  C0AA  F01E         	movff	??_adf4351_set_freq,___lldiv@divisor
 10385  002BF6  C0AB  F01F         	movff	??_adf4351_set_freq+1,___lldiv@divisor+1
 10386  002BFA  6A20               	clrf	(___lldiv@divisor+2)^0,c
 10387  002BFC  6A21               	clrf	(___lldiv@divisor+3)^0,c
 10388  002BFE  ECBF  F032         	call	___lldiv	;wreg free
 10389  002C02  0100               	movlb	0	; () banked
 10390  002C04  EE20 F02F          	lfsr	2,47
 10391  002C08  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10392  002C0A  26D9               	addwf	fsr2l,f,c
 10393  002C0C  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10394  002C0E  22DA               	addwfc	fsr2h,f,c
 10395  002C10  C01A  FFDE         	movff	?___lldiv,postinc2
 10396  002C14  C01B  FFDE         	movff	?___lldiv+1,postinc2
 10397  002C18  C01C  FFDE         	movff	?___lldiv+2,postinc2
 10398  002C1C  C01D  FFDE         	movff	?___lldiv+3,postinc2
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;src/driver/adf4351.c: 118:  ctx->reg2.refdiv = 0;
 10402  002C20  EE20 F00E          	lfsr	2,14
 10403  002C24  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10404  002C26  26D9               	addwf	fsr2l,f,c
 10405  002C28  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10406  002C2A  22DA               	addwfc	fsr2h,f,c
 10407  002C2C  0E00               	movlw	0
 10408  002C2E  6EDF               	movwf	indf2,c
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;src/driver/adf4351.c: 119:  ctx->reg2.refdbl = 0;
 10412  002C30  EE20 F00D          	lfsr	2,13
 10413  002C34  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10414  002C36  26D9               	addwf	fsr2l,f,c
 10415  002C38  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10416  002C3A  22DA               	addwfc	fsr2h,f,c
 10417  002C3C  0E00               	movlw	0
 10418  002C3E  6EDF               	movwf	indf2,c
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;src/driver/adf4351.c: 120:  ctx->reg3.bscm = 0;
 10422  002C40  EE20 F019          	lfsr	2,25
 10423  002C44  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10424  002C46  26D9               	addwf	fsr2l,f,c
 10425  002C48  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10426  002C4A  22DA               	addwfc	fsr2h,f,c
 10427  002C4C  0E00               	movlw	0
 10428  002C4E  6EDF               	movwf	indf2,c
 10429                           
 10430                           ;src/driver/adf4351.c: 121:  ctx->reg4.bsclkdiv = (40000/ctx->reg2.rcnt)/125+1;
 10431  002C50  EE20 F00F          	lfsr	2,15
 10432  002C54  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10433  002C56  26D9               	addwf	fsr2l,f,c
 10434  002C58  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10435  002C5A  22DA               	addwfc	fsr2h,f,c
 10436  002C5C  CFDE F0AA          	movff	postinc2,??_adf4351_set_freq
 10437  002C60  CFDD F0AB          	movff	postdec2,??_adf4351_set_freq+1
 10438  002C64  C0AA  F012         	movff	??_adf4351_set_freq,___aldiv@divisor
 10439  002C68  C0AB  F013         	movff	??_adf4351_set_freq+1,___aldiv@divisor+1
 10440  002C6C  6A14               	clrf	(___aldiv@divisor+2)^0,c
 10441  002C6E  6A15               	clrf	(___aldiv@divisor+3)^0,c
 10442  002C70  0E40               	movlw	64
 10443  002C72  6E0E               	movwf	___aldiv@dividend^0,c
 10444  002C74  0E9C               	movlw	156
 10445  002C76  6E0F               	movwf	(___aldiv@dividend+1)^0,c
 10446  002C78  0E00               	movlw	0
 10447  002C7A  6E10               	movwf	(___aldiv@dividend+2)^0,c
 10448  002C7C  0E00               	movlw	0
 10449  002C7E  6E11               	movwf	(___aldiv@dividend+3)^0,c
 10450  002C80  ECB6  F02B         	call	___aldiv	;wreg free
 10451  002C84  C00E  F0AE         	movff	?___aldiv,_adf4351_set_freq$4063
 10452  002C88  C00F  F0AF         	movff	?___aldiv+1,_adf4351_set_freq$4063+1
 10453  002C8C  C010  F0B0         	movff	?___aldiv+2,_adf4351_set_freq$4063+2
 10454  002C90  C011  F0B1         	movff	?___aldiv+3,_adf4351_set_freq$4063+3
 10455                           
 10456                           ;src/driver/adf4351.c: 121:  ctx->reg4.bsclkdiv = (40000/ctx->reg2.rcnt)/125+1;
 10457  002C94  EE20 F022          	lfsr	2,34
 10458  002C98  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10459  002C9A  26D9               	addwf	fsr2l,f,c
 10460  002C9C  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10461  002C9E  22DA               	addwfc	fsr2h,f,c
 10462  002CA0  C0AE  F00E         	movff	_adf4351_set_freq$4063,___aldiv@dividend
 10463  002CA4  C0AF  F00F         	movff	_adf4351_set_freq$4063+1,___aldiv@dividend+1
 10464  002CA8  C0B0  F010         	movff	_adf4351_set_freq$4063+2,___aldiv@dividend+2
 10465  002CAC  C0B1  F011         	movff	_adf4351_set_freq$4063+3,___aldiv@dividend+3
 10466  002CB0  0E7D               	movlw	125
 10467  002CB2  6E12               	movwf	___aldiv@divisor^0,c
 10468  002CB4  0E00               	movlw	0
 10469  002CB6  6E13               	movwf	(___aldiv@divisor+1)^0,c
 10470  002CB8  0E00               	movlw	0
 10471  002CBA  6E14               	movwf	(___aldiv@divisor+2)^0,c
 10472  002CBC  0E00               	movlw	0
 10473  002CBE  6E15               	movwf	(___aldiv@divisor+3)^0,c
 10474  002CC0  ECB6  F02B         	call	___aldiv	;wreg free
 10475  002CC4  280E               	incf	?___aldiv^0,w,c
 10476  002CC6  6EDF               	movwf	indf2,c
 10477                           
 10478                           ; BSR set to: 0
 10479                           ;src/driver/adf4351.c: 124:  adf4351_calc_counters(ctx);
 10480  002CC8  C0A4  F03F         	movff	adf4351_set_freq@ctx,adf4351_calc_counters@ctx
 10481  002CCC  C0A5  F040         	movff	adf4351_set_freq@ctx+1,adf4351_calc_counters@ctx+1
 10482  002CD0  EC33  F012         	call	_adf4351_calc_counters	;wreg free
 10483                           
 10484                           ;src/driver/adf4351.c: 126:  if(ctx->reg4.vcopd == 0) {
 10485  002CD4  0100               	movlb	0	; () banked
 10486  002CD6  EE20 F023          	lfsr	2,35
 10487  002CDA  51A4               	movf	adf4351_set_freq@ctx& (0+255),w,b
 10488  002CDC  26D9               	addwf	fsr2l,f,c
 10489  002CDE  51A5               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
 10490  002CE0  22DA               	addwfc	fsr2h,f,c
 10491  002CE2  50DF               	movf	indf2,w,c
 10492  002CE4  A4D8               	btfss	status,2,c
 10493  002CE6  0012               	return	
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;src/driver/adf4351.c: 127:   adf4351_setup(ctx);
 10497  002CE8  C0A4  F026         	movff	adf4351_set_freq@ctx,adf4351_setup@ctx
 10498  002CEC  C0A5  F027         	movff	adf4351_set_freq@ctx+1,adf4351_setup@ctx+1
 10499  002CF0  ECB9  F036         	call	_adf4351_setup	;wreg free
 10500  002CF4  0012               	return		;funcret
 10501  002CF6                     __end_of_adf4351_set_freq:
 10502                           	opt callstack 0
 10503                           
 10504 ;; *************** function _calc_mixer_corr_value *****************
 10505 ;; Defined at:
 10506 ;;		line 168 in file "src/driver/si5328.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;		None
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  fgps            8   63[COMRAM] long long 
 10511 ;;  curLO           8   51[COMRAM] long long 
 10512 ;;  v               4   59[COMRAM] long 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  4   39[COMRAM] long 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 3F/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10522 ;;      Params:         4       0       0       0       0       0       0
 10523 ;;      Locals:        20       0       0       0       0       0       0
 10524 ;;      Temps:          8       0       0       0       0       0       0
 10525 ;;      Totals:        32       0       0       0       0       0       0
 10526 ;;Total ram usage:       32 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    3
 10529 ;; This function calls:
 10530 ;;		___aodiv
 10531 ;;		___omul
 10532 ;;		_getGPSfrequency
 10533 ;; This function is called by:
 10534 ;;		_adf4351_set_freq
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           	psect	text19
 10539  0019A4                     __ptext19:
 10540                           	opt callstack 0
 10541  0019A4                     _calc_mixer_corr_value:
 10542                           	opt callstack 25
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;src/driver/si5328.c: 170:  s64 fgps = getGPSfrequency();
 10546                           
 10547                           ;incstack = 0
 10548  0019A4  ECB0  F034         	call	_getGPSfrequency	;wreg free
 10549  0019A8  500E               	movf	?_getGPSfrequency^0,w,c
 10550  0019AA  6E40               	movwf	calc_mixer_corr_value@fgps^0,c
 10551  0019AC  500F               	movf	(?_getGPSfrequency+1)^0,w,c
 10552  0019AE  6E41               	movwf	(calc_mixer_corr_value@fgps+1)^0,c
 10553  0019B0  5010               	movf	(?_getGPSfrequency+2)^0,w,c
 10554  0019B2  6E42               	movwf	(calc_mixer_corr_value@fgps+2)^0,c
 10555  0019B4  5011               	movf	(?_getGPSfrequency+3)^0,w,c
 10556  0019B6  6E43               	movwf	(calc_mixer_corr_value@fgps+3)^0,c
 10557  0019B8  6A44               	clrf	(calc_mixer_corr_value@fgps+4)^0,c
 10558  0019BA  6A45               	clrf	(calc_mixer_corr_value@fgps+5)^0,c
 10559  0019BC  6A46               	clrf	(calc_mixer_corr_value@fgps+6)^0,c
 10560  0019BE  6A47               	clrf	(calc_mixer_corr_value@fgps+7)^0,c
 10561                           
 10562                           ; BSR set to: 2
 10563                           ;src/driver/si5328.c: 171:  fgps *= 1000;
 10564  0019C0  C040  F00E         	movff	calc_mixer_corr_value@fgps,___omul@multiplier
 10565  0019C4  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___omul@multiplier+1
 10566  0019C8  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___omul@multiplier+2
 10567  0019CC  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___omul@multiplier+3
 10568  0019D0  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___omul@multiplier+4
 10569  0019D4  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___omul@multiplier+5
 10570  0019D8  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___omul@multiplier+6
 10571  0019DC  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___omul@multiplier+7
 10572  0019E0  0EE8               	movlw	232
 10573  0019E2  6E16               	movwf	___omul@multiplicand^0,c
 10574  0019E4  0E03               	movlw	3
 10575  0019E6  6E17               	movwf	(___omul@multiplicand+1)^0,c
 10576  0019E8  0E00               	movlw	0
 10577  0019EA  6E18               	movwf	(___omul@multiplicand+2)^0,c
 10578  0019EC  0E00               	movlw	0
 10579  0019EE  6E19               	movwf	(___omul@multiplicand+3)^0,c
 10580  0019F0  0E00               	movlw	0
 10581  0019F2  6E1A               	movwf	(___omul@multiplicand+4)^0,c
 10582  0019F4  0E00               	movlw	0
 10583  0019F6  6E1B               	movwf	(___omul@multiplicand+5)^0,c
 10584  0019F8  0E00               	movlw	0
 10585  0019FA  6E1C               	movwf	(___omul@multiplicand+6)^0,c
 10586  0019FC  0E00               	movlw	0
 10587  0019FE  6E1D               	movwf	(___omul@multiplicand+7)^0,c
 10588  001A00  EC38  F032         	call	___omul	;wreg free
 10589  001A04  C00E  F040         	movff	?___omul,calc_mixer_corr_value@fgps
 10590  001A08  C00F  F041         	movff	?___omul+1,calc_mixer_corr_value@fgps+1
 10591  001A0C  C010  F042         	movff	?___omul+2,calc_mixer_corr_value@fgps+2
 10592  001A10  C011  F043         	movff	?___omul+3,calc_mixer_corr_value@fgps+3
 10593  001A14  C012  F044         	movff	?___omul+4,calc_mixer_corr_value@fgps+4
 10594  001A18  C013  F045         	movff	?___omul+5,calc_mixer_corr_value@fgps+5
 10595  001A1C  C014  F046         	movff	?___omul+6,calc_mixer_corr_value@fgps+6
 10596  001A20  C015  F047         	movff	?___omul+7,calc_mixer_corr_value@fgps+7
 10597                           
 10598                           ;src/driver/si5328.c: 172:  fgps /= N31_reg4445;
 10599  001A24  C040  F00E         	movff	calc_mixer_corr_value@fgps,___aodiv@dividend
 10600  001A28  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___aodiv@dividend+1
 10601  001A2C  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___aodiv@dividend+2
 10602  001A30  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___aodiv@dividend+3
 10603  001A34  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___aodiv@dividend+4
 10604  001A38  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___aodiv@dividend+5
 10605  001A3C  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___aodiv@dividend+6
 10606  001A40  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___aodiv@dividend+7
 10607  001A44  C0DA  F016         	movff	_N31_reg4445,___aodiv@divisor
 10608  001A48  C0DB  F017         	movff	_N31_reg4445+1,___aodiv@divisor+1
 10609  001A4C  6A18               	clrf	(___aodiv@divisor+2)^0,c
 10610  001A4E  6A19               	clrf	(___aodiv@divisor+3)^0,c
 10611  001A50  6A1A               	clrf	(___aodiv@divisor+4)^0,c
 10612  001A52  6A1B               	clrf	(___aodiv@divisor+5)^0,c
 10613  001A54  6A1C               	clrf	(___aodiv@divisor+6)^0,c
 10614  001A56  6A1D               	clrf	(___aodiv@divisor+7)^0,c
 10615  001A58  ECB2  F023         	call	___aodiv	;wreg free
 10616  001A5C  C00E  F040         	movff	?___aodiv,calc_mixer_corr_value@fgps
 10617  001A60  C00F  F041         	movff	?___aodiv+1,calc_mixer_corr_value@fgps+1
 10618  001A64  C010  F042         	movff	?___aodiv+2,calc_mixer_corr_value@fgps+2
 10619  001A68  C011  F043         	movff	?___aodiv+3,calc_mixer_corr_value@fgps+3
 10620  001A6C  C012  F044         	movff	?___aodiv+4,calc_mixer_corr_value@fgps+4
 10621  001A70  C013  F045         	movff	?___aodiv+5,calc_mixer_corr_value@fgps+5
 10622  001A74  C014  F046         	movff	?___aodiv+6,calc_mixer_corr_value@fgps+6
 10623  001A78  C015  F047         	movff	?___aodiv+7,calc_mixer_corr_value@fgps+7
 10624                           
 10625                           ;src/driver/si5328.c: 173:  fgps *= N2HS_reg40;
 10626  001A7C  C040  F00E         	movff	calc_mixer_corr_value@fgps,___omul@multiplier
 10627  001A80  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___omul@multiplier+1
 10628  001A84  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___omul@multiplier+2
 10629  001A88  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___omul@multiplier+3
 10630  001A8C  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___omul@multiplier+4
 10631  001A90  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___omul@multiplier+5
 10632  001A94  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___omul@multiplier+6
 10633  001A98  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___omul@multiplier+7
 10634  001A9C  C216  F016         	movff	_N2HS_reg40,___omul@multiplicand
 10635  001AA0  C217  F017         	movff	_N2HS_reg40+1,___omul@multiplicand+1
 10636  001AA4  6A18               	clrf	(___omul@multiplicand+2)^0,c
 10637  001AA6  6A19               	clrf	(___omul@multiplicand+3)^0,c
 10638  001AA8  6A1A               	clrf	(___omul@multiplicand+4)^0,c
 10639  001AAA  6A1B               	clrf	(___omul@multiplicand+5)^0,c
 10640  001AAC  6A1C               	clrf	(___omul@multiplicand+6)^0,c
 10641  001AAE  6A1D               	clrf	(___omul@multiplicand+7)^0,c
 10642  001AB0  EC38  F032         	call	___omul	;wreg free
 10643  001AB4  C00E  F040         	movff	?___omul,calc_mixer_corr_value@fgps
 10644  001AB8  C00F  F041         	movff	?___omul+1,calc_mixer_corr_value@fgps+1
 10645  001ABC  C010  F042         	movff	?___omul+2,calc_mixer_corr_value@fgps+2
 10646  001AC0  C011  F043         	movff	?___omul+3,calc_mixer_corr_value@fgps+3
 10647  001AC4  C012  F044         	movff	?___omul+4,calc_mixer_corr_value@fgps+4
 10648  001AC8  C013  F045         	movff	?___omul+5,calc_mixer_corr_value@fgps+5
 10649  001ACC  C014  F046         	movff	?___omul+6,calc_mixer_corr_value@fgps+6
 10650  001AD0  C015  F047         	movff	?___omul+7,calc_mixer_corr_value@fgps+7
 10651                           
 10652                           ;src/driver/si5328.c: 174:  fgps *= N2L_reg4142;
 10653  001AD4  C040  F00E         	movff	calc_mixer_corr_value@fgps,___omul@multiplier
 10654  001AD8  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___omul@multiplier+1
 10655  001ADC  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___omul@multiplier+2
 10656  001AE0  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___omul@multiplier+3
 10657  001AE4  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___omul@multiplier+4
 10658  001AE8  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___omul@multiplier+5
 10659  001AEC  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___omul@multiplier+6
 10660  001AF0  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___omul@multiplier+7
 10661  001AF4  C1FE  F016         	movff	_N2L_reg4142,___omul@multiplicand
 10662  001AF8  C1FF  F017         	movff	_N2L_reg4142+1,___omul@multiplicand+1
 10663  001AFC  6A18               	clrf	(___omul@multiplicand+2)^0,c
 10664  001AFE  6A19               	clrf	(___omul@multiplicand+3)^0,c
 10665  001B00  6A1A               	clrf	(___omul@multiplicand+4)^0,c
 10666  001B02  6A1B               	clrf	(___omul@multiplicand+5)^0,c
 10667  001B04  6A1C               	clrf	(___omul@multiplicand+6)^0,c
 10668  001B06  6A1D               	clrf	(___omul@multiplicand+7)^0,c
 10669  001B08  EC38  F032         	call	___omul	;wreg free
 10670  001B0C  C00E  F040         	movff	?___omul,calc_mixer_corr_value@fgps
 10671  001B10  C00F  F041         	movff	?___omul+1,calc_mixer_corr_value@fgps+1
 10672  001B14  C010  F042         	movff	?___omul+2,calc_mixer_corr_value@fgps+2
 10673  001B18  C011  F043         	movff	?___omul+3,calc_mixer_corr_value@fgps+3
 10674  001B1C  C012  F044         	movff	?___omul+4,calc_mixer_corr_value@fgps+4
 10675  001B20  C013  F045         	movff	?___omul+5,calc_mixer_corr_value@fgps+5
 10676  001B24  C014  F046         	movff	?___omul+6,calc_mixer_corr_value@fgps+6
 10677  001B28  C015  F047         	movff	?___omul+7,calc_mixer_corr_value@fgps+7
 10678                           
 10679                           ;src/driver/si5328.c: 175:  fgps /= N1HS_reg25;
 10680  001B2C  C040  F00E         	movff	calc_mixer_corr_value@fgps,___aodiv@dividend
 10681  001B30  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___aodiv@dividend+1
 10682  001B34  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___aodiv@dividend+2
 10683  001B38  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___aodiv@dividend+3
 10684  001B3C  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___aodiv@dividend+4
 10685  001B40  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___aodiv@dividend+5
 10686  001B44  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___aodiv@dividend+6
 10687  001B48  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___aodiv@dividend+7
 10688  001B4C  C214  F016         	movff	_N1HS_reg25,___aodiv@divisor
 10689  001B50  C215  F017         	movff	_N1HS_reg25+1,___aodiv@divisor+1
 10690  001B54  6A18               	clrf	(___aodiv@divisor+2)^0,c
 10691  001B56  6A19               	clrf	(___aodiv@divisor+3)^0,c
 10692  001B58  6A1A               	clrf	(___aodiv@divisor+4)^0,c
 10693  001B5A  6A1B               	clrf	(___aodiv@divisor+5)^0,c
 10694  001B5C  6A1C               	clrf	(___aodiv@divisor+6)^0,c
 10695  001B5E  6A1D               	clrf	(___aodiv@divisor+7)^0,c
 10696  001B60  ECB2  F023         	call	___aodiv	;wreg free
 10697  001B64  C00E  F040         	movff	?___aodiv,calc_mixer_corr_value@fgps
 10698  001B68  C00F  F041         	movff	?___aodiv+1,calc_mixer_corr_value@fgps+1
 10699  001B6C  C010  F042         	movff	?___aodiv+2,calc_mixer_corr_value@fgps+2
 10700  001B70  C011  F043         	movff	?___aodiv+3,calc_mixer_corr_value@fgps+3
 10701  001B74  C012  F044         	movff	?___aodiv+4,calc_mixer_corr_value@fgps+4
 10702  001B78  C013  F045         	movff	?___aodiv+5,calc_mixer_corr_value@fgps+5
 10703  001B7C  C014  F046         	movff	?___aodiv+6,calc_mixer_corr_value@fgps+6
 10704  001B80  C015  F047         	movff	?___aodiv+7,calc_mixer_corr_value@fgps+7
 10705                           
 10706                           ;src/driver/si5328.c: 176:  fgps /= NC1_LS_reg3233;
 10707  001B84  C040  F00E         	movff	calc_mixer_corr_value@fgps,___aodiv@dividend
 10708  001B88  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___aodiv@dividend+1
 10709  001B8C  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___aodiv@dividend+2
 10710  001B90  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___aodiv@dividend+3
 10711  001B94  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___aodiv@dividend+4
 10712  001B98  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___aodiv@dividend+5
 10713  001B9C  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___aodiv@dividend+6
 10714  001BA0  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___aodiv@dividend+7
 10715  001BA4  C1FC  F016         	movff	_NC1_LS_reg3233,___aodiv@divisor
 10716  001BA8  C1FD  F017         	movff	_NC1_LS_reg3233+1,___aodiv@divisor+1
 10717  001BAC  6A18               	clrf	(___aodiv@divisor+2)^0,c
 10718  001BAE  6A19               	clrf	(___aodiv@divisor+3)^0,c
 10719  001BB0  6A1A               	clrf	(___aodiv@divisor+4)^0,c
 10720  001BB2  6A1B               	clrf	(___aodiv@divisor+5)^0,c
 10721  001BB4  6A1C               	clrf	(___aodiv@divisor+6)^0,c
 10722  001BB6  6A1D               	clrf	(___aodiv@divisor+7)^0,c
 10723  001BB8  ECB2  F023         	call	___aodiv	;wreg free
 10724  001BBC  C00E  F040         	movff	?___aodiv,calc_mixer_corr_value@fgps
 10725  001BC0  C00F  F041         	movff	?___aodiv+1,calc_mixer_corr_value@fgps+1
 10726  001BC4  C010  F042         	movff	?___aodiv+2,calc_mixer_corr_value@fgps+2
 10727  001BC8  C011  F043         	movff	?___aodiv+3,calc_mixer_corr_value@fgps+3
 10728  001BCC  C012  F044         	movff	?___aodiv+4,calc_mixer_corr_value@fgps+4
 10729  001BD0  C013  F045         	movff	?___aodiv+5,calc_mixer_corr_value@fgps+5
 10730  001BD4  C014  F046         	movff	?___aodiv+6,calc_mixer_corr_value@fgps+6
 10731  001BD8  C015  F047         	movff	?___aodiv+7,calc_mixer_corr_value@fgps+7
 10732                           
 10733                           ;src/driver/si5328.c: 177:  s64 curLO = (s64)currentLO * 1000000000;
 10734  001BDC  506D               	movf	_currentLO^0,w,c
 10735  001BDE  6E0E               	movwf	___omul@multiplier^0,c
 10736  001BE0  6A0F               	clrf	(___omul@multiplier+1)^0,c
 10737  001BE2  6A10               	clrf	(___omul@multiplier+2)^0,c
 10738  001BE4  6A11               	clrf	(___omul@multiplier+3)^0,c
 10739  001BE6  6A12               	clrf	(___omul@multiplier+4)^0,c
 10740  001BE8  6A13               	clrf	(___omul@multiplier+5)^0,c
 10741  001BEA  6A14               	clrf	(___omul@multiplier+6)^0,c
 10742  001BEC  6A15               	clrf	(___omul@multiplier+7)^0,c
 10743  001BEE  0E00               	movlw	0
 10744  001BF0  6E16               	movwf	___omul@multiplicand^0,c
 10745  001BF2  0ECA               	movlw	202
 10746  001BF4  6E17               	movwf	(___omul@multiplicand+1)^0,c
 10747  001BF6  0E9A               	movlw	154
 10748  001BF8  6E18               	movwf	(___omul@multiplicand+2)^0,c
 10749  001BFA  0E3B               	movlw	59
 10750  001BFC  6E19               	movwf	(___omul@multiplicand+3)^0,c
 10751  001BFE  0E00               	movlw	0
 10752  001C00  6E1A               	movwf	(___omul@multiplicand+4)^0,c
 10753  001C02  0E00               	movlw	0
 10754  001C04  6E1B               	movwf	(___omul@multiplicand+5)^0,c
 10755  001C06  0E00               	movlw	0
 10756  001C08  6E1C               	movwf	(___omul@multiplicand+6)^0,c
 10757  001C0A  0E00               	movlw	0
 10758  001C0C  6E1D               	movwf	(___omul@multiplicand+7)^0,c
 10759  001C0E  EC38  F032         	call	___omul	;wreg free
 10760  001C12  C00E  F034         	movff	?___omul,calc_mixer_corr_value@curLO
 10761  001C16  C00F  F035         	movff	?___omul+1,calc_mixer_corr_value@curLO+1
 10762  001C1A  C010  F036         	movff	?___omul+2,calc_mixer_corr_value@curLO+2
 10763  001C1E  C011  F037         	movff	?___omul+3,calc_mixer_corr_value@curLO+3
 10764  001C22  C012  F038         	movff	?___omul+4,calc_mixer_corr_value@curLO+4
 10765  001C26  C013  F039         	movff	?___omul+5,calc_mixer_corr_value@curLO+5
 10766  001C2A  C014  F03A         	movff	?___omul+6,calc_mixer_corr_value@curLO+6
 10767  001C2E  C015  F03B         	movff	?___omul+7,calc_mixer_corr_value@curLO+7
 10768                           
 10769                           ;src/driver/si5328.c: 178:  fgps -= curLO;
 10770  001C32  5034               	movf	calc_mixer_corr_value@curLO^0,w,c
 10771  001C34  5E40               	subwf	calc_mixer_corr_value@fgps^0,f,c
 10772  001C36  5035               	movf	(calc_mixer_corr_value@curLO+1)^0,w,c
 10773  001C38  5A41               	subwfb	(calc_mixer_corr_value@fgps+1)^0,f,c
 10774  001C3A  5036               	movf	(calc_mixer_corr_value@curLO+2)^0,w,c
 10775  001C3C  5A42               	subwfb	(calc_mixer_corr_value@fgps+2)^0,f,c
 10776  001C3E  5037               	movf	(calc_mixer_corr_value@curLO+3)^0,w,c
 10777  001C40  5A43               	subwfb	(calc_mixer_corr_value@fgps+3)^0,f,c
 10778  001C42  5038               	movf	(calc_mixer_corr_value@curLO+4)^0,w,c
 10779  001C44  5A44               	subwfb	(calc_mixer_corr_value@fgps+4)^0,f,c
 10780  001C46  5039               	movf	(calc_mixer_corr_value@curLO+5)^0,w,c
 10781  001C48  5A45               	subwfb	(calc_mixer_corr_value@fgps+5)^0,f,c
 10782  001C4A  503A               	movf	(calc_mixer_corr_value@curLO+6)^0,w,c
 10783  001C4C  5A46               	subwfb	(calc_mixer_corr_value@fgps+6)^0,f,c
 10784  001C4E  503B               	movf	(calc_mixer_corr_value@curLO+7)^0,w,c
 10785  001C50  5A47               	subwfb	(calc_mixer_corr_value@fgps+7)^0,f,c
 10786                           
 10787                           ;src/driver/si5328.c: 179:  fgps /= 1000;
 10788  001C52  C040  F00E         	movff	calc_mixer_corr_value@fgps,___aodiv@dividend
 10789  001C56  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___aodiv@dividend+1
 10790  001C5A  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___aodiv@dividend+2
 10791  001C5E  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___aodiv@dividend+3
 10792  001C62  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___aodiv@dividend+4
 10793  001C66  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___aodiv@dividend+5
 10794  001C6A  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___aodiv@dividend+6
 10795  001C6E  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___aodiv@dividend+7
 10796  001C72  0EE8               	movlw	232
 10797  001C74  6E16               	movwf	___aodiv@divisor^0,c
 10798  001C76  0E03               	movlw	3
 10799  001C78  6E17               	movwf	(___aodiv@divisor+1)^0,c
 10800  001C7A  0E00               	movlw	0
 10801  001C7C  6E18               	movwf	(___aodiv@divisor+2)^0,c
 10802  001C7E  0E00               	movlw	0
 10803  001C80  6E19               	movwf	(___aodiv@divisor+3)^0,c
 10804  001C82  0E00               	movlw	0
 10805  001C84  6E1A               	movwf	(___aodiv@divisor+4)^0,c
 10806  001C86  0E00               	movlw	0
 10807  001C88  6E1B               	movwf	(___aodiv@divisor+5)^0,c
 10808  001C8A  0E00               	movlw	0
 10809  001C8C  6E1C               	movwf	(___aodiv@divisor+6)^0,c
 10810  001C8E  0E00               	movlw	0
 10811  001C90  6E1D               	movwf	(___aodiv@divisor+7)^0,c
 10812  001C92  ECB2  F023         	call	___aodiv	;wreg free
 10813  001C96  C00E  F040         	movff	?___aodiv,calc_mixer_corr_value@fgps
 10814  001C9A  C00F  F041         	movff	?___aodiv+1,calc_mixer_corr_value@fgps+1
 10815  001C9E  C010  F042         	movff	?___aodiv+2,calc_mixer_corr_value@fgps+2
 10816  001CA2  C011  F043         	movff	?___aodiv+3,calc_mixer_corr_value@fgps+3
 10817  001CA6  C012  F044         	movff	?___aodiv+4,calc_mixer_corr_value@fgps+4
 10818  001CAA  C013  F045         	movff	?___aodiv+5,calc_mixer_corr_value@fgps+5
 10819  001CAE  C014  F046         	movff	?___aodiv+6,calc_mixer_corr_value@fgps+6
 10820  001CB2  C015  F047         	movff	?___aodiv+7,calc_mixer_corr_value@fgps+7
 10821                           
 10822                           ;src/driver/si5328.c: 180:  fgps *= 390;
 10823  001CB6  C040  F00E         	movff	calc_mixer_corr_value@fgps,___omul@multiplier
 10824  001CBA  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___omul@multiplier+1
 10825  001CBE  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___omul@multiplier+2
 10826  001CC2  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___omul@multiplier+3
 10827  001CC6  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___omul@multiplier+4
 10828  001CCA  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___omul@multiplier+5
 10829  001CCE  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___omul@multiplier+6
 10830  001CD2  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___omul@multiplier+7
 10831  001CD6  0E86               	movlw	134
 10832  001CD8  6E16               	movwf	___omul@multiplicand^0,c
 10833  001CDA  0E01               	movlw	1
 10834  001CDC  6E17               	movwf	(___omul@multiplicand+1)^0,c
 10835  001CDE  0E00               	movlw	0
 10836  001CE0  6E18               	movwf	(___omul@multiplicand+2)^0,c
 10837  001CE2  0E00               	movlw	0
 10838  001CE4  6E19               	movwf	(___omul@multiplicand+3)^0,c
 10839  001CE6  0E00               	movlw	0
 10840  001CE8  6E1A               	movwf	(___omul@multiplicand+4)^0,c
 10841  001CEA  0E00               	movlw	0
 10842  001CEC  6E1B               	movwf	(___omul@multiplicand+5)^0,c
 10843  001CEE  0E00               	movlw	0
 10844  001CF0  6E1C               	movwf	(___omul@multiplicand+6)^0,c
 10845  001CF2  0E00               	movlw	0
 10846  001CF4  6E1D               	movwf	(___omul@multiplicand+7)^0,c
 10847  001CF6  EC38  F032         	call	___omul	;wreg free
 10848  001CFA  C00E  F040         	movff	?___omul,calc_mixer_corr_value@fgps
 10849  001CFE  C00F  F041         	movff	?___omul+1,calc_mixer_corr_value@fgps+1
 10850  001D02  C010  F042         	movff	?___omul+2,calc_mixer_corr_value@fgps+2
 10851  001D06  C011  F043         	movff	?___omul+3,calc_mixer_corr_value@fgps+3
 10852  001D0A  C012  F044         	movff	?___omul+4,calc_mixer_corr_value@fgps+4
 10853  001D0E  C013  F045         	movff	?___omul+5,calc_mixer_corr_value@fgps+5
 10854  001D12  C014  F046         	movff	?___omul+6,calc_mixer_corr_value@fgps+6
 10855  001D16  C015  F047         	movff	?___omul+7,calc_mixer_corr_value@fgps+7
 10856                           
 10857                           ;src/driver/si5328.c: 181:  if(fgps > 0)
 10858  001D1A  BE47               	btfsc	(calc_mixer_corr_value@fgps+7)^0,7,c
 10859  001D1C  D01B               	goto	l10595
 10860  001D1E  5047               	movf	(calc_mixer_corr_value@fgps+7)^0,w,c
 10861  001D20  1046               	iorwf	(calc_mixer_corr_value@fgps+6)^0,w,c
 10862  001D22  1045               	iorwf	(calc_mixer_corr_value@fgps+5)^0,w,c
 10863  001D24  1044               	iorwf	(calc_mixer_corr_value@fgps+4)^0,w,c
 10864  001D26  1043               	iorwf	(calc_mixer_corr_value@fgps+3)^0,w,c
 10865  001D28  1042               	iorwf	(calc_mixer_corr_value@fgps+2)^0,w,c
 10866  001D2A  1041               	iorwf	(calc_mixer_corr_value@fgps+1)^0,w,c
 10867  001D2C  E103               	bnz	u13150
 10868  001D2E  0440               	decf	calc_mixer_corr_value@fgps^0,w,c
 10869  001D30  A0D8               	btfss	status,0,c
 10870  001D32  D010               	goto	l10595
 10871  001D34                     u13150:
 10872                           
 10873                           ;src/driver/si5328.c: 182:   fgps += 500;
 10874  001D34  0EF4               	movlw	244
 10875  001D36  2640               	addwf	calc_mixer_corr_value@fgps^0,f,c
 10876  001D38  0E01               	movlw	1
 10877  001D3A  2241               	addwfc	(calc_mixer_corr_value@fgps+1)^0,f,c
 10878  001D3C  0E00               	movlw	0
 10879  001D3E  2242               	addwfc	(calc_mixer_corr_value@fgps+2)^0,f,c
 10880  001D40  0E00               	movlw	0
 10881  001D42  2243               	addwfc	(calc_mixer_corr_value@fgps+3)^0,f,c
 10882  001D44  0E00               	movlw	0
 10883  001D46  2244               	addwfc	(calc_mixer_corr_value@fgps+4)^0,f,c
 10884  001D48  0E00               	movlw	0
 10885  001D4A  2245               	addwfc	(calc_mixer_corr_value@fgps+5)^0,f,c
 10886  001D4C  0E00               	movlw	0
 10887  001D4E  2246               	addwfc	(calc_mixer_corr_value@fgps+6)^0,f,c
 10888  001D50  0E00               	movlw	0
 10889  001D52  D00F               	goto	L8
 10890  001D54                     l10595:
 10891                           
 10892                           ;src/driver/si5328.c: 184:   fgps -= 500;
 10893  001D54  0E0C               	movlw	12
 10894  001D56  2640               	addwf	calc_mixer_corr_value@fgps^0,f,c
 10895  001D58  0EFE               	movlw	254
 10896  001D5A  2241               	addwfc	(calc_mixer_corr_value@fgps+1)^0,f,c
 10897  001D5C  0EFF               	movlw	255
 10898  001D5E  2242               	addwfc	(calc_mixer_corr_value@fgps+2)^0,f,c
 10899  001D60  0EFF               	movlw	255
 10900  001D62  2243               	addwfc	(calc_mixer_corr_value@fgps+3)^0,f,c
 10901  001D64  0EFF               	movlw	255
 10902  001D66  2244               	addwfc	(calc_mixer_corr_value@fgps+4)^0,f,c
 10903  001D68  0EFF               	movlw	255
 10904  001D6A  2245               	addwfc	(calc_mixer_corr_value@fgps+5)^0,f,c
 10905  001D6C  0EFF               	movlw	255
 10906  001D6E  2246               	addwfc	(calc_mixer_corr_value@fgps+6)^0,f,c
 10907  001D70  0EFF               	movlw	255
 10908  001D72                     L8:
 10909  001D72  2247               	addwfc	(calc_mixer_corr_value@fgps+7)^0,f,c
 10910                           
 10911                           ;src/driver/si5328.c: 186:  s32 v = (s32)(fgps / 1000)+1;
 10912  001D74  C040  F00E         	movff	calc_mixer_corr_value@fgps,___aodiv@dividend
 10913  001D78  C041  F00F         	movff	calc_mixer_corr_value@fgps+1,___aodiv@dividend+1
 10914  001D7C  C042  F010         	movff	calc_mixer_corr_value@fgps+2,___aodiv@dividend+2
 10915  001D80  C043  F011         	movff	calc_mixer_corr_value@fgps+3,___aodiv@dividend+3
 10916  001D84  C044  F012         	movff	calc_mixer_corr_value@fgps+4,___aodiv@dividend+4
 10917  001D88  C045  F013         	movff	calc_mixer_corr_value@fgps+5,___aodiv@dividend+5
 10918  001D8C  C046  F014         	movff	calc_mixer_corr_value@fgps+6,___aodiv@dividend+6
 10919  001D90  C047  F015         	movff	calc_mixer_corr_value@fgps+7,___aodiv@dividend+7
 10920  001D94  0EE8               	movlw	232
 10921  001D96  6E16               	movwf	___aodiv@divisor^0,c
 10922  001D98  0E03               	movlw	3
 10923  001D9A  6E17               	movwf	(___aodiv@divisor+1)^0,c
 10924  001D9C  0E00               	movlw	0
 10925  001D9E  6E18               	movwf	(___aodiv@divisor+2)^0,c
 10926  001DA0  0E00               	movlw	0
 10927  001DA2  6E19               	movwf	(___aodiv@divisor+3)^0,c
 10928  001DA4  0E00               	movlw	0
 10929  001DA6  6E1A               	movwf	(___aodiv@divisor+4)^0,c
 10930  001DA8  0E00               	movlw	0
 10931  001DAA  6E1B               	movwf	(___aodiv@divisor+5)^0,c
 10932  001DAC  0E00               	movlw	0
 10933  001DAE  6E1C               	movwf	(___aodiv@divisor+6)^0,c
 10934  001DB0  0E00               	movlw	0
 10935  001DB2  6E1D               	movwf	(___aodiv@divisor+7)^0,c
 10936  001DB4  ECB2  F023         	call	___aodiv	;wreg free
 10937  001DB8  C00E  F02C         	movff	?___aodiv,??_calc_mixer_corr_value
 10938  001DBC  C00F  F02D         	movff	?___aodiv+1,??_calc_mixer_corr_value+1
 10939  001DC0  C010  F02E         	movff	?___aodiv+2,??_calc_mixer_corr_value+2
 10940  001DC4  C011  F02F         	movff	?___aodiv+3,??_calc_mixer_corr_value+3
 10941  001DC8  C012  F030         	movff	?___aodiv+4,??_calc_mixer_corr_value+4
 10942  001DCC  C013  F031         	movff	?___aodiv+5,??_calc_mixer_corr_value+5
 10943  001DD0  C014  F032         	movff	?___aodiv+6,??_calc_mixer_corr_value+6
 10944  001DD4  C015  F033         	movff	?___aodiv+7,??_calc_mixer_corr_value+7
 10945  001DD8  0E01               	movlw	1
 10946  001DDA  242C               	addwf	??_calc_mixer_corr_value^0,w,c
 10947  001DDC  6E3C               	movwf	calc_mixer_corr_value@v^0,c
 10948  001DDE  0E00               	movlw	0
 10949  001DE0  202D               	addwfc	(??_calc_mixer_corr_value+1)^0,w,c
 10950  001DE2  6E3D               	movwf	(calc_mixer_corr_value@v+1)^0,c
 10951  001DE4  0E00               	movlw	0
 10952  001DE6  202E               	addwfc	(??_calc_mixer_corr_value+2)^0,w,c
 10953  001DE8  6E3E               	movwf	(calc_mixer_corr_value@v+2)^0,c
 10954  001DEA  0E00               	movlw	0
 10955  001DEC  202F               	addwfc	(??_calc_mixer_corr_value+3)^0,w,c
 10956  001DEE  6E3F               	movwf	(calc_mixer_corr_value@v+3)^0,c
 10957                           
 10958                           ;src/driver/si5328.c: 188:  return v;
 10959  001DF0  C03C  F028         	movff	calc_mixer_corr_value@v,?_calc_mixer_corr_value
 10960  001DF4  C03D  F029         	movff	calc_mixer_corr_value@v+1,?_calc_mixer_corr_value+1
 10961  001DF8  C03E  F02A         	movff	calc_mixer_corr_value@v+2,?_calc_mixer_corr_value+2
 10962  001DFC  C03F  F02B         	movff	calc_mixer_corr_value@v+3,?_calc_mixer_corr_value+3
 10963  001E00  0012               	return		;funcret
 10964  001E02                     __end_of_calc_mixer_corr_value:
 10965                           	opt callstack 0
 10966                           
 10967 ;; *************** function _getGPSfrequency *****************
 10968 ;; Defined at:
 10969 ;;		line 308 in file "src/gps.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;  gf              4   17[COMRAM] unsigned long 
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  4   13[COMRAM] unsigned long 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0
 10978 ;; Tracked objects:
 10979 ;;		On entry : 3F/0
 10980 ;;		On exit  : 3F/2
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10983 ;;      Params:         4       0       0       0       0       0       0
 10984 ;;      Locals:         4       0       0       0       0       0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0
 10986 ;;      Totals:         8       0       0       0       0       0       0
 10987 ;;Total ram usage:        8 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    2
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		_calc_mixer_corr_value
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           	psect	text20
 10998  006960                     __ptext20:
 10999                           	opt callstack 0
 11000  006960                     _getGPSfrequency:
 11001                           	opt callstack 25
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;src/gps.c: 310:  u32 gf = gps_config_data[15];
 11005                           
 11006                           ;incstack = 0
 11007  006960  0102               	movlb	2	; () banked
 11008  006962  5129               	movf	(_gps_config_data+15)& (0+255),w,b
 11009  006964  6E12               	movwf	getGPSfrequency@gf^0,c
 11010  006966  6A13               	clrf	(getGPSfrequency@gf+1)^0,c
 11011  006968  6A14               	clrf	(getGPSfrequency@gf+2)^0,c
 11012  00696A  6A15               	clrf	(getGPSfrequency@gf+3)^0,c
 11013                           
 11014                           ; BSR set to: 2
 11015                           ;src/gps.c: 311:  gf <<= 8;
 11016  00696C  C014  F015         	movff	getGPSfrequency@gf+2,getGPSfrequency@gf+3
 11017  006970  C013  F014         	movff	getGPSfrequency@gf+1,getGPSfrequency@gf+2
 11018  006974  C012  F013         	movff	getGPSfrequency@gf,getGPSfrequency@gf+1
 11019  006978  6A12               	clrf	getGPSfrequency@gf^0,c
 11020                           
 11021                           ; BSR set to: 2
 11022                           ;src/gps.c: 312:  gf |= gps_config_data[14];
 11023  00697A  5128               	movf	(_gps_config_data+14)& (0+255),w,b
 11024  00697C  1212               	iorwf	getGPSfrequency@gf^0,f,c
 11025                           
 11026                           ; BSR set to: 2
 11027                           ;src/gps.c: 313:  gf <<= 8;
 11028  00697E  C014  F015         	movff	getGPSfrequency@gf+2,getGPSfrequency@gf+3
 11029  006982  C013  F014         	movff	getGPSfrequency@gf+1,getGPSfrequency@gf+2
 11030  006986  C012  F013         	movff	getGPSfrequency@gf,getGPSfrequency@gf+1
 11031  00698A  6A12               	clrf	getGPSfrequency@gf^0,c
 11032                           
 11033                           ; BSR set to: 2
 11034                           ;src/gps.c: 314:  gf |= gps_config_data[13];
 11035  00698C  5127               	movf	(_gps_config_data+13)& (0+255),w,b
 11036  00698E  1212               	iorwf	getGPSfrequency@gf^0,f,c
 11037                           
 11038                           ; BSR set to: 2
 11039                           ;src/gps.c: 315:  gf <<= 8;
 11040  006990  C014  F015         	movff	getGPSfrequency@gf+2,getGPSfrequency@gf+3
 11041  006994  C013  F014         	movff	getGPSfrequency@gf+1,getGPSfrequency@gf+2
 11042  006998  C012  F013         	movff	getGPSfrequency@gf,getGPSfrequency@gf+1
 11043  00699C  6A12               	clrf	getGPSfrequency@gf^0,c
 11044                           
 11045                           ; BSR set to: 2
 11046                           ;src/gps.c: 316:  gf |= gps_config_data[12];
 11047  00699E  5126               	movf	(_gps_config_data+12)& (0+255),w,b
 11048  0069A0  1212               	iorwf	getGPSfrequency@gf^0,f,c
 11049                           
 11050                           ; BSR set to: 2
 11051                           ;src/gps.c: 320:  return gf;
 11052  0069A2  C012  F00E         	movff	getGPSfrequency@gf,?_getGPSfrequency
 11053  0069A6  C013  F00F         	movff	getGPSfrequency@gf+1,?_getGPSfrequency+1
 11054  0069AA  C014  F010         	movff	getGPSfrequency@gf+2,?_getGPSfrequency+2
 11055  0069AE  C015  F011         	movff	getGPSfrequency@gf+3,?_getGPSfrequency+3
 11056                           
 11057                           ; BSR set to: 2
 11058  0069B2  0012               	return		;funcret
 11059  0069B4                     __end_of_getGPSfrequency:
 11060                           	opt callstack 0
 11061                           
 11062 ;; *************** function _adf4351_calc_counters *****************
 11063 ;; Defined at:
 11064 ;;		line 134 in file "src/driver/adf4351.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  ctx             2   62[COMRAM] PTR struct adf4351_ctx
 11067 ;;		 -> g_adf4351(55), 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  Nmal10000       8   90[COMRAM] unsigned long long 
 11070 ;;  vfoout          8   82[COMRAM] unsigned long long 
 11071 ;;  rest            4   76[COMRAM] unsigned long 
 11072 ;;  INT             4   72[COMRAM] unsigned long 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  2   62[COMRAM] int 
 11075 ;; Registers used:
 11076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 3F/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11082 ;;      Params:         2       0       0       0       0       0       0
 11083 ;;      Locals:        26       0       0       0       0       0       0
 11084 ;;      Temps:          8       0       0       0       0       0       0
 11085 ;;      Totals:        36       0       0       0       0       0       0
 11086 ;;Total ram usage:       36 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    3
 11089 ;; This function calls:
 11090 ;;		___lmul
 11091 ;;		___lodiv
 11092 ;;		___lwdiv
 11093 ;;		___omul
 11094 ;;		___wmul
 11095 ;; This function is called by:
 11096 ;;		_adf4351_set_freq
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           	psect	text21
 11101  002466                     __ptext21:
 11102                           	opt callstack 0
 11103  002466                     _adf4351_calc_counters:
 11104                           	opt callstack 25
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;src/driver/adf4351.c: 134: static int adf4351_calc_counters(adf4351_ctx* ctx);src/drive
      +                          r/adf4351.c: 135: {;src/driver/adf4351.c: 136:     ctx->reg2.ldf = 0;
 11108                           
 11109                           ; BSR set to: 2
 11110                           ;incstack = 0
 11111  002466  EE20 F013          	lfsr	2,19
 11112  00246A  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11113  00246C  26D9               	addwf	fsr2l,f,c
 11114  00246E  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11115  002470  22DA               	addwfc	fsr2h,f,c
 11116  002472  0E00               	movlw	0
 11117  002474  6EDF               	movwf	indf2,c
 11118                           
 11119                           ;src/driver/adf4351.c: 138:  ctx->reg1.mod = 4000;
 11120  002476  EE20 F009          	lfsr	2,9
 11121  00247A  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11122  00247C  26D9               	addwf	fsr2l,f,c
 11123  00247E  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11124  002480  22DA               	addwfc	fsr2h,f,c
 11125  002482  0EA0               	movlw	160
 11126  002484  6EDE               	movwf	postinc2,c
 11127  002486  0E0F               	movlw	15
 11128  002488  6EDD               	movwf	postdec2,c
 11129                           
 11130                           ;src/driver/adf4351.c: 142:  if(ctx->vco_freq < 550000)
 11131  00248A  EE20 F033          	lfsr	2,51
 11132  00248E  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11133  002490  26D9               	addwf	fsr2l,f,c
 11134  002492  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11135  002494  22DA               	addwfc	fsr2h,f,c
 11136  002496  0E03               	movlw	3
 11137  002498  50DB               	movf	plusw2,w,c
 11138  00249A  E11F               	bnz	l10607
 11139  00249C  0E70               	movlw	112
 11140  00249E  5CDE               	subwf	postinc2,w,c
 11141  0024A0  0E64               	movlw	100
 11142  0024A2  58DE               	subwfb	postinc2,w,c
 11143  0024A4  0E08               	movlw	8
 11144  0024A6  58DE               	subwfb	postinc2,w,c
 11145  0024A8  B0D8               	btfsc	status,0,c
 11146  0024AA  D017               	goto	l10607
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;src/driver/adf4351.c: 143:   vfoout = ctx->vco_freq * 8L;
 11150  0024AC  EE20 F033          	lfsr	2,51
 11151  0024B0  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11152  0024B2  26D9               	addwf	fsr2l,f,c
 11153  0024B4  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11154  0024B6  22DA               	addwfc	fsr2h,f,c
 11155  0024B8  CFDE F041          	movff	postinc2,??_adf4351_calc_counters
 11156  0024BC  CFDE F042          	movff	postinc2,??_adf4351_calc_counters+1
 11157  0024C0  CFDE F043          	movff	postinc2,??_adf4351_calc_counters+2
 11158  0024C4  CFDE F044          	movff	postinc2,??_adf4351_calc_counters+3
 11159  0024C8  0E03               	movlw	3
 11160  0024CA                     u13175:
 11161  0024CA  90D8               	bcf	status,0,c
 11162  0024CC  3641               	rlcf	??_adf4351_calc_counters^0,f,c
 11163  0024CE  3642               	rlcf	(??_adf4351_calc_counters+1)^0,f,c
 11164  0024D0  3643               	rlcf	(??_adf4351_calc_counters+2)^0,f,c
 11165  0024D2  3644               	rlcf	(??_adf4351_calc_counters+3)^0,f,c
 11166  0024D4  2EE8               	decfsz	wreg,f,c
 11167  0024D6  D7F9               	goto	u13175
 11168  0024D8  D027               	goto	L10
 11169  0024DA                     l10607:
 11170                           
 11171                           ; BSR set to: 0
 11172  0024DA  EE20 F033          	lfsr	2,51
 11173  0024DE  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11174  0024E0  26D9               	addwf	fsr2l,f,c
 11175  0024E2  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11176  0024E4  22DA               	addwfc	fsr2h,f,c
 11177  0024E6  0E03               	movlw	3
 11178  0024E8  50DB               	movf	plusw2,w,c
 11179  0024EA  E126               	bnz	l10611
 11180  0024EC  0EE0               	movlw	224
 11181  0024EE  5CDE               	subwf	postinc2,w,c
 11182  0024F0  0EC8               	movlw	200
 11183  0024F2  58DE               	subwfb	postinc2,w,c
 11184  0024F4  0E10               	movlw	16
 11185  0024F6  58DE               	subwfb	postinc2,w,c
 11186  0024F8  B0D8               	btfsc	status,0,c
 11187  0024FA  D01E               	goto	l10611
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;src/driver/adf4351.c: 145:   vfoout = ctx->vco_freq * 4L;
 11191  0024FC  EE20 F033          	lfsr	2,51
 11192  002500  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11193  002502  26D9               	addwf	fsr2l,f,c
 11194  002504  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11195  002506  22DA               	addwfc	fsr2h,f,c
 11196  002508  CFDE F041          	movff	postinc2,??_adf4351_calc_counters
 11197  00250C  CFDE F042          	movff	postinc2,??_adf4351_calc_counters+1
 11198  002510  CFDE F043          	movff	postinc2,??_adf4351_calc_counters+2
 11199  002514  CFDE F044          	movff	postinc2,??_adf4351_calc_counters+3
 11200  002518  0E02               	movlw	2
 11201  00251A                     u13195:
 11202  00251A  90D8               	bcf	status,0,c
 11203  00251C  3641               	rlcf	??_adf4351_calc_counters^0,f,c
 11204  00251E  3642               	rlcf	(??_adf4351_calc_counters+1)^0,f,c
 11205  002520  3643               	rlcf	(??_adf4351_calc_counters+2)^0,f,c
 11206  002522  3644               	rlcf	(??_adf4351_calc_counters+3)^0,f,c
 11207  002524  2EE8               	decfsz	wreg,f,c
 11208  002526  D7F9               	goto	u13195
 11209  002528                     L10:
 11210  002528  5041               	movf	??_adf4351_calc_counters^0,w,c
 11211  00252A  6E53               	movwf	adf4351_calc_counters@vfoout^0,c
 11212  00252C  5042               	movf	(??_adf4351_calc_counters+1)^0,w,c
 11213  00252E  6E54               	movwf	(adf4351_calc_counters@vfoout+1)^0,c
 11214  002530  5043               	movf	(??_adf4351_calc_counters+2)^0,w,c
 11215  002532  6E55               	movwf	(adf4351_calc_counters@vfoout+2)^0,c
 11216  002534  5044               	movf	(??_adf4351_calc_counters+3)^0,w,c
 11217  002536  D016               	goto	L9
 11218  002538                     l10611:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;src/driver/adf4351.c: 147:   vfoout = ctx->vco_freq * 2L;
 11222  002538  EE20 F033          	lfsr	2,51
 11223  00253C  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11224  00253E  26D9               	addwf	fsr2l,f,c
 11225  002540  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11226  002542  22DA               	addwfc	fsr2h,f,c
 11227  002544  CFDE F041          	movff	postinc2,??_adf4351_calc_counters
 11228  002548  CFDE F042          	movff	postinc2,??_adf4351_calc_counters+1
 11229  00254C  CFDE F043          	movff	postinc2,??_adf4351_calc_counters+2
 11230  002550  CFDE F044          	movff	postinc2,??_adf4351_calc_counters+3
 11231  002554  90D8               	bcf	status,0,c
 11232  002556  3441               	rlcf	??_adf4351_calc_counters^0,w,c
 11233  002558  6E53               	movwf	adf4351_calc_counters@vfoout^0,c
 11234  00255A  3442               	rlcf	(??_adf4351_calc_counters+1)^0,w,c
 11235  00255C  6E54               	movwf	(adf4351_calc_counters@vfoout+1)^0,c
 11236  00255E  3443               	rlcf	(??_adf4351_calc_counters+2)^0,w,c
 11237  002560  6E55               	movwf	(adf4351_calc_counters@vfoout+2)^0,c
 11238  002562  3444               	rlcf	(??_adf4351_calc_counters+3)^0,w,c
 11239  002564                     L9:
 11240  002564  6E56               	movwf	(adf4351_calc_counters@vfoout+3)^0,c
 11241  002566  6A57               	clrf	(adf4351_calc_counters@vfoout+4)^0,c
 11242  002568  6A58               	clrf	(adf4351_calc_counters@vfoout+5)^0,c
 11243  00256A  6A59               	clrf	(adf4351_calc_counters@vfoout+6)^0,c
 11244  00256C  6A5A               	clrf	(adf4351_calc_counters@vfoout+7)^0,c
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;src/driver/adf4351.c: 152:  u64 Nmal10000 = (vfoout*10000L) / (u64)ctx->pfd;
 11248  00256E  0E10               	movlw	16
 11249  002570  6E16               	movwf	___omul@multiplicand^0,c
 11250  002572  0E27               	movlw	39
 11251  002574  6E17               	movwf	(___omul@multiplicand+1)^0,c
 11252  002576  0E00               	movlw	0
 11253  002578  6E18               	movwf	(___omul@multiplicand+2)^0,c
 11254  00257A  0E00               	movlw	0
 11255  00257C  6E19               	movwf	(___omul@multiplicand+3)^0,c
 11256  00257E  0E00               	movlw	0
 11257  002580  6E1A               	movwf	(___omul@multiplicand+4)^0,c
 11258  002582  0E00               	movlw	0
 11259  002584  6E1B               	movwf	(___omul@multiplicand+5)^0,c
 11260  002586  0E00               	movlw	0
 11261  002588  6E1C               	movwf	(___omul@multiplicand+6)^0,c
 11262  00258A  0E00               	movlw	0
 11263  00258C  6E1D               	movwf	(___omul@multiplicand+7)^0,c
 11264  00258E  C053  F00E         	movff	adf4351_calc_counters@vfoout,___omul@multiplier
 11265  002592  C054  F00F         	movff	adf4351_calc_counters@vfoout+1,___omul@multiplier+1
 11266  002596  C055  F010         	movff	adf4351_calc_counters@vfoout+2,___omul@multiplier+2
 11267  00259A  C056  F011         	movff	adf4351_calc_counters@vfoout+3,___omul@multiplier+3
 11268  00259E  C057  F012         	movff	adf4351_calc_counters@vfoout+4,___omul@multiplier+4
 11269  0025A2  C058  F013         	movff	adf4351_calc_counters@vfoout+5,___omul@multiplier+5
 11270  0025A6  C059  F014         	movff	adf4351_calc_counters@vfoout+6,___omul@multiplier+6
 11271  0025AA  C05A  F015         	movff	adf4351_calc_counters@vfoout+7,___omul@multiplier+7
 11272  0025AE  EC38  F032         	call	___omul	;wreg free
 11273  0025B2  C00E  F026         	movff	?___omul,___lodiv@dividend
 11274  0025B6  C00F  F027         	movff	?___omul+1,___lodiv@dividend+1
 11275  0025BA  C010  F028         	movff	?___omul+2,___lodiv@dividend+2
 11276  0025BE  C011  F029         	movff	?___omul+3,___lodiv@dividend+3
 11277  0025C2  C012  F02A         	movff	?___omul+4,___lodiv@dividend+4
 11278  0025C6  C013  F02B         	movff	?___omul+5,___lodiv@dividend+5
 11279  0025CA  C014  F02C         	movff	?___omul+6,___lodiv@dividend+6
 11280  0025CE  C015  F02D         	movff	?___omul+7,___lodiv@dividend+7
 11281  0025D2  EE20 F02F          	lfsr	2,47
 11282  0025D6  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11283  0025D8  26D9               	addwf	fsr2l,f,c
 11284  0025DA  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11285  0025DC  22DA               	addwfc	fsr2h,f,c
 11286  0025DE  CFDE F041          	movff	postinc2,??_adf4351_calc_counters
 11287  0025E2  CFDE F042          	movff	postinc2,??_adf4351_calc_counters+1
 11288  0025E6  CFDE F043          	movff	postinc2,??_adf4351_calc_counters+2
 11289  0025EA  CFDE F044          	movff	postinc2,??_adf4351_calc_counters+3
 11290  0025EE  5041               	movf	??_adf4351_calc_counters^0,w,c
 11291  0025F0  6E2E               	movwf	___lodiv@divisor^0,c
 11292  0025F2  5042               	movf	(??_adf4351_calc_counters+1)^0,w,c
 11293  0025F4  6E2F               	movwf	(___lodiv@divisor+1)^0,c
 11294  0025F6  5043               	movf	(??_adf4351_calc_counters+2)^0,w,c
 11295  0025F8  6E30               	movwf	(___lodiv@divisor+2)^0,c
 11296  0025FA  5044               	movf	(??_adf4351_calc_counters+3)^0,w,c
 11297  0025FC  6E31               	movwf	(___lodiv@divisor+3)^0,c
 11298  0025FE  6A32               	clrf	(___lodiv@divisor+4)^0,c
 11299  002600  6A33               	clrf	(___lodiv@divisor+5)^0,c
 11300  002602  6A34               	clrf	(___lodiv@divisor+6)^0,c
 11301  002604  6A35               	clrf	(___lodiv@divisor+7)^0,c
 11302  002606  EC4F  F02B         	call	___lodiv	;wreg free
 11303  00260A  C026  F05B         	movff	?___lodiv,adf4351_calc_counters@Nmal10000
 11304  00260E  C027  F05C         	movff	?___lodiv+1,adf4351_calc_counters@Nmal10000+1
 11305  002612  C028  F05D         	movff	?___lodiv+2,adf4351_calc_counters@Nmal10000+2
 11306  002616  C029  F05E         	movff	?___lodiv+3,adf4351_calc_counters@Nmal10000+3
 11307  00261A  C02A  F05F         	movff	?___lodiv+4,adf4351_calc_counters@Nmal10000+4
 11308  00261E  C02B  F060         	movff	?___lodiv+5,adf4351_calc_counters@Nmal10000+5
 11309  002622  C02C  F061         	movff	?___lodiv+6,adf4351_calc_counters@Nmal10000+6
 11310  002626  C02D  F062         	movff	?___lodiv+7,adf4351_calc_counters@Nmal10000+7
 11311                           
 11312                           ;src/driver/adf4351.c: 153:  u32 INT = (u32)(Nmal10000/10000);
 11313  00262A  C05B  F026         	movff	adf4351_calc_counters@Nmal10000,___lodiv@dividend
 11314  00262E  C05C  F027         	movff	adf4351_calc_counters@Nmal10000+1,___lodiv@dividend+1
 11315  002632  C05D  F028         	movff	adf4351_calc_counters@Nmal10000+2,___lodiv@dividend+2
 11316  002636  C05E  F029         	movff	adf4351_calc_counters@Nmal10000+3,___lodiv@dividend+3
 11317  00263A  C05F  F02A         	movff	adf4351_calc_counters@Nmal10000+4,___lodiv@dividend+4
 11318  00263E  C060  F02B         	movff	adf4351_calc_counters@Nmal10000+5,___lodiv@dividend+5
 11319  002642  C061  F02C         	movff	adf4351_calc_counters@Nmal10000+6,___lodiv@dividend+6
 11320  002646  C062  F02D         	movff	adf4351_calc_counters@Nmal10000+7,___lodiv@dividend+7
 11321  00264A  0E10               	movlw	16
 11322  00264C  6E2E               	movwf	___lodiv@divisor^0,c
 11323  00264E  0E27               	movlw	39
 11324  002650  6E2F               	movwf	(___lodiv@divisor+1)^0,c
 11325  002652  0E00               	movlw	0
 11326  002654  6E30               	movwf	(___lodiv@divisor+2)^0,c
 11327  002656  0E00               	movlw	0
 11328  002658  6E31               	movwf	(___lodiv@divisor+3)^0,c
 11329  00265A  0E00               	movlw	0
 11330  00265C  6E32               	movwf	(___lodiv@divisor+4)^0,c
 11331  00265E  0E00               	movlw	0
 11332  002660  6E33               	movwf	(___lodiv@divisor+5)^0,c
 11333  002662  0E00               	movlw	0
 11334  002664  6E34               	movwf	(___lodiv@divisor+6)^0,c
 11335  002666  0E00               	movlw	0
 11336  002668  6E35               	movwf	(___lodiv@divisor+7)^0,c
 11337  00266A  EC4F  F02B         	call	___lodiv	;wreg free
 11338  00266E  C026  F041         	movff	?___lodiv,??_adf4351_calc_counters
 11339  002672  C027  F042         	movff	?___lodiv+1,??_adf4351_calc_counters+1
 11340  002676  C028  F043         	movff	?___lodiv+2,??_adf4351_calc_counters+2
 11341  00267A  C029  F044         	movff	?___lodiv+3,??_adf4351_calc_counters+3
 11342  00267E  C02A  F045         	movff	?___lodiv+4,??_adf4351_calc_counters+4
 11343  002682  C02B  F046         	movff	?___lodiv+5,??_adf4351_calc_counters+5
 11344  002686  C02C  F047         	movff	?___lodiv+6,??_adf4351_calc_counters+6
 11345  00268A  C02D  F048         	movff	?___lodiv+7,??_adf4351_calc_counters+7
 11346  00268E  C041  F049         	movff	??_adf4351_calc_counters,adf4351_calc_counters@INT
 11347  002692  C042  F04A         	movff	??_adf4351_calc_counters+1,adf4351_calc_counters@INT+1
 11348  002696  C043  F04B         	movff	??_adf4351_calc_counters+2,adf4351_calc_counters@INT+2
 11349  00269A  C044  F04C         	movff	??_adf4351_calc_counters+3,adf4351_calc_counters@INT+3
 11350                           
 11351                           ;src/driver/adf4351.c: 154:  ctx->reg0.integer = (u16)(INT);
 11352  00269E  EE20 F002          	lfsr	2,2
 11353  0026A2  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11354  0026A4  26D9               	addwf	fsr2l,f,c
 11355  0026A6  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11356  0026A8  22DA               	addwfc	fsr2h,f,c
 11357  0026AA  C049  FFDE         	movff	adf4351_calc_counters@INT,postinc2
 11358  0026AE  C04A  FFDD         	movff	adf4351_calc_counters@INT+1,postdec2
 11359                           
 11360                           ;src/driver/adf4351.c: 155:  u32 rest = Nmal10000 - (u32)ctx->reg0.integer * 10000L;
 11361  0026B2  EE20 F002          	lfsr	2,2
 11362  0026B6  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11363  0026B8  26D9               	addwf	fsr2l,f,c
 11364  0026BA  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11365  0026BC  22DA               	addwfc	fsr2h,f,c
 11366  0026BE  CFDE F041          	movff	postinc2,??_adf4351_calc_counters
 11367  0026C2  CFDD F042          	movff	postdec2,??_adf4351_calc_counters+1
 11368  0026C6  C041  F00E         	movff	??_adf4351_calc_counters,___lmul@multiplier
 11369  0026CA  C042  F00F         	movff	??_adf4351_calc_counters+1,___lmul@multiplier+1
 11370  0026CE  6A10               	clrf	(___lmul@multiplier+2)^0,c
 11371  0026D0  6A11               	clrf	(___lmul@multiplier+3)^0,c
 11372  0026D2  0EF0               	movlw	240
 11373  0026D4  6E12               	movwf	___lmul@multiplicand^0,c
 11374  0026D6  0ED8               	movlw	216
 11375  0026D8  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 11376  0026DA  0EFF               	movlw	255
 11377  0026DC  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 11378  0026DE  0EFF               	movlw	255
 11379  0026E0  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 11380  0026E2  EC5A  F034         	call	___lmul	;wreg free
 11381  0026E6  505B               	movf	adf4351_calc_counters@Nmal10000^0,w,c
 11382  0026E8  240E               	addwf	?___lmul^0,w,c
 11383  0026EA  6E4D               	movwf	adf4351_calc_counters@rest^0,c
 11384  0026EC  505C               	movf	(adf4351_calc_counters@Nmal10000+1)^0,w,c
 11385  0026EE  200F               	addwfc	(?___lmul+1)^0,w,c
 11386  0026F0  6E4E               	movwf	(adf4351_calc_counters@rest+1)^0,c
 11387  0026F2  505D               	movf	(adf4351_calc_counters@Nmal10000+2)^0,w,c
 11388  0026F4  2010               	addwfc	(?___lmul+2)^0,w,c
 11389  0026F6  6E4F               	movwf	(adf4351_calc_counters@rest+2)^0,c
 11390  0026F8  505E               	movf	(adf4351_calc_counters@Nmal10000+3)^0,w,c
 11391  0026FA  2011               	addwfc	(?___lmul+3)^0,w,c
 11392  0026FC  6E50               	movwf	(adf4351_calc_counters@rest+3)^0,c
 11393                           
 11394                           ;src/driver/adf4351.c: 156:  ctx->reg0.frac = (u16)((u32)(ctx->reg1.mod/1000) * rest) / 
      +                          10;
 11395  0026FE  0E03               	movlw	3
 11396  002700  6E11               	movwf	(___lwdiv@divisor+1)^0,c
 11397  002702  0EE8               	movlw	232
 11398  002704  6E10               	movwf	___lwdiv@divisor^0,c
 11399  002706  EE20 F009          	lfsr	2,9
 11400  00270A  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11401  00270C  26D9               	addwf	fsr2l,f,c
 11402  00270E  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11403  002710  22DA               	addwfc	fsr2h,f,c
 11404  002712  CFDE F00E          	movff	postinc2,___lwdiv@dividend
 11405  002716  CFDD F00F          	movff	postdec2,___lwdiv@dividend+1
 11406  00271A  EC04  F035         	call	___lwdiv	;wreg free
 11407  00271E  C00E  F015         	movff	?___lwdiv,___wmul@multiplier
 11408  002722  C00F  F016         	movff	?___lwdiv+1,___wmul@multiplier+1
 11409  002726  C04D  F017         	movff	adf4351_calc_counters@rest,___wmul@multiplicand
 11410  00272A  C04E  F018         	movff	adf4351_calc_counters@rest+1,___wmul@multiplicand+1
 11411  00272E  ECD9  F039         	call	___wmul	;wreg free
 11412  002732  C015  F051         	movff	?___wmul,_adf4351_calc_counters$4064
 11413  002736  C016  F052         	movff	?___wmul+1,_adf4351_calc_counters$4064+1
 11414                           
 11415                           ;src/driver/adf4351.c: 156:  ctx->reg0.frac = (u16)((u32)(ctx->reg1.mod/1000) * rest) / 
      +                          10;
 11416  00273A  C051  F00E         	movff	_adf4351_calc_counters$4064,___lwdiv@dividend
 11417  00273E  C052  F00F         	movff	_adf4351_calc_counters$4064+1,___lwdiv@dividend+1
 11418  002742  0E00               	movlw	0
 11419  002744  6E11               	movwf	(___lwdiv@divisor+1)^0,c
 11420  002746  0E0A               	movlw	10
 11421  002748  6E10               	movwf	___lwdiv@divisor^0,c
 11422  00274A  EC04  F035         	call	___lwdiv	;wreg free
 11423  00274E  EE20 F004          	lfsr	2,4
 11424  002752  503F               	movf	adf4351_calc_counters@ctx^0,w,c
 11425  002754  26D9               	addwf	fsr2l,f,c
 11426  002756  5040               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
 11427  002758  22DA               	addwfc	fsr2h,f,c
 11428  00275A  C00E  FFDE         	movff	?___lwdiv,postinc2
 11429  00275E  C00F  FFDD         	movff	?___lwdiv+1,postdec2
 11430  002762  0012               	return		;funcret
 11431  002764                     __end_of_adf4351_calc_counters:
 11432                           	opt callstack 0
 11433                           
 11434 ;; *************** function ___omul *****************
 11435 ;; Defined at:
 11436 ;;		line 91 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul64.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;  multiplier      8   13[COMRAM] unsigned long long 
 11439 ;;  multiplicand    8   21[COMRAM] unsigned long long 
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;  product         8   29[COMRAM] unsigned long long 
 11442 ;; Return value:  Size  Location     Type
 11443 ;;                  8   13[COMRAM] unsigned long long 
 11444 ;; Registers used:
 11445 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/2
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11451 ;;      Params:        16       0       0       0       0       0       0
 11452 ;;      Locals:         8       0       0       0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0
 11454 ;;      Totals:        24       0       0       0       0       0       0
 11455 ;;Total ram usage:       24 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    2
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_adf4351_calc_counters
 11462 ;;		_calc_mixer_corr_value
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           	psect	text22
 11467  006470                     __ptext22:
 11468                           	opt callstack 0
 11469  006470                     ___omul:
 11470                           	opt callstack 25
 11471                           
 11472                           ;incstack = 0
 11473  006470  EE20  F01E         	lfsr	2,___omul@product
 11474  006474  0E07               	movlw	7
 11475  006476                     u8181:
 11476  006476  6ADE               	clrf	postinc2,c
 11477  006478  06E8               	decf	wreg,f,c
 11478  00647A  E2FD               	bc	u8181
 11479  00647C                     l7417:
 11480  00647C  A00E               	btfss	___omul@multiplier^0,0,c
 11481  00647E  D010               	goto	l7421
 11482  006480  5016               	movf	___omul@multiplicand^0,w,c
 11483  006482  261E               	addwf	___omul@product^0,f,c
 11484  006484  5017               	movf	(___omul@multiplicand+1)^0,w,c
 11485  006486  221F               	addwfc	(___omul@product+1)^0,f,c
 11486  006488  5018               	movf	(___omul@multiplicand+2)^0,w,c
 11487  00648A  2220               	addwfc	(___omul@product+2)^0,f,c
 11488  00648C  5019               	movf	(___omul@multiplicand+3)^0,w,c
 11489  00648E  2221               	addwfc	(___omul@product+3)^0,f,c
 11490  006490  501A               	movf	(___omul@multiplicand+4)^0,w,c
 11491  006492  2222               	addwfc	(___omul@product+4)^0,f,c
 11492  006494  501B               	movf	(___omul@multiplicand+5)^0,w,c
 11493  006496  2223               	addwfc	(___omul@product+5)^0,f,c
 11494  006498  501C               	movf	(___omul@multiplicand+6)^0,w,c
 11495  00649A  2224               	addwfc	(___omul@product+6)^0,f,c
 11496  00649C  501D               	movf	(___omul@multiplicand+7)^0,w,c
 11497  00649E  2225               	addwfc	(___omul@product+7)^0,f,c
 11498  0064A0                     l7421:
 11499  0064A0  90D8               	bcf	status,0,c
 11500  0064A2  3616               	rlcf	___omul@multiplicand^0,f,c
 11501  0064A4  3617               	rlcf	(___omul@multiplicand+1)^0,f,c
 11502  0064A6  3618               	rlcf	(___omul@multiplicand+2)^0,f,c
 11503  0064A8  3619               	rlcf	(___omul@multiplicand+3)^0,f,c
 11504  0064AA  361A               	rlcf	(___omul@multiplicand+4)^0,f,c
 11505  0064AC  361B               	rlcf	(___omul@multiplicand+5)^0,f,c
 11506  0064AE  361C               	rlcf	(___omul@multiplicand+6)^0,f,c
 11507  0064B0  361D               	rlcf	(___omul@multiplicand+7)^0,f,c
 11508  0064B2  90D8               	bcf	status,0,c
 11509  0064B4  3215               	rrcf	(___omul@multiplier+7)^0,f,c
 11510  0064B6  3214               	rrcf	(___omul@multiplier+6)^0,f,c
 11511  0064B8  3213               	rrcf	(___omul@multiplier+5)^0,f,c
 11512  0064BA  3212               	rrcf	(___omul@multiplier+4)^0,f,c
 11513  0064BC  3211               	rrcf	(___omul@multiplier+3)^0,f,c
 11514  0064BE  3210               	rrcf	(___omul@multiplier+2)^0,f,c
 11515  0064C0  320F               	rrcf	(___omul@multiplier+1)^0,f,c
 11516  0064C2  320E               	rrcf	___omul@multiplier^0,f,c
 11517  0064C4  500E               	movf	___omul@multiplier^0,w,c
 11518  0064C6  100F               	iorwf	(___omul@multiplier+1)^0,w,c
 11519  0064C8  1010               	iorwf	(___omul@multiplier+2)^0,w,c
 11520  0064CA  1011               	iorwf	(___omul@multiplier+3)^0,w,c
 11521  0064CC  1012               	iorwf	(___omul@multiplier+4)^0,w,c
 11522  0064CE  1013               	iorwf	(___omul@multiplier+5)^0,w,c
 11523  0064D0  1014               	iorwf	(___omul@multiplier+6)^0,w,c
 11524  0064D2  1015               	iorwf	(___omul@multiplier+7)^0,w,c
 11525  0064D4  A4D8               	btfss	status,2,c
 11526  0064D6  D7D2               	goto	l7417
 11527  0064D8  C01E  F00E         	movff	___omul@product,?___omul
 11528  0064DC  C01F  F00F         	movff	___omul@product+1,?___omul+1
 11529  0064E0  C020  F010         	movff	___omul@product+2,?___omul+2
 11530  0064E4  C021  F011         	movff	___omul@product+3,?___omul+3
 11531  0064E8  C022  F012         	movff	___omul@product+4,?___omul+4
 11532  0064EC  C023  F013         	movff	___omul@product+5,?___omul+5
 11533  0064F0  C024  F014         	movff	___omul@product+6,?___omul+6
 11534  0064F4  C025  F015         	movff	___omul@product+7,?___omul+7
 11535  0064F8  0012               	return		;funcret
 11536  0064FA                     __end_of___omul:
 11537                           	opt callstack 0
 11538                           
 11539 ;; *************** function ___lwdiv *****************
 11540 ;; Defined at:
 11541 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwdiv.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  dividend        2   13[COMRAM] unsigned int 
 11544 ;;  divisor         2   15[COMRAM] unsigned int 
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;  quotient        2   17[COMRAM] unsigned int 
 11547 ;;  counter         1   19[COMRAM] unsigned char 
 11548 ;; Return value:  Size  Location     Type
 11549 ;;                  2   13[COMRAM] unsigned int 
 11550 ;; Registers used:
 11551 ;;		wreg, status,2, status,0
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11557 ;;      Params:         4       0       0       0       0       0       0
 11558 ;;      Locals:         3       0       0       0       0       0       0
 11559 ;;      Temps:          0       0       0       0       0       0       0
 11560 ;;      Totals:         7       0       0       0       0       0       0
 11561 ;;Total ram usage:        7 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    2
 11564 ;; This function calls:
 11565 ;;		Nothing
 11566 ;; This function is called by:
 11567 ;;		_adf4351_calc_counters
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           	psect	text23
 11572  006A08                     __ptext23:
 11573                           	opt callstack 0
 11574  006A08                     ___lwdiv:
 11575                           	opt callstack 25
 11576                           
 11577                           ;incstack = 0
 11578  006A08  0E00               	movlw	0
 11579  006A0A  6E13               	movwf	(___lwdiv@quotient+1)^0,c
 11580  006A0C  0E00               	movlw	0
 11581  006A0E  6E12               	movwf	___lwdiv@quotient^0,c
 11582  006A10  5010               	movf	___lwdiv@divisor^0,w,c
 11583  006A12  1011               	iorwf	(___lwdiv@divisor+1)^0,w,c
 11584  006A14  B4D8               	btfsc	status,2,c
 11585  006A16  D01C               	goto	l2007
 11586  006A18  0E01               	movlw	1
 11587  006A1A  6E14               	movwf	___lwdiv@counter^0,c
 11588  006A1C  D004               	goto	l7455
 11589  006A1E                     l7453:
 11590  006A1E  90D8               	bcf	status,0,c
 11591  006A20  3610               	rlcf	___lwdiv@divisor^0,f,c
 11592  006A22  3611               	rlcf	(___lwdiv@divisor+1)^0,f,c
 11593  006A24  2A14               	incf	___lwdiv@counter^0,f,c
 11594  006A26                     l7455:
 11595  006A26  AE11               	btfss	(___lwdiv@divisor+1)^0,7,c
 11596  006A28  D7FA               	goto	l7453
 11597  006A2A                     u8260:
 11598  006A2A  90D8               	bcf	status,0,c
 11599  006A2C  3612               	rlcf	___lwdiv@quotient^0,f,c
 11600  006A2E  3613               	rlcf	(___lwdiv@quotient+1)^0,f,c
 11601  006A30  5010               	movf	___lwdiv@divisor^0,w,c
 11602  006A32  5C0E               	subwf	___lwdiv@dividend^0,w,c
 11603  006A34  5011               	movf	(___lwdiv@divisor+1)^0,w,c
 11604  006A36  580F               	subwfb	(___lwdiv@dividend+1)^0,w,c
 11605  006A38  A0D8               	btfss	status,0,c
 11606  006A3A  D005               	goto	l7465
 11607  006A3C  5010               	movf	___lwdiv@divisor^0,w,c
 11608  006A3E  5E0E               	subwf	___lwdiv@dividend^0,f,c
 11609  006A40  5011               	movf	(___lwdiv@divisor+1)^0,w,c
 11610  006A42  5A0F               	subwfb	(___lwdiv@dividend+1)^0,f,c
 11611  006A44  8012               	bsf	___lwdiv@quotient^0,0,c
 11612  006A46                     l7465:
 11613  006A46  90D8               	bcf	status,0,c
 11614  006A48  3211               	rrcf	(___lwdiv@divisor+1)^0,f,c
 11615  006A4A  3210               	rrcf	___lwdiv@divisor^0,f,c
 11616  006A4C  2E14               	decfsz	___lwdiv@counter^0,f,c
 11617  006A4E  D7ED               	goto	u8260
 11618  006A50                     l2007:
 11619  006A50  C012  F00E         	movff	___lwdiv@quotient,?___lwdiv
 11620  006A54  C013  F00F         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11621  006A58  0012               	return		;funcret
 11622  006A5A                     __end_of___lwdiv:
 11623                           	opt callstack 0
 11624                           
 11625 ;; *************** function ___lodiv *****************
 11626 ;; Defined at:
 11627 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lodiv.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  dividend        8   37[COMRAM] unsigned long long 
 11630 ;;  divisor         8   45[COMRAM] unsigned long long 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  quotient        8   53[COMRAM] unsigned long long 
 11633 ;;  counter         1   61[COMRAM] unsigned char 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  8   37[COMRAM] unsigned long long 
 11636 ;; Registers used:
 11637 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11643 ;;      Params:        16       0       0       0       0       0       0
 11644 ;;      Locals:         9       0       0       0       0       0       0
 11645 ;;      Temps:          0       0       0       0       0       0       0
 11646 ;;      Totals:        25       0       0       0       0       0       0
 11647 ;;Total ram usage:       25 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    2
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_adf4351_calc_counters
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text24
 11658  00569E                     __ptext24:
 11659                           	opt callstack 0
 11660  00569E                     ___lodiv:
 11661                           	opt callstack 25
 11662                           
 11663                           ;incstack = 0
 11664  00569E  EE20  F036         	lfsr	2,___lodiv@quotient
 11665  0056A2  0E07               	movlw	7
 11666  0056A4                     u8211:
 11667  0056A4  6ADE               	clrf	postinc2,c
 11668  0056A6  06E8               	decf	wreg,f,c
 11669  0056A8  E2FD               	bc	u8211
 11670  0056AA  502E               	movf	___lodiv@divisor^0,w,c
 11671  0056AC  102F               	iorwf	(___lodiv@divisor+1)^0,w,c
 11672  0056AE  1030               	iorwf	(___lodiv@divisor+2)^0,w,c
 11673  0056B0  1031               	iorwf	(___lodiv@divisor+3)^0,w,c
 11674  0056B2  1032               	iorwf	(___lodiv@divisor+4)^0,w,c
 11675  0056B4  1033               	iorwf	(___lodiv@divisor+5)^0,w,c
 11676  0056B6  1034               	iorwf	(___lodiv@divisor+6)^0,w,c
 11677  0056B8  1035               	iorwf	(___lodiv@divisor+7)^0,w,c
 11678  0056BA  B4D8               	btfsc	status,2,c
 11679  0056BC  D046               	goto	l1954
 11680  0056BE  0E01               	movlw	1
 11681  0056C0  6E3E               	movwf	___lodiv@counter^0,c
 11682  0056C2  D00A               	goto	l7433
 11683  0056C4                     l7431:
 11684  0056C4  90D8               	bcf	status,0,c
 11685  0056C6  362E               	rlcf	___lodiv@divisor^0,f,c
 11686  0056C8  362F               	rlcf	(___lodiv@divisor+1)^0,f,c
 11687  0056CA  3630               	rlcf	(___lodiv@divisor+2)^0,f,c
 11688  0056CC  3631               	rlcf	(___lodiv@divisor+3)^0,f,c
 11689  0056CE  3632               	rlcf	(___lodiv@divisor+4)^0,f,c
 11690  0056D0  3633               	rlcf	(___lodiv@divisor+5)^0,f,c
 11691  0056D2  3634               	rlcf	(___lodiv@divisor+6)^0,f,c
 11692  0056D4  3635               	rlcf	(___lodiv@divisor+7)^0,f,c
 11693  0056D6  2A3E               	incf	___lodiv@counter^0,f,c
 11694  0056D8                     l7433:
 11695  0056D8  AE35               	btfss	(___lodiv@divisor+7)^0,7,c
 11696  0056DA  D7F4               	goto	l7431
 11697  0056DC                     u8230:
 11698  0056DC  90D8               	bcf	status,0,c
 11699  0056DE  3636               	rlcf	___lodiv@quotient^0,f,c
 11700  0056E0  3637               	rlcf	(___lodiv@quotient+1)^0,f,c
 11701  0056E2  3638               	rlcf	(___lodiv@quotient+2)^0,f,c
 11702  0056E4  3639               	rlcf	(___lodiv@quotient+3)^0,f,c
 11703  0056E6  363A               	rlcf	(___lodiv@quotient+4)^0,f,c
 11704  0056E8  363B               	rlcf	(___lodiv@quotient+5)^0,f,c
 11705  0056EA  363C               	rlcf	(___lodiv@quotient+6)^0,f,c
 11706  0056EC  363D               	rlcf	(___lodiv@quotient+7)^0,f,c
 11707  0056EE  502E               	movf	___lodiv@divisor^0,w,c
 11708  0056F0  5C26               	subwf	___lodiv@dividend^0,w,c
 11709  0056F2  502F               	movf	(___lodiv@divisor+1)^0,w,c
 11710  0056F4  5827               	subwfb	(___lodiv@dividend+1)^0,w,c
 11711  0056F6  5030               	movf	(___lodiv@divisor+2)^0,w,c
 11712  0056F8  5828               	subwfb	(___lodiv@dividend+2)^0,w,c
 11713  0056FA  5031               	movf	(___lodiv@divisor+3)^0,w,c
 11714  0056FC  5829               	subwfb	(___lodiv@dividend+3)^0,w,c
 11715  0056FE  5032               	movf	(___lodiv@divisor+4)^0,w,c
 11716  005700  582A               	subwfb	(___lodiv@dividend+4)^0,w,c
 11717  005702  5033               	movf	(___lodiv@divisor+5)^0,w,c
 11718  005704  582B               	subwfb	(___lodiv@dividend+5)^0,w,c
 11719  005706  5034               	movf	(___lodiv@divisor+6)^0,w,c
 11720  005708  582C               	subwfb	(___lodiv@dividend+6)^0,w,c
 11721  00570A  5035               	movf	(___lodiv@divisor+7)^0,w,c
 11722  00570C  582D               	subwfb	(___lodiv@dividend+7)^0,w,c
 11723  00570E  A0D8               	btfss	status,0,c
 11724  005710  D011               	goto	l7443
 11725  005712  502E               	movf	___lodiv@divisor^0,w,c
 11726  005714  5E26               	subwf	___lodiv@dividend^0,f,c
 11727  005716  502F               	movf	(___lodiv@divisor+1)^0,w,c
 11728  005718  5A27               	subwfb	(___lodiv@dividend+1)^0,f,c
 11729  00571A  5030               	movf	(___lodiv@divisor+2)^0,w,c
 11730  00571C  5A28               	subwfb	(___lodiv@dividend+2)^0,f,c
 11731  00571E  5031               	movf	(___lodiv@divisor+3)^0,w,c
 11732  005720  5A29               	subwfb	(___lodiv@dividend+3)^0,f,c
 11733  005722  5032               	movf	(___lodiv@divisor+4)^0,w,c
 11734  005724  5A2A               	subwfb	(___lodiv@dividend+4)^0,f,c
 11735  005726  5033               	movf	(___lodiv@divisor+5)^0,w,c
 11736  005728  5A2B               	subwfb	(___lodiv@dividend+5)^0,f,c
 11737  00572A  5034               	movf	(___lodiv@divisor+6)^0,w,c
 11738  00572C  5A2C               	subwfb	(___lodiv@dividend+6)^0,f,c
 11739  00572E  5035               	movf	(___lodiv@divisor+7)^0,w,c
 11740  005730  5A2D               	subwfb	(___lodiv@dividend+7)^0,f,c
 11741  005732  8036               	bsf	___lodiv@quotient^0,0,c
 11742  005734                     l7443:
 11743  005734  90D8               	bcf	status,0,c
 11744  005736  3235               	rrcf	(___lodiv@divisor+7)^0,f,c
 11745  005738  3234               	rrcf	(___lodiv@divisor+6)^0,f,c
 11746  00573A  3233               	rrcf	(___lodiv@divisor+5)^0,f,c
 11747  00573C  3232               	rrcf	(___lodiv@divisor+4)^0,f,c
 11748  00573E  3231               	rrcf	(___lodiv@divisor+3)^0,f,c
 11749  005740  3230               	rrcf	(___lodiv@divisor+2)^0,f,c
 11750  005742  322F               	rrcf	(___lodiv@divisor+1)^0,f,c
 11751  005744  322E               	rrcf	___lodiv@divisor^0,f,c
 11752  005746  2E3E               	decfsz	___lodiv@counter^0,f,c
 11753  005748  D7C9               	goto	u8230
 11754  00574A                     l1954:
 11755  00574A  C036  F026         	movff	___lodiv@quotient,?___lodiv
 11756  00574E  C037  F027         	movff	___lodiv@quotient+1,?___lodiv+1
 11757  005752  C038  F028         	movff	___lodiv@quotient+2,?___lodiv+2
 11758  005756  C039  F029         	movff	___lodiv@quotient+3,?___lodiv+3
 11759  00575A  C03A  F02A         	movff	___lodiv@quotient+4,?___lodiv+4
 11760  00575E  C03B  F02B         	movff	___lodiv@quotient+5,?___lodiv+5
 11761  005762  C03C  F02C         	movff	___lodiv@quotient+6,?___lodiv+6
 11762  005766  C03D  F02D         	movff	___lodiv@quotient+7,?___lodiv+7
 11763  00576A  0012               	return		;funcret
 11764  00576C                     __end_of___lodiv:
 11765                           	opt callstack 0
 11766                           
 11767 ;; *************** function ___aldiv *****************
 11768 ;; Defined at:
 11769 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aldiv.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;  dividend        4   13[COMRAM] long 
 11772 ;;  divisor         4   17[COMRAM] long 
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;  quotient        4   23[COMRAM] long 
 11775 ;;  sign            1   22[COMRAM] unsigned char 
 11776 ;;  counter         1   21[COMRAM] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  4   13[COMRAM] long 
 11779 ;; Registers used:
 11780 ;;		wreg, status,2, status,0
 11781 ;; Tracked objects:
 11782 ;;		On entry : 3F/0
 11783 ;;		On exit  : 3F/0
 11784 ;;		Unchanged: 3F/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11786 ;;      Params:         8       0       0       0       0       0       0
 11787 ;;      Locals:         6       0       0       0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0
 11789 ;;      Totals:        14       0       0       0       0       0       0
 11790 ;;Total ram usage:       14 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    2
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_adf4351_set_freq
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text25
 11801  00576C                     __ptext25:
 11802                           	opt callstack 0
 11803  00576C                     ___aldiv:
 11804                           	opt callstack 26
 11805                           
 11806                           ; BSR set to: 0
 11807                           
 11808                           ;incstack = 0
 11809  00576C  0E00               	movlw	0
 11810  00576E  6E17               	movwf	___aldiv@sign^0,c
 11811                           
 11812                           ; BSR set to: 0
 11813  005770  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
 11814  005772  D00A               	goto	l7703
 11815                           
 11816                           ; BSR set to: 0
 11817  005774  1E15               	comf	(___aldiv@divisor+3)^0,f,c
 11818  005776  1E14               	comf	(___aldiv@divisor+2)^0,f,c
 11819  005778  1E13               	comf	(___aldiv@divisor+1)^0,f,c
 11820  00577A  6C12               	negf	___aldiv@divisor^0,c
 11821  00577C  0E00               	movlw	0
 11822  00577E  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
 11823  005780  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
 11824  005782  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
 11825                           
 11826                           ; BSR set to: 0
 11827  005784  0E01               	movlw	1
 11828  005786  6E17               	movwf	___aldiv@sign^0,c
 11829  005788                     l7703:
 11830                           
 11831                           ; BSR set to: 0
 11832  005788  AE11               	btfss	(___aldiv@dividend+3)^0,7,c
 11833  00578A  D00A               	goto	l7709
 11834                           
 11835                           ; BSR set to: 0
 11836  00578C  1E11               	comf	(___aldiv@dividend+3)^0,f,c
 11837  00578E  1E10               	comf	(___aldiv@dividend+2)^0,f,c
 11838  005790  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
 11839  005792  6C0E               	negf	___aldiv@dividend^0,c
 11840  005794  0E00               	movlw	0
 11841  005796  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
 11842  005798  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
 11843  00579A  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
 11844                           
 11845                           ; BSR set to: 0
 11846  00579C  0E01               	movlw	1
 11847  00579E  1A17               	xorwf	___aldiv@sign^0,f,c
 11848  0057A0                     l7709:
 11849                           
 11850                           ; BSR set to: 0
 11851  0057A0  0E00               	movlw	0
 11852  0057A2  6E18               	movwf	___aldiv@quotient^0,c
 11853  0057A4  0E00               	movlw	0
 11854  0057A6  6E19               	movwf	(___aldiv@quotient+1)^0,c
 11855  0057A8  0E00               	movlw	0
 11856  0057AA  6E1A               	movwf	(___aldiv@quotient+2)^0,c
 11857  0057AC  0E00               	movlw	0
 11858  0057AE  6E1B               	movwf	(___aldiv@quotient+3)^0,c
 11859                           
 11860                           ; BSR set to: 0
 11861  0057B0  5012               	movf	___aldiv@divisor^0,w,c
 11862  0057B2  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
 11863  0057B4  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
 11864  0057B6  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
 11865  0057B8  B4D8               	btfsc	status,2,c
 11866  0057BA  D02A               	goto	l7731
 11867                           
 11868                           ; BSR set to: 0
 11869  0057BC  0E01               	movlw	1
 11870  0057BE  6E16               	movwf	___aldiv@counter^0,c
 11871  0057C0  D006               	goto	l7717
 11872  0057C2                     l7715:
 11873                           
 11874                           ; BSR set to: 0
 11875  0057C2  90D8               	bcf	status,0,c
 11876  0057C4  3612               	rlcf	___aldiv@divisor^0,f,c
 11877  0057C6  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
 11878  0057C8  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
 11879  0057CA  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
 11880  0057CC  2A16               	incf	___aldiv@counter^0,f,c
 11881  0057CE                     l7717:
 11882                           
 11883                           ; BSR set to: 0
 11884  0057CE  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
 11885  0057D0  D7F8               	goto	l7715
 11886  0057D2                     u8540:
 11887                           
 11888                           ; BSR set to: 0
 11889  0057D2  90D8               	bcf	status,0,c
 11890  0057D4  3618               	rlcf	___aldiv@quotient^0,f,c
 11891  0057D6  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
 11892  0057D8  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
 11893  0057DA  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
 11894                           
 11895                           ; BSR set to: 0
 11896  0057DC  5012               	movf	___aldiv@divisor^0,w,c
 11897  0057DE  5C0E               	subwf	___aldiv@dividend^0,w,c
 11898  0057E0  5013               	movf	(___aldiv@divisor+1)^0,w,c
 11899  0057E2  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
 11900  0057E4  5014               	movf	(___aldiv@divisor+2)^0,w,c
 11901  0057E6  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
 11902  0057E8  5015               	movf	(___aldiv@divisor+3)^0,w,c
 11903  0057EA  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
 11904  0057EC  A0D8               	btfss	status,0,c
 11905  0057EE  D009               	goto	l7727
 11906                           
 11907                           ; BSR set to: 0
 11908  0057F0  5012               	movf	___aldiv@divisor^0,w,c
 11909  0057F2  5E0E               	subwf	___aldiv@dividend^0,f,c
 11910  0057F4  5013               	movf	(___aldiv@divisor+1)^0,w,c
 11911  0057F6  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
 11912  0057F8  5014               	movf	(___aldiv@divisor+2)^0,w,c
 11913  0057FA  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
 11914  0057FC  5015               	movf	(___aldiv@divisor+3)^0,w,c
 11915  0057FE  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
 11916                           
 11917                           ; BSR set to: 0
 11918  005800  8018               	bsf	___aldiv@quotient^0,0,c
 11919  005802                     l7727:
 11920                           
 11921                           ; BSR set to: 0
 11922  005802  90D8               	bcf	status,0,c
 11923  005804  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
 11924  005806  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
 11925  005808  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
 11926  00580A  3212               	rrcf	___aldiv@divisor^0,f,c
 11927                           
 11928                           ; BSR set to: 0
 11929  00580C  2E16               	decfsz	___aldiv@counter^0,f,c
 11930  00580E  D7E1               	goto	u8540
 11931  005810                     l7731:
 11932                           
 11933                           ; BSR set to: 0
 11934  005810  5017               	movf	___aldiv@sign^0,w,c
 11935  005812  B4D8               	btfsc	status,2,c
 11936  005814  D008               	goto	l7735
 11937                           
 11938                           ; BSR set to: 0
 11939  005816  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
 11940  005818  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
 11941  00581A  1E19               	comf	(___aldiv@quotient+1)^0,f,c
 11942  00581C  6C18               	negf	___aldiv@quotient^0,c
 11943  00581E  0E00               	movlw	0
 11944  005820  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
 11945  005822  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
 11946  005824  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
 11947  005826                     l7735:
 11948                           
 11949                           ; BSR set to: 0
 11950  005826  C018  F00E         	movff	___aldiv@quotient,?___aldiv
 11951  00582A  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
 11952  00582E  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
 11953  005832  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
 11954                           
 11955                           ; BSR set to: 0
 11956  005836  0012               	return		;funcret
 11957  005838                     __end_of___aldiv:
 11958                           	opt callstack 0
 11959                           
 11960 ;; *************** function _adf4351_get_lock *****************
 11961 ;; Defined at:
 11962 ;;		line 162 in file "src/driver/adf4351.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;  ctx             2   13[COMRAM] PTR struct adf4351_ctx
 11965 ;;		 -> g_adf4351(55), 
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;		None
 11968 ;; Return value:  Size  Location     Type
 11969 ;;                  2   13[COMRAM] int 
 11970 ;; Registers used:
 11971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11972 ;; Tracked objects:
 11973 ;;		On entry : 0/2
 11974 ;;		On exit  : 0/0
 11975 ;;		Unchanged: 0/0
 11976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11977 ;;      Params:         2       0       0       0       0       0       0
 11978 ;;      Locals:         0       0       0       0       0       0       0
 11979 ;;      Temps:          3       0       0       0       0       0       0
 11980 ;;      Totals:         5       0       0       0       0       0       0
 11981 ;;Total ram usage:        5 bytes
 11982 ;; Hardware stack levels used:    1
 11983 ;; Hardware stack levels required when called:    2
 11984 ;; This function calls:
 11985 ;;		Nothing
 11986 ;; This function is called by:
 11987 ;;		_setADF4351frequency
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           	psect	text26
 11992  006F94                     __ptext26:
 11993                           	opt callstack 0
 11994  006F94                     _adf4351_get_lock:
 11995                           	opt callstack 27
 11996                           
 11997                           ;src/driver/adf4351.c: 162: BOOL adf4351_get_lock(adf4351_ctx* ctx);src/driver/adf4351.c
      +                          : 163: {;src/driver/adf4351.c: 164:  return (((*((PIN_ADF_LOCK)->pPORT) & (PIN_ADF_LOCK)
      +                          ->mask) != 0)==0)?0:1;
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;incstack = 0
 12001  006F94  0ECC               	movlw	low (_PIN_ADF_LOCK_DEF+4)
 12002  006F96  6EF6               	movwf	tblptrl,c
 12003  006F98  0E7B               	movlw	high (_PIN_ADF_LOCK_DEF+4)
 12004  006F9A  6EF7               	movwf	tblptrh,c
 12005  006F9C                     	if	0	;tblptru may be non-zero
 12006  006F9C                     	endif
 12007  006F9C                     	if	0	;tblptru may be non-zero
 12008  006F9C                     	endif
 12009  006F9C  0008               	tblrd		*
 12010  006F9E  CFF5 F010          	movff	tablat,??_adf4351_get_lock
 12011  006FA2  0EC8               	movlw	low _PIN_ADF_LOCK_DEF
 12012  006FA4  6EF6               	movwf	tblptrl,c
 12013  006FA6                     	if	1	;There is more than 1 active tblptr byte
 12014  006FA6  0E7B               	movlw	high _PIN_ADF_LOCK_DEF
 12015  006FA8  6EF7               	movwf	tblptrh,c
 12016  006FAA                     	endif
 12017  006FAA                     	if	0	;There are less than 3 active tblptr bytes
 12018  006FAA                     	endif
 12019  006FAA  0009               	tblrd		*+
 12020  006FAC  CFF5 F011          	movff	tablat,??_adf4351_get_lock+1
 12021  006FB0  0009               	tblrd		*+
 12022  006FB2  CFF5 F012          	movff	tablat,??_adf4351_get_lock+2
 12023  006FB6  C011  FFD9         	movff	??_adf4351_get_lock+1,fsr2l
 12024  006FBA  C012  FFDA         	movff	??_adf4351_get_lock+2,fsr2h
 12025  006FBE  50DF               	movf	indf2,w,c
 12026  006FC0  1410               	andwf	??_adf4351_get_lock^0,w,c
 12027  006FC2  0900               	iorlw	0
 12028  006FC4  B4D8               	btfsc	status,2,c
 12029  006FC6  D002               	goto	u13450
 12030  006FC8  0E01               	movlw	1
 12031  006FCA  D001               	goto	u13460
 12032  006FCC                     u13450:
 12033  006FCC  0E00               	movlw	0
 12034  006FCE                     u13460:
 12035  006FCE  6E0E               	movwf	?_adf4351_get_lock^0,c
 12036  006FD0  6A0F               	clrf	(?_adf4351_get_lock+1)^0,c
 12037  006FD2  0012               	return		;funcret
 12038  006FD4                     __end_of_adf4351_get_lock:
 12039                           	opt callstack 0
 12040                           
 12041 ;; *************** function _secret_settings *****************
 12042 ;; Defined at:
 12043 ;;		line 58 in file "src/secretsettings.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;		None
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 3F/0
 12054 ;;		On exit  : 3D/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12057 ;;      Params:         0       0       0       0       0       0       0
 12058 ;;      Locals:         0       0       0       0       0       0       0
 12059 ;;      Temps:          0       2       0       0       0       0       0
 12060 ;;      Totals:         0       2       0       0       0       0       0
 12061 ;;Total ram usage:        2 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:   15
 12064 ;; This function calls:
 12065 ;;		_clear_GPS_shift
 12066 ;;		_eeprom_getmode
 12067 ;;		_printf
 12068 ;;		_secret_settings_write
 12069 ;; This function is called by:
 12070 ;;		_main
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text27
 12075  006A5A                     __ptext27:
 12076                           	opt callstack 0
 12077  006A5A                     _secret_settings:
 12078                           	opt callstack 15
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;src/secretsettings.c: 60:  secret_settings_write();
 12082                           
 12083                           ;incstack = 0
 12084  006A5A  ECC9  F017         	call	_secret_settings_write	;wreg free
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;src/secretsettings.c: 63:  special_cfg = eeprom_getmode();
 12088  006A5E  EC82  F03A         	call	_eeprom_getmode	;wreg free
 12089  006A62  0100               	movlb	0	; () banked
 12090  006A64  6FD2               	movwf	_special_cfg& (0+255),b
 12091                           
 12092                           ;src/secretsettings.c: 64:  switch(special_cfg)
 12093  006A66  D010               	goto	l11707
 12094  006A68                     l11697:
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;src/secretsettings.c: 68:   clear_GPS_shift();
 12098  006A68  EC02  F037         	call	_clear_GPS_shift	;wreg free
 12099                           
 12100                           ; BSR set to: 2
 12101                           ;src/secretsettings.c: 69:   printf("GPS: shift OFF\n");
 12102  006A6C  0E85               	movlw	low STR_95
 12103  006A6E  0100               	movlb	0	; () banked
 12104  006A70  6F97               	movwf	printf@fmt& (0+255),b
 12105  006A72  0E7E               	movlw	high STR_95
 12106  006A74  6F98               	movwf	(printf@fmt+1)& (0+255),b
 12107  006A76  EC30  F03A         	call	_printf	;wreg free
 12108                           
 12109                           ;src/secretsettings.c: 70:   break;
 12110  006A7A  0012               	return	
 12111  006A7C                     l11701:
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;src/secretsettings.c: 74:   use_GPS = 0;
 12115  006A7C  0E00               	movlw	0
 12116  006A7E  6FE8               	movwf	_use_GPS& (0+255),b
 12117                           
 12118                           ;src/secretsettings.c: 75:   break;
 12119  006A80  0012               	return	
 12120  006A82                     l11703:
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;src/secretsettings.c: 79:   tcxo_no_GPS = 1;
 12124  006A82  0E01               	movlw	1
 12125  006A84  6E6F               	movwf	_tcxo_no_GPS^0,c
 12126                           
 12127                           ;src/secretsettings.c: 80:   break;
 12128  006A86  0012               	return	
 12129  006A88                     l11707:
 12130                           
 12131                           ; BSR set to: 0
 12132  006A88  51D2               	movf	_special_cfg& (0+255),w,b
 12133  006A8A  6FBF               	movwf	??_secret_settings& (0+255),b
 12134  006A8C  6BC0               	clrf	(??_secret_settings+1)& (0+255),b
 12135                           
 12136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12137                           ; Switch size 1, requested type "simple"
 12138                           ; Number of cases is 1, Range of values is 0 to 0
 12139                           ; switch strategies available:
 12140                           ; Name         Instructions Cycles
 12141                           ; simple_byte            4     3 (average)
 12142                           ;	Chosen strategy is simple_byte
 12143  006A8E  51C0               	movf	(??_secret_settings+1)& (0+255),w,b
 12144  006A90  0A00               	xorlw	0	; case 0
 12145  006A92  A4D8               	btfss	status,2,c
 12146  006A94  0012               	return	
 12147                           
 12148                           ; BSR set to: 0
 12149                           ; Switch size 1, requested type "simple"
 12150                           ; Number of cases is 3, Range of values is 1 to 3
 12151                           ; switch strategies available:
 12152                           ; Name         Instructions Cycles
 12153                           ; simple_byte           10     6 (average)
 12154                           ;	Chosen strategy is simple_byte
 12155  006A96  51BF               	movf	??_secret_settings& (0+255),w,b
 12156  006A98  0A01               	xorlw	1	; case 1
 12157  006A9A  B4D8               	btfsc	status,2,c
 12158  006A9C  D7E5               	goto	l11697
 12159  006A9E  0A03               	xorlw	3	; case 2
 12160  006AA0  B4D8               	btfsc	status,2,c
 12161  006AA2  D7EC               	goto	l11701
 12162  006AA4  0A01               	xorlw	1	; case 3
 12163  006AA6  A4D8               	btfss	status,2,c
 12164  006AA8  0012               	return	
 12165  006AAA  D7EB               	goto	l11703
 12166  006AAC                     __end_of_secret_settings:
 12167                           	opt callstack 0
 12168                           
 12169 ;; *************** function _secret_settings_write *****************
 12170 ;; Defined at:
 12171 ;;		line 84 in file "src/secretsettings.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;		None
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;  sw              1   62[BANK0 ] unsigned char 
 12176 ;; Return value:  Size  Location     Type
 12177 ;;                  1    wreg      void 
 12178 ;; Registers used:
 12179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12180 ;; Tracked objects:
 12181 ;;		On entry : 3F/0
 12182 ;;		On exit  : 3F/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12185 ;;      Params:         0       0       0       0       0       0       0
 12186 ;;      Locals:         0       1       0       0       0       0       0
 12187 ;;      Temps:          0       3       0       0       0       0       0
 12188 ;;      Totals:         0       4       0       0       0       0       0
 12189 ;;Total ram usage:        4 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; Hardware stack levels required when called:   14
 12192 ;; This function calls:
 12193 ;;		_eeprom_setmode
 12194 ;;		_lcd_settingsOK
 12195 ;;		_read_switch
 12196 ;; This function is called by:
 12197 ;;		_secret_settings
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201                           	psect	text28
 12202  002F92                     __ptext28:
 12203                           	opt callstack 0
 12204  002F92                     _secret_settings_write:
 12205                           	opt callstack 15
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;src/secretsettings.c: 90:  if(ext10MHzReference == 0)
 12209                           
 12210                           ;incstack = 0
 12211  002F92  51D7               	movf	_ext10MHzReference& (0+255),w,b
 12212  002F94  B4D8               	btfsc	status,2,c
 12213  002F96  0012               	return	
 12214                           
 12215                           ; BSR set to: 0
 12216  002F98  0E59               	movlw	low (_PIN_LNB_QRG2_DEF+4)
 12217  002F9A  6EF6               	movwf	tblptrl,c
 12218  002F9C  0E7B               	movlw	high (_PIN_LNB_QRG2_DEF+4)
 12219  002F9E  6EF7               	movwf	tblptrh,c
 12220  002FA0                     	if	0	;tblptru may be non-zero
 12221  002FA0                     	endif
 12222  002FA0                     	if	0	;tblptru may be non-zero
 12223  002FA0                     	endif
 12224  002FA0  0008               	tblrd		*
 12225  002FA2  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12226  002FA6  0E55               	movlw	low _PIN_LNB_QRG2_DEF
 12227  002FA8  6EF6               	movwf	tblptrl,c
 12228  002FAA                     	if	1	;There is more than 1 active tblptr byte
 12229  002FAA  0E7B               	movlw	high _PIN_LNB_QRG2_DEF
 12230  002FAC  6EF7               	movwf	tblptrh,c
 12231  002FAE                     	endif
 12232  002FAE                     	if	0	;There are less than 3 active tblptr bytes
 12233  002FAE                     	endif
 12234  002FAE  0009               	tblrd		*+
 12235  002FB0  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12236  002FB4  0009               	tblrd		*+
 12237  002FB6  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12238  002FBA  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12239  002FBE  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12240  002FC2  50DF               	movf	indf2,w,c
 12241  002FC4  15BB               	andwf	??_secret_settings_write& (0+255),w,b
 12242  002FC6  0900               	iorlw	0
 12243  002FC8  A4D8               	btfss	status,2,c
 12244  002FCA  0012               	return	
 12245                           
 12246                           ; BSR set to: 0
 12247  002FCC  0E54               	movlw	low (_PIN_LNB_QRG1_DEF+4)
 12248  002FCE  6EF6               	movwf	tblptrl,c
 12249  002FD0  0E7B               	movlw	high (_PIN_LNB_QRG1_DEF+4)
 12250  002FD2  6EF7               	movwf	tblptrh,c
 12251  002FD4                     	if	0	;tblptru may be non-zero
 12252  002FD4                     	endif
 12253  002FD4                     	if	0	;tblptru may be non-zero
 12254  002FD4                     	endif
 12255  002FD4  0008               	tblrd		*
 12256  002FD6  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12257  002FDA  0E50               	movlw	low _PIN_LNB_QRG1_DEF
 12258  002FDC  6EF6               	movwf	tblptrl,c
 12259  002FDE                     	if	1	;There is more than 1 active tblptr byte
 12260  002FDE  0E7B               	movlw	high _PIN_LNB_QRG1_DEF
 12261  002FE0  6EF7               	movwf	tblptrh,c
 12262  002FE2                     	endif
 12263  002FE2                     	if	0	;There are less than 3 active tblptr bytes
 12264  002FE2                     	endif
 12265  002FE2  0009               	tblrd		*+
 12266  002FE4  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12267  002FE8  0009               	tblrd		*+
 12268  002FEA  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12269  002FEE  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12270  002FF2  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12271  002FF6  50DF               	movf	indf2,w,c
 12272  002FF8  15BB               	andwf	??_secret_settings_write& (0+255),w,b
 12273  002FFA  0900               	iorlw	0
 12274  002FFC  A4D8               	btfss	status,2,c
 12275  002FFE  0012               	return	
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;src/secretsettings.c: 97:  u8 sw = read_switch();
 12279  003000  EC1F  F026         	call	_read_switch	;wreg free
 12280  003004  0100               	movlb	0	; () banked
 12281  003006  6FBE               	movwf	secret_settings_write@sw& (0+255),b
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;src/secretsettings.c: 99:  if(sw <= 3)
 12285  003008  0E04               	movlw	4
 12286  00300A  61BE               	cpfslt	secret_settings_write@sw& (0+255),b
 12287  00300C  0012               	return	
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;src/secretsettings.c: 100:  {;src/secretsettings.c: 101:   eeprom_setmode(sw);
 12291  00300E  51BE               	movf	secret_settings_write@sw& (0+255),w,b
 12292  003010  EC6F  F03A         	call	_eeprom_setmode
 12293                           
 12294                           ;src/secretsettings.c: 103:   lcd_settingsOK(sw);
 12295  003014  0100               	movlb	0	; () banked
 12296  003016  51BE               	movf	secret_settings_write@sw& (0+255),w,b
 12297  003018  EC97  F02E         	call	_lcd_settingsOK
 12298  00301C                     l11183:
 12299  00301C  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 12300  00301E  6EF6               	movwf	tblptrl,c
 12301  003020  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 12302  003022  6EF7               	movwf	tblptrh,c
 12303  003024                     	if	0	;tblptru may be non-zero
 12304  003024                     	endif
 12305  003024                     	if	0	;tblptru may be non-zero
 12306  003024                     	endif
 12307  003024  0008               	tblrd		*
 12308  003026  50F5               	movf	tablat,w,c
 12309  003028  0AFF               	xorlw	255
 12310  00302A  0100               	movlb	0	; () banked
 12311  00302C  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12312  00302E  0EA5               	movlw	low _PIN_LED_SI_LOCK_DEF
 12313  003030  6EF6               	movwf	tblptrl,c
 12314  003032                     	if	1	;There is more than 1 active tblptr byte
 12315  003032  0E7B               	movlw	high _PIN_LED_SI_LOCK_DEF
 12316  003034  6EF7               	movwf	tblptrh,c
 12317  003036                     	endif
 12318  003036                     	if	0	;There are less than 3 active tblptr bytes
 12319  003036                     	endif
 12320  003036  0009               	tblrd		*+
 12321  003038  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12322  00303C  0009               	tblrd		*+
 12323  00303E  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12324  003042  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12325  003046  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12326  00304A  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12327  00304C  16DF               	andwf	indf2,f,c
 12328                           
 12329                           ; BSR set to: 0
 12330  00304E  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
 12331  003050  6EF6               	movwf	tblptrl,c
 12332  003052  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
 12333  003054  6EF7               	movwf	tblptrh,c
 12334  003056                     	if	0	;tblptru may be non-zero
 12335  003056                     	endif
 12336  003056                     	if	0	;tblptru may be non-zero
 12337  003056                     	endif
 12338  003056  0008               	tblrd		*
 12339  003058  50F5               	movf	tablat,w,c
 12340  00305A  0AFF               	xorlw	255
 12341  00305C  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12342  00305E  0E9B               	movlw	low _PIN_LED_CPU_OK_DEF
 12343  003060  6EF6               	movwf	tblptrl,c
 12344  003062                     	if	1	;There is more than 1 active tblptr byte
 12345  003062  0E7B               	movlw	high _PIN_LED_CPU_OK_DEF
 12346  003064  6EF7               	movwf	tblptrh,c
 12347  003066                     	endif
 12348  003066                     	if	0	;There are less than 3 active tblptr bytes
 12349  003066                     	endif
 12350  003066  0009               	tblrd		*+
 12351  003068  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12352  00306C  0009               	tblrd		*+
 12353  00306E  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12354  003072  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12355  003076  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12356  00307A  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12357  00307C  16DF               	andwf	indf2,f,c
 12358                           
 12359                           ; BSR set to: 0
 12360  00307E  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 12361  003080  6EF6               	movwf	tblptrl,c
 12362  003082  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 12363  003084  6EF7               	movwf	tblptrh,c
 12364  003086                     	if	0	;tblptru may be non-zero
 12365  003086                     	endif
 12366  003086                     	if	0	;tblptru may be non-zero
 12367  003086                     	endif
 12368  003086  0008               	tblrd		*
 12369  003088  50F5               	movf	tablat,w,c
 12370  00308A  0AFF               	xorlw	255
 12371  00308C  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12372  00308E  0E91               	movlw	low _PIN_LED_ADF_LOCK_DEF
 12373  003090  6EF6               	movwf	tblptrl,c
 12374  003092                     	if	1	;There is more than 1 active tblptr byte
 12375  003092  0E7B               	movlw	high _PIN_LED_ADF_LOCK_DEF
 12376  003094  6EF7               	movwf	tblptrh,c
 12377  003096                     	endif
 12378  003096                     	if	0	;There are less than 3 active tblptr bytes
 12379  003096                     	endif
 12380  003096  0009               	tblrd		*+
 12381  003098  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12382  00309C  0009               	tblrd		*+
 12383  00309E  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12384  0030A2  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12385  0030A6  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12386  0030AA  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12387  0030AC  16DF               	andwf	indf2,f,c
 12388                           
 12389                           ; BSR set to: 0
 12390  0030AE  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 12391  0030B0  6EF6               	movwf	tblptrl,c
 12392  0030B2  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 12393  0030B4  6EF7               	movwf	tblptrh,c
 12394  0030B6                     	if	0	;tblptru may be non-zero
 12395  0030B6                     	endif
 12396  0030B6                     	if	0	;tblptru may be non-zero
 12397  0030B6                     	endif
 12398  0030B6  0008               	tblrd		*
 12399  0030B8  50F5               	movf	tablat,w,c
 12400  0030BA  0AFF               	xorlw	255
 12401  0030BC  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12402  0030BE  0E87               	movlw	low _PIN_LED_LNB_GOOD_DEF
 12403  0030C0  6EF6               	movwf	tblptrl,c
 12404  0030C2                     	if	1	;There is more than 1 active tblptr byte
 12405  0030C2  0E7B               	movlw	high _PIN_LED_LNB_GOOD_DEF
 12406  0030C4  6EF7               	movwf	tblptrh,c
 12407  0030C6                     	endif
 12408  0030C6                     	if	0	;There are less than 3 active tblptr bytes
 12409  0030C6                     	endif
 12410  0030C6  0009               	tblrd		*+
 12411  0030C8  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12412  0030CC  0009               	tblrd		*+
 12413  0030CE  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12414  0030D2  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12415  0030D6  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12416  0030DA  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12417  0030DC  16DF               	andwf	indf2,f,c
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;src/secretsettings.c: 112:    _delaywdt((unsigned long)((100)*(8000000/4000.0)));
 12421  0030DE  0E01               	movlw	1
 12422  0030E0  0100               	movlb	0	; () banked
 12423  0030E2  6FBC               	movwf	(??_secret_settings_write+1)& (0+255),b
 12424  0030E4  0EC3               	movlw	195
 12425  0030E6  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12426  0030E8  0EEC               	movlw	236
 12427  0030EA                     u14977:
 12428  0030EA  0004               	clrwdt	
 12429  0030EC  2EE8               	decfsz	wreg,f,c
 12430  0030EE  D7FD               	bra	u14977
 12431  0030F0  2FBB               	decfsz	??_secret_settings_write& (0+255),f,b
 12432  0030F2  D7FB               	bra	u14977
 12433  0030F4  2FBC               	decfsz	(??_secret_settings_write+1)& (0+255),f,b
 12434  0030F6  D7F9               	bra	u14977
 12435  0030F8  0004               	clrwdt	
 12436  0030FA  F000               	nop	
 12437  0030FC  0004               	clrwdt	
 12438  0030FE  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 12439  003100  6EF6               	movwf	tblptrl,c
 12440  003102  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 12441  003104  6EF7               	movwf	tblptrh,c
 12442  003106                     	if	0	;tblptru may be non-zero
 12443  003106                     	endif
 12444  003106                     	if	0	;tblptru may be non-zero
 12445  003106                     	endif
 12446  003106  0008               	tblrd		*
 12447  003108  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12448  00310C  0EA5               	movlw	low _PIN_LED_SI_LOCK_DEF
 12449  00310E  6EF6               	movwf	tblptrl,c
 12450  003110                     	if	1	;There is more than 1 active tblptr byte
 12451  003110  0E7B               	movlw	high _PIN_LED_SI_LOCK_DEF
 12452  003112  6EF7               	movwf	tblptrh,c
 12453  003114                     	endif
 12454  003114                     	if	0	;There are less than 3 active tblptr bytes
 12455  003114                     	endif
 12456  003114  0009               	tblrd		*+
 12457  003116  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12458  00311A  0009               	tblrd		*+
 12459  00311C  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12460  003120  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12461  003124  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12462  003128  0100               	movlb	0	; () banked
 12463  00312A  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12464  00312C  12DF               	iorwf	indf2,f,c
 12465                           
 12466                           ; BSR set to: 0
 12467  00312E  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
 12468  003130  6EF6               	movwf	tblptrl,c
 12469  003132  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
 12470  003134  6EF7               	movwf	tblptrh,c
 12471  003136                     	if	0	;tblptru may be non-zero
 12472  003136                     	endif
 12473  003136                     	if	0	;tblptru may be non-zero
 12474  003136                     	endif
 12475  003136  0008               	tblrd		*
 12476  003138  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12477  00313C  0E9B               	movlw	low _PIN_LED_CPU_OK_DEF
 12478  00313E  6EF6               	movwf	tblptrl,c
 12479  003140                     	if	1	;There is more than 1 active tblptr byte
 12480  003140  0E7B               	movlw	high _PIN_LED_CPU_OK_DEF
 12481  003142  6EF7               	movwf	tblptrh,c
 12482  003144                     	endif
 12483  003144                     	if	0	;There are less than 3 active tblptr bytes
 12484  003144                     	endif
 12485  003144  0009               	tblrd		*+
 12486  003146  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12487  00314A  0009               	tblrd		*+
 12488  00314C  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12489  003150  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12490  003154  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12491  003158  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12492  00315A  12DF               	iorwf	indf2,f,c
 12493                           
 12494                           ; BSR set to: 0
 12495  00315C  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 12496  00315E  6EF6               	movwf	tblptrl,c
 12497  003160  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 12498  003162  6EF7               	movwf	tblptrh,c
 12499  003164                     	if	0	;tblptru may be non-zero
 12500  003164                     	endif
 12501  003164                     	if	0	;tblptru may be non-zero
 12502  003164                     	endif
 12503  003164  0008               	tblrd		*
 12504  003166  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12505  00316A  0E91               	movlw	low _PIN_LED_ADF_LOCK_DEF
 12506  00316C  6EF6               	movwf	tblptrl,c
 12507  00316E                     	if	1	;There is more than 1 active tblptr byte
 12508  00316E  0E7B               	movlw	high _PIN_LED_ADF_LOCK_DEF
 12509  003170  6EF7               	movwf	tblptrh,c
 12510  003172                     	endif
 12511  003172                     	if	0	;There are less than 3 active tblptr bytes
 12512  003172                     	endif
 12513  003172  0009               	tblrd		*+
 12514  003174  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12515  003178  0009               	tblrd		*+
 12516  00317A  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12517  00317E  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12518  003182  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12519  003186  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12520  003188  12DF               	iorwf	indf2,f,c
 12521                           
 12522                           ; BSR set to: 0
 12523  00318A  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 12524  00318C  6EF6               	movwf	tblptrl,c
 12525  00318E  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 12526  003190  6EF7               	movwf	tblptrh,c
 12527  003192                     	if	0	;tblptru may be non-zero
 12528  003192                     	endif
 12529  003192                     	if	0	;tblptru may be non-zero
 12530  003192                     	endif
 12531  003192  0008               	tblrd		*
 12532  003194  CFF5 F0BB          	movff	tablat,??_secret_settings_write
 12533  003198  0E87               	movlw	low _PIN_LED_LNB_GOOD_DEF
 12534  00319A  6EF6               	movwf	tblptrl,c
 12535  00319C                     	if	1	;There is more than 1 active tblptr byte
 12536  00319C  0E7B               	movlw	high _PIN_LED_LNB_GOOD_DEF
 12537  00319E  6EF7               	movwf	tblptrh,c
 12538  0031A0                     	endif
 12539  0031A0                     	if	0	;There are less than 3 active tblptr bytes
 12540  0031A0                     	endif
 12541  0031A0  0009               	tblrd		*+
 12542  0031A2  CFF5 F0BC          	movff	tablat,??_secret_settings_write+1
 12543  0031A6  0009               	tblrd		*+
 12544  0031A8  CFF5 F0BD          	movff	tablat,??_secret_settings_write+2
 12545  0031AC  C0BC  FFD9         	movff	??_secret_settings_write+1,fsr2l
 12546  0031B0  C0BD  FFDA         	movff	??_secret_settings_write+2,fsr2h
 12547  0031B4  51BB               	movf	??_secret_settings_write& (0+255),w,b
 12548  0031B6  12DF               	iorwf	indf2,f,c
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;src/secretsettings.c: 119:    _delaywdt((unsigned long)((100)*(8000000/4000.0)));
 12552  0031B8  0E01               	movlw	1
 12553  0031BA  0100               	movlb	0	; () banked
 12554  0031BC  6FBC               	movwf	(??_secret_settings_write+1)& (0+255),b
 12555  0031BE  0EC3               	movlw	195
 12556  0031C0  6FBB               	movwf	??_secret_settings_write& (0+255),b
 12557  0031C2  0EEC               	movlw	236
 12558  0031C4                     u14987:
 12559  0031C4  0004               	clrwdt	
 12560  0031C6  2EE8               	decfsz	wreg,f,c
 12561  0031C8  D7FD               	bra	u14987
 12562  0031CA  2FBB               	decfsz	??_secret_settings_write& (0+255),f,b
 12563  0031CC  D7FB               	bra	u14987
 12564  0031CE  2FBC               	decfsz	(??_secret_settings_write+1)& (0+255),f,b
 12565  0031D0  D7F9               	bra	u14987
 12566  0031D2  0004               	clrwdt	
 12567  0031D4  F000               	nop	
 12568  0031D6  0004               	clrwdt	
 12569  0031D8  D721               	goto	l11183
 12570  0031DA                     __end_of_secret_settings_write:
 12571                           	opt callstack 0
 12572                           
 12573 ;; *************** function _lcd_settingsOK *****************
 12574 ;; Defined at:
 12575 ;;		line 522 in file "src/driver/lcd.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;  mode            1    wreg     unsigned char 
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;  mode            1   58[BANK0 ] unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      void 
 12582 ;; Registers used:
 12583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12584 ;; Tracked objects:
 12585 ;;		On entry : 3F/0
 12586 ;;		On exit  : 3F/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12589 ;;      Params:         0       0       0       0       0       0       0
 12590 ;;      Locals:         0       1       0       0       0       0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0
 12592 ;;      Totals:         0       1       0       0       0       0       0
 12593 ;;Total ram usage:        1 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; Hardware stack levels required when called:   13
 12596 ;; This function calls:
 12597 ;;		_itoa
 12598 ;;		_lcd_clear_screen
 12599 ;;		_print_string
 12600 ;; This function is called by:
 12601 ;;		_secret_settings_write
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           	psect	text29
 12606  005D2E                     __ptext29:
 12607                           	opt callstack 0
 12608  005D2E                     _lcd_settingsOK:
 12609                           	opt callstack 15
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;incstack = 0
 12613                           ;lcd_settingsOK@mode stored from wreg
 12614  005D2E  6FBA               	movwf	lcd_settingsOK@mode& (0+255),b
 12615                           
 12616                           ;src/driver/lcd.c: 522: void lcd_settingsOK(u8 mode);src/driver/lcd.c: 523: {;src/driver
      +                          /lcd.c: 524:  lcd_clear_screen(0);
 12617  005D30  0E00               	movlw	0
 12618  005D32  EC56  F035         	call	_lcd_clear_screen
 12619                           
 12620                           ; BSR set to: 1
 12621                           ;src/driver/lcd.c: 525:  print_string("AMSAT-DL  QO-100",0,0,0);
 12622  005D36  0E52               	movlw	low STR_85
 12623  005D38  0100               	movlb	0	; () banked
 12624  005D3A  6FB2               	movwf	print_string@s& (0+255),b
 12625  005D3C  0E7E               	movlw	high STR_85
 12626  005D3E  6FB3               	movwf	(print_string@s+1)& (0+255),b
 12627  005D40  0E00               	movlw	0
 12628  005D42  6FB4               	movwf	print_string@x& (0+255),b
 12629  005D44  0E00               	movlw	0
 12630  005D46  6FB5               	movwf	print_string@y& (0+255),b
 12631  005D48  0E00               	movlw	0
 12632  005D4A  6FB6               	movwf	print_string@underline& (0+255),b
 12633  005D4C  ECF0  F031         	call	_print_string	;wreg free
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;src/driver/lcd.c: 526:  print_string("Settings OK",0,2,0);
 12637  005D50  0E25               	movlw	low STR_86
 12638  005D52  6FB2               	movwf	print_string@s& (0+255),b
 12639  005D54  0E7F               	movlw	high STR_86
 12640  005D56  6FB3               	movwf	(print_string@s+1)& (0+255),b
 12641  005D58  0E00               	movlw	0
 12642  005D5A  6FB4               	movwf	print_string@x& (0+255),b
 12643  005D5C  0E02               	movlw	2
 12644  005D5E  6FB5               	movwf	print_string@y& (0+255),b
 12645  005D60  0E00               	movlw	0
 12646  005D62  6FB6               	movwf	print_string@underline& (0+255),b
 12647  005D64  ECF0  F031         	call	_print_string	;wreg free
 12648                           
 12649                           ; BSR set to: 0
 12650                           ;src/driver/lcd.c: 527:  print_string("Mode:",0,4,0);
 12651  005D68  0EB9               	movlw	low STR_87
 12652  005D6A  6FB2               	movwf	print_string@s& (0+255),b
 12653  005D6C  0E7F               	movlw	high STR_87
 12654  005D6E  6FB3               	movwf	(print_string@s+1)& (0+255),b
 12655  005D70  0E00               	movlw	0
 12656  005D72  6FB4               	movwf	print_string@x& (0+255),b
 12657  005D74  0E04               	movlw	4
 12658  005D76  6FB5               	movwf	print_string@y& (0+255),b
 12659  005D78  0E00               	movlw	0
 12660  005D7A  6FB6               	movwf	print_string@underline& (0+255),b
 12661  005D7C  ECF0  F031         	call	_print_string	;wreg free
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;src/driver/lcd.c: 528:  print_string(itoa(mode),8*7,4,0);
 12665  005D80  C0BA  F01A         	movff	lcd_settingsOK@mode,itoa@value
 12666  005D84  6A1B               	clrf	(itoa@value+1)^0,c
 12667  005D86  EC00  F033         	call	_itoa	;wreg free
 12668  005D8A  C01A  F0B2         	movff	?_itoa,print_string@s
 12669  005D8E  C01B  F0B3         	movff	?_itoa+1,print_string@s+1
 12670  005D92  0E38               	movlw	56
 12671  005D94  0100               	movlb	0	; () banked
 12672  005D96  6FB4               	movwf	print_string@x& (0+255),b
 12673  005D98  0E04               	movlw	4
 12674  005D9A  6FB5               	movwf	print_string@y& (0+255),b
 12675  005D9C  0E00               	movlw	0
 12676  005D9E  6FB6               	movwf	print_string@underline& (0+255),b
 12677  005DA0  ECF0  F031         	call	_print_string	;wreg free
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;src/driver/lcd.c: 529:  print_string("please",0,6,0);
 12681  005DA4  0E9F               	movlw	low STR_88
 12682  005DA6  6FB2               	movwf	print_string@s& (0+255),b
 12683  005DA8  0E7F               	movlw	high STR_88
 12684  005DAA  6FB3               	movwf	(print_string@s+1)& (0+255),b
 12685  005DAC  0E00               	movlw	0
 12686  005DAE  6FB4               	movwf	print_string@x& (0+255),b
 12687  005DB0  0E06               	movlw	6
 12688  005DB2  6FB5               	movwf	print_string@y& (0+255),b
 12689  005DB4  0E00               	movlw	0
 12690  005DB6  6FB6               	movwf	print_string@underline& (0+255),b
 12691  005DB8  ECF0  F031         	call	_print_string	;wreg free
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;src/driver/lcd.c: 530:  print_string("power OFF now",0,7,0);
 12695  005DBC  0EE2               	movlw	low STR_89
 12696  005DBE  6FB2               	movwf	print_string@s& (0+255),b
 12697  005DC0  0E7E               	movlw	high STR_89
 12698  005DC2  6FB3               	movwf	(print_string@s+1)& (0+255),b
 12699  005DC4  0E00               	movlw	0
 12700  005DC6  6FB4               	movwf	print_string@x& (0+255),b
 12701  005DC8  0E07               	movlw	7
 12702  005DCA  6FB5               	movwf	print_string@y& (0+255),b
 12703  005DCC  0E00               	movlw	0
 12704  005DCE  6FB6               	movwf	print_string@underline& (0+255),b
 12705  005DD0  ECF0  F031         	call	_print_string	;wreg free
 12706                           
 12707                           ; BSR set to: 0
 12708  005DD4  0012               	return		;funcret
 12709  005DD6                     __end_of_lcd_settingsOK:
 12710                           	opt callstack 0
 12711                           
 12712 ;; *************** function _itoa *****************
 12713 ;; Defined at:
 12714 ;;		line 506 in file "src/driver/lcd.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  value           2   25[COMRAM] int 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  c               1   27[COMRAM] unsigned char 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  2   25[COMRAM] PTR unsigned char 
 12721 ;; Registers used:
 12722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 3F/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12728 ;;      Params:         2       0       0       0       0       0       0
 12729 ;;      Locals:         1       0       0       0       0       0       0
 12730 ;;      Temps:          0       0       0       0       0       0       0
 12731 ;;      Totals:         3       0       0       0       0       0       0
 12732 ;;Total ram usage:        3 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    3
 12735 ;; This function calls:
 12736 ;;		___awdiv
 12737 ;;		___awmod
 12738 ;;		_memset
 12739 ;; This function is called by:
 12740 ;;		_show_display
 12741 ;;		_lcd_settingsOK
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           	psect	text30
 12746  006600                     __ptext30:
 12747                           	opt callstack 0
 12748  006600                     _itoa:
 12749                           	opt callstack 26
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;src/driver/lcd.c: 506: char *itoa(int value);src/driver/lcd.c: 507: {;src/driver/lcd.c:
      +                           508:  static char buffer[12];;src/driver/lcd.c: 509:  u8 c = sizeof(buffer)-1;
 12753                           
 12754                           ; BSR set to: 0
 12755                           ;incstack = 0
 12756  006600  0E0B               	movlw	11
 12757  006602  6E1C               	movwf	itoa@c^0,c
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;src/driver/lcd.c: 511:  memset(buffer,0,sizeof(buffer));
 12761  006604  0ED9               	movlw	low itoa@buffer
 12762  006606  6E0E               	movwf	memset@dest^0,c
 12763  006608  0E02               	movlw	high itoa@buffer
 12764  00660A  6E0F               	movwf	(memset@dest+1)^0,c
 12765  00660C  0E00               	movlw	0
 12766  00660E  6E11               	movwf	(memset@c+1)^0,c
 12767  006610  0E00               	movlw	0
 12768  006612  6E10               	movwf	memset@c^0,c
 12769  006614  0E00               	movlw	0
 12770  006616  6E13               	movwf	(memset@n+1)^0,c
 12771  006618  0E0C               	movlw	12
 12772  00661A  6E12               	movwf	memset@n^0,c
 12773  00661C  ECF4  F024         	call	_memset	;wreg free
 12774  006620                     l7353:
 12775                           
 12776                           ;src/driver/lcd.c: 514:  {;src/driver/lcd.c: 515:   buffer[--c] = (value % 10) + '0';
 12777  006620  061C               	decf	itoa@c^0,f,c
 12778  006622  0ED9               	movlw	low itoa@buffer
 12779  006624  241C               	addwf	itoa@c^0,w,c
 12780  006626  6ED9               	movwf	fsr2l,c
 12781  006628  6ADA               	clrf	fsr2h,c
 12782  00662A  0E02               	movlw	high itoa@buffer
 12783  00662C  22DA               	addwfc	fsr2h,f,c
 12784  00662E  C01A  F00E         	movff	itoa@value,___awmod@dividend
 12785  006632  C01B  F00F         	movff	itoa@value+1,___awmod@dividend+1
 12786  006636  0E00               	movlw	0
 12787  006638  6E11               	movwf	(___awmod@divisor+1)^0,c
 12788  00663A  0E0A               	movlw	10
 12789  00663C  6E10               	movwf	___awmod@divisor^0,c
 12790  00663E  ECEE  F033         	call	___awmod	;wreg free
 12791  006642  500E               	movf	?___awmod^0,w,c
 12792  006644  0F30               	addlw	48
 12793  006646  6EDF               	movwf	indf2,c
 12794                           
 12795                           ;src/driver/lcd.c: 516:   value /= 10;
 12796  006648  C01A  F00E         	movff	itoa@value,___awdiv@dividend
 12797  00664C  C01B  F00F         	movff	itoa@value+1,___awdiv@dividend+1
 12798  006650  0E00               	movlw	0
 12799  006652  6E11               	movwf	(___awdiv@divisor+1)^0,c
 12800  006654  0E0A               	movlw	10
 12801  006656  6E10               	movwf	___awdiv@divisor^0,c
 12802  006658  EC7D  F032         	call	___awdiv	;wreg free
 12803  00665C  C00E  F01A         	movff	?___awdiv,itoa@value
 12804  006660  C00F  F01B         	movff	?___awdiv+1,itoa@value+1
 12805                           
 12806                           ;src/driver/lcd.c: 517:  } while (value);
 12807  006664  501A               	movf	itoa@value^0,w,c
 12808  006666  101B               	iorwf	(itoa@value+1)^0,w,c
 12809  006668  A4D8               	btfss	status,2,c
 12810  00666A  D7DA               	goto	l7353
 12811                           
 12812                           ;src/driver/lcd.c: 519:  return &buffer[c];
 12813  00666C  0ED9               	movlw	low itoa@buffer
 12814  00666E  241C               	addwf	itoa@c^0,w,c
 12815  006670  6E1A               	movwf	?_itoa^0,c
 12816  006672  6A1B               	clrf	(?_itoa+1)^0,c
 12817  006674  0E02               	movlw	high itoa@buffer
 12818  006676  221B               	addwfc	(?_itoa+1)^0,f,c
 12819  006678  0012               	return		;funcret
 12820  00667A                     __end_of_itoa:
 12821                           	opt callstack 0
 12822                           
 12823 ;; *************** function ___awmod *****************
 12824 ;; Defined at:
 12825 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;  dividend        2   13[COMRAM] int 
 12828 ;;  divisor         2   15[COMRAM] int 
 12829 ;; Auto vars:     Size  Location     Type
 12830 ;;  sign            1   18[COMRAM] unsigned char 
 12831 ;;  counter         1   17[COMRAM] unsigned char 
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  2   13[COMRAM] int 
 12834 ;; Registers used:
 12835 ;;		wreg, status,2, status,0
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12841 ;;      Params:         4       0       0       0       0       0       0
 12842 ;;      Locals:         2       0       0       0       0       0       0
 12843 ;;      Temps:          0       0       0       0       0       0       0
 12844 ;;      Totals:         6       0       0       0       0       0       0
 12845 ;;Total ram usage:        6 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    2
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		_itoa
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           	psect	text31
 12856  0067DC                     __ptext31:
 12857                           	opt callstack 0
 12858  0067DC                     ___awmod:
 12859                           	opt callstack 26
 12860                           
 12861                           ;incstack = 0
 12862  0067DC  0E00               	movlw	0
 12863  0067DE  6E13               	movwf	___awmod@sign^0,c
 12864  0067E0  AE0F               	btfss	(___awmod@dividend+1)^0,7,c
 12865  0067E2  D006               	goto	l6839
 12866  0067E4  6C0E               	negf	___awmod@dividend^0,c
 12867  0067E6  1E0F               	comf	(___awmod@dividend+1)^0,f,c
 12868  0067E8  B0D8               	btfsc	status,0,c
 12869  0067EA  2A0F               	incf	(___awmod@dividend+1)^0,f,c
 12870  0067EC  0E01               	movlw	1
 12871  0067EE  6E13               	movwf	___awmod@sign^0,c
 12872  0067F0                     l6839:
 12873  0067F0  AE11               	btfss	(___awmod@divisor+1)^0,7,c
 12874  0067F2  D004               	goto	l6843
 12875  0067F4  6C10               	negf	___awmod@divisor^0,c
 12876  0067F6  1E11               	comf	(___awmod@divisor+1)^0,f,c
 12877  0067F8  B0D8               	btfsc	status,0,c
 12878  0067FA  2A11               	incf	(___awmod@divisor+1)^0,f,c
 12879  0067FC                     l6843:
 12880  0067FC  5010               	movf	___awmod@divisor^0,w,c
 12881  0067FE  1011               	iorwf	(___awmod@divisor+1)^0,w,c
 12882  006800  B4D8               	btfsc	status,2,c
 12883  006802  D018               	goto	l6859
 12884  006804  0E01               	movlw	1
 12885  006806  6E12               	movwf	___awmod@counter^0,c
 12886  006808  D004               	goto	l6849
 12887  00680A                     l6847:
 12888  00680A  90D8               	bcf	status,0,c
 12889  00680C  3610               	rlcf	___awmod@divisor^0,f,c
 12890  00680E  3611               	rlcf	(___awmod@divisor+1)^0,f,c
 12891  006810  2A12               	incf	___awmod@counter^0,f,c
 12892  006812                     l6849:
 12893  006812  AE11               	btfss	(___awmod@divisor+1)^0,7,c
 12894  006814  D7FA               	goto	l6847
 12895  006816                     u7100:
 12896  006816  5010               	movf	___awmod@divisor^0,w,c
 12897  006818  5C0E               	subwf	___awmod@dividend^0,w,c
 12898  00681A  5011               	movf	(___awmod@divisor+1)^0,w,c
 12899  00681C  580F               	subwfb	(___awmod@dividend+1)^0,w,c
 12900  00681E  A0D8               	btfss	status,0,c
 12901  006820  D004               	goto	l6855
 12902  006822  5010               	movf	___awmod@divisor^0,w,c
 12903  006824  5E0E               	subwf	___awmod@dividend^0,f,c
 12904  006826  5011               	movf	(___awmod@divisor+1)^0,w,c
 12905  006828  5A0F               	subwfb	(___awmod@dividend+1)^0,f,c
 12906  00682A                     l6855:
 12907  00682A  90D8               	bcf	status,0,c
 12908  00682C  3211               	rrcf	(___awmod@divisor+1)^0,f,c
 12909  00682E  3210               	rrcf	___awmod@divisor^0,f,c
 12910  006830  2E12               	decfsz	___awmod@counter^0,f,c
 12911  006832  D7F1               	goto	u7100
 12912  006834                     l6859:
 12913  006834  5013               	movf	___awmod@sign^0,w,c
 12914  006836  B4D8               	btfsc	status,2,c
 12915  006838  D004               	goto	l6863
 12916  00683A  6C0E               	negf	___awmod@dividend^0,c
 12917  00683C  1E0F               	comf	(___awmod@dividend+1)^0,f,c
 12918  00683E  B0D8               	btfsc	status,0,c
 12919  006840  2A0F               	incf	(___awmod@dividend+1)^0,f,c
 12920  006842                     l6863:
 12921  006842  C00E  F00E         	movff	___awmod@dividend,?___awmod
 12922  006846  C00F  F00F         	movff	___awmod@dividend+1,?___awmod+1
 12923  00684A  0012               	return		;funcret
 12924  00684C                     __end_of___awmod:
 12925                           	opt callstack 0
 12926                           
 12927 ;; *************** function ___awdiv *****************
 12928 ;; Defined at:
 12929 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  dividend        2   13[COMRAM] int 
 12932 ;;  divisor         2   15[COMRAM] int 
 12933 ;; Auto vars:     Size  Location     Type
 12934 ;;  quotient        2   19[COMRAM] int 
 12935 ;;  sign            1   18[COMRAM] unsigned char 
 12936 ;;  counter         1   17[COMRAM] unsigned char 
 12937 ;; Return value:  Size  Location     Type
 12938 ;;                  2   13[COMRAM] int 
 12939 ;; Registers used:
 12940 ;;		wreg, status,2, status,0
 12941 ;; Tracked objects:
 12942 ;;		On entry : 0/0
 12943 ;;		On exit  : 0/0
 12944 ;;		Unchanged: 0/0
 12945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12946 ;;      Params:         4       0       0       0       0       0       0
 12947 ;;      Locals:         4       0       0       0       0       0       0
 12948 ;;      Temps:          0       0       0       0       0       0       0
 12949 ;;      Totals:         8       0       0       0       0       0       0
 12950 ;;Total ram usage:        8 bytes
 12951 ;; Hardware stack levels used:    1
 12952 ;; Hardware stack levels required when called:    2
 12953 ;; This function calls:
 12954 ;;		Nothing
 12955 ;; This function is called by:
 12956 ;;		_itoa
 12957 ;; This function uses a non-reentrant model
 12958 ;;
 12959                           
 12960                           	psect	text32
 12961  0064FA                     __ptext32:
 12962                           	opt callstack 0
 12963  0064FA                     ___awdiv:
 12964                           	opt callstack 26
 12965                           
 12966                           ;incstack = 0
 12967  0064FA  0E00               	movlw	0
 12968  0064FC  6E13               	movwf	___awdiv@sign^0,c
 12969  0064FE  AE11               	btfss	(___awdiv@divisor+1)^0,7,c
 12970  006500  D006               	goto	l6795
 12971  006502  6C10               	negf	___awdiv@divisor^0,c
 12972  006504  1E11               	comf	(___awdiv@divisor+1)^0,f,c
 12973  006506  B0D8               	btfsc	status,0,c
 12974  006508  2A11               	incf	(___awdiv@divisor+1)^0,f,c
 12975  00650A  0E01               	movlw	1
 12976  00650C  6E13               	movwf	___awdiv@sign^0,c
 12977  00650E                     l6795:
 12978  00650E  AE0F               	btfss	(___awdiv@dividend+1)^0,7,c
 12979  006510  D006               	goto	l6801
 12980  006512  6C0E               	negf	___awdiv@dividend^0,c
 12981  006514  1E0F               	comf	(___awdiv@dividend+1)^0,f,c
 12982  006516  B0D8               	btfsc	status,0,c
 12983  006518  2A0F               	incf	(___awdiv@dividend+1)^0,f,c
 12984  00651A  0E01               	movlw	1
 12985  00651C  1A13               	xorwf	___awdiv@sign^0,f,c
 12986  00651E                     l6801:
 12987  00651E  0E00               	movlw	0
 12988  006520  6E15               	movwf	(___awdiv@quotient+1)^0,c
 12989  006522  0E00               	movlw	0
 12990  006524  6E14               	movwf	___awdiv@quotient^0,c
 12991  006526  5010               	movf	___awdiv@divisor^0,w,c
 12992  006528  1011               	iorwf	(___awdiv@divisor+1)^0,w,c
 12993  00652A  B4D8               	btfsc	status,2,c
 12994  00652C  D01C               	goto	l6823
 12995  00652E  0E01               	movlw	1
 12996  006530  6E12               	movwf	___awdiv@counter^0,c
 12997  006532  D004               	goto	l6809
 12998  006534                     l6807:
 12999  006534  90D8               	bcf	status,0,c
 13000  006536  3610               	rlcf	___awdiv@divisor^0,f,c
 13001  006538  3611               	rlcf	(___awdiv@divisor+1)^0,f,c
 13002  00653A  2A12               	incf	___awdiv@counter^0,f,c
 13003  00653C                     l6809:
 13004  00653C  AE11               	btfss	(___awdiv@divisor+1)^0,7,c
 13005  00653E  D7FA               	goto	l6807
 13006  006540                     u7040:
 13007  006540  90D8               	bcf	status,0,c
 13008  006542  3614               	rlcf	___awdiv@quotient^0,f,c
 13009  006544  3615               	rlcf	(___awdiv@quotient+1)^0,f,c
 13010  006546  5010               	movf	___awdiv@divisor^0,w,c
 13011  006548  5C0E               	subwf	___awdiv@dividend^0,w,c
 13012  00654A  5011               	movf	(___awdiv@divisor+1)^0,w,c
 13013  00654C  580F               	subwfb	(___awdiv@dividend+1)^0,w,c
 13014  00654E  A0D8               	btfss	status,0,c
 13015  006550  D005               	goto	l6819
 13016  006552  5010               	movf	___awdiv@divisor^0,w,c
 13017  006554  5E0E               	subwf	___awdiv@dividend^0,f,c
 13018  006556  5011               	movf	(___awdiv@divisor+1)^0,w,c
 13019  006558  5A0F               	subwfb	(___awdiv@dividend+1)^0,f,c
 13020  00655A  8014               	bsf	___awdiv@quotient^0,0,c
 13021  00655C                     l6819:
 13022  00655C  90D8               	bcf	status,0,c
 13023  00655E  3211               	rrcf	(___awdiv@divisor+1)^0,f,c
 13024  006560  3210               	rrcf	___awdiv@divisor^0,f,c
 13025  006562  2E12               	decfsz	___awdiv@counter^0,f,c
 13026  006564  D7ED               	goto	u7040
 13027  006566                     l6823:
 13028  006566  5013               	movf	___awdiv@sign^0,w,c
 13029  006568  B4D8               	btfsc	status,2,c
 13030  00656A  D004               	goto	l6827
 13031  00656C  6C14               	negf	___awdiv@quotient^0,c
 13032  00656E  1E15               	comf	(___awdiv@quotient+1)^0,f,c
 13033  006570  B0D8               	btfsc	status,0,c
 13034  006572  2A15               	incf	(___awdiv@quotient+1)^0,f,c
 13035  006574                     l6827:
 13036  006574  C014  F00E         	movff	___awdiv@quotient,?___awdiv
 13037  006578  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
 13038  00657C  0012               	return		;funcret
 13039  00657E                     __end_of___awdiv:
 13040                           	opt callstack 0
 13041                           
 13042 ;; *************** function _eeprom_setmode *****************
 13043 ;; Defined at:
 13044 ;;		line 104 in file "src/eeprom.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  mode            1    wreg     unsigned char 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  mode            1   16[COMRAM] unsigned char 
 13049 ;; Return value:  Size  Location     Type
 13050 ;;                  1    wreg      void 
 13051 ;; Registers used:
 13052 ;;		wreg, status,2, status,0, cstack
 13053 ;; Tracked objects:
 13054 ;;		On entry : 3F/0
 13055 ;;		On exit  : 0/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13058 ;;      Params:         0       0       0       0       0       0       0
 13059 ;;      Locals:         1       0       0       0       0       0       0
 13060 ;;      Temps:          0       0       0       0       0       0       0
 13061 ;;      Totals:         1       0       0       0       0       0       0
 13062 ;;Total ram usage:        1 bytes
 13063 ;; Hardware stack levels used:    1
 13064 ;; Hardware stack levels required when called:    3
 13065 ;; This function calls:
 13066 ;;		_Eeprom_WriteByte
 13067 ;; This function is called by:
 13068 ;;		_secret_settings_write
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           	psect	text33
 13073  0074DE                     __ptext33:
 13074                           	opt callstack 0
 13075  0074DE                     _eeprom_setmode:
 13076                           	opt callstack 25
 13077                           
 13078                           ;incstack = 0
 13079                           ;eeprom_setmode@mode stored from wreg
 13080  0074DE  6E11               	movwf	eeprom_setmode@mode^0,c
 13081                           
 13082                           ;src/eeprom.c: 104: void eeprom_setmode(u8 mode);src/eeprom.c: 105: {;src/eeprom.c: 106:
      +                            Eeprom_WriteByte(200,mode);
 13083  0074E0  C011  F00E         	movff	eeprom_setmode@mode,Eeprom_WriteByte@data
 13084  0074E4  0EC8               	movlw	200
 13085  0074E6  EC64  F038         	call	_Eeprom_WriteByte
 13086  0074EA  0012               	return		;funcret
 13087  0074EC                     __end_of_eeprom_setmode:
 13088                           	opt callstack 0
 13089                           
 13090 ;; *************** function _Eeprom_WriteByte *****************
 13091 ;; Defined at:
 13092 ;;		line 63 in file "src/eeprom.c"
 13093 ;; Parameters:    Size  Location     Type
 13094 ;;  address         1    wreg     unsigned char 
 13095 ;;  data            1   13[COMRAM] unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  address         1   14[COMRAM] unsigned char 
 13098 ;;  to              1   15[COMRAM] unsigned char 
 13099 ;; Return value:  Size  Location     Type
 13100 ;;                  1    wreg      void 
 13101 ;; Registers used:
 13102 ;;		wreg, status,2, status,0
 13103 ;; Tracked objects:
 13104 ;;		On entry : 0/0
 13105 ;;		On exit  : 0/0
 13106 ;;		Unchanged: 0/0
 13107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13108 ;;      Params:         1       0       0       0       0       0       0
 13109 ;;      Locals:         2       0       0       0       0       0       0
 13110 ;;      Temps:          0       0       0       0       0       0       0
 13111 ;;      Totals:         3       0       0       0       0       0       0
 13112 ;;Total ram usage:        3 bytes
 13113 ;; Hardware stack levels used:    1
 13114 ;; Hardware stack levels required when called:    2
 13115 ;; This function calls:
 13116 ;;		Nothing
 13117 ;; This function is called by:
 13118 ;;		_eeprom_setmode
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           	psect	text34
 13123  0070C8                     __ptext34:
 13124                           	opt callstack 0
 13125  0070C8                     _Eeprom_WriteByte:
 13126                           	opt callstack 25
 13127                           
 13128                           ;incstack = 0
 13129                           ;Eeprom_WriteByte@address stored from wreg
 13130  0070C8  6E0F               	movwf	Eeprom_WriteByte@address^0,c
 13131                           
 13132                           ;src/eeprom.c: 63: void Eeprom_WriteByte(u8 address, u8 data);src/eeprom.c: 64: {;src/ee
      +                          prom.c: 66:     EEADR = address;
 13133  0070CA  C00F  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
 13134                           
 13135                           ;src/eeprom.c: 68:     EEDATA = data;
 13136  0070CE  C00E  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
 13137                           
 13138                           ;src/eeprom.c: 69:     EECON1bits.EEPGD = 0;
 13139  0070D2  9EA6               	bcf	166,7,c	;volsfr
 13140                           
 13141                           ;src/eeprom.c: 70:     EECON1bits.CFGS = 0;
 13142  0070D4  9CA6               	bcf	166,6,c	;volsfr
 13143                           
 13144                           ;src/eeprom.c: 71:     EECON1bits.WREN = 1;
 13145  0070D6  84A6               	bsf	166,2,c	;volsfr
 13146                           
 13147                           ;src/eeprom.c: 75:     EECON2 = 0x55;
 13148  0070D8  0E55               	movlw	85
 13149  0070DA  6EA7               	movwf	167,c	;volsfr
 13150                           
 13151                           ;src/eeprom.c: 76:     EECON2 = 0xAA;
 13152  0070DC  0EAA               	movlw	170
 13153  0070DE  6EA7               	movwf	167,c	;volsfr
 13154                           
 13155                           ;src/eeprom.c: 77:     EECON1bits.WR = 1;
 13156  0070E0  82A6               	bsf	166,1,c	;volsfr
 13157                           
 13158                           ;src/eeprom.c: 80:  u8 to = 0;
 13159  0070E2  0E00               	movlw	0
 13160  0070E4  6E10               	movwf	Eeprom_WriteByte@to^0,c
 13161                           
 13162                           ;src/eeprom.c: 81:     while(PIR2bits.EEIF == 0)
 13163  0070E6  D008               	goto	l1279
 13164  0070E8                     l7409:
 13165                           
 13166                           ;src/eeprom.c: 82:     {;src/eeprom.c: 83:   _delaywdt((unsigned long)((10)*(8000000/400
      +                          0000.0)));
 13167  0070E8  0E05               	movlw	5
 13168  0070EA                     u14997:
 13169  0070EA  0004               	clrwdt	
 13170  0070EC  2EE8               	decfsz	wreg,f,c
 13171  0070EE  D7FD               	bra	u14997
 13172                           
 13173                           ;src/eeprom.c: 84:         if(++to == 255) break;
 13174  0070F0  2A10               	incf	Eeprom_WriteByte@to^0,f,c
 13175  0070F2  2810               	incf	Eeprom_WriteByte@to^0,w,c
 13176  0070F4  B4D8               	btfsc	status,2,c
 13177  0070F6  D002               	goto	u8170
 13178  0070F8                     l1279:
 13179                           
 13180                           ;src/eeprom.c: 81:     while(PIR2bits.EEIF == 0)
 13181  0070F8  A8A1               	btfss	161,4,c	;volatile
 13182  0070FA  D7F6               	goto	l7409
 13183  0070FC                     u8170:
 13184                           
 13185                           ;src/eeprom.c: 87:     PIR2bits.EEIF = 0;
 13186  0070FC  98A1               	bcf	161,4,c	;volatile
 13187                           
 13188                           ;src/eeprom.c: 88:     EECON1bits.WREN = 0;
 13189  0070FE  94A6               	bcf	166,2,c	;volsfr
 13190  007100  0012               	return		;funcret
 13191  007102                     __end_of_Eeprom_WriteByte:
 13192                           	opt callstack 0
 13193                           
 13194 ;; *************** function _eeprom_getmode *****************
 13195 ;; Defined at:
 13196 ;;		line 109 in file "src/eeprom.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;		None
 13199 ;; Auto vars:     Size  Location     Type
 13200 ;;		None
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  1    wreg      unsigned char 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2, status,0, cstack
 13205 ;; Tracked objects:
 13206 ;;		On entry : 3F/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13210 ;;      Params:         0       0       0       0       0       0       0
 13211 ;;      Locals:         0       0       0       0       0       0       0
 13212 ;;      Temps:          0       0       0       0       0       0       0
 13213 ;;      Totals:         0       0       0       0       0       0       0
 13214 ;;Total ram usage:        0 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    3
 13217 ;; This function calls:
 13218 ;;		_Eeprom_ReadByte
 13219 ;; This function is called by:
 13220 ;;		_secret_settings
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           	psect	text35
 13225  007504                     __ptext35:
 13226                           	opt callstack 0
 13227  007504                     _eeprom_getmode:
 13228                           	opt callstack 26
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;src/eeprom.c: 111:  return Eeprom_ReadByte(200);
 13232                           
 13233                           ;incstack = 0
 13234  007504  0EC8               	movlw	200
 13235  007506  EC10  F03A         	call	_Eeprom_ReadByte
 13236  00750A  0012               	return		;funcret
 13237  00750C                     __end_of_eeprom_getmode:
 13238                           	opt callstack 0
 13239                           
 13240 ;; *************** function _Eeprom_ReadByte *****************
 13241 ;; Defined at:
 13242 ;;		line 36 in file "src/eeprom.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  address         1    wreg     unsigned char 
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;  address         1   13[COMRAM] unsigned char 
 13247 ;;  to              1   14[COMRAM] unsigned char 
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  1    wreg      unsigned char 
 13250 ;; Registers used:
 13251 ;;		wreg, status,2, status,0
 13252 ;; Tracked objects:
 13253 ;;		On entry : 3F/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13257 ;;      Params:         0       0       0       0       0       0       0
 13258 ;;      Locals:         2       0       0       0       0       0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0
 13260 ;;      Totals:         2       0       0       0       0       0       0
 13261 ;;Total ram usage:        2 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:    2
 13264 ;; This function calls:
 13265 ;;		Nothing
 13266 ;; This function is called by:
 13267 ;;		_eeprom_getmode
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text36
 13272  007420                     __ptext36:
 13273                           	opt callstack 0
 13274  007420                     _Eeprom_ReadByte:
 13275                           	opt callstack 26
 13276                           
 13277                           ;incstack = 0
 13278                           ;Eeprom_ReadByte@address stored from wreg
 13279  007420  6E0E               	movwf	Eeprom_ReadByte@address^0,c
 13280                           
 13281                           ;src/eeprom.c: 36: u8 Eeprom_ReadByte(u8 address);src/eeprom.c: 37: {;src/eeprom.c: 40: 
      +                              EEADR = address;
 13282  007422  C00E  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
 13283                           
 13284                           ;src/eeprom.c: 42:     EECON1bits.EEPGD = 0;
 13285  007426  9EA6               	bcf	166,7,c	;volsfr
 13286                           
 13287                           ;src/eeprom.c: 43:     EECON1bits.CFGS = 0;
 13288  007428  9CA6               	bcf	166,6,c	;volsfr
 13289                           
 13290                           ;src/eeprom.c: 44:     EECON1bits.RD = 1;
 13291  00742A  80A6               	bsf	166,0,c	;volsfr
 13292                           
 13293                           ;src/eeprom.c: 48:  u8 to = 0;
 13294  00742C  0E00               	movlw	0
 13295  00742E  6E0F               	movwf	Eeprom_ReadByte@to^0,c
 13296                           
 13297                           ;src/eeprom.c: 49:     while(EECON1bits.RD == 1)
 13298  007430  D004               	goto	l1272
 13299  007432                     l7685:
 13300                           
 13301                           ;src/eeprom.c: 50:  {;src/eeprom.c: 51:   if(++to == 255) break;
 13302  007432  2A0F               	incf	Eeprom_ReadByte@to^0,f,c
 13303  007434  280F               	incf	Eeprom_ReadByte@to^0,w,c
 13304  007436  B4D8               	btfsc	status,2,c
 13305  007438  D002               	goto	u8500
 13306  00743A                     l1272:
 13307                           
 13308                           ;src/eeprom.c: 49:     while(EECON1bits.RD == 1)
 13309  00743A  B0A6               	btfsc	166,0,c	;volsfr
 13310  00743C  D7FA               	goto	l7685
 13311  00743E                     u8500:
 13312                           
 13313                           ;src/eeprom.c: 54:     return EEDATA;
 13314  00743E  50A8               	movf	168,w,c	;volatile
 13315  007440  0012               	return		;funcret
 13316  007442                     __end_of_Eeprom_ReadByte:
 13317                           	opt callstack 0
 13318                           
 13319 ;; *************** function _clear_GPS_shift *****************
 13320 ;; Defined at:
 13321 ;;		line 298 in file "src/gps.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;		None
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;  idx             1   13[COMRAM] unsigned char 
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      void 
 13328 ;; Registers used:
 13329 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13330 ;; Tracked objects:
 13331 ;;		On entry : 3F/0
 13332 ;;		On exit  : 3F/2
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13335 ;;      Params:         0       0       0       0       0       0       0
 13336 ;;      Locals:         1       0       0       0       0       0       0
 13337 ;;      Temps:          0       0       0       0       0       0       0
 13338 ;;      Totals:         1       0       0       0       0       0       0
 13339 ;;Total ram usage:        1 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    2
 13342 ;; This function calls:
 13343 ;;		Nothing
 13344 ;; This function is called by:
 13345 ;;		_secret_settings
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           	psect	text37
 13350  006E04                     __ptext37:
 13351                           	opt callstack 0
 13352  006E04                     _clear_GPS_shift:
 13353                           	opt callstack 27
 13354                           
 13355                           ; BSR set to: 0
 13356                           ;src/gps.c: 300:  u8 idx = 12;
 13357                           
 13358                           ;incstack = 0
 13359  006E04  0E0C               	movlw	12
 13360  006E06  6E0E               	movwf	clear_GPS_shift@idx^0,c
 13361                           
 13362                           ; BSR set to: 0
 13363                           ;src/gps.c: 301:  gps_config_data[idx++] = (u8)(19000000 & 0xff);
 13364  006E08  0EC0               	movlw	192
 13365  006E0A  0102               	movlb	2	; () banked
 13366  006E0C  6F26               	movwf	(_gps_config_data+12)& (0+255),b
 13367                           
 13368                           ; BSR set to: 2
 13369  006E0E  2A0E               	incf	clear_GPS_shift@idx^0,f,c
 13370                           
 13371                           ; BSR set to: 2
 13372                           ;src/gps.c: 302:  gps_config_data[idx++] = (u8)((19000000>>8)&0xff);
 13373  006E10  0E1A               	movlw	low _gps_config_data
 13374  006E12  240E               	addwf	clear_GPS_shift@idx^0,w,c
 13375  006E14  6ED9               	movwf	fsr2l,c
 13376  006E16  6ADA               	clrf	fsr2h,c
 13377  006E18  0E02               	movlw	high _gps_config_data
 13378  006E1A  22DA               	addwfc	fsr2h,f,c
 13379  006E1C  0EEA               	movlw	234
 13380  006E1E  6EDF               	movwf	indf2,c
 13381                           
 13382                           ; BSR set to: 2
 13383  006E20  2A0E               	incf	clear_GPS_shift@idx^0,f,c
 13384                           
 13385                           ; BSR set to: 2
 13386                           ;src/gps.c: 303:  gps_config_data[idx++] = (u8)((19000000>>16)&0xff);
 13387  006E22  0E1A               	movlw	low _gps_config_data
 13388  006E24  240E               	addwf	clear_GPS_shift@idx^0,w,c
 13389  006E26  6ED9               	movwf	fsr2l,c
 13390  006E28  6ADA               	clrf	fsr2h,c
 13391  006E2A  0E02               	movlw	high _gps_config_data
 13392  006E2C  22DA               	addwfc	fsr2h,f,c
 13393  006E2E  0E21               	movlw	33
 13394  006E30  6EDF               	movwf	indf2,c
 13395                           
 13396                           ; BSR set to: 2
 13397  006E32  2A0E               	incf	clear_GPS_shift@idx^0,f,c
 13398                           
 13399                           ; BSR set to: 2
 13400                           ;src/gps.c: 304:  gps_config_data[idx++] = (u8)((19000000>>24)&0xff);
 13401  006E34  0E1A               	movlw	low _gps_config_data
 13402  006E36  240E               	addwf	clear_GPS_shift@idx^0,w,c
 13403  006E38  6ED9               	movwf	fsr2l,c
 13404  006E3A  6ADA               	clrf	fsr2h,c
 13405  006E3C  0E02               	movlw	high _gps_config_data
 13406  006E3E  22DA               	addwfc	fsr2h,f,c
 13407  006E40  0E01               	movlw	1
 13408  006E42  6EDF               	movwf	indf2,c
 13409                           
 13410                           ; BSR set to: 2
 13411  006E44  2A0E               	incf	clear_GPS_shift@idx^0,f,c
 13412                           
 13413                           ; BSR set to: 2
 13414  006E46  0012               	return		;funcret
 13415  006E48                     __end_of_clear_GPS_shift:
 13416                           	opt callstack 0
 13417                           
 13418 ;; *************** function _rx_usart *****************
 13419 ;; Defined at:
 13420 ;;		line 121 in file "src/driver/usart.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;		None
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  c               2   79[COMRAM] int 
 13425 ;; Return value:  Size  Location     Type
 13426 ;;                  1    wreg      void 
 13427 ;; Registers used:
 13428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13429 ;; Tracked objects:
 13430 ;;		On entry : 3F/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13434 ;;      Params:         0       0       0       0       0       0       0
 13435 ;;      Locals:         2       0       0       0       0       0       0
 13436 ;;      Temps:          0       0       0       0       0       0       0
 13437 ;;      Totals:         2       0       0       0       0       0       0
 13438 ;;Total ram usage:        2 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:    8
 13441 ;; This function calls:
 13442 ;;		_rx_gps
 13443 ;;		_usart_getc
 13444 ;; This function is called by:
 13445 ;;		_main
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           	psect	text38
 13450  0073D8                     __ptext38:
 13451                           	opt callstack 0
 13452  0073D8                     _rx_usart:
 13453                           	opt callstack 22
 13454                           
 13455                           ;src/driver/usart.c: 126:  {;src/driver/usart.c: 127:   c = usart_getc();
 13456                           
 13457                           ; BSR set to: 0
 13458                           
 13459                           ; BSR set to: 2
 13460                           ;incstack = 0
 13461                           ;src/driver/usart.c: 123:  int c;;src/driver/usart.c: 125:  while(1)
 13462  0073D8  ECD1  F035         	call	_usart_getc	;wreg free
 13463  0073DC  C00E  F050         	movff	?_usart_getc,rx_usart@c
 13464  0073E0  C00F  F051         	movff	?_usart_getc+1,rx_usart@c+1
 13465                           
 13466                           ;src/driver/usart.c: 128:   if(c == -1) return;
 13467  0073E4  2850               	incf	rx_usart@c^0,w,c
 13468  0073E6  E103               	bnz	l11323
 13469  0073E8  2851               	incf	(rx_usart@c+1)^0,w,c
 13470  0073EA  B4D8               	btfsc	status,2,c
 13471  0073EC  0012               	return	
 13472  0073EE                     l11323:
 13473                           
 13474                           ;src/driver/usart.c: 129:   rx_gps(c);
 13475  0073EE  C050  F04C         	movff	rx_usart@c,rx_gps@c
 13476  0073F2  C051  F04D         	movff	rx_usart@c+1,rx_gps@c+1
 13477  0073F6  EC24  F01B         	call	_rx_gps	;wreg free
 13478  0073FA  D7EE               	goto	_rx_usart
 13479  0073FC                     __end_of_rx_usart:
 13480                           	opt callstack 0
 13481                           
 13482 ;; *************** function _usart_getc *****************
 13483 ;; Defined at:
 13484 ;;		line 68 in file "src/driver/usart.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;		None
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;  res             2   17[COMRAM] int 
 13489 ;; Return value:  Size  Location     Type
 13490 ;;                  2   13[COMRAM] int 
 13491 ;; Registers used:
 13492 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13493 ;; Tracked objects:
 13494 ;;		On entry : 3C/0
 13495 ;;		On exit  : 0/0
 13496 ;;		Unchanged: 0/0
 13497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13498 ;;      Params:         2       0       0       0       0       0       0
 13499 ;;      Locals:         2       0       0       0       0       0       0
 13500 ;;      Temps:          2       0       0       0       0       0       0
 13501 ;;      Totals:         6       0       0       0       0       0       0
 13502 ;;Total ram usage:        6 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; Hardware stack levels required when called:    2
 13505 ;; This function calls:
 13506 ;;		Nothing
 13507 ;; This function is called by:
 13508 ;;		_rx_usart
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           	psect	text39
 13513  006BA2                     __ptext39:
 13514                           	opt callstack 0
 13515  006BA2                     _usart_getc:
 13516                           	opt callstack 27
 13517                           
 13518                           ;incstack = 0
 13519  006BA2  0004               	clrwdt		;# 
 13520                           
 13521                           ;src/driver/usart.c: 74:  PIE1bits.RCIE = 0;
 13522  006BA4  9A9D               	bcf	157,5,c	;volatile
 13523                           
 13524                           ;src/driver/usart.c: 76:  if(g_usart_wpos == g_usart_rpos)
 13525  006BA6  506B               	movf	_g_usart_rpos^0,w,c	;volatile
 13526  006BA8  1869               	xorwf	_g_usart_wpos^0,w,c	;volatile
 13527  006BAA  E108               	bnz	l7873
 13528  006BAC  506C               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
 13529  006BAE  186A               	xorwf	(_g_usart_wpos+1)^0,w,c	;volatile
 13530  006BB0  A4D8               	btfss	status,2,c
 13531  006BB2  D004               	goto	l7873
 13532                           
 13533                           ;src/driver/usart.c: 77:  {;src/driver/usart.c: 78:   PIE1bits.RCIE = 1;
 13534  006BB4  8A9D               	bsf	157,5,c	;volatile
 13535                           
 13536                           ;src/driver/usart.c: 79:   return -1;
 13537  006BB6  680E               	setf	?_usart_getc^0,c
 13538  006BB8  680F               	setf	(?_usart_getc+1)^0,c
 13539  006BBA  0012               	return	
 13540  006BBC                     l7873:
 13541                           
 13542                           ;src/driver/usart.c: 83:  res = g_usart_buf[g_usart_rpos];
 13543  006BBC  0E00               	movlw	low _g_usart_buf
 13544  006BBE  246B               	addwf	_g_usart_rpos^0,w,c	;volatile
 13545  006BC0  6ED9               	movwf	fsr2l,c
 13546  006BC2  0E04               	movlw	high _g_usart_buf
 13547  006BC4  206C               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
 13548  006BC6  6EDA               	movwf	fsr2h,c
 13549  006BC8  50DF               	movf	indf2,w,c
 13550  006BCA  6E10               	movwf	??_usart_getc^0,c
 13551  006BCC  5010               	movf	??_usart_getc^0,w,c
 13552  006BCE  6E12               	movwf	usart_getc@res^0,c
 13553  006BD0  6A13               	clrf	(usart_getc@res+1)^0,c
 13554                           
 13555                           ;src/driver/usart.c: 84:  g_usart_rpos = (g_usart_rpos+1) % sizeof(g_usart_buf);
 13556  006BD2  0E01               	movlw	1
 13557  006BD4  246B               	addwf	_g_usart_rpos^0,w,c	;volatile
 13558  006BD6  6E10               	movwf	??_usart_getc^0,c
 13559  006BD8  0E00               	movlw	0
 13560  006BDA  206C               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
 13561  006BDC  6E11               	movwf	(??_usart_getc+1)^0,c
 13562  006BDE  0E7F               	movlw	127
 13563  006BE0  1410               	andwf	??_usart_getc^0,w,c
 13564  006BE2  6E6B               	movwf	_g_usart_rpos^0,c	;volatile
 13565  006BE4  6A6C               	clrf	(_g_usart_rpos+1)^0,c	;volatile
 13566                           
 13567                           ;src/driver/usart.c: 86:  PIE1bits.RCIE = 1;
 13568  006BE6  8A9D               	bsf	157,5,c	;volatile
 13569                           
 13570                           ;src/driver/usart.c: 87:  return res;
 13571  006BE8  C012  F00E         	movff	usart_getc@res,?_usart_getc
 13572  006BEC  C013  F00F         	movff	usart_getc@res+1,?_usart_getc+1
 13573  006BF0  0012               	return		;funcret
 13574  006BF2                     __end_of_usart_getc:
 13575                           	opt callstack 0
 13576                           
 13577 ;; *************** function _rx_gps *****************
 13578 ;; Defined at:
 13579 ;;		line 130 in file "src/gps.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;  c               2   75[COMRAM] int 
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;		None
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  1    wreg      void 
 13586 ;; Registers used:
 13587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 3C/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13593 ;;      Params:         2       0       0       0       0       0       0
 13594 ;;      Locals:         0       0       0       0       0       0       0
 13595 ;;      Temps:          2       0       0       0       0       0       0
 13596 ;;      Totals:         4       0       0       0       0       0       0
 13597 ;;Total ram usage:        4 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    7
 13600 ;; This function calls:
 13601 ;;		_eval_gps
 13602 ;; This function is called by:
 13603 ;;		_rx_usart
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           	psect	text40
 13608  003648                     __ptext40:
 13609                           	opt callstack 0
 13610  003648                     _rx_gps:
 13611                           	opt callstack 22
 13612                           
 13613                           ;src/gps.c: 130: void rx_gps(int c);src/gps.c: 131: {;src/gps.c: 132: static u8 stat = 0
      +                          ;;src/gps.c: 133: static u16 len_lsb;;src/gps.c: 135:  switch(stat)
 13614                           
 13615                           ;incstack = 0
 13616  003648  D0E2               	goto	l10995
 13617  00364A                     l10883:
 13618                           
 13619                           ; BSR set to: 1
 13620                           ;src/gps.c: 138:   if(c == 0xb5)
 13621  00364A  0EB5               	movlw	181
 13622  00364C  184C               	xorwf	rx_gps@c^0,w,c
 13623  00364E  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13624  003650  B4D8               	btfsc	status,2,c
 13625                           
 13626                           ; BSR set to: 1
 13627                           ;src/gps.c: 139:   {;src/gps.c: 140:    stat++;
 13628  003652  2BFA               	incf	rx_gps@stat& (0+255),f,b
 13629                           
 13630                           ; BSR set to: 1
 13631                           ;src/gps.c: 142:   if(c == '$')
 13632  003654  0E24               	movlw	36
 13633  003656  184C               	xorwf	rx_gps@c^0,w,c
 13634  003658  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13635  00365A  A4D8               	btfss	status,2,c
 13636  00365C  0012               	return	
 13637                           
 13638                           ; BSR set to: 1
 13639                           ;src/gps.c: 143:   {;src/gps.c: 144:    gpsbufidx = 0;
 13640  00365E  0E00               	movlw	0
 13641  003660  6E71               	movwf	_gpsbufidx^0,c
 13642                           
 13643                           ;src/gps.c: 145:    stat = 100;
 13644  003662  0E64               	movlw	100
 13645  003664  6FFA               	movwf	rx_gps@stat& (0+255),b
 13646  003666  0012               	return	
 13647  003668                     l10891:
 13648                           
 13649                           ; BSR set to: 1
 13650                           ;src/gps.c: 150:   if(c == 0x62)
 13651  003668  0E62               	movlw	98
 13652  00366A  184C               	xorwf	rx_gps@c^0,w,c
 13653  00366C  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13654  00366E  A4D8               	btfss	status,2,c
 13655  003670  D002               	goto	l10895
 13656  003672                     u13580:
 13657                           
 13658                           ; BSR set to: 1
 13659                           ;src/gps.c: 151:    stat++;
 13660  003672  2BFA               	incf	rx_gps@stat& (0+255),f,b
 13661  003674  0012               	return	
 13662  003676                     l10895:
 13663                           
 13664                           ;src/gps.c: 153:    stat = 0;
 13665  003676  0E00               	movlw	0
 13666  003678  0101               	movlb	1	; () banked
 13667  00367A  6FFA               	movwf	rx_gps@stat& (0+255),b
 13668  00367C  0012               	return	
 13669  00367E                     l825:
 13670                           
 13671                           ; BSR set to: 1
 13672                           ;src/gps.c: 157:   ubx_class = c;
 13673  00367E  C04C  F1FB         	movff	rx_gps@c,_ubx_class
 13674                           
 13675                           ; BSR set to: 1
 13676                           ;src/gps.c: 158:   if(c==1 || c==2 || c==4 || c==5 || c==6 || c==9 || c==0x0a || c==0x0b
      +                           || c==0x0d || c==0x10 || c==0x13 || c==0x21 || c==0x27 || c==0x28)
 13677  003682  044C               	decf	rx_gps@c^0,w,c
 13678  003684  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13679  003686  B4D8               	btfsc	status,2,c
 13680  003688  D7F4               	goto	u13580
 13681                           
 13682                           ; BSR set to: 1
 13683  00368A  0E02               	movlw	2
 13684  00368C  184C               	xorwf	rx_gps@c^0,w,c
 13685  00368E  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13686  003690  B4D8               	btfsc	status,2,c
 13687  003692  D7EF               	goto	u13580
 13688                           
 13689                           ; BSR set to: 1
 13690  003694  0E04               	movlw	4
 13691  003696  184C               	xorwf	rx_gps@c^0,w,c
 13692  003698  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13693  00369A  B4D8               	btfsc	status,2,c
 13694  00369C  D7EA               	goto	u13580
 13695                           
 13696                           ; BSR set to: 1
 13697  00369E  0E05               	movlw	5
 13698  0036A0  184C               	xorwf	rx_gps@c^0,w,c
 13699  0036A2  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13700  0036A4  B4D8               	btfsc	status,2,c
 13701  0036A6  D7E5               	goto	u13580
 13702                           
 13703                           ; BSR set to: 1
 13704  0036A8  0E06               	movlw	6
 13705  0036AA  184C               	xorwf	rx_gps@c^0,w,c
 13706  0036AC  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13707  0036AE  B4D8               	btfsc	status,2,c
 13708  0036B0  D7E0               	goto	u13580
 13709                           
 13710                           ; BSR set to: 1
 13711  0036B2  0E09               	movlw	9
 13712  0036B4  184C               	xorwf	rx_gps@c^0,w,c
 13713  0036B6  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13714  0036B8  B4D8               	btfsc	status,2,c
 13715  0036BA  D7DB               	goto	u13580
 13716                           
 13717                           ; BSR set to: 1
 13718  0036BC  0E0A               	movlw	10
 13719  0036BE  184C               	xorwf	rx_gps@c^0,w,c
 13720  0036C0  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13721  0036C2  B4D8               	btfsc	status,2,c
 13722  0036C4  D7D6               	goto	u13580
 13723                           
 13724                           ; BSR set to: 1
 13725  0036C6  0E0B               	movlw	11
 13726  0036C8  184C               	xorwf	rx_gps@c^0,w,c
 13727  0036CA  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13728  0036CC  B4D8               	btfsc	status,2,c
 13729  0036CE  D7D1               	goto	u13580
 13730                           
 13731                           ; BSR set to: 1
 13732  0036D0  0E0D               	movlw	13
 13733  0036D2  184C               	xorwf	rx_gps@c^0,w,c
 13734  0036D4  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13735  0036D6  B4D8               	btfsc	status,2,c
 13736  0036D8  D7CC               	goto	u13580
 13737                           
 13738                           ; BSR set to: 1
 13739  0036DA  0E10               	movlw	16
 13740  0036DC  184C               	xorwf	rx_gps@c^0,w,c
 13741  0036DE  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13742  0036E0  B4D8               	btfsc	status,2,c
 13743  0036E2  D7C7               	goto	u13580
 13744                           
 13745                           ; BSR set to: 1
 13746  0036E4  0E13               	movlw	19
 13747  0036E6  184C               	xorwf	rx_gps@c^0,w,c
 13748  0036E8  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13749  0036EA  B4D8               	btfsc	status,2,c
 13750  0036EC  D7C2               	goto	u13580
 13751                           
 13752                           ; BSR set to: 1
 13753  0036EE  0E21               	movlw	33
 13754  0036F0  184C               	xorwf	rx_gps@c^0,w,c
 13755  0036F2  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13756  0036F4  B4D8               	btfsc	status,2,c
 13757  0036F6  D7BD               	goto	u13580
 13758                           
 13759                           ; BSR set to: 1
 13760  0036F8  0E27               	movlw	39
 13761  0036FA  184C               	xorwf	rx_gps@c^0,w,c
 13762  0036FC  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13763  0036FE  B4D8               	btfsc	status,2,c
 13764  003700  D7B8               	goto	u13580
 13765                           
 13766                           ; BSR set to: 1
 13767  003702  0E28               	movlw	40
 13768  003704  184C               	xorwf	rx_gps@c^0,w,c
 13769  003706  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13770  003708  B4D8               	btfsc	status,2,c
 13771  00370A  D7B3               	goto	u13580
 13772  00370C  D7B4               	goto	l10895
 13773  00370E                     l830:
 13774                           
 13775                           ; BSR set to: 1
 13776                           ;src/gps.c: 165:   ubx_id = c;
 13777  00370E  C04C  F2B8         	movff	rx_gps@c,_ubx_id
 13778  003712  D7AF               	goto	u13580
 13779  003714                     l831:
 13780                           
 13781                           ; BSR set to: 1
 13782                           ;src/gps.c: 171:   len_lsb = c;
 13783  003714  C04C  F2B0         	movff	rx_gps@c,rx_gps@len_lsb
 13784  003718  C04D  F2B1         	movff	rx_gps@c+1,rx_gps@len_lsb+1
 13785  00371C  D7AA               	goto	u13580
 13786  00371E                     l832:
 13787                           
 13788                           ; BSR set to: 1
 13789                           ;src/gps.c: 176:   ubx_len = c;
 13790  00371E  C04C  F2B4         	movff	rx_gps@c,_ubx_len
 13791  003722  C04D  F2B5         	movff	rx_gps@c+1,_ubx_len+1
 13792                           
 13793                           ; BSR set to: 1
 13794                           ;src/gps.c: 177:   ubx_len <<= 8;
 13795  003726  0102               	movlb	2	; () banked
 13796  003728  51B4               	movf	_ubx_len& (0+255),w,b
 13797  00372A  6FB5               	movwf	(_ubx_len+1)& (0+255),b
 13798  00372C  6BB4               	clrf	_ubx_len& (0+255),b
 13799                           
 13800                           ; BSR set to: 2
 13801                           ;src/gps.c: 178:   ubx_len |= len_lsb;
 13802  00372E  51B0               	movf	rx_gps@len_lsb& (0+255),w,b
 13803  003730  13B4               	iorwf	_ubx_len& (0+255),f,b
 13804  003732  51B1               	movf	(rx_gps@len_lsb+1)& (0+255),w,b
 13805  003734  13B5               	iorwf	(_ubx_len+1)& (0+255),f,b
 13806                           
 13807                           ; BSR set to: 2
 13808                           ;src/gps.c: 180:   if(ubx_len == 0 || ubx_len >= sizeof(gpsbuf))
 13809  003736  51B4               	movf	_ubx_len& (0+255),w,b
 13810  003738  11B5               	iorwf	(_ubx_len+1)& (0+255),w,b
 13811  00373A  B4D8               	btfsc	status,2,c
 13812  00373C  D79C               	goto	l10895
 13813                           
 13814                           ; BSR set to: 2
 13815  00373E  51B5               	movf	(_ubx_len+1)& (0+255),w,b
 13816  003740  E19A               	bnz	l10895
 13817  003742  0E55               	movlw	85
 13818  003744  5DB4               	subwf	_ubx_len& (0+255),w,b
 13819  003746  B0D8               	btfsc	status,0,c
 13820  003748  D796               	goto	l10895
 13821                           
 13822                           ; BSR set to: 2
 13823                           ;src/gps.c: 183:   {;src/gps.c: 184:    stat++;
 13824  00374A  0101               	movlb	1	; () banked
 13825  00374C  2BFA               	incf	rx_gps@stat& (0+255),f,b
 13826                           
 13827                           ; BSR set to: 1
 13828                           ;src/gps.c: 185:    p_len = 0;
 13829  00374E  0E00               	movlw	0
 13830  003750  0102               	movlb	2	; () banked
 13831  003752  6FB3               	movwf	(_p_len+1)& (0+255),b
 13832  003754  0E00               	movlw	0
 13833  003756  6FB2               	movwf	_p_len& (0+255),b
 13834  003758  0012               	return	
 13835  00375A                     l10947:
 13836                           
 13837                           ; BSR set to: 1
 13838                           ;src/gps.c: 190:   if(ubx_class == 5)
 13839  00375A  0E05               	movlw	5
 13840  00375C  19FB               	xorwf	_ubx_class& (0+255),w,b
 13841  00375E  A4D8               	btfss	status,2,c
 13842  003760  D78A               	goto	l10895
 13843                           
 13844                           ; BSR set to: 1
 13845                           ;src/gps.c: 191:   {;src/gps.c: 192:    gpsbuf[p_len++] = c;
 13846  003762  0E32               	movlw	low _gpsbuf
 13847  003764  0102               	movlb	2	; () banked
 13848  003766  25B2               	addwf	_p_len& (0+255),w,b
 13849  003768  6ED9               	movwf	fsr2l,c
 13850  00376A  0E03               	movlw	high _gpsbuf
 13851  00376C  21B3               	addwfc	(_p_len+1)& (0+255),w,b
 13852  00376E  6EDA               	movwf	fsr2h,c
 13853  003770  C04C  FFDF         	movff	rx_gps@c,indf2
 13854                           
 13855                           ; BSR set to: 2
 13856  003774  4BB2               	infsnz	_p_len& (0+255),f,b
 13857  003776  2BB3               	incf	(_p_len+1)& (0+255),f,b
 13858                           
 13859                           ; BSR set to: 2
 13860                           ;src/gps.c: 193:    if(p_len >= sizeof(gpsbuf) || p_len == ubx_len)
 13861  003778  51B3               	movf	(_p_len+1)& (0+255),w,b
 13862  00377A  E10B               	bnz	l10957
 13863  00377C  0E55               	movlw	85
 13864  00377E  5DB2               	subwf	_p_len& (0+255),w,b
 13865  003780  B0D8               	btfsc	status,0,c
 13866  003782  D007               	goto	u13770
 13867                           
 13868                           ; BSR set to: 2
 13869  003784  51B4               	movf	_ubx_len& (0+255),w,b
 13870  003786  19B2               	xorwf	_p_len& (0+255),w,b
 13871  003788  E164               	bnz	l849
 13872  00378A  51B5               	movf	(_ubx_len+1)& (0+255),w,b
 13873  00378C  19B3               	xorwf	(_p_len+1)& (0+255),w,b
 13874  00378E  A4D8               	btfss	status,2,c
 13875  003790  0012               	return	
 13876  003792                     u13770:
 13877  003792                     l10957:
 13878                           
 13879                           ; BSR set to: 2
 13880                           ;src/gps.c: 194:    {;src/gps.c: 195:     ubx_ack = 1;
 13881  003792  0E01               	movlw	1
 13882  003794  6E6E               	movwf	_ubx_ack^0,c
 13883                           
 13884                           ;src/gps.c: 198:     stat = 0;
 13885  003796  0E00               	movlw	0
 13886  003798  0101               	movlb	1	; () banked
 13887  00379A  6FFA               	movwf	rx_gps@stat& (0+255),b
 13888  00379C  0012               	return	
 13889  00379E                     l10961:
 13890                           
 13891                           ; BSR set to: 1
 13892                           ;src/gps.c: 209:   if(c == '\n' || c == '\r')
 13893  00379E  0E0A               	movlw	10
 13894  0037A0  184C               	xorwf	rx_gps@c^0,w,c
 13895  0037A2  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13896  0037A4  B4D8               	btfsc	status,2,c
 13897  0037A6  D005               	goto	u13790
 13898                           
 13899                           ; BSR set to: 1
 13900  0037A8  0E0D               	movlw	13
 13901  0037AA  184C               	xorwf	rx_gps@c^0,w,c
 13902  0037AC  104D               	iorwf	(rx_gps@c+1)^0,w,c
 13903  0037AE  A4D8               	btfss	status,2,c
 13904  0037B0  D00F               	goto	l10971
 13905  0037B2                     u13790:
 13906                           
 13907                           ; BSR set to: 1
 13908                           ;src/gps.c: 210:   {;src/gps.c: 212:    gpsbuf[gpsbufidx] = 0;
 13909  0037B2  0E32               	movlw	low _gpsbuf
 13910  0037B4  2471               	addwf	_gpsbufidx^0,w,c
 13911  0037B6  6ED9               	movwf	fsr2l,c
 13912  0037B8  6ADA               	clrf	fsr2h,c
 13913  0037BA  0E03               	movlw	high _gpsbuf
 13914  0037BC  22DA               	addwfc	fsr2h,f,c
 13915  0037BE  0E00               	movlw	0
 13916  0037C0  6EDF               	movwf	indf2,c
 13917                           
 13918                           ; BSR set to: 1
 13919                           ;src/gps.c: 213:    eval_gps(gpsbuf);
 13920  0037C2  0E32               	movlw	low _gpsbuf
 13921  0037C4  6E46               	movwf	eval_gps@gpsbuf^0,c
 13922  0037C6  0E03               	movlw	high _gpsbuf
 13923  0037C8  6E47               	movwf	(eval_gps@gpsbuf+1)^0,c
 13924  0037CA  ECB2  F013         	call	_eval_gps	;wreg free
 13925  0037CE  D753               	goto	l10895
 13926  0037D0                     l10971:
 13927                           
 13928                           ; BSR set to: 1
 13929                           ;src/gps.c: 217:   {;src/gps.c: 218:    if(gpsbufidx >= sizeof(gpsbuf))
 13930  0037D0  0E54               	movlw	84
 13931  0037D2  6471               	cpfsgt	_gpsbufidx^0,c
 13932  0037D4  D001               	goto	l10977
 13933  0037D6  D74F               	goto	l10895
 13934  0037D8                     l10977:
 13935                           
 13936                           ; BSR set to: 1
 13937                           ;src/gps.c: 224:    gpsbuf[gpsbufidx++] = c;
 13938  0037D8  0E32               	movlw	low _gpsbuf
 13939  0037DA  2471               	addwf	_gpsbufidx^0,w,c
 13940  0037DC  6ED9               	movwf	fsr2l,c
 13941  0037DE  6ADA               	clrf	fsr2h,c
 13942  0037E0  0E03               	movlw	high _gpsbuf
 13943  0037E2  22DA               	addwfc	fsr2h,f,c
 13944  0037E4  C04C  FFDF         	movff	rx_gps@c,indf2
 13945                           
 13946                           ; BSR set to: 1
 13947  0037E8  2A71               	incf	_gpsbufidx^0,f,c
 13948                           
 13949                           ; BSR set to: 1
 13950                           ;src/gps.c: 227:    if(gpsbufidx == 5 && (gpsbuf[2] != 'G' || gpsbuf[3] != 'G' || gpsbuf
      +                          [4] != 'A'))
 13951  0037EA  0E05               	movlw	5
 13952  0037EC  1871               	xorwf	_gpsbufidx^0,w,c
 13953  0037EE  A4D8               	btfss	status,2,c
 13954  0037F0  0012               	return	
 13955                           
 13956                           ; BSR set to: 1
 13957  0037F2  0E47               	movlw	71
 13958  0037F4  0103               	movlb	3	; () banked
 13959  0037F6  1934               	xorwf	(_gpsbuf+2)& (0+255),w,b
 13960  0037F8  A4D8               	btfss	status,2,c
 13961  0037FA  D73D               	goto	l10895
 13962                           
 13963                           ; BSR set to: 3
 13964  0037FC  0E47               	movlw	71
 13965  0037FE  1935               	xorwf	(_gpsbuf+3)& (0+255),w,b
 13966  003800  A4D8               	btfss	status,2,c
 13967  003802  D739               	goto	l10895
 13968                           
 13969                           ; BSR set to: 3
 13970  003804  0E41               	movlw	65
 13971  003806  1936               	xorwf	(_gpsbuf+4)& (0+255),w,b
 13972  003808  B4D8               	btfsc	status,2,c
 13973  00380A  0012               	return	
 13974  00380C  D734               	goto	l10895
 13975  00380E                     l10995:
 13976  00380E  0101               	movlb	1	; () banked
 13977  003810  51FA               	movf	rx_gps@stat& (0+255),w,b
 13978  003812  6E4E               	movwf	??_rx_gps^0,c
 13979  003814  6A4F               	clrf	(??_rx_gps+1)^0,c
 13980                           
 13981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13982                           ; Switch size 1, requested type "simple"
 13983                           ; Number of cases is 1, Range of values is 0 to 0
 13984                           ; switch strategies available:
 13985                           ; Name         Instructions Cycles
 13986                           ; simple_byte            4     3 (average)
 13987                           ;	Chosen strategy is simple_byte
 13988  003816  504F               	movf	(??_rx_gps+1)^0,w,c
 13989  003818  0A00               	xorlw	0	; case 0
 13990  00381A  A4D8               	btfss	status,2,c
 13991  00381C  0012               	return	
 13992                           
 13993                           ; BSR set to: 1
 13994                           ; Switch size 1, requested type "simple"
 13995                           ; Number of cases is 8, Range of values is 0 to 100
 13996                           ; switch strategies available:
 13997                           ; Name         Instructions Cycles
 13998                           ; simple_byte           25    13 (average)
 13999                           ;	Chosen strategy is simple_byte
 14000  00381E  504E               	movf	??_rx_gps^0,w,c
 14001  003820  0A00               	xorlw	0	; case 0
 14002  003822  B4D8               	btfsc	status,2,c
 14003  003824  D712               	goto	l10883
 14004  003826  0A01               	xorlw	1	; case 1
 14005  003828  B4D8               	btfsc	status,2,c
 14006  00382A  D71E               	goto	l10891
 14007  00382C  0A03               	xorlw	3	; case 2
 14008  00382E  B4D8               	btfsc	status,2,c
 14009  003830  D726               	goto	l825
 14010  003832  0A01               	xorlw	1	; case 3
 14011  003834  B4D8               	btfsc	status,2,c
 14012  003836  D76B               	goto	l830
 14013  003838  0A07               	xorlw	7	; case 4
 14014  00383A  B4D8               	btfsc	status,2,c
 14015  00383C  D76B               	goto	l831
 14016  00383E  0A01               	xorlw	1	; case 5
 14017  003840  B4D8               	btfsc	status,2,c
 14018  003842  D76D               	goto	l832
 14019  003844  0A03               	xorlw	3	; case 6
 14020  003846  B4D8               	btfsc	status,2,c
 14021  003848  D788               	goto	l10947
 14022  00384A  0A62               	xorlw	98	; case 100
 14023  00384C  A4D8               	btfss	status,2,c
 14024  00384E  0012               	return	
 14025  003850  D7A6               	goto	l10961
 14026  003852                     l849:
 14027  003852  0012               	return		;funcret
 14028  003854                     __end_of_rx_gps:
 14029                           	opt callstack 0
 14030                           
 14031 ;; *************** function _eval_gps *****************
 14032 ;; Defined at:
 14033 ;;		line 37 in file "src/gps.c"
 14034 ;; Parameters:    Size  Location     Type
 14035 ;;  gpsbuf          2   69[COMRAM] PTR unsigned char 
 14036 ;;		 -> gpsbuf(85), 
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;  pe              2  243[BANK1 ] PTR unsigned char 
 14039 ;;		 -> gpsbuf(85), NULL(0), 
 14040 ;;  ps              2  246[BANK1 ] PTR unsigned char 
 14041 ;;		 -> gpsbuf(85), NULL(0), 
 14042 ;;  i               1  242[BANK1 ] unsigned char 
 14043 ;;  elem          240    0[BANK1 ] unsigned char [16][15]
 14044 ;;  eidx            1  245[BANK1 ] unsigned char 
 14045 ;;  chksum          1  241[BANK1 ] unsigned char 
 14046 ;;  chksumgps       1  240[BANK1 ] unsigned char 
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  1    wreg      void 
 14049 ;; Registers used:
 14050 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/1
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14056 ;;      Params:         2       0       0       0       0       0       0
 14057 ;;      Locals:         0       0     248       0       0       0       0
 14058 ;;      Temps:          4       0       0       0       0       0       0
 14059 ;;      Totals:         6       0     248       0       0       0       0
 14060 ;;Total ram usage:      254 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; Hardware stack levels required when called:    6
 14063 ;; This function calls:
 14064 ;;		_atoi
 14065 ;;		_memcpy
 14066 ;;		_memset
 14067 ;;		_strchr
 14068 ;;		_strlen
 14069 ;;		_strtol
 14070 ;; This function is called by:
 14071 ;;		_rx_gps
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text41
 14076  002764                     __ptext41:
 14077                           	opt callstack 0
 14078  002764                     _eval_gps:
 14079                           	opt callstack 22
 14080                           
 14081                           ;src/gps.c: 37: void eval_gps(char *gpsbuf);src/gps.c: 38: {;src/gps.c: 39: char elem[15
      +                          ][16];;src/gps.c: 40: u8 eidx=0;
 14082                           
 14083                           ;incstack = 0
 14084  002764  0E00               	movlw	0
 14085  002766  0101               	movlb	1	; () banked
 14086  002768  6FF5               	movwf	eval_gps@eidx& (0+255),b
 14087                           
 14088                           ; BSR set to: 1
 14089                           ;src/gps.c: 44:  if(strlen(gpsbuf) < 20 || strlen(gpsbuf) > 100)
 14090  00276A  C046  F00E         	movff	eval_gps@gpsbuf,strlen@s
 14091  00276E  C047  F00F         	movff	eval_gps@gpsbuf+1,strlen@s+1
 14092  002772  EC89  F037         	call	_strlen	;wreg free
 14093  002776  500F               	movf	(?_strlen+1)^0,w,c
 14094  002778  E104               	bnz	u13240
 14095  00277A  0E14               	movlw	20
 14096  00277C  5C0E               	subwf	?_strlen^0,w,c
 14097  00277E  A0D8               	btfss	status,0,c
 14098  002780  0012               	return	
 14099  002782                     u13240:
 14100  002782  C046  F00E         	movff	eval_gps@gpsbuf,strlen@s
 14101  002786  C047  F00F         	movff	eval_gps@gpsbuf+1,strlen@s+1
 14102  00278A  EC89  F037         	call	_strlen	;wreg free
 14103  00278E  500F               	movf	(?_strlen+1)^0,w,c
 14104  002790  E105               	bnz	u13250
 14105  002792  0E65               	movlw	101
 14106  002794  5C0E               	subwf	?_strlen^0,w,c
 14107  002796  B0D8               	btfsc	status,0,c
 14108  002798  0012               	return	
 14109  00279A  D001               	goto	l10671
 14110  00279C                     u13250:
 14111  00279C  0012               	return	
 14112  00279E                     l10671:
 14113                           
 14114                           ;src/gps.c: 48:  u8 chksum = gpsbuf[0];
 14115  00279E  C046  FFD9         	movff	eval_gps@gpsbuf,fsr2l
 14116  0027A2  C047  FFDA         	movff	eval_gps@gpsbuf+1,fsr2h
 14117  0027A6  50DF               	movf	indf2,w,c
 14118  0027A8  0101               	movlb	1	; () banked
 14119  0027AA  6FF1               	movwf	eval_gps@chksum& (0+255),b
 14120                           
 14121                           ; BSR set to: 1
 14122                           ;src/gps.c: 49:  for(u8 i=1; i<strlen(gpsbuf)-3; i++)
 14123  0027AC  0E01               	movlw	1
 14124  0027AE  6FF2               	movwf	eval_gps@i& (0+255),b
 14125  0027B0  D009               	goto	l10679
 14126  0027B2                     l10675:
 14127                           
 14128                           ; BSR set to: 1
 14129                           ;src/gps.c: 50:   chksum ^= gpsbuf[i];
 14130  0027B2  51F2               	movf	eval_gps@i& (0+255),w,b
 14131  0027B4  2446               	addwf	eval_gps@gpsbuf^0,w,c
 14132  0027B6  6ED9               	movwf	fsr2l,c
 14133  0027B8  0E00               	movlw	0
 14134  0027BA  2047               	addwfc	(eval_gps@gpsbuf+1)^0,w,c
 14135  0027BC  6EDA               	movwf	fsr2h,c
 14136  0027BE  50DF               	movf	indf2,w,c
 14137  0027C0  1BF1               	xorwf	eval_gps@chksum& (0+255),f,b
 14138                           
 14139                           ; BSR set to: 1
 14140  0027C2  2BF2               	incf	eval_gps@i& (0+255),f,b
 14141  0027C4                     l10679:
 14142                           
 14143                           ; BSR set to: 1
 14144  0027C4  0EFD               	movlw	253
 14145  0027C6  6E48               	movwf	??_eval_gps^0,c
 14146  0027C8  0EFF               	movlw	255
 14147  0027CA  6E49               	movwf	(??_eval_gps+1)^0,c
 14148  0027CC  C046  F00E         	movff	eval_gps@gpsbuf,strlen@s
 14149  0027D0  C047  F00F         	movff	eval_gps@gpsbuf+1,strlen@s+1
 14150  0027D4  EC89  F037         	call	_strlen	;wreg free
 14151  0027D8  5048               	movf	??_eval_gps^0,w,c
 14152  0027DA  260E               	addwf	?_strlen^0,f,c
 14153  0027DC  5049               	movf	(??_eval_gps+1)^0,w,c
 14154  0027DE  220F               	addwfc	(?_strlen+1)^0,f,c
 14155  0027E0  0101               	movlb	1	; () banked
 14156  0027E2  51F2               	movf	eval_gps@i& (0+255),w,b
 14157  0027E4  6E4A               	movwf	(??_eval_gps+2)^0,c
 14158  0027E6  6A4B               	clrf	(??_eval_gps+3)^0,c
 14159  0027E8  500E               	movf	?_strlen^0,w,c
 14160  0027EA  5C4A               	subwf	(??_eval_gps+2)^0,w,c
 14161  0027EC  500F               	movf	(?_strlen+1)^0,w,c
 14162  0027EE  584B               	subwfb	(??_eval_gps+3)^0,w,c
 14163  0027F0  A0D8               	btfss	status,0,c
 14164  0027F2  D7DF               	goto	l10675
 14165                           
 14166                           ; BSR set to: 1
 14167                           ;src/gps.c: 52:  u8 chksumgps = strtol(gpsbuf + (strlen(gpsbuf)-2),((void*)0),16);
 14168  0027F4  C046  F00E         	movff	eval_gps@gpsbuf,strlen@s
 14169  0027F8  C047  F00F         	movff	eval_gps@gpsbuf+1,strlen@s+1
 14170  0027FC  EC89  F037         	call	_strlen	;wreg free
 14171  002800  C046  F048         	movff	eval_gps@gpsbuf,??_eval_gps
 14172  002804  C047  F049         	movff	eval_gps@gpsbuf+1,??_eval_gps+1
 14173  002808  500E               	movf	?_strlen^0,w,c
 14174  00280A  2648               	addwf	??_eval_gps^0,f,c
 14175  00280C  500F               	movf	(?_strlen+1)^0,w,c
 14176  00280E  2249               	addwfc	(??_eval_gps+1)^0,f,c
 14177  002810  0EFE               	movlw	254
 14178  002812  2448               	addwf	??_eval_gps^0,w,c
 14179  002814  6E40               	movwf	strtol@s^0,c
 14180  002816  0EFF               	movlw	255
 14181  002818  2049               	addwfc	(??_eval_gps+1)^0,w,c
 14182  00281A  6E41               	movwf	(strtol@s+1)^0,c
 14183  00281C  0E00               	movlw	0
 14184  00281E  6E42               	movwf	strtol@endptr^0,c
 14185  002820  0E00               	movlw	0
 14186  002822  6E43               	movwf	(strtol@endptr+1)^0,c
 14187  002824  0E00               	movlw	0
 14188  002826  6E45               	movwf	(strtol@base+1)^0,c
 14189  002828  0E10               	movlw	16
 14190  00282A  6E44               	movwf	strtol@base^0,c
 14191  00282C  ECEF  F038         	call	_strtol	;wreg free
 14192  002830  5040               	movf	?_strtol^0,w,c
 14193  002832  0101               	movlb	1	; () banked
 14194  002834  6FF0               	movwf	eval_gps@chksumgps& (0+255),b
 14195                           
 14196                           ; BSR set to: 1
 14197                           ;src/gps.c: 53:  if(chksumgps != chksum) return;
 14198  002836  51F1               	movf	eval_gps@chksum& (0+255),w,b
 14199  002838  19F0               	xorwf	eval_gps@chksumgps& (0+255),w,b
 14200  00283A  A4D8               	btfss	status,2,c
 14201  00283C  0012               	return	
 14202                           
 14203                           ; BSR set to: 1
 14204                           ;src/gps.c: 56:  if(gpsbuf[2] == 'G' && gpsbuf[3] == 'G' && gpsbuf[4] == 'A')
 14205  00283E  EE20 F002          	lfsr	2,2
 14206  002842  5046               	movf	eval_gps@gpsbuf^0,w,c
 14207  002844  26D9               	addwf	fsr2l,f,c
 14208  002846  5047               	movf	(eval_gps@gpsbuf+1)^0,w,c
 14209  002848  22DA               	addwfc	fsr2h,f,c
 14210  00284A  0E47               	movlw	71
 14211  00284C  18DE               	xorwf	postinc2,w,c
 14212  00284E  A4D8               	btfss	status,2,c
 14213  002850  0012               	return	
 14214                           
 14215                           ; BSR set to: 1
 14216  002852  EE20 F003          	lfsr	2,3
 14217  002856  5046               	movf	eval_gps@gpsbuf^0,w,c
 14218  002858  26D9               	addwf	fsr2l,f,c
 14219  00285A  5047               	movf	(eval_gps@gpsbuf+1)^0,w,c
 14220  00285C  22DA               	addwfc	fsr2h,f,c
 14221  00285E  0E47               	movlw	71
 14222  002860  18DE               	xorwf	postinc2,w,c
 14223  002862  A4D8               	btfss	status,2,c
 14224  002864  0012               	return	
 14225                           
 14226                           ; BSR set to: 1
 14227  002866  EE20 F004          	lfsr	2,4
 14228  00286A  5046               	movf	eval_gps@gpsbuf^0,w,c
 14229  00286C  26D9               	addwf	fsr2l,f,c
 14230  00286E  5047               	movf	(eval_gps@gpsbuf+1)^0,w,c
 14231  002870  22DA               	addwfc	fsr2h,f,c
 14232  002872  0E41               	movlw	65
 14233  002874  18DE               	xorwf	postinc2,w,c
 14234  002876  A4D8               	btfss	status,2,c
 14235  002878  0012               	return	
 14236                           
 14237                           ; BSR set to: 1
 14238                           ;src/gps.c: 57:  {;src/gps.c: 62:   char *ps = gpsbuf;
 14239  00287A  C046  F1F6         	movff	eval_gps@gpsbuf,eval_gps@ps
 14240  00287E  C047  F1F7         	movff	eval_gps@gpsbuf+1,eval_gps@ps+1
 14241  002882                     l10695:
 14242                           
 14243                           ;src/gps.c: 64:   {;src/gps.c: 65:    char *pe = strchr(ps,',');
 14244  002882  C1F6  F00E         	movff	eval_gps@ps,strchr@s
 14245  002886  C1F7  F00F         	movff	eval_gps@ps+1,strchr@s+1
 14246  00288A  0E00               	movlw	0
 14247  00288C  6E11               	movwf	(strchr@c+1)^0,c
 14248  00288E  0E2C               	movlw	44
 14249  002890  6E10               	movwf	strchr@c^0,c
 14250  002892  ECBA  F038         	call	_strchr	;wreg free
 14251  002896  C00E  F1F3         	movff	?_strchr,eval_gps@pe
 14252  00289A  C00F  F1F4         	movff	?_strchr+1,eval_gps@pe+1
 14253                           
 14254                           ;src/gps.c: 66:    if(pe == ((void*)0)) break;
 14255  00289E  0101               	movlb	1	; () banked
 14256  0028A0  51F3               	movf	eval_gps@pe& (0+255),w,b
 14257  0028A2  11F4               	iorwf	(eval_gps@pe+1)& (0+255),w,b
 14258  0028A4  B4D8               	btfsc	status,2,c
 14259  0028A6  D04A               	goto	l792
 14260                           
 14261                           ; BSR set to: 1
 14262                           ;src/gps.c: 67:    memset(elem[eidx],0,16);
 14263  0028A8  51F5               	movf	eval_gps@eidx& (0+255),w,b
 14264  0028AA  0D10               	mullw	16
 14265  0028AC  0E00               	movlw	low eval_gps@elem
 14266  0028AE  24F3               	addwf	243,w,c
 14267  0028B0  6E0E               	movwf	memset@dest^0,c
 14268  0028B2  0E01               	movlw	high eval_gps@elem
 14269  0028B4  20F4               	addwfc	prodh,w,c
 14270  0028B6  6E0F               	movwf	(memset@dest+1)^0,c
 14271  0028B8  0E00               	movlw	0
 14272  0028BA  6E11               	movwf	(memset@c+1)^0,c
 14273  0028BC  0E00               	movlw	0
 14274  0028BE  6E10               	movwf	memset@c^0,c
 14275  0028C0  0E00               	movlw	0
 14276  0028C2  6E13               	movwf	(memset@n+1)^0,c
 14277  0028C4  0E10               	movlw	16
 14278  0028C6  6E12               	movwf	memset@n^0,c
 14279  0028C8  ECF4  F024         	call	_memset	;wreg free
 14280                           
 14281                           ;src/gps.c: 68:    memcpy(elem[eidx++],ps,pe-ps);
 14282  0028CC  0101               	movlb	1	; () banked
 14283  0028CE  51F5               	movf	eval_gps@eidx& (0+255),w,b
 14284  0028D0  0D10               	mullw	16
 14285  0028D2  0E00               	movlw	low eval_gps@elem
 14286  0028D4  24F3               	addwf	243,w,c
 14287  0028D6  6E0E               	movwf	memcpy@d1^0,c
 14288  0028D8  0E01               	movlw	high eval_gps@elem
 14289  0028DA  20F4               	addwfc	prodh,w,c
 14290  0028DC  6E0F               	movwf	(memcpy@d1+1)^0,c
 14291  0028DE  C1F6  F010         	movff	eval_gps@ps,memcpy@s1
 14292  0028E2  C1F7  F011         	movff	eval_gps@ps+1,memcpy@s1+1
 14293  0028E6  51F6               	movf	eval_gps@ps& (0+255),w,b
 14294  0028E8  5DF3               	subwf	eval_gps@pe& (0+255),w,b
 14295  0028EA  6E12               	movwf	memcpy@n^0,c
 14296  0028EC  51F7               	movf	(eval_gps@ps+1)& (0+255),w,b
 14297  0028EE  59F4               	subwfb	(eval_gps@pe+1)& (0+255),w,b
 14298  0028F0  6E13               	movwf	(memcpy@n+1)^0,c
 14299  0028F2  EC24  F037         	call	_memcpy	;wreg free
 14300  0028F6  0101               	movlb	1	; () banked
 14301  0028F8  2BF5               	incf	eval_gps@eidx& (0+255),f,b
 14302                           
 14303                           ; BSR set to: 1
 14304                           ;src/gps.c: 69:    ps = pe+1;
 14305  0028FA  0E01               	movlw	1
 14306  0028FC  25F3               	addwf	eval_gps@pe& (0+255),w,b
 14307  0028FE  6FF6               	movwf	eval_gps@ps& (0+255),b
 14308  002900  0E00               	movlw	0
 14309  002902  21F4               	addwfc	(eval_gps@pe+1)& (0+255),w,b
 14310  002904  6FF7               	movwf	(eval_gps@ps+1)& (0+255),b
 14311                           
 14312                           ; BSR set to: 1
 14313                           ;src/gps.c: 70:    if(ps >= (gpsbuf + strlen(gpsbuf))) break;
 14314  002906  C046  F00E         	movff	eval_gps@gpsbuf,strlen@s
 14315  00290A  C047  F00F         	movff	eval_gps@gpsbuf+1,strlen@s+1
 14316  00290E  EC89  F037         	call	_strlen	;wreg free
 14317  002912  C046  F048         	movff	eval_gps@gpsbuf,??_eval_gps
 14318  002916  C047  F049         	movff	eval_gps@gpsbuf+1,??_eval_gps+1
 14319  00291A  500E               	movf	?_strlen^0,w,c
 14320  00291C  2648               	addwf	??_eval_gps^0,f,c
 14321  00291E  500F               	movf	(?_strlen+1)^0,w,c
 14322  002920  2249               	addwfc	(??_eval_gps+1)^0,f,c
 14323  002922  5048               	movf	??_eval_gps^0,w,c
 14324  002924  0101               	movlb	1	; () banked
 14325  002926  5DF6               	subwf	eval_gps@ps& (0+255),w,b
 14326  002928  5049               	movf	(??_eval_gps+1)^0,w,c
 14327  00292A  59F7               	subwfb	(eval_gps@ps+1)& (0+255),w,b
 14328  00292C  B0D8               	btfsc	status,0,c
 14329  00292E  D006               	goto	l792
 14330                           
 14331                           ; BSR set to: 1
 14332                           ;src/gps.c: 71:    if(eidx >= 15) break;
 14333  002930  0E0E               	movlw	14
 14334  002932  65F5               	cpfsgt	eval_gps@eidx& (0+255),b
 14335  002934  D001               	goto	l794
 14336  002936  D002               	goto	l792
 14337  002938                     l794:
 14338                           
 14339                           ; BSR set to: 1
 14340  002938  0004               	clrwdt		;# 
 14341  00293A  D7A3               	goto	l10695
 14342  00293C                     l792:
 14343                           
 14344                           ; BSR set to: 1
 14345                           ;src/gps.c: 85:   GPS_time[0] = elem[1][0];
 14346  00293C  C110  F297         	movff	eval_gps@elem+16,_GPS_time
 14347                           
 14348                           ;src/gps.c: 86:   GPS_time[1] = elem[1][1];
 14349  002940  C111  F298         	movff	eval_gps@elem+17,_GPS_time+1
 14350                           
 14351                           ; BSR set to: 1
 14352                           ;src/gps.c: 87:   GPS_time[2] = ':';
 14353  002944  0E3A               	movlw	58
 14354  002946  0102               	movlb	2	; () banked
 14355  002948  6F99               	movwf	(_GPS_time+2)& (0+255),b
 14356                           
 14357                           ; BSR set to: 2
 14358                           ;src/gps.c: 88:   GPS_time[3] = elem[1][2];
 14359  00294A  C112  F29A         	movff	eval_gps@elem+18,_GPS_time+3
 14360                           
 14361                           ; BSR set to: 2
 14362                           ;src/gps.c: 89:   GPS_time[4] = elem[1][3];
 14363  00294E  C113  F29B         	movff	eval_gps@elem+19,_GPS_time+4
 14364                           
 14365                           ;src/gps.c: 90:   GPS_time[5] = ':';
 14366  002952  0E3A               	movlw	58
 14367  002954  6F9C               	movwf	(_GPS_time+5)& (0+255),b
 14368                           
 14369                           ; BSR set to: 2
 14370                           ;src/gps.c: 91:   GPS_time[6] = elem[1][4];
 14371  002956  C114  F29D         	movff	eval_gps@elem+20,_GPS_time+6
 14372                           
 14373                           ; BSR set to: 2
 14374                           ;src/gps.c: 92:   GPS_time[7] = elem[1][5];
 14375  00295A  C115  F29E         	movff	eval_gps@elem+21,_GPS_time+7
 14376                           
 14377                           ;src/gps.c: 93:   GPS_time[8] = 0;
 14378  00295E  0E00               	movlw	0
 14379  002960  6F9F               	movwf	(_GPS_time+8)& (0+255),b
 14380                           
 14381                           ; BSR set to: 2
 14382                           ;src/gps.c: 95:   if(elem[6][0] != '1' && elem[6][0] != '2')
 14383  002962  0E31               	movlw	49
 14384  002964  0101               	movlb	1	; () banked
 14385  002966  1960               	xorwf	(eval_gps@elem+96)& (0+255),w,b
 14386  002968  B4D8               	btfsc	status,2,c
 14387  00296A  D00F               	goto	l10733
 14388                           
 14389                           ; BSR set to: 1
 14390  00296C  0E32               	movlw	50
 14391  00296E  1960               	xorwf	(eval_gps@elem+96)& (0+255),w,b
 14392  002970  B4D8               	btfsc	status,2,c
 14393  002972  D00B               	goto	l10733
 14394                           
 14395                           ; BSR set to: 1
 14396                           ;src/gps.c: 96:   {;src/gps.c: 98:    GPS_lock = 0;
 14397  002974  0E00               	movlw	0
 14398  002976  0100               	movlb	0	; () banked
 14399  002978  6FD8               	movwf	_GPS_lock& (0+255),b
 14400                           
 14401                           ;src/gps.c: 99:    GPS_sat = 0;
 14402  00297A  0E00               	movlw	0
 14403  00297C  6FD1               	movwf	_GPS_sat& (0+255),b
 14404                           
 14405                           ;src/gps.c: 100:    *GPS_lat = 0;
 14406  00297E  0E00               	movlw	0
 14407  002980  0102               	movlb	2	; () banked
 14408  002982  6F7F               	movwf	_GPS_lat& (0+255),b
 14409                           
 14410                           ;src/gps.c: 101:    *GPS_lon = 0;
 14411  002984  0E00               	movlw	0
 14412  002986  6F70               	movwf	_GPS_lon& (0+255),b
 14413  002988  0012               	return	
 14414  00298A                     l10733:
 14415                           
 14416                           ; BSR set to: 1
 14417                           ;src/gps.c: 104:   GPS_lock = 1;
 14418  00298A  0E01               	movlw	1
 14419  00298C  0100               	movlb	0	; () banked
 14420  00298E  6FD8               	movwf	_GPS_lock& (0+255),b
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;src/gps.c: 106:   GPS_sat = atoi(elem[7]);
 14424  002990  0E70               	movlw	low (eval_gps@elem+112)
 14425  002992  6E1B               	movwf	atoi@s^0,c
 14426  002994  0E01               	movlw	high (eval_gps@elem+112)
 14427  002996  6E1C               	movwf	(atoi@s+1)^0,c
 14428  002998  EC57  F021         	call	_atoi	;wreg free
 14429  00299C  501B               	movf	?_atoi^0,w,c
 14430  00299E  0100               	movlb	0	; () banked
 14431  0029A0  6FD1               	movwf	_GPS_sat& (0+255),b
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;src/gps.c: 108:   memcpy(GPS_lat,elem[2],2);
 14435  0029A2  0E7F               	movlw	low _GPS_lat
 14436  0029A4  6E0E               	movwf	memcpy@d1^0,c
 14437  0029A6  0E02               	movlw	high _GPS_lat
 14438  0029A8  6E0F               	movwf	(memcpy@d1+1)^0,c
 14439  0029AA  0E20               	movlw	low (eval_gps@elem+32)
 14440  0029AC  6E10               	movwf	memcpy@s1^0,c
 14441  0029AE  0E01               	movlw	high (eval_gps@elem+32)
 14442  0029B0  6E11               	movwf	(memcpy@s1+1)^0,c
 14443  0029B2  0E00               	movlw	0
 14444  0029B4  6E13               	movwf	(memcpy@n+1)^0,c
 14445  0029B6  0E02               	movlw	2
 14446  0029B8  6E12               	movwf	memcpy@n^0,c
 14447  0029BA  EC24  F037         	call	_memcpy	;wreg free
 14448                           
 14449                           ;src/gps.c: 109:   GPS_lat[2] = 'd';
 14450  0029BE  0E64               	movlw	100
 14451  0029C0  0102               	movlb	2	; () banked
 14452  0029C2  6F81               	movwf	(_GPS_lat+2)& (0+255),b
 14453                           
 14454                           ; BSR set to: 2
 14455                           ;src/gps.c: 110:   memcpy(GPS_lat+3,elem[2]+2,5);
 14456  0029C4  0E82               	movlw	low (_GPS_lat+3)
 14457  0029C6  6E0E               	movwf	memcpy@d1^0,c
 14458  0029C8  0E02               	movlw	high (_GPS_lat+3)
 14459  0029CA  6E0F               	movwf	(memcpy@d1+1)^0,c
 14460  0029CC  0E22               	movlw	low (eval_gps@elem+34)
 14461  0029CE  6E10               	movwf	memcpy@s1^0,c
 14462  0029D0  0E01               	movlw	high (eval_gps@elem+34)
 14463  0029D2  6E11               	movwf	(memcpy@s1+1)^0,c
 14464  0029D4  0E00               	movlw	0
 14465  0029D6  6E13               	movwf	(memcpy@n+1)^0,c
 14466  0029D8  0E05               	movlw	5
 14467  0029DA  6E12               	movwf	memcpy@n^0,c
 14468  0029DC  EC24  F037         	call	_memcpy	;wreg free
 14469                           
 14470                           ;src/gps.c: 111:   GPS_lat[8] = elem[3][0];
 14471  0029E0  C130  F287         	movff	eval_gps@elem+48,_GPS_lat+8
 14472                           
 14473                           ;src/gps.c: 112:   GPS_lat[9] = 0;
 14474  0029E4  0E00               	movlw	0
 14475  0029E6  0102               	movlb	2	; () banked
 14476  0029E8  6F88               	movwf	(_GPS_lat+9)& (0+255),b
 14477                           
 14478                           ; BSR set to: 2
 14479                           ;src/gps.c: 114:   memcpy(GPS_lon,elem[4],3);
 14480  0029EA  0E70               	movlw	low _GPS_lon
 14481  0029EC  6E0E               	movwf	memcpy@d1^0,c
 14482  0029EE  0E02               	movlw	high _GPS_lon
 14483  0029F0  6E0F               	movwf	(memcpy@d1+1)^0,c
 14484  0029F2  0E40               	movlw	low (eval_gps@elem+64)
 14485  0029F4  6E10               	movwf	memcpy@s1^0,c
 14486  0029F6  0E01               	movlw	high (eval_gps@elem+64)
 14487  0029F8  6E11               	movwf	(memcpy@s1+1)^0,c
 14488  0029FA  0E00               	movlw	0
 14489  0029FC  6E13               	movwf	(memcpy@n+1)^0,c
 14490  0029FE  0E03               	movlw	3
 14491  002A00  6E12               	movwf	memcpy@n^0,c
 14492  002A02  EC24  F037         	call	_memcpy	;wreg free
 14493                           
 14494                           ;src/gps.c: 115:   GPS_lon[3] = 'd';
 14495  002A06  0E64               	movlw	100
 14496  002A08  0102               	movlb	2	; () banked
 14497  002A0A  6F73               	movwf	(_GPS_lon+3)& (0+255),b
 14498                           
 14499                           ; BSR set to: 2
 14500                           ;src/gps.c: 116:   memcpy(GPS_lon+4,elem[4]+3,5);
 14501  002A0C  0E74               	movlw	low (_GPS_lon+4)
 14502  002A0E  6E0E               	movwf	memcpy@d1^0,c
 14503  002A10  0E02               	movlw	high (_GPS_lon+4)
 14504  002A12  6E0F               	movwf	(memcpy@d1+1)^0,c
 14505  002A14  0E43               	movlw	low (eval_gps@elem+67)
 14506  002A16  6E10               	movwf	memcpy@s1^0,c
 14507  002A18  0E01               	movlw	high (eval_gps@elem+67)
 14508  002A1A  6E11               	movwf	(memcpy@s1+1)^0,c
 14509  002A1C  0E00               	movlw	0
 14510  002A1E  6E13               	movwf	(memcpy@n+1)^0,c
 14511  002A20  0E05               	movlw	5
 14512  002A22  6E12               	movwf	memcpy@n^0,c
 14513  002A24  EC24  F037         	call	_memcpy	;wreg free
 14514                           
 14515                           ;src/gps.c: 117:   GPS_lon[9] = elem[5][0];
 14516  002A28  C150  F279         	movff	eval_gps@elem+80,_GPS_lon+9
 14517                           
 14518                           ;src/gps.c: 118:   GPS_lon[10] = 0;
 14519  002A2C  0E00               	movlw	0
 14520  002A2E  0102               	movlb	2	; () banked
 14521  002A30  6F7A               	movwf	(_GPS_lon+10)& (0+255),b
 14522  002A32  0012               	return		;funcret
 14523  002A34                     __end_of_eval_gps:
 14524                           	opt callstack 0
 14525                           
 14526 ;; *************** function _strtol *****************
 14527 ;; Defined at:
 14528 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strtol.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;  s               2   63[COMRAM] PTR const unsigned char 
 14531 ;;		 -> gpsbuf(85), 
 14532 ;;  endptr          2   65[COMRAM] PTR PTR unsigned char 
 14533 ;;		 -> NULL(0), 
 14534 ;;  base            2   67[COMRAM] int 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;		None
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  4   63[COMRAM] long 
 14539 ;; Registers used:
 14540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/1
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14546 ;;      Params:         6       0       0       0       0       0       0
 14547 ;;      Locals:         0       0       0       0       0       0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0
 14549 ;;      Totals:         6       0       0       0       0       0       0
 14550 ;;Total ram usage:        6 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    5
 14553 ;; This function calls:
 14554 ;;		___strtoxl
 14555 ;; This function is called by:
 14556 ;;		_eval_gps
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           	psect	text42
 14561  0071DE                     __ptext42:
 14562                           	opt callstack 0
 14563  0071DE                     _strtol:
 14564                           	opt callstack 22
 14565                           
 14566                           ;incstack = 0
 14567  0071DE  C040  F01C         	movff	strtol@s,___strtoxl@s
 14568  0071E2  C041  F01D         	movff	strtol@s+1,___strtoxl@s+1
 14569  0071E6  C042  F01E         	movff	strtol@endptr,___strtoxl@endptr
 14570  0071EA  C043  F01F         	movff	strtol@endptr+1,___strtoxl@endptr+1
 14571  0071EE  C044  F020         	movff	strtol@base,___strtoxl@base
 14572  0071F2  C045  F021         	movff	strtol@base+1,___strtoxl@base+1
 14573  0071F6  0E01               	movlw	1
 14574  0071F8  6E22               	movwf	___strtoxl@is_signed^0,c
 14575  0071FA  ECAE  F010         	call	___strtoxl	;wreg free
 14576  0071FE  C01C  F040         	movff	?___strtoxl,?_strtol
 14577  007202  C01D  F041         	movff	?___strtoxl+1,?_strtol+1
 14578  007206  C01E  F042         	movff	?___strtoxl+2,?_strtol+2
 14579  00720A  C01F  F043         	movff	?___strtoxl+3,?_strtol+3
 14580  00720E  0012               	return		;funcret
 14581  007210                     __end_of_strtol:
 14582                           	opt callstack 0
 14583                           
 14584 ;; *************** function ___strtoxl *****************
 14585 ;; Defined at:
 14586 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/__strtoxl.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  s               2   27[COMRAM] PTR const unsigned char 
 14589 ;;		 -> gpsbuf(85), 
 14590 ;;  endptr          2   29[COMRAM] PTR PTR unsigned char 
 14591 ;;		 -> NULL(0), 
 14592 ;;  base            2   31[COMRAM] int 
 14593 ;;  is_signed       1   33[COMRAM] unsigned char 
 14594 ;; Auto vars:     Size  Location     Type
 14595 ;;  a               4   56[COMRAM] unsigned long 
 14596 ;;  limit           4   50[COMRAM] unsigned long 
 14597 ;;  prev_a          4   38[COMRAM] unsigned long 
 14598 ;;  cp              2   60[COMRAM] PTR const unsigned char 
 14599 ;;		 -> gpsbuf(85), 
 14600 ;;  c               1   62[COMRAM] unsigned char 
 14601 ;;  skip            1   55[COMRAM] unsigned char 
 14602 ;;  sign            1   54[COMRAM] unsigned char 
 14603 ;;  conv_done       1   49[COMRAM] unsigned char 
 14604 ;; Return value:  Size  Location     Type
 14605 ;;                  4   27[COMRAM] unsigned long 
 14606 ;; Registers used:
 14607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14608 ;; Tracked objects:
 14609 ;;		On entry : 0/1
 14610 ;;		On exit  : 0/0
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14613 ;;      Params:         7       0       0       0       0       0       0
 14614 ;;      Locals:        25       0       0       0       0       0       0
 14615 ;;      Temps:          4       0       0       0       0       0       0
 14616 ;;      Totals:        36       0       0       0       0       0       0
 14617 ;;Total ram usage:       36 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; Hardware stack levels required when called:    4
 14620 ;; This function calls:
 14621 ;;		___lmul
 14622 ;;		_isalpha
 14623 ;;		_isdigit
 14624 ;;		_isspace
 14625 ;;		_toupper
 14626 ;; This function is called by:
 14627 ;;		_strtol
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           	psect	text43
 14632  00215C                     __ptext43:
 14633                           	opt callstack 0
 14634  00215C                     ___strtoxl:
 14635                           	opt callstack 22
 14636                           
 14637                           ;incstack = 0
 14638  00215C  0E00               	movlw	0
 14639  00215E  6E39               	movwf	___strtoxl@a^0,c
 14640  002160  0E00               	movlw	0
 14641  002162  6E3A               	movwf	(___strtoxl@a+1)^0,c
 14642  002164  0E00               	movlw	0
 14643  002166  6E3B               	movwf	(___strtoxl@a+2)^0,c
 14644  002168  0E00               	movlw	0
 14645  00216A  6E3C               	movwf	(___strtoxl@a+3)^0,c
 14646  00216C  C01C  F03D         	movff	___strtoxl@s,___strtoxl@cp
 14647  002170  C01D  F03E         	movff	___strtoxl@s+1,___strtoxl@cp+1
 14648  002174  503D               	movf	___strtoxl@cp^0,w,c
 14649  002176  103E               	iorwf	(___strtoxl@cp+1)^0,w,c
 14650  002178  B4D8               	btfsc	status,2,c
 14651  00217A  D159               	goto	l10199
 14652  00217C  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14653  002180  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14654  002184  50DF               	movf	indf2,w,c
 14655  002186  B4D8               	btfsc	status,2,c
 14656  002188  D152               	goto	l10199
 14657  00218A  D002               	goto	L11
 14658  00218C                     l10097:
 14659  00218C  4A3D               	infsnz	___strtoxl@cp^0,f,c
 14660  00218E  2A3E               	incf	(___strtoxl@cp+1)^0,f,c
 14661  002190                     L11:
 14662  002190  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14663  002194  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14664  002198  50DF               	movf	indf2,w,c
 14665  00219A  6E3F               	movwf	___strtoxl@c^0,c
 14666  00219C  0E01               	movlw	1
 14667  00219E  6E31               	movwf	___strtoxl$3745^0,c
 14668  0021A0  0E20               	movlw	32
 14669  0021A2  183F               	xorwf	___strtoxl@c^0,w,c
 14670  0021A4  B4D8               	btfsc	status,2,c
 14671  0021A6  D013               	goto	l10107
 14672  0021A8  0EF7               	movlw	247
 14673  0021AA  6E23               	movwf	??___strtoxl^0,c
 14674  0021AC  0EFF               	movlw	255
 14675  0021AE  6E24               	movwf	(??___strtoxl+1)^0,c
 14676  0021B0  503F               	movf	___strtoxl@c^0,w,c
 14677  0021B2  6E25               	movwf	(??___strtoxl+2)^0,c
 14678  0021B4  6A26               	clrf	(??___strtoxl+3)^0,c
 14679  0021B6  5023               	movf	??___strtoxl^0,w,c
 14680  0021B8  2625               	addwf	(??___strtoxl+2)^0,f,c
 14681  0021BA  5024               	movf	(??___strtoxl+1)^0,w,c
 14682  0021BC  2226               	addwfc	(??___strtoxl+3)^0,f,c
 14683  0021BE  5026               	movf	(??___strtoxl+3)^0,w,c
 14684  0021C0  E104               	bnz	u12190
 14685  0021C2  0E05               	movlw	5
 14686  0021C4  5C25               	subwf	(??___strtoxl+2)^0,w,c
 14687  0021C6  A0D8               	btfss	status,0,c
 14688  0021C8  D002               	goto	l10107
 14689  0021CA                     u12190:
 14690  0021CA  0E00               	movlw	0
 14691  0021CC  6E31               	movwf	___strtoxl$3745^0,c
 14692  0021CE                     l10107:
 14693  0021CE  C031  F02B         	movff	___strtoxl$3745,___strtoxl$3744
 14694  0021D2  6A2C               	clrf	(___strtoxl$3744+1)^0,c
 14695  0021D4  502B               	movf	___strtoxl$3744^0,w,c
 14696  0021D6  102C               	iorwf	(___strtoxl$3744+1)^0,w,c
 14697  0021D8  A4D8               	btfss	status,2,c
 14698  0021DA  D7D8               	goto	l10097
 14699  0021DC  0E00               	movlw	0
 14700  0021DE  6E37               	movwf	___strtoxl@sign^0,c
 14701  0021E0  0E00               	movlw	0
 14702  0021E2  6E32               	movwf	___strtoxl@conv_done^0,c
 14703  0021E4  0E00               	movlw	0
 14704  0021E6  6E38               	movwf	___strtoxl@skip^0,c
 14705  0021E8  0E2D               	movlw	45
 14706  0021EA  183F               	xorwf	___strtoxl@c^0,w,c
 14707  0021EC  A4D8               	btfss	status,2,c
 14708  0021EE  D00B               	goto	l10121
 14709  0021F0  0E01               	movlw	1
 14710  0021F2  6E37               	movwf	___strtoxl@sign^0,c
 14711  0021F4                     l10119:
 14712  0021F4  4A3D               	infsnz	___strtoxl@cp^0,f,c
 14713  0021F6  2A3E               	incf	(___strtoxl@cp+1)^0,f,c
 14714  0021F8  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14715  0021FC  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14716  002200  50DF               	movf	indf2,w,c
 14717  002202  6E3F               	movwf	___strtoxl@c^0,c
 14718  002204  D004               	goto	l10125
 14719  002206                     l10121:
 14720  002206  0E2B               	movlw	43
 14721  002208  183F               	xorwf	___strtoxl@c^0,w,c
 14722  00220A  B4D8               	btfsc	status,2,c
 14723  00220C  D7F3               	goto	l10119
 14724  00220E                     l10125:
 14725  00220E  0E30               	movlw	48
 14726  002210  183F               	xorwf	___strtoxl@c^0,w,c
 14727  002212  A4D8               	btfss	status,2,c
 14728  002214  D030               	goto	l10147
 14729  002216  4A3D               	infsnz	___strtoxl@cp^0,f,c
 14730  002218  2A3E               	incf	(___strtoxl@cp+1)^0,f,c
 14731  00221A  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14732  00221E  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14733  002222  50DF               	movf	indf2,w,c
 14734  002224  6E3F               	movwf	___strtoxl@c^0,c
 14735  002226  5020               	movf	___strtoxl@base^0,w,c
 14736  002228  1021               	iorwf	(___strtoxl@base+1)^0,w,c
 14737  00222A  B4D8               	btfsc	status,2,c
 14738  00222C  D005               	goto	u12250
 14739  00222E  0E10               	movlw	16
 14740  002230  1820               	xorwf	___strtoxl@base^0,w,c
 14741  002232  1021               	iorwf	(___strtoxl@base+1)^0,w,c
 14742  002234  A4D8               	btfss	status,2,c
 14743  002236  D015               	goto	l10141
 14744  002238                     u12250:
 14745  002238  0E78               	movlw	120
 14746  00223A  183F               	xorwf	___strtoxl@c^0,w,c
 14747  00223C  B4D8               	btfsc	status,2,c
 14748  00223E  D004               	goto	u12270
 14749  002240  0E58               	movlw	88
 14750  002242  183F               	xorwf	___strtoxl@c^0,w,c
 14751  002244  A4D8               	btfss	status,2,c
 14752  002246  D00D               	goto	l10141
 14753  002248                     u12270:
 14754  002248  0E00               	movlw	0
 14755  00224A  6E21               	movwf	(___strtoxl@base+1)^0,c
 14756  00224C  0E10               	movlw	16
 14757  00224E  6E20               	movwf	___strtoxl@base^0,c
 14758  002250  4A3D               	infsnz	___strtoxl@cp^0,f,c
 14759  002252  2A3E               	incf	(___strtoxl@cp+1)^0,f,c
 14760  002254  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14761  002258  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14762  00225C  50DF               	movf	indf2,w,c
 14763  00225E  6E3F               	movwf	___strtoxl@c^0,c
 14764  002260  D00A               	goto	l10147
 14765  002262                     l10141:
 14766  002262  0E01               	movlw	1
 14767  002264  6E32               	movwf	___strtoxl@conv_done^0,c
 14768  002266  5020               	movf	___strtoxl@base^0,w,c
 14769  002268  1021               	iorwf	(___strtoxl@base+1)^0,w,c
 14770  00226A  A4D8               	btfss	status,2,c
 14771  00226C  D004               	goto	l10147
 14772  00226E  0E00               	movlw	0
 14773  002270  6E21               	movwf	(___strtoxl@base+1)^0,c
 14774  002272  0E08               	movlw	8
 14775  002274  6E20               	movwf	___strtoxl@base^0,c
 14776  002276                     l10147:
 14777  002276  5020               	movf	___strtoxl@base^0,w,c
 14778  002278  1021               	iorwf	(___strtoxl@base+1)^0,w,c
 14779  00227A  A4D8               	btfss	status,2,c
 14780  00227C  D004               	goto	l2370
 14781  00227E  0E00               	movlw	0
 14782  002280  6E21               	movwf	(___strtoxl@base+1)^0,c
 14783  002282  0E0A               	movlw	10
 14784  002284  6E20               	movwf	___strtoxl@base^0,c
 14785  002286                     l2370:
 14786  002286  5022               	movf	___strtoxl@is_signed^0,w,c
 14787  002288  B4D8               	btfsc	status,2,c
 14788  00228A  D014               	goto	l2371
 14789  00228C  5037               	movf	___strtoxl@sign^0,w,c
 14790  00228E  A4D8               	btfss	status,2,c
 14791  002290  D008               	goto	l10155
 14792  002292  0EFF               	movlw	255
 14793  002294  6E33               	movwf	___strtoxl@limit^0,c
 14794  002296  0EFF               	movlw	255
 14795  002298  6E34               	movwf	(___strtoxl@limit+1)^0,c
 14796  00229A  0EFF               	movlw	255
 14797  00229C  6E35               	movwf	(___strtoxl@limit+2)^0,c
 14798  00229E  0E7F               	movlw	127
 14799  0022A0  D007               	goto	L12
 14800  0022A2                     l10155:
 14801  0022A2  0E00               	movlw	0
 14802  0022A4  6E33               	movwf	___strtoxl@limit^0,c
 14803  0022A6  0E00               	movlw	0
 14804  0022A8  6E34               	movwf	(___strtoxl@limit+1)^0,c
 14805  0022AA  0E00               	movlw	0
 14806  0022AC  6E35               	movwf	(___strtoxl@limit+2)^0,c
 14807  0022AE  0E80               	movlw	128
 14808  0022B0                     L12:
 14809  0022B0  6E36               	movwf	(___strtoxl@limit+3)^0,c
 14810  0022B2  D004               	goto	l2377
 14811  0022B4                     l2371:
 14812  0022B4  6833               	setf	___strtoxl@limit^0,c
 14813  0022B6  6834               	setf	(___strtoxl@limit+1)^0,c
 14814  0022B8  6835               	setf	(___strtoxl@limit+2)^0,c
 14815  0022BA  6836               	setf	(___strtoxl@limit+3)^0,c
 14816  0022BC                     l2377:
 14817  0022BC  C039  F027         	movff	___strtoxl@a,___strtoxl@prev_a
 14818  0022C0  C03A  F028         	movff	___strtoxl@a+1,___strtoxl@prev_a+1
 14819  0022C4  C03B  F029         	movff	___strtoxl@a+2,___strtoxl@prev_a+2
 14820  0022C8  C03C  F02A         	movff	___strtoxl@a+3,___strtoxl@prev_a+3
 14821  0022CC  0E9F               	movlw	159
 14822  0022CE  6E23               	movwf	??___strtoxl^0,c
 14823  0022D0  0EFF               	movlw	255
 14824  0022D2  6E24               	movwf	(??___strtoxl+1)^0,c
 14825  0022D4  503F               	movf	___strtoxl@c^0,w,c
 14826  0022D6  6E25               	movwf	(??___strtoxl+2)^0,c
 14827  0022D8  6A26               	clrf	(??___strtoxl+3)^0,c
 14828  0022DA  0E20               	movlw	32
 14829  0022DC  1225               	iorwf	(??___strtoxl+2)^0,f,c
 14830  0022DE  0E00               	movlw	0
 14831  0022E0  1226               	iorwf	(??___strtoxl+3)^0,f,c
 14832  0022E2  5023               	movf	??___strtoxl^0,w,c
 14833  0022E4  2625               	addwf	(??___strtoxl+2)^0,f,c
 14834  0022E6  5024               	movf	(??___strtoxl+1)^0,w,c
 14835  0022E8  2226               	addwfc	(??___strtoxl+3)^0,f,c
 14836  0022EA  5026               	movf	(??___strtoxl+3)^0,w,c
 14837  0022EC  E106               	bnz	u12320
 14838  0022EE  0E1A               	movlw	26
 14839  0022F0  5C25               	subwf	(??___strtoxl+2)^0,w,c
 14840  0022F2  B0D8               	btfsc	status,0,c
 14841  0022F4  D002               	goto	u12320
 14842  0022F6  0E01               	movlw	1
 14843  0022F8  D001               	goto	u12330
 14844  0022FA                     u12320:
 14845  0022FA  0E00               	movlw	0
 14846  0022FC                     u12330:
 14847  0022FC  6E2D               	movwf	___strtoxl$3746^0,c
 14848  0022FE  6A2E               	clrf	(___strtoxl$3746+1)^0,c
 14849  002300  502D               	movf	___strtoxl$3746^0,w,c
 14850  002302  102E               	iorwf	(___strtoxl$3746+1)^0,w,c
 14851  002304  B4D8               	btfsc	status,2,c
 14852  002306  D009               	goto	l10165
 14853  002308  C03F  F014         	movff	___strtoxl@c,toupper@c
 14854  00230C  6A15               	clrf	(toupper@c+1)^0,c
 14855  00230E  EC6F  F036         	call	_toupper	;wreg free
 14856  002312  5014               	movf	?_toupper^0,w,c
 14857  002314  0FC9               	addlw	201
 14858  002316  6E3F               	movwf	___strtoxl@c^0,c
 14859  002318  D01C               	goto	l10173
 14860  00231A                     l10165:
 14861  00231A  0ED0               	movlw	208
 14862  00231C  6E23               	movwf	??___strtoxl^0,c
 14863  00231E  0EFF               	movlw	255
 14864  002320  6E24               	movwf	(??___strtoxl+1)^0,c
 14865  002322  503F               	movf	___strtoxl@c^0,w,c
 14866  002324  6E25               	movwf	(??___strtoxl+2)^0,c
 14867  002326  6A26               	clrf	(??___strtoxl+3)^0,c
 14868  002328  5023               	movf	??___strtoxl^0,w,c
 14869  00232A  2625               	addwf	(??___strtoxl+2)^0,f,c
 14870  00232C  5024               	movf	(??___strtoxl+1)^0,w,c
 14871  00232E  2226               	addwfc	(??___strtoxl+3)^0,f,c
 14872  002330  5026               	movf	(??___strtoxl+3)^0,w,c
 14873  002332  E106               	bnz	u12350
 14874  002334  0E0A               	movlw	10
 14875  002336  5C25               	subwf	(??___strtoxl+2)^0,w,c
 14876  002338  B0D8               	btfsc	status,0,c
 14877  00233A  D002               	goto	u12350
 14878  00233C  0E01               	movlw	1
 14879  00233E  D001               	goto	u12360
 14880  002340                     u12350:
 14881  002340  0E00               	movlw	0
 14882  002342                     u12360:
 14883  002342  6E2F               	movwf	___strtoxl$3747^0,c
 14884  002344  6A30               	clrf	(___strtoxl$3747+1)^0,c
 14885  002346  502F               	movf	___strtoxl$3747^0,w,c
 14886  002348  1030               	iorwf	(___strtoxl$3747+1)^0,w,c
 14887  00234A  B4D8               	btfsc	status,2,c
 14888  00234C  D062               	goto	l10193
 14889  00234E  0E30               	movlw	48
 14890  002350  5E3F               	subwf	___strtoxl@c^0,f,c
 14891  002352                     l10173:
 14892  002352  503F               	movf	___strtoxl@c^0,w,c
 14893  002354  6E23               	movwf	??___strtoxl^0,c
 14894  002356  6A24               	clrf	(??___strtoxl+1)^0,c
 14895  002358  5020               	movf	___strtoxl@base^0,w,c
 14896  00235A  5C23               	subwf	??___strtoxl^0,w,c
 14897  00235C  5024               	movf	(??___strtoxl+1)^0,w,c
 14898  00235E  0A80               	xorlw	128
 14899  002360  6E25               	movwf	(??___strtoxl+2)^0,c
 14900  002362  5021               	movf	(___strtoxl@base+1)^0,w,c
 14901  002364  0A80               	xorlw	128
 14902  002366  5825               	subwfb	(??___strtoxl+2)^0,w,c
 14903  002368  B0D8               	btfsc	status,0,c
 14904  00236A  D053               	goto	l10193
 14905  00236C  5038               	movf	___strtoxl@skip^0,w,c
 14906  00236E  A4D8               	btfss	status,2,c
 14907  002370  D045               	goto	l10189
 14908  002372  C020  F00E         	movff	___strtoxl@base,___lmul@multiplier
 14909  002376  C021  F00F         	movff	___strtoxl@base+1,___lmul@multiplier+1
 14910  00237A  0E00               	movlw	0
 14911  00237C  BE0F               	btfsc	(___lmul@multiplier+1)^0,7,c
 14912  00237E  0EFF               	movlw	-1
 14913  002380  6E10               	movwf	(___lmul@multiplier+2)^0,c
 14914  002382  6E11               	movwf	(___lmul@multiplier+3)^0,c
 14915  002384  C039  F012         	movff	___strtoxl@a,___lmul@multiplicand
 14916  002388  C03A  F013         	movff	___strtoxl@a+1,___lmul@multiplicand+1
 14917  00238C  C03B  F014         	movff	___strtoxl@a+2,___lmul@multiplicand+2
 14918  002390  C03C  F015         	movff	___strtoxl@a+3,___lmul@multiplicand+3
 14919  002394  EC5A  F034         	call	___lmul	;wreg free
 14920  002398  503F               	movf	___strtoxl@c^0,w,c
 14921  00239A  240E               	addwf	?___lmul^0,w,c
 14922  00239C  6E39               	movwf	___strtoxl@a^0,c
 14923  00239E  0E00               	movlw	0
 14924  0023A0  200F               	addwfc	(?___lmul+1)^0,w,c
 14925  0023A2  6E3A               	movwf	(___strtoxl@a+1)^0,c
 14926  0023A4  0E00               	movlw	0
 14927  0023A6  2010               	addwfc	(?___lmul+2)^0,w,c
 14928  0023A8  6E3B               	movwf	(___strtoxl@a+2)^0,c
 14929  0023AA  0E00               	movlw	0
 14930  0023AC  2011               	addwfc	(?___lmul+3)^0,w,c
 14931  0023AE  6E3C               	movwf	(___strtoxl@a+3)^0,c
 14932  0023B0  5027               	movf	___strtoxl@prev_a^0,w,c
 14933  0023B2  5C39               	subwf	___strtoxl@a^0,w,c
 14934  0023B4  5028               	movf	(___strtoxl@prev_a+1)^0,w,c
 14935  0023B6  583A               	subwfb	(___strtoxl@a+1)^0,w,c
 14936  0023B8  5029               	movf	(___strtoxl@prev_a+2)^0,w,c
 14937  0023BA  583B               	subwfb	(___strtoxl@a+2)^0,w,c
 14938  0023BC  502A               	movf	(___strtoxl@prev_a+3)^0,w,c
 14939  0023BE  583C               	subwfb	(___strtoxl@a+3)^0,w,c
 14940  0023C0  A0D8               	btfss	status,0,c
 14941  0023C2  D00D               	goto	u12420
 14942  0023C4  5022               	movf	___strtoxl@is_signed^0,w,c
 14943  0023C6  B4D8               	btfsc	status,2,c
 14944  0023C8  D019               	goto	l10189
 14945  0023CA  5039               	movf	___strtoxl@a^0,w,c
 14946  0023CC  5C33               	subwf	___strtoxl@limit^0,w,c
 14947  0023CE  503A               	movf	(___strtoxl@a+1)^0,w,c
 14948  0023D0  5834               	subwfb	(___strtoxl@limit+1)^0,w,c
 14949  0023D2  503B               	movf	(___strtoxl@a+2)^0,w,c
 14950  0023D4  5835               	subwfb	(___strtoxl@limit+2)^0,w,c
 14951  0023D6  503C               	movf	(___strtoxl@a+3)^0,w,c
 14952  0023D8  5836               	subwfb	(___strtoxl@limit+3)^0,w,c
 14953  0023DA  B0D8               	btfsc	status,0,c
 14954  0023DC  D00F               	goto	l10189
 14955  0023DE                     u12420:
 14956  0023DE  C033  F039         	movff	___strtoxl@limit,___strtoxl@a
 14957  0023E2  C034  F03A         	movff	___strtoxl@limit+1,___strtoxl@a+1
 14958  0023E6  C035  F03B         	movff	___strtoxl@limit+2,___strtoxl@a+2
 14959  0023EA  C036  F03C         	movff	___strtoxl@limit+3,___strtoxl@a+3
 14960  0023EE  0E00               	movlw	0
 14961  0023F0  0102               	movlb	2	; () banked
 14962  0023F2  6FAD               	movwf	(_errno+1)& (0+255),b
 14963  0023F4  0E22               	movlw	34
 14964  0023F6  6FAC               	movwf	_errno& (0+255),b
 14965  0023F8  0E01               	movlw	1
 14966  0023FA  6E38               	movwf	___strtoxl@skip^0,c
 14967  0023FC                     l10189:
 14968  0023FC  4A3D               	infsnz	___strtoxl@cp^0,f,c
 14969  0023FE  2A3E               	incf	(___strtoxl@cp+1)^0,f,c
 14970  002400  C03D  FFD9         	movff	___strtoxl@cp,fsr2l
 14971  002404  C03E  FFDA         	movff	___strtoxl@cp+1,fsr2h
 14972  002408  50DF               	movf	indf2,w,c
 14973  00240A  6E3F               	movwf	___strtoxl@c^0,c
 14974  00240C  0E01               	movlw	1
 14975  00240E  6E32               	movwf	___strtoxl@conv_done^0,c
 14976  002410  D755               	goto	l2377
 14977  002412                     l10193:
 14978  002412  5038               	movf	___strtoxl@skip^0,w,c
 14979  002414  A4D8               	btfss	status,2,c
 14980  002416  D00B               	goto	l10199
 14981  002418  5037               	movf	___strtoxl@sign^0,w,c
 14982  00241A  B4D8               	btfsc	status,2,c
 14983  00241C  D008               	goto	l10199
 14984  00241E  1E3C               	comf	(___strtoxl@a+3)^0,f,c
 14985  002420  1E3B               	comf	(___strtoxl@a+2)^0,f,c
 14986  002422  1E3A               	comf	(___strtoxl@a+1)^0,f,c
 14987  002424  6C39               	negf	___strtoxl@a^0,c
 14988  002426  0E00               	movlw	0
 14989  002428  223A               	addwfc	(___strtoxl@a+1)^0,f,c
 14990  00242A  223B               	addwfc	(___strtoxl@a+2)^0,f,c
 14991  00242C  223C               	addwfc	(___strtoxl@a+3)^0,f,c
 14992  00242E                     l10199:
 14993  00242E  501E               	movf	___strtoxl@endptr^0,w,c
 14994  002430  101F               	iorwf	(___strtoxl@endptr+1)^0,w,c
 14995  002432  B4D8               	btfsc	status,2,c
 14996  002434  D00F               	goto	l10207
 14997  002436  5032               	movf	___strtoxl@conv_done^0,w,c
 14998  002438  A4D8               	btfss	status,2,c
 14999  00243A  D004               	goto	l10205
 15000  00243C  C01C  F03D         	movff	___strtoxl@s,___strtoxl@cp
 15001  002440  C01D  F03E         	movff	___strtoxl@s+1,___strtoxl@cp+1
 15002  002444                     l10205:
 15003  002444  C01E  FFD9         	movff	___strtoxl@endptr,fsr2l
 15004  002448  C01F  FFDA         	movff	___strtoxl@endptr+1,fsr2h
 15005  00244C  C03D  FFDE         	movff	___strtoxl@cp,postinc2
 15006  002450  C03E  FFDD         	movff	___strtoxl@cp+1,postdec2
 15007  002454                     l10207:
 15008  002454  C039  F01C         	movff	___strtoxl@a,?___strtoxl
 15009  002458  C03A  F01D         	movff	___strtoxl@a+1,?___strtoxl+1
 15010  00245C  C03B  F01E         	movff	___strtoxl@a+2,?___strtoxl+2
 15011  002460  C03C  F01F         	movff	___strtoxl@a+3,?___strtoxl+3
 15012  002464  0012               	return		;funcret
 15013  002466                     __end_of___strtoxl:
 15014                           	opt callstack 0
 15015                           
 15016 ;; *************** function ___lmul *****************
 15017 ;; Defined at:
 15018 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul32.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;  multiplier      4   13[COMRAM] unsigned long 
 15021 ;;  multiplicand    4   17[COMRAM] unsigned long 
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;  product         4   21[COMRAM] unsigned long 
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  4   13[COMRAM] unsigned long 
 15026 ;; Registers used:
 15027 ;;		wreg, status,2, status,0
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/2
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15033 ;;      Params:         8       0       0       0       0       0       0
 15034 ;;      Locals:         4       0       0       0       0       0       0
 15035 ;;      Temps:          0       0       0       0       0       0       0
 15036 ;;      Totals:        12       0       0       0       0       0       0
 15037 ;;Total ram usage:       12 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:    2
 15040 ;; This function calls:
 15041 ;;		Nothing
 15042 ;; This function is called by:
 15043 ;;		_adf4351_calc_counters
 15044 ;;		_CalculateGridSquare
 15045 ;;		___strtoxl
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           	psect	text44
 15050  0068B4                     __ptext44:
 15051                           	opt callstack 0
 15052  0068B4                     ___lmul:
 15053                           	opt callstack 26
 15054                           
 15055                           ;incstack = 0
 15056  0068B4  0E00               	movlw	0
 15057  0068B6  6E16               	movwf	___lmul@product^0,c
 15058  0068B8  0E00               	movlw	0
 15059  0068BA  6E17               	movwf	(___lmul@product+1)^0,c
 15060  0068BC  0E00               	movlw	0
 15061  0068BE  6E18               	movwf	(___lmul@product+2)^0,c
 15062  0068C0  0E00               	movlw	0
 15063  0068C2  6E19               	movwf	(___lmul@product+3)^0,c
 15064  0068C4                     l6641:
 15065  0068C4  A00E               	btfss	___lmul@multiplier^0,0,c
 15066  0068C6  D008               	goto	l6645
 15067  0068C8  5012               	movf	___lmul@multiplicand^0,w,c
 15068  0068CA  2616               	addwf	___lmul@product^0,f,c
 15069  0068CC  5013               	movf	(___lmul@multiplicand+1)^0,w,c
 15070  0068CE  2217               	addwfc	(___lmul@product+1)^0,f,c
 15071  0068D0  5014               	movf	(___lmul@multiplicand+2)^0,w,c
 15072  0068D2  2218               	addwfc	(___lmul@product+2)^0,f,c
 15073  0068D4  5015               	movf	(___lmul@multiplicand+3)^0,w,c
 15074  0068D6  2219               	addwfc	(___lmul@product+3)^0,f,c
 15075  0068D8                     l6645:
 15076  0068D8  90D8               	bcf	status,0,c
 15077  0068DA  3612               	rlcf	___lmul@multiplicand^0,f,c
 15078  0068DC  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
 15079  0068DE  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
 15080  0068E0  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
 15081  0068E2  90D8               	bcf	status,0,c
 15082  0068E4  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
 15083  0068E6  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
 15084  0068E8  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
 15085  0068EA  320E               	rrcf	___lmul@multiplier^0,f,c
 15086  0068EC  500E               	movf	___lmul@multiplier^0,w,c
 15087  0068EE  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
 15088  0068F0  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
 15089  0068F2  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
 15090  0068F4  A4D8               	btfss	status,2,c
 15091  0068F6  D7E6               	goto	l6641
 15092  0068F8  C016  F00E         	movff	___lmul@product,?___lmul
 15093  0068FC  C017  F00F         	movff	___lmul@product+1,?___lmul+1
 15094  006900  C018  F010         	movff	___lmul@product+2,?___lmul+2
 15095  006904  C019  F011         	movff	___lmul@product+3,?___lmul+3
 15096  006908  0012               	return		;funcret
 15097  00690A                     __end_of___lmul:
 15098                           	opt callstack 0
 15099                           
 15100 ;; *************** function _strchr *****************
 15101 ;; Defined at:
 15102 ;;		line 3 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strchr.c"
 15103 ;; Parameters:    Size  Location     Type
 15104 ;;  s               2   13[COMRAM] PTR const unsigned char 
 15105 ;;		 -> gpsbuf(85), NULL(0), 
 15106 ;;  c               2   15[COMRAM] int 
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;		None
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  2   13[COMRAM] PTR unsigned char 
 15111 ;; Registers used:
 15112 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/1
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15118 ;;      Params:         4       0       0       0       0       0       0
 15119 ;;      Locals:         0       0       0       0       0       0       0
 15120 ;;      Temps:          1       0       0       0       0       0       0
 15121 ;;      Totals:         5       0       0       0       0       0       0
 15122 ;;Total ram usage:        5 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    2
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_eval_gps
 15129 ;; This function uses a non-reentrant model
 15130 ;;
 15131                           
 15132                           	psect	text45
 15133  007174                     __ptext45:
 15134                           	opt callstack 0
 15135  007174                     _strchr:
 15136                           	opt callstack 25
 15137                           
 15138                           ;incstack = 0
 15139  007174  C00E  FFD9         	movff	strchr@s,fsr2l
 15140  007178  C00F  FFDA         	movff	strchr@s+1,fsr2h
 15141  00717C  5010               	movf	strchr@c^0,w,c
 15142  00717E  18DE               	xorwf	postinc2,w,c
 15143  007180  A4D8               	btfss	status,2,c
 15144  007182  D005               	goto	l7385
 15145  007184  C00E  F00E         	movff	strchr@s,?_strchr
 15146  007188  C00F  F00F         	movff	strchr@s+1,?_strchr+1
 15147  00718C  0012               	return	
 15148  00718E                     l7385:
 15149  00718E  C00E  FFD9         	movff	strchr@s,fsr2l
 15150  007192  C00F  FFDA         	movff	strchr@s+1,fsr2h
 15151  007196  4A0E               	infsnz	strchr@s^0,f,c
 15152  007198  2A0F               	incf	(strchr@s+1)^0,f,c
 15153  00719A  50DF               	movf	indf2,w,c
 15154  00719C  A4D8               	btfss	status,2,c
 15155  00719E  D7EA               	goto	_strchr
 15156  0071A0  0E00               	movlw	0
 15157  0071A2  6E0E               	movwf	?_strchr^0,c
 15158  0071A4  0E00               	movlw	0
 15159  0071A6  6E0F               	movwf	(?_strchr+1)^0,c
 15160  0071A8  0012               	return		;funcret
 15161  0071AA                     __end_of_strchr:
 15162                           	opt callstack 0
 15163                           
 15164 ;; *************** function _memcpy *****************
 15165 ;; Defined at:
 15166 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memcpy.c"
 15167 ;; Parameters:    Size  Location     Type
 15168 ;;  d1              2   13[COMRAM] PTR void 
 15169 ;;		 -> eval_gps@elem(240), GPS_lon(15), GPS_lat(15), show_display@old_GPS_time(9), 
 15170 ;;		 -> show_display@old_GPS_lon(15), show_display@old_GPS_lat(15), 
 15171 ;;  s1              2   15[COMRAM] PTR const void 
 15172 ;;		 -> gpsbuf(85), eval_gps@elem(240), GPS_lon(15), GPS_lat(15), 
 15173 ;;		 -> GPS_time(9), NULL(0), 
 15174 ;;  n               2   17[COMRAM] unsigned int 
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;  s               2   21[COMRAM] PTR const unsigned char 
 15177 ;;		 -> gpsbuf(85), eval_gps@elem(240), GPS_lon(15), GPS_lat(15), 
 15178 ;;		 -> GPS_time(9), NULL(0), 
 15179 ;;  d               2   19[COMRAM] PTR unsigned char 
 15180 ;;		 -> eval_gps@elem(240), GPS_lon(15), GPS_lat(15), show_display@old_GPS_time(9), 
 15181 ;;		 -> show_display@old_GPS_lon(15), show_display@old_GPS_lat(15), 
 15182 ;;  tmp             1   23[COMRAM] unsigned char 
 15183 ;; Return value:  Size  Location     Type
 15184 ;;                  2   13[COMRAM] PTR void 
 15185 ;; Registers used:
 15186 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15187 ;; Tracked objects:
 15188 ;;		On entry : 0/0
 15189 ;;		On exit  : 0/0
 15190 ;;		Unchanged: 0/0
 15191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15192 ;;      Params:         6       0       0       0       0       0       0
 15193 ;;      Locals:         5       0       0       0       0       0       0
 15194 ;;      Temps:          0       0       0       0       0       0       0
 15195 ;;      Totals:        11       0       0       0       0       0       0
 15196 ;;Total ram usage:       11 bytes
 15197 ;; Hardware stack levels used:    1
 15198 ;; Hardware stack levels required when called:    2
 15199 ;; This function calls:
 15200 ;;		Nothing
 15201 ;; This function is called by:
 15202 ;;		_show_display
 15203 ;;		_eval_gps
 15204 ;; This function uses a non-reentrant model
 15205 ;;
 15206                           
 15207                           	psect	text46
 15208  006E48                     __ptext46:
 15209                           	opt callstack 0
 15210  006E48                     _memcpy:
 15211                           	opt callstack 27
 15212                           
 15213                           ;incstack = 0
 15214  006E48  C010  F016         	movff	memcpy@s1,memcpy@s
 15215  006E4C  C011  F017         	movff	memcpy@s1+1,memcpy@s+1
 15216  006E50  C00E  F014         	movff	memcpy@d1,memcpy@d
 15217  006E54  C00F  F015         	movff	memcpy@d1+1,memcpy@d+1
 15218  006E58  D010               	goto	l7373
 15219  006E5A                     l7365:
 15220  006E5A  C016  FFD9         	movff	memcpy@s,fsr2l
 15221  006E5E  C017  FFDA         	movff	memcpy@s+1,fsr2h
 15222  006E62  50DF               	movf	indf2,w,c
 15223  006E64  6E18               	movwf	memcpy@tmp^0,c
 15224  006E66  4A16               	infsnz	memcpy@s^0,f,c
 15225  006E68  2A17               	incf	(memcpy@s+1)^0,f,c
 15226  006E6A  C014  FFD9         	movff	memcpy@d,fsr2l
 15227  006E6E  C015  FFDA         	movff	memcpy@d+1,fsr2h
 15228  006E72  C018  FFDF         	movff	memcpy@tmp,indf2
 15229  006E76  4A14               	infsnz	memcpy@d^0,f,c
 15230  006E78  2A15               	incf	(memcpy@d+1)^0,f,c
 15231  006E7A                     l7373:
 15232  006E7A  0612               	decf	memcpy@n^0,f,c
 15233  006E7C  A0D8               	btfss	status,0,c
 15234  006E7E  0613               	decf	(memcpy@n+1)^0,f,c
 15235  006E80  2812               	incf	memcpy@n^0,w,c
 15236  006E82  E1EB               	bnz	l7365
 15237  006E84  2813               	incf	(memcpy@n+1)^0,w,c
 15238  006E86  B4D8               	btfsc	status,2,c
 15239  006E88  0012               	return	
 15240  006E8A  D7E7               	goto	l7365
 15241  006E8C                     __end_of_memcpy:
 15242                           	opt callstack 0
 15243                           
 15244 ;; *************** function _lnb_configure *****************
 15245 ;; Defined at:
 15246 ;;		line 28 in file "src/driver/lnb.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  i2c             2   42[BANK0 ] PTR struct i2c_dev__
 15249 ;;		 -> g_i2c_bus(8), 
 15250 ;;  addr            1   44[BANK0 ] unsigned char 
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;  res             2   47[BANK0 ] int 
 15253 ;; Return value:  Size  Location     Type
 15254 ;;                  1    wreg      void 
 15255 ;; Registers used:
 15256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15257 ;; Tracked objects:
 15258 ;;		On entry : 3F/0
 15259 ;;		On exit  : 3D/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15262 ;;      Params:         0       3       0       0       0       0       0
 15263 ;;      Locals:         0       2       0       0       0       0       0
 15264 ;;      Temps:          0       2       0       0       0       0       0
 15265 ;;      Totals:         0       7       0       0       0       0       0
 15266 ;;Total ram usage:        7 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:   11
 15269 ;; This function calls:
 15270 ;;		_check_LNB_status
 15271 ;;		_i2c_probe_addr
 15272 ;;		_lnb_do_configure
 15273 ;;		_printf
 15274 ;; This function is called by:
 15275 ;;		_main
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text47
 15280  0062BA                     __ptext47:
 15281                           	opt callstack 0
 15282  0062BA                     _lnb_configure:
 15283                           	opt callstack 19
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;src/driver/lnb.c: 28: void lnb_configure(i2c_dev i2c, u8 addr);src/driver/lnb.c: 29: {;
      +                          src/driver/lnb.c: 30:     int res = i2c_probe_addr(i2c, addr);
 15287                           
 15288                           ;incstack = 0
 15289  0062BA  C0AA  F055         	movff	lnb_configure@i2c,i2c_probe_addr@dev
 15290  0062BE  C0AB  F056         	movff	lnb_configure@i2c+1,i2c_probe_addr@dev+1
 15291  0062C2  C0AC  F057         	movff	lnb_configure@addr,i2c_probe_addr@addr
 15292  0062C6  EC46  F038         	call	_i2c_probe_addr	;wreg free
 15293  0062CA  C055  F0AF         	movff	?_i2c_probe_addr,lnb_configure@res
 15294  0062CE  C056  F0B0         	movff	?_i2c_probe_addr+1,lnb_configure@res+1
 15295                           
 15296                           ;src/driver/lnb.c: 31:     if(res == 0)
 15297  0062D2  0100               	movlb	0	; () banked
 15298  0062D4  51AF               	movf	lnb_configure@res& (0+255),w,b
 15299  0062D6  11B0               	iorwf	(lnb_configure@res+1)& (0+255),w,b
 15300  0062D8  A4D8               	btfss	status,2,c
 15301  0062DA  D032               	goto	l11281
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;src/driver/lnb.c: 32:  {;src/driver/lnb.c: 33:   printf("LNB:LNB Chip found\n");
 15305  0062DC  0E2B               	movlw	low STR_4
 15306  0062DE  6F97               	movwf	printf@fmt& (0+255),b
 15307  0062E0  0E7D               	movlw	high STR_4
 15308  0062E2  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15309  0062E4  EC30  F03A         	call	_printf	;wreg free
 15310                           
 15311                           ; BSR set to: 2
 15312                           ;src/driver/lnb.c: 34:   lnb_do_configure(i2c, addr);
 15313  0062E8  C0AA  F0A4         	movff	lnb_configure@i2c,lnb_do_configure@i2c
 15314  0062EC  C0AB  F0A5         	movff	lnb_configure@i2c+1,lnb_do_configure@i2c+1
 15315  0062F0  C0AC  F0A6         	movff	lnb_configure@addr,lnb_do_configure@addr
 15316  0062F4  ECBD  F027         	call	_lnb_do_configure	;wreg free
 15317                           
 15318                           ; BSR set to: 2
 15319                           ;src/driver/lnb.c: 35:   _delaywdt((unsigned long)((250)*(8000000/4000.0)));
 15320  0062F8  0E02               	movlw	2
 15321  0062FA  0100               	movlb	0	; () banked
 15322  0062FC  6FAE               	movwf	(??_lnb_configure+1)& (0+255),b
 15323  0062FE  0EE8               	movlw	232
 15324  006300  6FAD               	movwf	??_lnb_configure& (0+255),b
 15325  006302  0E51               	movlw	81
 15326  006304                     u15007:
 15327  006304  0004               	clrwdt	
 15328  006306  2EE8               	decfsz	wreg,f,c
 15329  006308  D7FD               	bra	u15007
 15330  00630A  2FAD               	decfsz	??_lnb_configure& (0+255),f,b
 15331  00630C  D7FB               	bra	u15007
 15332  00630E  2FAE               	decfsz	(??_lnb_configure+1)& (0+255),f,b
 15333  006310  D7F9               	bra	u15007
 15334  006312  0004               	clrwdt	
 15335  006314  F000               	nop	
 15336  006316  0004               	clrwdt	
 15337                           
 15338                           ;src/driver/lnb.c: 36:   if(!check_LNB_status(i2c, addr))
 15339  006318  C0AA  F0A4         	movff	lnb_configure@i2c,check_LNB_status@i2c
 15340  00631C  C0AB  F0A5         	movff	lnb_configure@i2c+1,check_LNB_status@i2c+1
 15341  006320  C0AC  F0A6         	movff	lnb_configure@addr,check_LNB_status@addr
 15342  006324  ECBA  F028         	call	_check_LNB_status	;wreg free
 15343  006328  0900               	iorlw	0
 15344  00632A  A4D8               	btfss	status,2,c
 15345  00632C  0012               	return	
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;src/driver/lnb.c: 37:   {;src/driver/lnb.c: 39:    lnb_do_configure(i2c, addr);
 15349  00632E  C0AA  F0A4         	movff	lnb_configure@i2c,lnb_do_configure@i2c
 15350  006332  C0AB  F0A5         	movff	lnb_configure@i2c+1,lnb_do_configure@i2c+1
 15351  006336  C0AC  F0A6         	movff	lnb_configure@addr,lnb_do_configure@addr
 15352  00633A  ECBD  F027         	call	_lnb_do_configure	;wreg free
 15353  00633E  0012               	return	
 15354  006340                     l11281:
 15355                           
 15356                           ; BSR set to: 0
 15357                           ;src/driver/lnb.c: 43:  {;src/driver/lnb.c: 44:         printf("LNB:LNB Chip not found!\
      +                          n");
 15358  006340  0EA4               	movlw	low STR_5
 15359  006342  6F97               	movwf	printf@fmt& (0+255),b
 15360  006344  0E7C               	movlw	high STR_5
 15361  006346  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15362  006348  EC30  F03A         	call	_printf	;wreg free
 15363  00634C  0012               	return		;funcret
 15364  00634E                     __end_of_lnb_configure:
 15365                           	opt callstack 0
 15366                           
 15367 ;; *************** function _lnb_do_configure *****************
 15368 ;; Defined at:
 15369 ;;		line 50 in file "src/driver/lnb.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  i2c             2   36[BANK0 ] PTR struct i2c_dev__
 15372 ;;		 -> g_i2c_bus(8), 
 15373 ;;  addr            1   38[BANK0 ] unsigned char 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  res             2   40[BANK0 ] int 
 15376 ;;  value           1   39[BANK0 ] unsigned char 
 15377 ;; Return value:  Size  Location     Type
 15378 ;;                  2   36[BANK0 ] int 
 15379 ;; Registers used:
 15380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15381 ;; Tracked objects:
 15382 ;;		On entry : 3D/2
 15383 ;;		On exit  : 3F/2
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15386 ;;      Params:         0       3       0       0       0       0       0
 15387 ;;      Locals:         0       3       0       0       0       0       0
 15388 ;;      Temps:          0       0       0       0       0       0       0
 15389 ;;      Totals:         0       6       0       0       0       0       0
 15390 ;;Total ram usage:        6 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; Hardware stack levels required when called:   10
 15393 ;; This function calls:
 15394 ;;		_printf
 15395 ;;		_smbus8_read_byte
 15396 ;;		_smbus8_write_byte
 15397 ;; This function is called by:
 15398 ;;		_lnb_configure
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           	psect	text48
 15403  004F7A                     __ptext48:
 15404                           	opt callstack 0
 15405  004F7A                     _lnb_do_configure:
 15406                           	opt callstack 19
 15407                           
 15408                           ;src/driver/lnb.c: 50: static int lnb_do_configure(i2c_dev i2c, u8 addr);src/driver/lnb.
      +                          c: 51: {;src/driver/lnb.c: 52:     u8 value;;src/driver/lnb.c: 53:     int res;;src/driv
      +                          er/lnb.c: 57:     res = smbus8_write_byte(i2c, addr, 0x02, 0x84);
 15409                           
 15410                           ;incstack = 0
 15411  004F7A  C0A4  F055         	movff	lnb_do_configure@i2c,smbus8_write_byte@dev
 15412  004F7E  C0A5  F056         	movff	lnb_do_configure@i2c+1,smbus8_write_byte@dev+1
 15413  004F82  C0A6  F057         	movff	lnb_do_configure@addr,smbus8_write_byte@addr
 15414  004F86  0E02               	movlw	2
 15415  004F88  6E58               	movwf	smbus8_write_byte@reg^0,c
 15416  004F8A  0E84               	movlw	132
 15417  004F8C  6E59               	movwf	smbus8_write_byte@data^0,c
 15418  004F8E  EC68  F037         	call	_smbus8_write_byte	;wreg free
 15419  004F92  C055  F0A8         	movff	?_smbus8_write_byte,lnb_do_configure@res
 15420  004F96  C056  F0A9         	movff	?_smbus8_write_byte+1,lnb_do_configure@res+1
 15421                           
 15422                           ;src/driver/lnb.c: 58:     if(res == 0)
 15423  004F9A  0100               	movlb	0	; () banked
 15424  004F9C  51A8               	movf	lnb_do_configure@res& (0+255),w,b
 15425  004F9E  11A9               	iorwf	(lnb_do_configure@res+1)& (0+255),w,b
 15426  004FA0  A4D8               	btfss	status,2,c
 15427  004FA2  D053               	goto	l267
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;src/driver/lnb.c: 59:  {;src/driver/lnb.c: 60:   res = smbus8_read_byte(i2c, addr, 0x05
      +                          , &value);
 15431  004FA4  C0A4  F055         	movff	lnb_do_configure@i2c,smbus8_read_byte@dev
 15432  004FA8  C0A5  F056         	movff	lnb_do_configure@i2c+1,smbus8_read_byte@dev+1
 15433  004FAC  C0A6  F057         	movff	lnb_do_configure@addr,smbus8_read_byte@addr
 15434  004FB0  0E05               	movlw	5
 15435  004FB2  6E58               	movwf	smbus8_read_byte@reg^0,c
 15436  004FB4  0EA7               	movlw	low lnb_do_configure@value
 15437  004FB6  6E59               	movwf	smbus8_read_byte@data^0,c
 15438  004FB8  EC7F  F035         	call	_smbus8_read_byte	;wreg free
 15439  004FBC  C055  F0A8         	movff	?_smbus8_read_byte,lnb_do_configure@res
 15440  004FC0  C056  F0A9         	movff	?_smbus8_read_byte+1,lnb_do_configure@res+1
 15441                           
 15442                           ;src/driver/lnb.c: 61:   if(res == 0)
 15443  004FC4  0100               	movlb	0	; () banked
 15444  004FC6  51A8               	movf	lnb_do_configure@res& (0+255),w,b
 15445  004FC8  11A9               	iorwf	(lnb_do_configure@res+1)& (0+255),w,b
 15446  004FCA  A4D8               	btfss	status,2,c
 15447  004FCC  D03E               	goto	l267
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;src/driver/lnb.c: 62:   {;src/driver/lnb.c: 63:    value |= (1<<6) | (1<<3);
 15451  004FCE  0E48               	movlw	72
 15452  004FD0  13A7               	iorwf	lnb_do_configure@value& (0+255),f,b
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;src/driver/lnb.c: 64:    res = smbus8_write_byte(i2c, addr, 0x05, value);
 15456  004FD2  C0A4  F055         	movff	lnb_do_configure@i2c,smbus8_write_byte@dev
 15457  004FD6  C0A5  F056         	movff	lnb_do_configure@i2c+1,smbus8_write_byte@dev+1
 15458  004FDA  C0A6  F057         	movff	lnb_do_configure@addr,smbus8_write_byte@addr
 15459  004FDE  0E05               	movlw	5
 15460  004FE0  6E58               	movwf	smbus8_write_byte@reg^0,c
 15461  004FE2  C0A7  F059         	movff	lnb_do_configure@value,smbus8_write_byte@data
 15462  004FE6  EC68  F037         	call	_smbus8_write_byte	;wreg free
 15463  004FEA  C055  F0A8         	movff	?_smbus8_write_byte,lnb_do_configure@res
 15464  004FEE  C056  F0A9         	movff	?_smbus8_write_byte+1,lnb_do_configure@res+1
 15465                           
 15466                           ;src/driver/lnb.c: 65:    if(res == 0)
 15467  004FF2  0100               	movlb	0	; () banked
 15468  004FF4  51A8               	movf	lnb_do_configure@res& (0+255),w,b
 15469  004FF6  11A9               	iorwf	(lnb_do_configure@res+1)& (0+255),w,b
 15470  004FF8  A4D8               	btfss	status,2,c
 15471  004FFA  D027               	goto	l267
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;src/driver/lnb.c: 66:    {;src/driver/lnb.c: 67:     res = smbus8_read_byte(i2c, addr, 
      +                          0x04, &value);
 15475  004FFC  C0A4  F055         	movff	lnb_do_configure@i2c,smbus8_read_byte@dev
 15476  005000  C0A5  F056         	movff	lnb_do_configure@i2c+1,smbus8_read_byte@dev+1
 15477  005004  C0A6  F057         	movff	lnb_do_configure@addr,smbus8_read_byte@addr
 15478  005008  0E04               	movlw	4
 15479  00500A  6E58               	movwf	smbus8_read_byte@reg^0,c
 15480  00500C  0EA7               	movlw	low lnb_do_configure@value
 15481  00500E  6E59               	movwf	smbus8_read_byte@data^0,c
 15482  005010  EC7F  F035         	call	_smbus8_read_byte	;wreg free
 15483  005014  C055  F0A8         	movff	?_smbus8_read_byte,lnb_do_configure@res
 15484  005018  C056  F0A9         	movff	?_smbus8_read_byte+1,lnb_do_configure@res+1
 15485                           
 15486                           ;src/driver/lnb.c: 68:     if(res == 0)
 15487  00501C  0100               	movlb	0	; () banked
 15488  00501E  51A8               	movf	lnb_do_configure@res& (0+255),w,b
 15489  005020  11A9               	iorwf	(lnb_do_configure@res+1)& (0+255),w,b
 15490  005022  A4D8               	btfss	status,2,c
 15491  005024  D012               	goto	l267
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;src/driver/lnb.c: 69:     {;src/driver/lnb.c: 70:      value |= (1<<2) | (1<<6);
 15495  005026  0E44               	movlw	68
 15496  005028  13A7               	iorwf	lnb_do_configure@value& (0+255),f,b
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;src/driver/lnb.c: 71:      res = smbus8_write_byte(i2c, addr, 0x04, value);
 15500  00502A  C0A4  F055         	movff	lnb_do_configure@i2c,smbus8_write_byte@dev
 15501  00502E  C0A5  F056         	movff	lnb_do_configure@i2c+1,smbus8_write_byte@dev+1
 15502  005032  C0A6  F057         	movff	lnb_do_configure@addr,smbus8_write_byte@addr
 15503  005036  0E04               	movlw	4
 15504  005038  6E58               	movwf	smbus8_write_byte@reg^0,c
 15505  00503A  C0A7  F059         	movff	lnb_do_configure@value,smbus8_write_byte@data
 15506  00503E  EC68  F037         	call	_smbus8_write_byte	;wreg free
 15507  005042  C055  F0A8         	movff	?_smbus8_write_byte,lnb_do_configure@res
 15508  005046  C056  F0A9         	movff	?_smbus8_write_byte+1,lnb_do_configure@res+1
 15509  00504A                     l267:
 15510                           
 15511                           ;src/driver/lnb.c: 77:  if(res == 0)
 15512                           
 15513                           ; BSR set to: 0
 15514  00504A  0100               	movlb	0	; () banked
 15515  00504C  51A8               	movf	lnb_do_configure@res& (0+255),w,b
 15516  00504E  11A9               	iorwf	(lnb_do_configure@res+1)& (0+255),w,b
 15517  005050  A4D8               	btfss	status,2,c
 15518  005052  D007               	goto	l10855
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;src/driver/lnb.c: 78:   printf("LNB:LNB Chip configured\n");
 15522  005054  0EBD               	movlw	low STR_6
 15523  005056  6F97               	movwf	printf@fmt& (0+255),b
 15524  005058  0E7C               	movlw	high STR_6
 15525  00505A  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15526  00505C  EC30  F03A         	call	_printf	;wreg free
 15527  005060  0012               	return	
 15528  005062                     l10855:
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;src/driver/lnb.c: 80:   printf("LNB:Failed to configure LNB Chip (%i)\n", res);
 15532  005062  0ECD               	movlw	low STR_7
 15533  005064  6F97               	movwf	printf@fmt& (0+255),b
 15534  005066  0E7B               	movlw	high STR_7
 15535  005068  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15536  00506A  C0A8  F099         	movff	lnb_do_configure@res,?_printf+2
 15537  00506E  C0A9  F09A         	movff	lnb_do_configure@res+1,?_printf+3
 15538  005072  EC30  F03A         	call	_printf	;wreg free
 15539                           
 15540                           ; BSR set to: 2
 15541  005076  0012               	return		;funcret
 15542  005078                     __end_of_lnb_do_configure:
 15543                           	opt callstack 0
 15544                           
 15545 ;; *************** function _check_LNB_status *****************
 15546 ;; Defined at:
 15547 ;;		line 88 in file "src/driver/lnb.c"
 15548 ;; Parameters:    Size  Location     Type
 15549 ;;  i2c             2   36[BANK0 ] PTR struct i2c_dev__
 15550 ;;		 -> g_i2c_bus(8), 
 15551 ;;  addr            1   38[BANK0 ] unsigned char 
 15552 ;; Auto vars:     Size  Location     Type
 15553 ;;  stat            1   99[COMRAM] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;                  1    wreg      unsigned char 
 15556 ;; Registers used:
 15557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 3F/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15563 ;;      Params:         0       3       0       0       0       0       0
 15564 ;;      Locals:         1       0       0       0       0       0       0
 15565 ;;      Temps:          0       3       0       0       0       0       0
 15566 ;;      Totals:         1       6       0       0       0       0       0
 15567 ;;Total ram usage:        7 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:   10
 15570 ;; This function calls:
 15571 ;;		_printf
 15572 ;;		_smbus8_read_byte
 15573 ;; This function is called by:
 15574 ;;		_lnb_configure
 15575 ;;		_main
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579                           	psect	text49
 15580  005174                     __ptext49:
 15581                           	opt callstack 0
 15582  005174                     _check_LNB_status:
 15583                           	opt callstack 19
 15584                           
 15585                           ;src/driver/lnb.c: 88: u8 check_LNB_status(i2c_dev i2c, u8 addr);src/driver/lnb.c: 89: {
      +                          ;src/driver/lnb.c: 90:  u8 stat;;src/driver/lnb.c: 92:  stat = ((*((PIN_LNB_FAULT)->pPOR
      +                          T) & (PIN_LNB_FAULT)->mask) != 0);
 15586                           
 15587                           ; BSR set to: 2
 15588                           ;incstack = 0
 15589  005174  0E4F               	movlw	low (_PIN_LNB_FAULT_DEF+4)
 15590  005176  6EF6               	movwf	tblptrl,c
 15591  005178  0E7B               	movlw	high (_PIN_LNB_FAULT_DEF+4)
 15592  00517A  6EF7               	movwf	tblptrh,c
 15593  00517C                     	if	0	;tblptru may be non-zero
 15594  00517C                     	endif
 15595  00517C                     	if	0	;tblptru may be non-zero
 15596  00517C                     	endif
 15597  00517C  0008               	tblrd		*
 15598  00517E  CFF5 F0A7          	movff	tablat,??_check_LNB_status
 15599  005182  0E4B               	movlw	low _PIN_LNB_FAULT_DEF
 15600  005184  6EF6               	movwf	tblptrl,c
 15601  005186                     	if	1	;There is more than 1 active tblptr byte
 15602  005186  0E7B               	movlw	high _PIN_LNB_FAULT_DEF
 15603  005188  6EF7               	movwf	tblptrh,c
 15604  00518A                     	endif
 15605  00518A                     	if	0	;There are less than 3 active tblptr bytes
 15606  00518A                     	endif
 15607  00518A  0009               	tblrd		*+
 15608  00518C  CFF5 F0A8          	movff	tablat,??_check_LNB_status+1
 15609  005190  0009               	tblrd		*+
 15610  005192  CFF5 F0A9          	movff	tablat,??_check_LNB_status+2
 15611  005196  C0A8  FFD9         	movff	??_check_LNB_status+1,fsr2l
 15612  00519A  C0A9  FFDA         	movff	??_check_LNB_status+2,fsr2h
 15613  00519E  50DF               	movf	indf2,w,c
 15614  0051A0  0100               	movlb	0	; () banked
 15615  0051A2  15A7               	andwf	??_check_LNB_status& (0+255),w,b
 15616  0051A4  0900               	iorlw	0
 15617  0051A6  B4D8               	btfsc	status,2,c
 15618  0051A8  D002               	goto	u13520
 15619  0051AA  0E01               	movlw	1
 15620  0051AC  D001               	goto	u13530
 15621  0051AE                     u13520:
 15622  0051AE  0E00               	movlw	0
 15623  0051B0                     u13530:
 15624  0051B0  6E64               	movwf	check_LNB_status@stat^0,c
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;src/driver/lnb.c: 93:  if(stat != LNB_laststat)
 15628  0051B2  51E7               	movf	_LNB_laststat& (0+255),w,b
 15629  0051B4  1864               	xorwf	check_LNB_status@stat^0,w,c
 15630  0051B6  B4D8               	btfsc	status,2,c
 15631  0051B8  D053               	goto	l10877
 15632                           
 15633                           ; BSR set to: 0
 15634                           ;src/driver/lnb.c: 94:  {;src/driver/lnb.c: 95:   if(stat)
 15635  0051BA  5064               	movf	check_LNB_status@stat^0,w,c
 15636  0051BC  B4D8               	btfsc	status,2,c
 15637  0051BE  D020               	goto	l10869
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;src/driver/lnb.c: 96:   {;src/driver/lnb.c: 97:    printf("LNB:OK\n");
 15641  0051C0  0E7B               	movlw	low STR_8
 15642  0051C2  6F97               	movwf	printf@fmt& (0+255),b
 15643  0051C4  0E7F               	movlw	high STR_8
 15644  0051C6  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15645  0051C8  EC30  F03A         	call	_printf	;wreg free
 15646                           
 15647                           ; BSR set to: 2
 15648                           ;src/driver/lnb.c: 98:    *((PIN_LED_LNB_GOOD)->pPORT) &= ~(PIN_LED_LNB_GOOD)->mask;
 15649  0051CC  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 15650  0051CE  6EF6               	movwf	tblptrl,c
 15651  0051D0  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 15652  0051D2  6EF7               	movwf	tblptrh,c
 15653  0051D4                     	if	0	;tblptru may be non-zero
 15654  0051D4                     	endif
 15655  0051D4                     	if	0	;tblptru may be non-zero
 15656  0051D4                     	endif
 15657  0051D4  0008               	tblrd		*
 15658  0051D6  50F5               	movf	tablat,w,c
 15659  0051D8  0AFF               	xorlw	255
 15660  0051DA  0100               	movlb	0	; () banked
 15661  0051DC  6FA7               	movwf	??_check_LNB_status& (0+255),b
 15662  0051DE  0E87               	movlw	low _PIN_LED_LNB_GOOD_DEF
 15663  0051E0  6EF6               	movwf	tblptrl,c
 15664  0051E2                     	if	1	;There is more than 1 active tblptr byte
 15665  0051E2  0E7B               	movlw	high _PIN_LED_LNB_GOOD_DEF
 15666  0051E4  6EF7               	movwf	tblptrh,c
 15667  0051E6                     	endif
 15668  0051E6                     	if	0	;There are less than 3 active tblptr bytes
 15669  0051E6                     	endif
 15670  0051E6  0009               	tblrd		*+
 15671  0051E8  CFF5 F0A8          	movff	tablat,??_check_LNB_status+1
 15672  0051EC  0009               	tblrd		*+
 15673  0051EE  CFF5 F0A9          	movff	tablat,??_check_LNB_status+2
 15674  0051F2  C0A8  FFD9         	movff	??_check_LNB_status+1,fsr2l
 15675  0051F6  C0A9  FFDA         	movff	??_check_LNB_status+2,fsr2h
 15676  0051FA  51A7               	movf	??_check_LNB_status& (0+255),w,b
 15677  0051FC  16DF               	andwf	indf2,f,c
 15678                           
 15679                           ;src/driver/lnb.c: 99:   }
 15680  0051FE  D02E               	goto	l10875
 15681  005200                     l10869:
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;src/driver/lnb.c: 101:   {;src/driver/lnb.c: 103:    smbus8_read_byte(i2c, addr, 0, &LN
      +                          B_error);
 15685  005200  C0A4  F055         	movff	check_LNB_status@i2c,smbus8_read_byte@dev
 15686  005204  C0A5  F056         	movff	check_LNB_status@i2c+1,smbus8_read_byte@dev+1
 15687  005208  C0A6  F057         	movff	check_LNB_status@addr,smbus8_read_byte@addr
 15688  00520C  0E00               	movlw	0
 15689  00520E  6E58               	movwf	smbus8_read_byte@reg^0,c
 15690  005210  0ED9               	movlw	low _LNB_error
 15691  005212  6E59               	movwf	smbus8_read_byte@data^0,c
 15692  005214  EC7F  F035         	call	_smbus8_read_byte	;wreg free
 15693                           
 15694                           ;src/driver/lnb.c: 104:    printf("LNB: error: %02X\n",LNB_error);
 15695  005218  0E63               	movlw	low STR_9
 15696  00521A  0100               	movlb	0	; () banked
 15697  00521C  6F97               	movwf	printf@fmt& (0+255),b
 15698  00521E  0E7D               	movlw	high STR_9
 15699  005220  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15700  005222  C0D9  F099         	movff	_LNB_error,?_printf+2
 15701  005226  6B9A               	clrf	(?_printf+3)& (0+255),b
 15702  005228  EC30  F03A         	call	_printf	;wreg free
 15703                           
 15704                           ; BSR set to: 2
 15705                           ;src/driver/lnb.c: 105:    *((PIN_LED_LNB_GOOD)->pPORT) |= (PIN_LED_LNB_GOOD)->mask;
 15706  00522C  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 15707  00522E  6EF6               	movwf	tblptrl,c
 15708  005230  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 15709  005232  6EF7               	movwf	tblptrh,c
 15710  005234                     	if	0	;tblptru may be non-zero
 15711  005234                     	endif
 15712  005234                     	if	0	;tblptru may be non-zero
 15713  005234                     	endif
 15714  005234  0008               	tblrd		*
 15715  005236  CFF5 F0A7          	movff	tablat,??_check_LNB_status
 15716  00523A  0E87               	movlw	low _PIN_LED_LNB_GOOD_DEF
 15717  00523C  6EF6               	movwf	tblptrl,c
 15718  00523E                     	if	1	;There is more than 1 active tblptr byte
 15719  00523E  0E7B               	movlw	high _PIN_LED_LNB_GOOD_DEF
 15720  005240  6EF7               	movwf	tblptrh,c
 15721  005242                     	endif
 15722  005242                     	if	0	;There are less than 3 active tblptr bytes
 15723  005242                     	endif
 15724  005242  0009               	tblrd		*+
 15725  005244  CFF5 F0A8          	movff	tablat,??_check_LNB_status+1
 15726  005248  0009               	tblrd		*+
 15727  00524A  CFF5 F0A9          	movff	tablat,??_check_LNB_status+2
 15728  00524E  C0A8  FFD9         	movff	??_check_LNB_status+1,fsr2l
 15729  005252  C0A9  FFDA         	movff	??_check_LNB_status+2,fsr2h
 15730  005256  0100               	movlb	0	; () banked
 15731  005258  51A7               	movf	??_check_LNB_status& (0+255),w,b
 15732  00525A  12DF               	iorwf	indf2,f,c
 15733  00525C                     l10875:
 15734                           
 15735                           ; BSR set to: 0
 15736                           ;src/driver/lnb.c: 107:   LNB_laststat = stat;
 15737  00525C  C064  F0E7         	movff	check_LNB_status@stat,_LNB_laststat
 15738  005260                     l10877:
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;src/driver/lnb.c: 110:  return stat;
 15742  005260  5064               	movf	check_LNB_status@stat^0,w,c
 15743                           
 15744                           ; BSR set to: 0
 15745  005262  0012               	return		;funcret
 15746  005264                     __end_of_check_LNB_status:
 15747                           	opt callstack 0
 15748                           
 15749 ;; *************** function _lcd_init *****************
 15750 ;; Defined at:
 15751 ;;		line 82 in file "src/driver/lcd.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  i2c             2   58[BANK0 ] PTR struct i2c_dev__
 15754 ;;		 -> g_i2c_bus(8), 
 15755 ;;  addr            1   60[BANK0 ] unsigned char 
 15756 ;; Auto vars:     Size  Location     Type
 15757 ;;  res             2   61[BANK0 ] int 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  1    wreg      void 
 15760 ;; Registers used:
 15761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15762 ;; Tracked objects:
 15763 ;;		On entry : 3F/0
 15764 ;;		On exit  : 3F/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15767 ;;      Params:         0       3       0       0       0       0       0
 15768 ;;      Locals:         0       2       0       0       0       0       0
 15769 ;;      Temps:          0       0       0       0       0       0       0
 15770 ;;      Totals:         0       5       0       0       0       0       0
 15771 ;;Total ram usage:        5 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:   13
 15774 ;; This function calls:
 15775 ;;		_i2c_probe_addr
 15776 ;;		_lcd_clear_screen
 15777 ;;		_print_string
 15778 ;;		_printf
 15779 ;;		_ssd1306_command
 15780 ;;		_ssd1306_commandbyte
 15781 ;; This function is called by:
 15782 ;;		_main
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           	psect	text50
 15787  005B2A                     __ptext50:
 15788                           	opt callstack 0
 15789  005B2A                     _lcd_init:
 15790                           	opt callstack 17
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;src/driver/lcd.c: 82: void lcd_init(i2c_dev i2c, u8 addr);src/driver/lcd.c: 83: {;src/d
      +                          river/lcd.c: 84:  int res;;src/driver/lcd.c: 93:  res = i2c_probe_addr(i2c, addr);
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;incstack = 0
 15797  005B2A  C0BA  F055         	movff	lcd_init@i2c,i2c_probe_addr@dev
 15798  005B2E  C0BB  F056         	movff	lcd_init@i2c+1,i2c_probe_addr@dev+1
 15799  005B32  C0BC  F057         	movff	lcd_init@addr,i2c_probe_addr@addr
 15800  005B36  EC46  F038         	call	_i2c_probe_addr	;wreg free
 15801  005B3A  C055  F0BD         	movff	?_i2c_probe_addr,lcd_init@res
 15802  005B3E  C056  F0BE         	movff	?_i2c_probe_addr+1,lcd_init@res+1
 15803                           
 15804                           ;src/driver/lcd.c: 94:     if(res != 0)
 15805  005B42  0100               	movlb	0	; () banked
 15806  005B44  51BD               	movf	lcd_init@res& (0+255),w,b
 15807  005B46  11BE               	iorwf	(lcd_init@res+1)& (0+255),w,b
 15808  005B48  B4D8               	btfsc	status,2,c
 15809  005B4A  D00A               	goto	l11429
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;src/driver/lcd.c: 95:  {;src/driver/lcd.c: 96:         printf("LCD:OLED not found.\n");
 15813  005B4C  0EEE               	movlw	low STR_36
 15814  005B4E  6F97               	movwf	printf@fmt& (0+255),b
 15815  005B50  0E7C               	movlw	high STR_36
 15816  005B52  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15817  005B54  EC30  F03A         	call	_printf	;wreg free
 15818                           
 15819                           ; BSR set to: 2
 15820                           ;src/driver/lcd.c: 97:   lcd_available = 0;
 15821  005B58  0E00               	movlw	0
 15822  005B5A  0100               	movlb	0	; () banked
 15823  005B5C  6FCF               	movwf	_lcd_available& (0+255),b
 15824  005B5E  0012               	return	
 15825  005B60                     l11429:
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;src/driver/lcd.c: 101:  lcd_i2c = i2c;
 15829  005B60  C0BA  F1F8         	movff	lcd_init@i2c,_lcd_i2c
 15830  005B64  C0BB  F1F9         	movff	lcd_init@i2c+1,_lcd_i2c+1
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;src/driver/lcd.c: 102:  lcd_addr = addr;
 15834  005B68  C0BC  F0D0         	movff	lcd_init@addr,_lcd_addr
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;src/driver/lcd.c: 104:  printf("LCD:OLED found!\n");
 15838  005B6C  0E75               	movlw	low STR_37
 15839  005B6E  6F97               	movwf	printf@fmt& (0+255),b
 15840  005B70  0E7D               	movlw	high STR_37
 15841  005B72  6F98               	movwf	(printf@fmt+1)& (0+255),b
 15842  005B74  EC30  F03A         	call	_printf	;wreg free
 15843                           
 15844                           ; BSR set to: 2
 15845                           ;src/driver/lcd.c: 105:  lcd_available = 1;
 15846  005B78  0E01               	movlw	1
 15847  005B7A  0100               	movlb	0	; () banked
 15848  005B7C  6FCF               	movwf	_lcd_available& (0+255),b
 15849                           
 15850                           ; BSR set to: 0
 15851                           ;src/driver/lcd.c: 108:  ssd1306_command(ssd1306_init_commands,sizeof(ssd1306_init_comma
      +                          nds));
 15852  005B7E  0EBE               	movlw	low _ssd1306_init_commands
 15853  005B80  6E5D               	movwf	ssd1306_command@cmd^0,c
 15854  005B82  0E03               	movlw	high _ssd1306_init_commands
 15855  005B84  6E5E               	movwf	(ssd1306_command@cmd+1)^0,c
 15856  005B86  0E00               	movlw	0
 15857  005B88  6E60               	movwf	(ssd1306_command@len+1)^0,c
 15858  005B8A  0E1B               	movlw	27
 15859  005B8C  6E5F               	movwf	ssd1306_command@len^0,c
 15860  005B8E  EC81  F039         	call	_ssd1306_command	;wreg free
 15861                           
 15862                           ;src/driver/lcd.c: 110:  ssd1306_commandbyte(0x40 | 0x0);
 15863  005B92  0E40               	movlw	64
 15864  005B94  ECFE  F039         	call	_ssd1306_commandbyte
 15865                           
 15866                           ;src/driver/lcd.c: 112:  lcd_clear_screen(0);
 15867  005B98  0E00               	movlw	0
 15868  005B9A  EC56  F035         	call	_lcd_clear_screen
 15869                           
 15870                           ; BSR set to: 1
 15871                           ;src/driver/lcd.c: 113:  if(ext10MHzReference == 0)
 15872  005B9E  0100               	movlb	0	; () banked
 15873  005BA0  51D7               	movf	_ext10MHzReference& (0+255),w,b
 15874  005BA2  A4D8               	btfss	status,2,c
 15875  005BA4  D00D               	goto	l11447
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;src/driver/lcd.c: 114:   print_string("AMSAT-DL  intClk",0,0,0);
 15879  005BA6  0E74               	movlw	low STR_38
 15880  005BA8  6FB2               	movwf	print_string@s& (0+255),b
 15881  005BAA  0E7E               	movlw	high STR_38
 15882  005BAC  6FB3               	movwf	(print_string@s+1)& (0+255),b
 15883  005BAE  0E00               	movlw	0
 15884  005BB0  6FB4               	movwf	print_string@x& (0+255),b
 15885  005BB2  0E00               	movlw	0
 15886  005BB4  6FB5               	movwf	print_string@y& (0+255),b
 15887  005BB6  0E00               	movlw	0
 15888  005BB8  6FB6               	movwf	print_string@underline& (0+255),b
 15889  005BBA  ECF0  F031         	call	_print_string	;wreg free
 15890  005BBE  0012               	return	
 15891  005BC0                     l11447:
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;src/driver/lcd.c: 116:   print_string("AMSAT-DL  ext10M",0,0,0);
 15895  005BC0  0E63               	movlw	low STR_39
 15896  005BC2  6FB2               	movwf	print_string@s& (0+255),b
 15897  005BC4  0E7E               	movlw	high STR_39
 15898  005BC6  6FB3               	movwf	(print_string@s+1)& (0+255),b
 15899  005BC8  0E00               	movlw	0
 15900  005BCA  6FB4               	movwf	print_string@x& (0+255),b
 15901  005BCC  0E00               	movlw	0
 15902  005BCE  6FB5               	movwf	print_string@y& (0+255),b
 15903  005BD0  0E00               	movlw	0
 15904  005BD2  6FB6               	movwf	print_string@underline& (0+255),b
 15905  005BD4  ECF0  F031         	call	_print_string	;wreg free
 15906                           
 15907                           ; BSR set to: 0
 15908  005BD8  0012               	return		;funcret
 15909  005BDA                     __end_of_lcd_init:
 15910                           	opt callstack 0
 15911                           
 15912 ;; *************** function _ssd1306_commandbyte *****************
 15913 ;; Defined at:
 15914 ;;		line 127 in file "src/driver/lcd.c"
 15915 ;; Parameters:    Size  Location     Type
 15916 ;;  cmd             1    wreg     unsigned char 
 15917 ;; Auto vars:     Size  Location     Type
 15918 ;;  cmd             1   98[COMRAM] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;                  1    wreg      void 
 15921 ;; Registers used:
 15922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15928 ;;      Params:         0       0       0       0       0       0       0
 15929 ;;      Locals:         1       0       0       0       0       0       0
 15930 ;;      Temps:          0       0       0       0       0       0       0
 15931 ;;      Totals:         1       0       0       0       0       0       0
 15932 ;;Total ram usage:        1 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    8
 15935 ;; This function calls:
 15936 ;;		_smbus8_write_byte
 15937 ;; This function is called by:
 15938 ;;		_lcd_init
 15939 ;; This function uses a non-reentrant model
 15940 ;;
 15941                           
 15942                           	psect	text51
 15943  0073FC                     __ptext51:
 15944                           	opt callstack 0
 15945  0073FC                     _ssd1306_commandbyte:
 15946                           	opt callstack 21
 15947                           
 15948                           ; BSR set to: 0
 15949                           ;incstack = 0
 15950                           ;ssd1306_commandbyte@cmd stored from wreg
 15951  0073FC  6E63               	movwf	ssd1306_commandbyte@cmd^0,c
 15952                           
 15953                           ;src/driver/lcd.c: 127: void ssd1306_commandbyte(u8 cmd);src/driver/lcd.c: 128: {;src/dr
      +                          iver/lcd.c: 129:  if(!lcd_available) return;
 15954  0073FE  0100               	movlb	0	; () banked
 15955  007400  51CF               	movf	_lcd_available& (0+255),w,b
 15956  007402  B4D8               	btfsc	status,2,c
 15957  007404  0012               	return	
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;src/driver/lcd.c: 130:  smbus8_write_byte(lcd_i2c, lcd_addr, 0x00, cmd);
 15961  007406  C1F8  F055         	movff	_lcd_i2c,smbus8_write_byte@dev
 15962  00740A  C1F9  F056         	movff	_lcd_i2c+1,smbus8_write_byte@dev+1
 15963  00740E  C0D0  F057         	movff	_lcd_addr,smbus8_write_byte@addr
 15964  007412  0E00               	movlw	0
 15965  007414  6E58               	movwf	smbus8_write_byte@reg^0,c
 15966  007416  C063  F059         	movff	ssd1306_commandbyte@cmd,smbus8_write_byte@data
 15967  00741A  EC68  F037         	call	_smbus8_write_byte	;wreg free
 15968  00741E  0012               	return		;funcret
 15969  007420                     __end_of_ssd1306_commandbyte:
 15970                           	opt callstack 0
 15971                           
 15972 ;; *************** function _smbus8_write_byte *****************
 15973 ;; Defined at:
 15974 ;;		line 79 in file "src/driver/base/i2c.c"
 15975 ;; Parameters:    Size  Location     Type
 15976 ;;  dev             2   84[COMRAM] PTR struct i2c_dev__
 15977 ;;		 -> g_i2c_bus(8), NULL(0), 
 15978 ;;  addr            1   86[COMRAM] unsigned char 
 15979 ;;  reg             1   87[COMRAM] unsigned char 
 15980 ;;  data            1   88[COMRAM] unsigned char 
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;  msg             7   91[COMRAM] struct i2c_msg
 15983 ;;  tmp             2   89[COMRAM] unsigned char [2]
 15984 ;; Return value:  Size  Location     Type
 15985 ;;                  2   84[COMRAM] int 
 15986 ;; Registers used:
 15987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15988 ;; Tracked objects:
 15989 ;;		On entry : 0/2
 15990 ;;		On exit  : 0/0
 15991 ;;		Unchanged: 0/0
 15992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15993 ;;      Params:         5       0       0       0       0       0       0
 15994 ;;      Locals:         9       0       0       0       0       0       0
 15995 ;;      Temps:          0       0       0       0       0       0       0
 15996 ;;      Totals:        14       0       0       0       0       0       0
 15997 ;;Total ram usage:       14 bytes
 15998 ;; Hardware stack levels used:    1
 15999 ;; Hardware stack levels required when called:    7
 16000 ;; This function calls:
 16001 ;;		_i2c_transfer
 16002 ;; This function is called by:
 16003 ;;		_lnb_do_configure
 16004 ;;		_si5328_init
 16005 ;;		_si5328_perform_ical
 16006 ;;		_write_regset
 16007 ;;		_ssd1306_commandbyte
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           	psect	text52
 16012  006ED0                     __ptext52:
 16013                           	opt callstack 0
 16014  006ED0                     _smbus8_write_byte:
 16015                           	opt callstack 21
 16016                           
 16017                           ;src/driver/base/i2c.c: 79: int smbus8_write_byte(i2c_dev dev, u8 addr, u8 reg, u8 data)
      +                          ;src/driver/base/i2c.c: 80: {;src/driver/base/i2c.c: 81:  i2c_msg msg;;src/driver/base/i
      +                          2c.c: 82:  u8 tmp[2];;src/driver/base/i2c.c: 84:  msg.addr = addr;
 16018                           
 16019                           ;incstack = 0
 16020  006ED0  C057  F05C         	movff	smbus8_write_byte@addr,smbus8_write_byte@msg
 16021  006ED4  6A5D               	clrf	(smbus8_write_byte@msg+1)^0,c
 16022                           
 16023                           ;src/driver/base/i2c.c: 85:  msg.flags = (1<<1) | (1<<2);
 16024  006ED6  0E06               	movlw	6
 16025  006ED8  6E5E               	movwf	(smbus8_write_byte@msg+2)^0,c
 16026                           
 16027                           ;src/driver/base/i2c.c: 86:  msg.len = 2;
 16028  006EDA  0E00               	movlw	0
 16029  006EDC  6E60               	movwf	(smbus8_write_byte@msg+4)^0,c
 16030  006EDE  0E02               	movlw	2
 16031  006EE0  6E5F               	movwf	(smbus8_write_byte@msg+3)^0,c
 16032                           
 16033                           ;src/driver/base/i2c.c: 87:  msg.data = tmp;
 16034  006EE2  0E5A               	movlw	low smbus8_write_byte@tmp
 16035  006EE4  6E61               	movwf	(smbus8_write_byte@msg+5)^0,c
 16036  006EE6  6A62               	clrf	(smbus8_write_byte@msg+6)^0,c
 16037                           
 16038                           ;src/driver/base/i2c.c: 89:  tmp[0] = reg;
 16039  006EE8  C058  F05A         	movff	smbus8_write_byte@reg,smbus8_write_byte@tmp
 16040                           
 16041                           ;src/driver/base/i2c.c: 90:  tmp[1] = data;
 16042  006EEC  C059  F05B         	movff	smbus8_write_byte@data,smbus8_write_byte@tmp+1
 16043                           
 16044                           ;src/driver/base/i2c.c: 92:  return i2c_transfer(dev, &msg, 1);
 16045  006EF0  C055  F050         	movff	smbus8_write_byte@dev,i2c_transfer@dev
 16046  006EF4  C056  F051         	movff	smbus8_write_byte@dev+1,i2c_transfer@dev+1
 16047  006EF8  0E5C               	movlw	low smbus8_write_byte@msg
 16048  006EFA  6E52               	movwf	i2c_transfer@msg^0,c
 16049  006EFC  0E00               	movlw	0
 16050  006EFE  6E54               	movwf	(i2c_transfer@num+1)^0,c
 16051  006F00  0E01               	movlw	1
 16052  006F02  6E53               	movwf	i2c_transfer@num^0,c
 16053  006F04  ECF9  F035         	call	_i2c_transfer	;wreg free
 16054  006F08  C050  F055         	movff	?_i2c_transfer,?_smbus8_write_byte
 16055  006F0C  C051  F056         	movff	?_i2c_transfer+1,?_smbus8_write_byte+1
 16056  006F10  0012               	return		;funcret
 16057  006F12                     __end_of_smbus8_write_byte:
 16058                           	opt callstack 0
 16059                           
 16060 ;; *************** function _print_string *****************
 16061 ;; Defined at:
 16062 ;;		line 204 in file "src/driver/lcd.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;  s               2   50[BANK0 ] PTR unsigned char 
 16065 ;;		 -> CalculateGridSquare@grid(7), STR_89(14), STR_88(7), STR_87(6), 
 16066 ;;		 -> STR_86(12), STR_85(17), itoa@buffer(12), STR_84(5), 
 16067 ;;		 -> STR_83(5), STR_82(7), STR_81(7), STR_80(8), 
 16068 ;;		 -> STR_79(5), GPS_lon(15), GPS_lat(15), STR_78(4), 
 16069 ;;		 -> STR_77(4), STR_76(6), STR_75(5), STR_74(4), 
 16070 ;;		 -> STR_73(4), STR_72(10), GPS_time(9), STR_71(17), 
 16071 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(7), 
 16072 ;;		 -> STR_66(17), STR_65(17), STR_64(17), STR_63(7), 
 16073 ;;		 -> STR_62(7), STR_61(17), STR_60(17), STR_59(17), 
 16074 ;;		 -> STR_58(7), STR_57(7), STR_56(6), STR_55(6), 
 16075 ;;		 -> STR_54(17), STR_53(5), STR_52(5), STR_51(5), 
 16076 ;;		 -> STR_50(5), STR_49(3), STR_48(17), STR_47(17), 
 16077 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 16078 ;;		 -> STR_42(4), STR_41(17), STR_39(17), STR_38(17), 
 16079 ;;  x               1   52[BANK0 ] unsigned char 
 16080 ;;  y               1   53[BANK0 ] unsigned char 
 16081 ;;  underline       1   54[BANK0 ] unsigned char 
 16082 ;; Auto vars:     Size  Location     Type
 16083 ;;  i               1   57[BANK0 ] unsigned char 
 16084 ;; Return value:  Size  Location     Type
 16085 ;;                  1    wreg      void 
 16086 ;; Registers used:
 16087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 16088 ;; Tracked objects:
 16089 ;;		On entry : 3F/0
 16090 ;;		On exit  : 3F/0
 16091 ;;		Unchanged: 0/0
 16092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16093 ;;      Params:         0       5       0       0       0       0       0
 16094 ;;      Locals:         0       1       0       0       0       0       0
 16095 ;;      Temps:          0       2       0       0       0       0       0
 16096 ;;      Totals:         0       8       0       0       0       0       0
 16097 ;;Total ram usage:        8 bytes
 16098 ;; Hardware stack levels used:    1
 16099 ;; Hardware stack levels required when called:   12
 16100 ;; This function calls:
 16101 ;;		_print_char
 16102 ;;		_printf
 16103 ;;		_strlen
 16104 ;; This function is called by:
 16105 ;;		_lcd_init
 16106 ;;		_show_display
 16107 ;;		_lcd_settingsOK
 16108 ;; This function uses a non-reentrant model
 16109 ;;
 16110                           
 16111                           	psect	text53
 16112  0063E0                     __ptext53:
 16113                           	opt callstack 0
 16114  0063E0                     _print_string:
 16115                           	opt callstack 17
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;src/driver/lcd.c: 204: void print_string(char *s, u8 x, u8 y, u8 underline);src/driver/
      +                          lcd.c: 205: {;src/driver/lcd.c: 206:  printf("OLD %02d %02d %s\n",x,y,s);
 16119                           
 16120                           ;incstack = 0
 16121  0063E0  0E3F               	movlw	low STR_40
 16122  0063E2  6F97               	movwf	printf@fmt& (0+255),b
 16123  0063E4  0E7D               	movlw	high STR_40
 16124  0063E6  6F98               	movwf	(printf@fmt+1)& (0+255),b
 16125  0063E8  C0B4  F099         	movff	print_string@x,?_printf+2
 16126  0063EC  6B9A               	clrf	(?_printf+3)& (0+255),b
 16127  0063EE  C0B5  F09B         	movff	print_string@y,?_printf+4
 16128  0063F2  6B9C               	clrf	(?_printf+5)& (0+255),b
 16129  0063F4  C0B2  F09D         	movff	print_string@s,?_printf+6
 16130  0063F8  C0B3  F09E         	movff	print_string@s+1,?_printf+7
 16131  0063FC  EC30  F03A         	call	_printf	;wreg free
 16132                           
 16133                           ; BSR set to: 2
 16134                           ;src/driver/lcd.c: 207:  for(u8 i=0; i<strlen(s); i++)
 16135  006400  0E00               	movlw	0
 16136  006402  0100               	movlb	0	; () banked
 16137  006404  6FB9               	movwf	print_string@i& (0+255),b
 16138  006406  D023               	goto	l10545
 16139  006408                     l10541:
 16140                           
 16141                           ; BSR set to: 0
 16142                           ;src/driver/lcd.c: 208:  {;src/driver/lcd.c: 209:   print_char(s[i],x+i*8,y,underline);
 16143  006408  51B9               	movf	print_string@i& (0+255),w,b
 16144  00640A  0D08               	mullw	8
 16145  00640C  50F3               	movf	243,w,c
 16146  00640E  25B4               	addwf	print_string@x& (0+255),w,b
 16147  006410  6F92               	movwf	print_char@xpos& (0+255),b
 16148  006412  C0B5  F093         	movff	print_string@y,print_char@ypos
 16149  006416  C0B6  F094         	movff	print_string@underline,print_char@underline
 16150  00641A  51B9               	movf	print_string@i& (0+255),w,b
 16151  00641C  25B2               	addwf	print_string@s& (0+255),w,b
 16152  00641E  6FB7               	movwf	??_print_string& (0+255),b
 16153  006420  0E00               	movlw	0
 16154  006422  21B3               	addwfc	(print_string@s+1)& (0+255),w,b
 16155  006424  6FB8               	movwf	(??_print_string+1)& (0+255),b
 16156  006426  C0B7  FFF6         	movff	??_print_string,tblptrl
 16157  00642A  C0B8  FFF7         	movff	??_print_string+1,tblptrh
 16158  00642E  6AF8               	clrf	tblptru,c
 16159  006430  0E05               	movlw	(high __ramtop+-1)
 16160  006432  64F7               	cpfsgt	tblptrh,c
 16161  006434  D003               	bra	u13137
 16162  006436  0008               	tblrd		*
 16163  006438  50F5               	movf	tablat,w,c
 16164  00643A  D005               	bra	u13130
 16165  00643C                     u13137:
 16166  00643C  CFF6 FFE9          	movff	tblptrl,fsr0l
 16167  006440  CFF7 FFEA          	movff	tblptrh,fsr0h
 16168  006444  50EF               	movf	indf0,w,c
 16169  006446                     u13130:
 16170  006446  ECAB  F026         	call	_print_char
 16171                           
 16172                           ;src/driver/lcd.c: 210:  }
 16173  00644A  0100               	movlb	0	; () banked
 16174  00644C  2BB9               	incf	print_string@i& (0+255),f,b
 16175  00644E                     l10545:
 16176                           
 16177                           ; BSR set to: 0
 16178  00644E  C0B2  F00E         	movff	print_string@s,strlen@s
 16179  006452  C0B3  F00F         	movff	print_string@s+1,strlen@s+1
 16180  006456  EC89  F037         	call	_strlen	;wreg free
 16181  00645A  0100               	movlb	0	; () banked
 16182  00645C  51B9               	movf	print_string@i& (0+255),w,b
 16183  00645E  6FB7               	movwf	??_print_string& (0+255),b
 16184  006460  6BB8               	clrf	(??_print_string+1)& (0+255),b
 16185  006462  500E               	movf	?_strlen^0,w,c
 16186  006464  5DB7               	subwf	??_print_string& (0+255),w,b
 16187  006466  500F               	movf	(?_strlen+1)^0,w,c
 16188  006468  59B8               	subwfb	(??_print_string+1)& (0+255),w,b
 16189  00646A  B0D8               	btfsc	status,0,c
 16190  00646C  0012               	return	
 16191  00646E  D7CC               	goto	l10541
 16192  006470                     __end_of_print_string:
 16193                           	opt callstack 0
 16194                           
 16195 ;; *************** function _print_char *****************
 16196 ;; Defined at:
 16197 ;;		line 182 in file "src/driver/lcd.c"
 16198 ;; Parameters:    Size  Location     Type
 16199 ;;  c               1    wreg     unsigned char 
 16200 ;;  xpos            1   18[BANK0 ] unsigned char 
 16201 ;;  ypos            1   19[BANK0 ] unsigned char 
 16202 ;;  underline       1   20[BANK0 ] unsigned char 
 16203 ;; Auto vars:     Size  Location     Type
 16204 ;;  c               1   45[BANK0 ] unsigned char 
 16205 ;;  b               1   46[BANK0 ] unsigned char 
 16206 ;;  x               1   48[BANK0 ] unsigned char 
 16207 ;;  y               1   49[BANK0 ] unsigned char 
 16208 ;;  map             8   37[BANK0 ] unsigned char [8]
 16209 ;;  idx             1   47[BANK0 ] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      void 
 16212 ;; Registers used:
 16213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16219 ;;      Params:         0       3       0       0       0       0       0
 16220 ;;      Locals:         0      13       0       0       0       0       0
 16221 ;;      Temps:          0      16       0       0       0       0       0
 16222 ;;      Totals:         0      32       0       0       0       0       0
 16223 ;;Total ram usage:       32 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:   11
 16226 ;; This function calls:
 16227 ;;		_lcd_draw8x8
 16228 ;;		_memset
 16229 ;; This function is called by:
 16230 ;;		_print_string
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234                           	psect	text54
 16235  004D56                     __ptext54:
 16236                           	opt callstack 0
 16237  004D56                     _print_char:
 16238                           	opt callstack 17
 16239                           
 16240                           ; BSR set to: 0
 16241                           ;incstack = 0
 16242                           ;print_char@c stored from wreg
 16243  004D56  0100               	movlb	0	; () banked
 16244  004D58  6FAD               	movwf	print_char@c& (0+255),b
 16245                           
 16246                           ;src/driver/lcd.c: 182: void print_char(char c, u8 xpos, u8 ypos, u8 underline);src/driv
      +                          er/lcd.c: 183: {;src/driver/lcd.c: 184:  u8 idx = c - ' ';
 16247  004D5A  0100               	movlb	0	; () banked
 16248  004D5C  51AD               	movf	print_char@c& (0+255),w,b
 16249  004D5E  0FE0               	addlw	224
 16250  004D60  6FAF               	movwf	print_char@idx& (0+255),b
 16251                           
 16252                           ;src/driver/lcd.c: 185:  if(idx >= 97) idx = 0;
 16253  004D62  0E60               	movlw	96
 16254  004D64  65AF               	cpfsgt	print_char@idx& (0+255),b
 16255  004D66  D002               	goto	l10053
 16256                           
 16257                           ; BSR set to: 0
 16258  004D68  0E00               	movlw	0
 16259  004D6A  6FAF               	movwf	print_char@idx& (0+255),b
 16260  004D6C                     l10053:
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;src/driver/lcd.c: 188:  u8 map[8];;src/driver/lcd.c: 189:  memset(map,0,8);
 16264  004D6C  0EA5               	movlw	low print_char@map
 16265  004D6E  6E0E               	movwf	memset@dest^0,c
 16266  004D70  6A0F               	clrf	(memset@dest+1)^0,c
 16267  004D72  0E00               	movlw	0
 16268  004D74  6E11               	movwf	(memset@c+1)^0,c
 16269  004D76  0E00               	movlw	0
 16270  004D78  6E10               	movwf	memset@c^0,c
 16271  004D7A  0E00               	movlw	0
 16272  004D7C  6E13               	movwf	(memset@n+1)^0,c
 16273  004D7E  0E08               	movlw	8
 16274  004D80  6E12               	movwf	memset@n^0,c
 16275  004D82  ECF4  F024         	call	_memset	;wreg free
 16276                           
 16277                           ;src/driver/lcd.c: 191:  for(u8 y=0; y<8; y++)
 16278  004D86  0E00               	movlw	0
 16279  004D88  0100               	movlb	0	; () banked
 16280  004D8A  6FB1               	movwf	print_char@y& (0+255),b
 16281  004D8C                     l10061:
 16282                           
 16283                           ; BSR set to: 0
 16284                           ;src/driver/lcd.c: 192:  {;src/driver/lcd.c: 193:   for(u8 x=0; x<8; x++)
 16285  004D8C  0E00               	movlw	0
 16286  004D8E  6FB0               	movwf	print_char@x& (0+255),b
 16287  004D90                     l10067:
 16288                           
 16289                           ; BSR set to: 0
 16290                           ;src/driver/lcd.c: 194:   {;src/driver/lcd.c: 195:    u8 b = (font8x8_basic[idx][y] & (1
      +                          <<x))?1:0;
 16291  004D90  51B1               	movf	print_char@y& (0+255),w,b
 16292  004D92  0D01               	mullw	1
 16293  004D94  CFF3 F095          	movff	prodl,??_print_char
 16294  004D98  CFF4 F096          	movff	prodh,??_print_char+1
 16295  004D9C  51AF               	movf	print_char@idx& (0+255),w,b
 16296  004D9E  0D08               	mullw	8
 16297  004DA0  CFF3 F097          	movff	prodl,??_print_char+2
 16298  004DA4  CFF4 F098          	movff	prodh,??_print_char+3
 16299  004DA8  0E29               	movlw	low _font8x8_basic
 16300  004DAA  6F99               	movwf	(??_print_char+4)& (0+255),b
 16301  004DAC  0E77               	movlw	high _font8x8_basic
 16302  004DAE  6F9A               	movwf	(??_print_char+5)& (0+255),b
 16303  004DB0  0E00               	movlw	low (_font8x8_basic shr (0+16))
 16304  004DB2  6F9B               	movwf	(??_print_char+6)& (0+255),b
 16305  004DB4  5197               	movf	(??_print_char+2)& (0+255),w,b
 16306  004DB6  2599               	addwf	(??_print_char+4)& (0+255),w,b
 16307  004DB8  6F9C               	movwf	(??_print_char+7)& (0+255),b
 16308  004DBA  5198               	movf	(??_print_char+3)& (0+255),w,b
 16309  004DBC  219A               	addwfc	(??_print_char+5)& (0+255),w,b
 16310  004DBE  6F9D               	movwf	(??_print_char+8)& (0+255),b
 16311  004DC0  0E00               	movlw	0
 16312  004DC2  219B               	addwfc	(??_print_char+6)& (0+255),w,b
 16313  004DC4  6F9E               	movwf	(??_print_char+9)& (0+255),b
 16314  004DC6  5195               	movf	??_print_char& (0+255),w,b
 16315  004DC8  259C               	addwf	(??_print_char+7)& (0+255),w,b
 16316  004DCA  6F9F               	movwf	(??_print_char+10)& (0+255),b
 16317  004DCC  5196               	movf	(??_print_char+1)& (0+255),w,b
 16318  004DCE  219D               	addwfc	(??_print_char+8)& (0+255),w,b
 16319  004DD0  6FA0               	movwf	(??_print_char+11)& (0+255),b
 16320  004DD2  0E00               	movlw	0
 16321  004DD4  219E               	addwfc	(??_print_char+9)& (0+255),w,b
 16322  004DD6  6FA1               	movwf	(??_print_char+12)& (0+255),b
 16323  004DD8  C09F  FFF6         	movff	??_print_char+10,tblptrl
 16324  004DDC  C0A0  FFF7         	movff	??_print_char+11,tblptrh
 16325  004DE0  C0A1  FFF8         	movff	??_print_char+12,tblptru
 16326  004DE4  0008               	tblrd		*
 16327  004DE6  CFF5 F0A2          	movff	tablat,??_print_char+13
 16328  004DEA  C0B0  F0A3         	movff	print_char@x,??_print_char+14
 16329  004DEE  0E01               	movlw	1
 16330  004DF0  6FA4               	movwf	(??_print_char+15)& (0+255),b
 16331  004DF2  2BA3               	incf	(??_print_char+14)& (0+255),f,b
 16332  004DF4  D002               	goto	u12084
 16333  004DF6                     u12085:
 16334  004DF6  90D8               	bcf	status,0,c
 16335  004DF8  37A4               	rlcf	(??_print_char+15)& (0+255),f,b
 16336  004DFA                     u12084:
 16337  004DFA  2FA3               	decfsz	(??_print_char+14)& (0+255),f,b
 16338  004DFC  D7FC               	goto	u12085
 16339  004DFE  0100               	movlb	0	; () banked
 16340  004E00  51A4               	movf	(??_print_char+15)& (0+255),w,b
 16341  004E02  15A2               	andwf	(??_print_char+13)& (0+255),w,b
 16342  004E04  0900               	iorlw	0
 16343  004E06  B4D8               	btfsc	status,2,c
 16344  004E08  D002               	goto	u12090
 16345  004E0A  0E01               	movlw	1
 16346  004E0C  D001               	goto	u12100
 16347  004E0E                     u12090:
 16348  004E0E  0E00               	movlw	0
 16349  004E10                     u12100:
 16350  004E10  6FAE               	movwf	print_char@b& (0+255),b
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;src/driver/lcd.c: 196:    if(y==7 && underline) b=1;
 16354  004E12  0E07               	movlw	7
 16355  004E14  19B1               	xorwf	print_char@y& (0+255),w,b
 16356  004E16  A4D8               	btfss	status,2,c
 16357  004E18  D005               	goto	l10075
 16358                           
 16359                           ; BSR set to: 0
 16360  004E1A  5194               	movf	print_char@underline& (0+255),w,b
 16361  004E1C  B4D8               	btfsc	status,2,c
 16362  004E1E  D002               	goto	l10075
 16363                           
 16364                           ; BSR set to: 0
 16365  004E20  0E01               	movlw	1
 16366  004E22  6FAE               	movwf	print_char@b& (0+255),b
 16367  004E24                     l10075:
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;src/driver/lcd.c: 197:    map[x] |= b<<y;
 16371  004E24  C0B1  F095         	movff	print_char@y,??_print_char
 16372  004E28  C0AE  F096         	movff	print_char@b,??_print_char+1
 16373  004E2C  2B95               	incf	??_print_char& (0+255),f,b
 16374  004E2E  D002               	goto	u12134
 16375  004E30                     u12135:
 16376  004E30  90D8               	bcf	status,0,c
 16377  004E32  3796               	rlcf	(??_print_char+1)& (0+255),f,b
 16378  004E34                     u12134:
 16379  004E34  2F95               	decfsz	??_print_char& (0+255),f,b
 16380  004E36  D7FC               	goto	u12135
 16381  004E38  0100               	movlb	0	; () banked
 16382  004E3A  51B0               	movf	print_char@x& (0+255),w,b
 16383  004E3C  0FA5               	addlw	low print_char@map
 16384  004E3E  6ED9               	movwf	fsr2l,c
 16385  004E40  6ADA               	clrf	fsr2h,c
 16386  004E42  5196               	movf	(??_print_char+1)& (0+255),w,b
 16387  004E44  12DF               	iorwf	indf2,f,c
 16388                           
 16389                           ; BSR set to: 0
 16390                           ;src/driver/lcd.c: 198:   }
 16391  004E46  2BB0               	incf	print_char@x& (0+255),f,b
 16392                           
 16393                           ; BSR set to: 0
 16394  004E48  0E07               	movlw	7
 16395  004E4A  65B0               	cpfsgt	print_char@x& (0+255),b
 16396  004E4C  D7A1               	goto	l10067
 16397                           
 16398                           ; BSR set to: 0
 16399                           ;src/driver/lcd.c: 199:  }
 16400  004E4E  2BB1               	incf	print_char@y& (0+255),f,b
 16401                           
 16402                           ; BSR set to: 0
 16403  004E50  0E07               	movlw	7
 16404  004E52  65B1               	cpfsgt	print_char@y& (0+255),b
 16405  004E54  D79B               	goto	l10061
 16406                           
 16407                           ; BSR set to: 0
 16408                           ;src/driver/lcd.c: 201:  lcd_draw8x8(map,xpos,ypos);
 16409  004E56  0EA5               	movlw	low print_char@map
 16410  004E58  6E62               	movwf	lcd_draw8x8@buffer^0,c
 16411  004E5A  C092  F063         	movff	print_char@xpos,lcd_draw8x8@x
 16412  004E5E  C093  F064         	movff	print_char@ypos,lcd_draw8x8@y
 16413  004E62  EC21  F03A         	call	_lcd_draw8x8	;wreg free
 16414  004E66  0012               	return		;funcret
 16415  004E68                     __end_of_print_char:
 16416                           	opt callstack 0
 16417                           
 16418 ;; *************** function _lcd_draw8x8 *****************
 16419 ;; Defined at:
 16420 ;;		line 173 in file "src/driver/lcd.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;  buffer          1   97[COMRAM] PTR unsigned char 
 16423 ;;		 -> print_char@map(8), 
 16424 ;;  x               1   98[COMRAM] unsigned char 
 16425 ;;  y               1   99[COMRAM] unsigned char 
 16426 ;; Auto vars:     Size  Location     Type
 16427 ;;		None
 16428 ;; Return value:  Size  Location     Type
 16429 ;;                  1    wreg      void 
 16430 ;; Registers used:
 16431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16432 ;; Tracked objects:
 16433 ;;		On entry : 3F/0
 16434 ;;		On exit  : 0/0
 16435 ;;		Unchanged: 0/0
 16436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16437 ;;      Params:         3       0       0       0       0       0       0
 16438 ;;      Locals:         0       0       0       0       0       0       0
 16439 ;;      Temps:          0       0       0       0       0       0       0
 16440 ;;      Totals:         3       0       0       0       0       0       0
 16441 ;;Total ram usage:        3 bytes
 16442 ;; Hardware stack levels used:    1
 16443 ;; Hardware stack levels required when called:   10
 16444 ;; This function calls:
 16445 ;;		_ssd1306_data
 16446 ;;		_ssd1306_setpos
 16447 ;; This function is called by:
 16448 ;;		_print_char
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           	psect	text55
 16453  007442                     __ptext55:
 16454                           	opt callstack 0
 16455  007442                     _lcd_draw8x8:
 16456                           	opt callstack 17
 16457                           
 16458                           ; BSR set to: 0
 16459                           ;src/driver/lcd.c: 173: void lcd_draw8x8(u8 *buffer, u8 x, u8 y);src/driver/lcd.c: 174: 
      +                          {;src/driver/lcd.c: 176:  ssd1306_setpos(x,y);
 16460                           
 16461                           ;incstack = 0
 16462  007442  C064  F061         	movff	lcd_draw8x8@y,ssd1306_setpos@y
 16463  007446  5063               	movf	lcd_draw8x8@x^0,w,c
 16464  007448  EC28  F038         	call	_ssd1306_setpos
 16465                           
 16466                           ;src/driver/lcd.c: 178:  ssd1306_data(buffer, 8);
 16467  00744C  C062  F05D         	movff	lcd_draw8x8@buffer,ssd1306_data@data
 16468  007450  6A5E               	clrf	(ssd1306_data@data+1)^0,c
 16469  007452  0E00               	movlw	0
 16470  007454  6E60               	movwf	(ssd1306_data@len+1)^0,c
 16471  007456  0E08               	movlw	8
 16472  007458  6E5F               	movwf	ssd1306_data@len^0,c
 16473  00745A  EC21  F039         	call	_ssd1306_data	;wreg free
 16474  00745E  0012               	return		;funcret
 16475  007460                     __end_of_lcd_draw8x8:
 16476                           	opt callstack 0
 16477                           
 16478 ;; *************** function _lcd_clear_screen *****************
 16479 ;; Defined at:
 16480 ;;		line 158 in file "src/driver/lcd.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  ystart          1    wreg     unsigned char 
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  ystart          1  128[BANK1 ] unsigned char 
 16485 ;;  row             1  129[BANK1 ] unsigned char 
 16486 ;;  buf           128    0[BANK1 ] unsigned char [128]
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  1    wreg      void 
 16489 ;; Registers used:
 16490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 3F/1
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16496 ;;      Params:         0       0       0       0       0       0       0
 16497 ;;      Locals:         0       0     130       0       0       0       0
 16498 ;;      Temps:          0       0       0       0       0       0       0
 16499 ;;      Totals:         0       0     130       0       0       0       0
 16500 ;;Total ram usage:      130 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:   10
 16503 ;; This function calls:
 16504 ;;		_memset
 16505 ;;		_ssd1306_data
 16506 ;;		_ssd1306_setpos
 16507 ;; This function is called by:
 16508 ;;		_lcd_init
 16509 ;;		_show_display
 16510 ;;		_lcd_settingsOK
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           	psect	text56
 16515  006AAC                     __ptext56:
 16516                           	opt callstack 0
 16517  006AAC                     _lcd_clear_screen:
 16518                           	opt callstack 19
 16519                           
 16520                           ;incstack = 0
 16521                           ;lcd_clear_screen@ystart stored from wreg
 16522  006AAC  0101               	movlb	1	; () banked
 16523  006AAE  6F80               	movwf	lcd_clear_screen@ystart& (0+255),b
 16524                           
 16525                           ;src/driver/lcd.c: 158: void lcd_clear_screen(u8 ystart);src/driver/lcd.c: 159: {;src/dr
      +                          iver/lcd.c: 160:  u8 buf[128];;src/driver/lcd.c: 161:  memset(buf,0,128);
 16526  006AB0  0E00               	movlw	low lcd_clear_screen@buf
 16527  006AB2  6E0E               	movwf	memset@dest^0,c
 16528  006AB4  0E01               	movlw	high lcd_clear_screen@buf
 16529  006AB6  6E0F               	movwf	(memset@dest+1)^0,c
 16530  006AB8  0E00               	movlw	0
 16531  006ABA  6E11               	movwf	(memset@c+1)^0,c
 16532  006ABC  0E00               	movlw	0
 16533  006ABE  6E10               	movwf	memset@c^0,c
 16534  006AC0  0E00               	movlw	0
 16535  006AC2  6E13               	movwf	(memset@n+1)^0,c
 16536  006AC4  0E80               	movlw	128
 16537  006AC6  6E12               	movwf	memset@n^0,c
 16538  006AC8  ECF4  F024         	call	_memset	;wreg free
 16539                           
 16540                           ;src/driver/lcd.c: 163:     for (u8 row=ystart; row<(64 / 8); row++)
 16541  006ACC  C180  F181         	movff	lcd_clear_screen@ystart,lcd_clear_screen@row
 16542  006AD0                     l10527:
 16543  006AD0  0E07               	movlw	7
 16544  006AD2  0101               	movlb	1	; () banked
 16545  006AD4  6581               	cpfsgt	lcd_clear_screen@row& (0+255),b
 16546  006AD6  D001               	goto	l10531
 16547  006AD8  0012               	return	
 16548  006ADA                     l10531:
 16549                           
 16550                           ; BSR set to: 1
 16551                           ;src/driver/lcd.c: 164:  {;src/driver/lcd.c: 165:   ssd1306_setpos(0,row);
 16552  006ADA  C181  F061         	movff	lcd_clear_screen@row,ssd1306_setpos@y
 16553  006ADE  0E00               	movlw	0
 16554  006AE0  EC28  F038         	call	_ssd1306_setpos
 16555                           
 16556                           ;src/driver/lcd.c: 167:   ssd1306_data(buf,128);
 16557  006AE4  0E00               	movlw	low lcd_clear_screen@buf
 16558  006AE6  6E5D               	movwf	ssd1306_data@data^0,c
 16559  006AE8  0E01               	movlw	high lcd_clear_screen@buf
 16560  006AEA  6E5E               	movwf	(ssd1306_data@data+1)^0,c
 16561  006AEC  0E00               	movlw	0
 16562  006AEE  6E60               	movwf	(ssd1306_data@len+1)^0,c
 16563  006AF0  0E80               	movlw	128
 16564  006AF2  6E5F               	movwf	ssd1306_data@len^0,c
 16565  006AF4  EC21  F039         	call	_ssd1306_data	;wreg free
 16566                           
 16567                           ;src/driver/lcd.c: 168:     }
 16568  006AF8  0101               	movlb	1	; () banked
 16569  006AFA  2B81               	incf	lcd_clear_screen@row& (0+255),f,b
 16570  006AFC  D7E9               	goto	l10527
 16571  006AFE                     __end_of_lcd_clear_screen:
 16572                           	opt callstack 0
 16573                           
 16574 ;; *************** function _ssd1306_setpos *****************
 16575 ;; Defined at:
 16576 ;;		line 146 in file "src/driver/lcd.c"
 16577 ;; Parameters:    Size  Location     Type
 16578 ;;  x               1    wreg     unsigned char 
 16579 ;;  y               1   96[COMRAM] unsigned char 
 16580 ;; Auto vars:     Size  Location     Type
 16581 ;;  x               1   17[BANK0 ] unsigned char 
 16582 ;;  data            3   14[BANK0 ] unsigned char [3]
 16583 ;; Return value:  Size  Location     Type
 16584 ;;                  1    wreg      void 
 16585 ;; Registers used:
 16586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16587 ;; Tracked objects:
 16588 ;;		On entry : 3E/0
 16589 ;;		On exit  : 0/0
 16590 ;;		Unchanged: 0/0
 16591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16592 ;;      Params:         1       0       0       0       0       0       0
 16593 ;;      Locals:         0       4       0       0       0       0       0
 16594 ;;      Temps:          0       0       0       0       0       0       0
 16595 ;;      Totals:         1       4       0       0       0       0       0
 16596 ;;Total ram usage:        5 bytes
 16597 ;; Hardware stack levels used:    1
 16598 ;; Hardware stack levels required when called:    9
 16599 ;; This function calls:
 16600 ;;		_ssd1306_command
 16601 ;; This function is called by:
 16602 ;;		_lcd_clear_screen
 16603 ;;		_lcd_draw8x8
 16604 ;; This function uses a non-reentrant model
 16605 ;;
 16606                           
 16607                           	psect	text57
 16608  007050                     __ptext57:
 16609                           	opt callstack 0
 16610  007050                     _ssd1306_setpos:
 16611                           	opt callstack 17
 16612                           
 16613                           ; BSR set to: 1
 16614                           ;incstack = 0
 16615                           ;ssd1306_setpos@x stored from wreg
 16616  007050  0100               	movlb	0	; () banked
 16617  007052  6F91               	movwf	ssd1306_setpos@x& (0+255),b
 16618                           
 16619                           ;src/driver/lcd.c: 146: void ssd1306_setpos(u8 x, u8 y);src/driver/lcd.c: 147: {;src/dri
      +                          ver/lcd.c: 148:  u8 data[3] = {0xb0, 2, 0x10};
 16620  007054  C20B  F08E         	movff	ssd1306_setpos@F3137,ssd1306_setpos@data
 16621  007058  C20C  F08F         	movff	ssd1306_setpos@F3137+1,ssd1306_setpos@data+1
 16622  00705C  C20D  F090         	movff	ssd1306_setpos@F3137+2,ssd1306_setpos@data+2
 16623                           
 16624                           ;src/driver/lcd.c: 150:  data[0] += y;
 16625  007060  5061               	movf	ssd1306_setpos@y^0,w,c
 16626  007062  0100               	movlb	0	; () banked
 16627  007064  278E               	addwf	ssd1306_setpos@data& (0+255),f,b
 16628                           
 16629                           ;src/driver/lcd.c: 151:  x += 2;
 16630  007066  0E02               	movlw	2
 16631  007068  2791               	addwf	ssd1306_setpos@x& (0+255),f,b
 16632                           
 16633                           ;src/driver/lcd.c: 152:  data[1] = x & 0x0f;
 16634  00706A  5191               	movf	ssd1306_setpos@x& (0+255),w,b
 16635  00706C  0B0F               	andlw	15
 16636  00706E  6F8F               	movwf	(ssd1306_setpos@data+1)& (0+255),b
 16637                           
 16638                           ;src/driver/lcd.c: 153:  data[2] = 0x10 | (x>>4);
 16639  007070  3991               	swapf	ssd1306_setpos@x& (0+255),w,b
 16640  007072  0B0F               	andlw	15
 16641  007074  0910               	iorlw	16
 16642  007076  6F90               	movwf	(ssd1306_setpos@data+2)& (0+255),b
 16643                           
 16644                           ; BSR set to: 0
 16645                           ;src/driver/lcd.c: 155:  ssd1306_command(data,3);
 16646  007078  0E8E               	movlw	low ssd1306_setpos@data
 16647  00707A  6E5D               	movwf	ssd1306_command@cmd^0,c
 16648  00707C  6A5E               	clrf	(ssd1306_command@cmd+1)^0,c
 16649  00707E  0E00               	movlw	0
 16650  007080  6E60               	movwf	(ssd1306_command@len+1)^0,c
 16651  007082  0E03               	movlw	3
 16652  007084  6E5F               	movwf	ssd1306_command@len^0,c
 16653  007086  EC81  F039         	call	_ssd1306_command	;wreg free
 16654  00708A  0012               	return		;funcret
 16655  00708C                     __end_of_ssd1306_setpos:
 16656                           	opt callstack 0
 16657                           
 16658 ;; *************** function _ssd1306_command *****************
 16659 ;; Defined at:
 16660 ;;		line 120 in file "src/driver/lcd.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;  cmd             2   92[COMRAM] PTR unsigned char 
 16663 ;;		 -> ssd1306_setpos@data(3), ssd1306_init_commands(27), 
 16664 ;;  len             2   94[COMRAM] int 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;		None
 16667 ;; Return value:  Size  Location     Type
 16668 ;;                  1    wreg      void 
 16669 ;; Registers used:
 16670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16671 ;; Tracked objects:
 16672 ;;		On entry : 3F/0
 16673 ;;		On exit  : 0/0
 16674 ;;		Unchanged: 0/0
 16675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16676 ;;      Params:         4       0       0       0       0       0       0
 16677 ;;      Locals:         0       0       0       0       0       0       0
 16678 ;;      Temps:          0       0       0       0       0       0       0
 16679 ;;      Totals:         4       0       0       0       0       0       0
 16680 ;;Total ram usage:        4 bytes
 16681 ;; Hardware stack levels used:    1
 16682 ;; Hardware stack levels required when called:    8
 16683 ;; This function calls:
 16684 ;;		_smbus8_write_data
 16685 ;; This function is called by:
 16686 ;;		_lcd_init
 16687 ;;		_ssd1306_setpos
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           	psect	text58
 16692  007302                     __ptext58:
 16693                           	opt callstack 0
 16694  007302                     _ssd1306_command:
 16695                           	opt callstack 17
 16696                           
 16697                           ; BSR set to: 0
 16698                           ;src/driver/lcd.c: 120: void ssd1306_command(u8 *cmd, int len);src/driver/lcd.c: 121: {;
      +                          src/driver/lcd.c: 122:  if(!lcd_available) return;
 16699                           
 16700                           ;incstack = 0
 16701  007302  51CF               	movf	_lcd_available& (0+255),w,b
 16702  007304  B4D8               	btfsc	status,2,c
 16703  007306  0012               	return	
 16704                           
 16705                           ; BSR set to: 0
 16706  007308  0004               	clrwdt		;# 
 16707                           
 16708                           ;src/driver/lcd.c: 124:  smbus8_write_data(lcd_i2c, lcd_addr, 0x00, cmd, len);
 16709  00730A  C1F8  F055         	movff	_lcd_i2c,smbus8_write_data@dev
 16710  00730E  C1F9  F056         	movff	_lcd_i2c+1,smbus8_write_data@dev+1
 16711  007312  C0D0  F057         	movff	_lcd_addr,smbus8_write_data@addr
 16712  007316  0E00               	movlw	0
 16713  007318  6E58               	movwf	smbus8_write_data@reg^0,c
 16714  00731A  C05D  F059         	movff	ssd1306_command@cmd,smbus8_write_data@data
 16715  00731E  C05E  F05A         	movff	ssd1306_command@cmd+1,smbus8_write_data@data+1
 16716  007322  C05F  F05B         	movff	ssd1306_command@len,smbus8_write_data@len
 16717  007326  C060  F05C         	movff	ssd1306_command@len+1,smbus8_write_data@len+1
 16718  00732A  EC21  F036         	call	_smbus8_write_data	;wreg free
 16719  00732E  0012               	return		;funcret
 16720  007330                     __end_of_ssd1306_command:
 16721                           	opt callstack 0
 16722                           
 16723 ;; *************** function _ssd1306_data *****************
 16724 ;; Defined at:
 16725 ;;		line 133 in file "src/driver/lcd.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  data            2   92[COMRAM] PTR unsigned char 
 16728 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), 
 16729 ;;  len             2   94[COMRAM] int 
 16730 ;; Auto vars:     Size  Location     Type
 16731 ;;		None
 16732 ;; Return value:  Size  Location     Type
 16733 ;;                  1    wreg      void 
 16734 ;; Registers used:
 16735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16736 ;; Tracked objects:
 16737 ;;		On entry : 0/0
 16738 ;;		On exit  : 0/0
 16739 ;;		Unchanged: 0/0
 16740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16741 ;;      Params:         4       0       0       0       0       0       0
 16742 ;;      Locals:         0       0       0       0       0       0       0
 16743 ;;      Temps:          0       0       0       0       0       0       0
 16744 ;;      Totals:         4       0       0       0       0       0       0
 16745 ;;Total ram usage:        4 bytes
 16746 ;; Hardware stack levels used:    1
 16747 ;; Hardware stack levels required when called:    8
 16748 ;; This function calls:
 16749 ;;		_smbus8_write_data
 16750 ;; This function is called by:
 16751 ;;		_lcd_clear_screen
 16752 ;;		_lcd_draw8x8
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           	psect	text59
 16757  007242                     __ptext59:
 16758                           	opt callstack 0
 16759  007242                     _ssd1306_data:
 16760                           	opt callstack 18
 16761                           
 16762                           ;src/driver/lcd.c: 133: void ssd1306_data(u8 *data, int len);src/driver/lcd.c: 134: {;sr
      +                          c/driver/lcd.c: 135:  if(!lcd_available) return;
 16763                           
 16764                           ;incstack = 0
 16765  007242  0100               	movlb	0	; () banked
 16766  007244  51CF               	movf	_lcd_available& (0+255),w,b
 16767  007246  B4D8               	btfsc	status,2,c
 16768  007248  0012               	return	
 16769                           
 16770                           ; BSR set to: 0
 16771  00724A  0004               	clrwdt		;# 
 16772                           
 16773                           ;src/driver/lcd.c: 137:  smbus8_write_data(lcd_i2c, lcd_addr, 0x40, data, len);
 16774  00724C  C1F8  F055         	movff	_lcd_i2c,smbus8_write_data@dev
 16775  007250  C1F9  F056         	movff	_lcd_i2c+1,smbus8_write_data@dev+1
 16776  007254  C0D0  F057         	movff	_lcd_addr,smbus8_write_data@addr
 16777  007258  0E40               	movlw	64
 16778  00725A  6E58               	movwf	smbus8_write_data@reg^0,c
 16779  00725C  C05D  F059         	movff	ssd1306_data@data,smbus8_write_data@data
 16780  007260  C05E  F05A         	movff	ssd1306_data@data+1,smbus8_write_data@data+1
 16781  007264  C05F  F05B         	movff	ssd1306_data@len,smbus8_write_data@len
 16782  007268  C060  F05C         	movff	ssd1306_data@len+1,smbus8_write_data@len+1
 16783  00726C  EC21  F036         	call	_smbus8_write_data	;wreg free
 16784  007270  0012               	return		;funcret
 16785  007272                     __end_of_ssd1306_data:
 16786                           	opt callstack 0
 16787                           
 16788 ;; *************** function _smbus8_write_data *****************
 16789 ;; Defined at:
 16790 ;;		line 95 in file "src/driver/base/i2c.c"
 16791 ;; Parameters:    Size  Location     Type
 16792 ;;  dev             2   84[COMRAM] PTR struct i2c_dev__
 16793 ;;		 -> g_i2c_bus(8), NULL(0), 
 16794 ;;  addr            1   86[COMRAM] unsigned char 
 16795 ;;  reg             1   87[COMRAM] unsigned char 
 16796 ;;  data            2   88[COMRAM] PTR const unsigned char 
 16797 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), ssd1306_setpos@data(3), ssd1306_init_commands(27), 
 16798 ;;  len             2   90[COMRAM] int 
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;  msg            14    0[BANK0 ] struct i2c_msg[2]
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  2   84[COMRAM] int 
 16803 ;; Registers used:
 16804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16810 ;;      Params:         8       0       0       0       0       0       0
 16811 ;;      Locals:         0      14       0       0       0       0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0
 16813 ;;      Totals:         8      14       0       0       0       0       0
 16814 ;;Total ram usage:       22 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    7
 16817 ;; This function calls:
 16818 ;;		_i2c_transfer
 16819 ;; This function is called by:
 16820 ;;		_ssd1306_command
 16821 ;;		_ssd1306_data
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           	psect	text60
 16826  006C42                     __ptext60:
 16827                           	opt callstack 0
 16828  006C42                     _smbus8_write_data:
 16829                           	opt callstack 17
 16830                           
 16831                           ;src/driver/base/i2c.c: 95: int smbus8_write_data(i2c_dev dev, u8 addr, u8 reg, const u8
      +                          * data, int len);src/driver/base/i2c.c: 96: {;src/driver/base/i2c.c: 97:  i2c_msg msg[2]
      +                          ;;src/driver/base/i2c.c: 99:  msg[0].addr = addr;
 16832                           
 16833                           ;incstack = 0
 16834  006C42  C057  F080         	movff	smbus8_write_data@addr,smbus8_write_data@msg
 16835  006C46  0100               	movlb	0	; () banked
 16836  006C48  6B81               	clrf	(smbus8_write_data@msg+1)& (0+255),b
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;src/driver/base/i2c.c: 100:  msg[0].flags = (1<<1);
 16840  006C4A  0E02               	movlw	2
 16841  006C4C  6F82               	movwf	(smbus8_write_data@msg+2)& (0+255),b
 16842                           
 16843                           ;src/driver/base/i2c.c: 101:  msg[0].len = 1;
 16844  006C4E  0E00               	movlw	0
 16845  006C50  6F84               	movwf	(smbus8_write_data@msg+4)& (0+255),b
 16846  006C52  0E01               	movlw	1
 16847  006C54  6F83               	movwf	(smbus8_write_data@msg+3)& (0+255),b
 16848                           
 16849                           ; BSR set to: 0
 16850                           ;src/driver/base/i2c.c: 102:  msg[0].data = &reg;
 16851  006C56  0E58               	movlw	low smbus8_write_data@reg
 16852  006C58  6F85               	movwf	(smbus8_write_data@msg+5)& (0+255),b
 16853  006C5A  6B86               	clrf	(smbus8_write_data@msg+6)& (0+255),b
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;src/driver/base/i2c.c: 104:  msg[1].addr = addr;
 16857  006C5C  C057  F087         	movff	smbus8_write_data@addr,smbus8_write_data@msg+7
 16858  006C60  6B88               	clrf	(smbus8_write_data@msg+8)& (0+255),b
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;src/driver/base/i2c.c: 105:  msg[1].flags = (1<<2);
 16862  006C62  0E04               	movlw	4
 16863  006C64  6F89               	movwf	(smbus8_write_data@msg+9)& (0+255),b
 16864                           
 16865                           ; BSR set to: 0
 16866                           ;src/driver/base/i2c.c: 106:  msg[1].len = len;
 16867  006C66  C05B  F08A         	movff	smbus8_write_data@len,smbus8_write_data@msg+10
 16868  006C6A  C05C  F08B         	movff	smbus8_write_data@len+1,smbus8_write_data@msg+11
 16869                           
 16870                           ;src/driver/base/i2c.c: 107:  msg[1].data = (u8*)data;
 16871  006C6E  C059  F08C         	movff	smbus8_write_data@data,smbus8_write_data@msg+12
 16872  006C72  C05A  F08D         	movff	smbus8_write_data@data+1,smbus8_write_data@msg+13
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;src/driver/base/i2c.c: 109:  return i2c_transfer(dev, msg, 2);;	Return value of _smbus8
      +                          _write_data is never used
 16876  006C76  C055  F050         	movff	smbus8_write_data@dev,i2c_transfer@dev
 16877  006C7A  C056  F051         	movff	smbus8_write_data@dev+1,i2c_transfer@dev+1
 16878  006C7E  0E80               	movlw	low smbus8_write_data@msg
 16879  006C80  6E52               	movwf	i2c_transfer@msg^0,c
 16880  006C82  0E00               	movlw	0
 16881  006C84  6E54               	movwf	(i2c_transfer@num+1)^0,c
 16882  006C86  0E02               	movlw	2
 16883  006C88  6E53               	movwf	i2c_transfer@num^0,c
 16884  006C8A  ECF9  F035         	call	_i2c_transfer	;wreg free
 16885  006C8E  0012               	return		;funcret
 16886  006C90                     __end_of_smbus8_write_data:
 16887                           	opt callstack 0
 16888                           
 16889 ;; *************** function _i2c_probe_addr *****************
 16890 ;; Defined at:
 16891 ;;		line 35 in file "src/driver/base/i2c.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;  dev             2   84[COMRAM] PTR struct i2c_dev__
 16894 ;;		 -> g_i2c_bus(8), 
 16895 ;;  addr            1   86[COMRAM] unsigned char 
 16896 ;; Auto vars:     Size  Location     Type
 16897 ;;  msg             7   87[COMRAM] struct i2c_msg
 16898 ;; Return value:  Size  Location     Type
 16899 ;;                  2   84[COMRAM] int 
 16900 ;; Registers used:
 16901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16902 ;; Tracked objects:
 16903 ;;		On entry : 3F/0
 16904 ;;		On exit  : 0/0
 16905 ;;		Unchanged: 0/0
 16906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16907 ;;      Params:         3       0       0       0       0       0       0
 16908 ;;      Locals:         7       0       0       0       0       0       0
 16909 ;;      Temps:          0       0       0       0       0       0       0
 16910 ;;      Totals:        10       0       0       0       0       0       0
 16911 ;;Total ram usage:       10 bytes
 16912 ;; Hardware stack levels used:    1
 16913 ;; Hardware stack levels required when called:    7
 16914 ;; This function calls:
 16915 ;;		_i2c_transfer
 16916 ;; This function is called by:
 16917 ;;		_lnb_configure
 16918 ;;		_si5328_init
 16919 ;;		_lcd_init
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           	psect	text61
 16924  00708C                     __ptext61:
 16925                           	opt callstack 0
 16926  00708C                     _i2c_probe_addr:
 16927                           	opt callstack 22
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;src/driver/base/i2c.c: 35: int i2c_probe_addr(i2c_dev dev, u8 addr);src/driver/base/i2c
      +                          .c: 36: {;src/driver/base/i2c.c: 37:  i2c_msg msg;;src/driver/base/i2c.c: 38:  msg.addr 
      +                          = addr;
 16931                           
 16932                           ;incstack = 0
 16933  00708C  C057  F058         	movff	i2c_probe_addr@addr,i2c_probe_addr@msg
 16934  007090  6A59               	clrf	(i2c_probe_addr@msg+1)^0,c
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;src/driver/base/i2c.c: 39:  msg.flags = (1<<1) | (1<<2);
 16938  007092  0E06               	movlw	6
 16939  007094  6E5A               	movwf	(i2c_probe_addr@msg+2)^0,c
 16940                           
 16941                           ;src/driver/base/i2c.c: 40:  msg.len = 0;
 16942  007096  0E00               	movlw	0
 16943  007098  6E5C               	movwf	(i2c_probe_addr@msg+4)^0,c
 16944  00709A  0E00               	movlw	0
 16945  00709C  6E5B               	movwf	(i2c_probe_addr@msg+3)^0,c
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;src/driver/base/i2c.c: 41:  msg.data = ((void*)0);
 16949  00709E  0E00               	movlw	0
 16950  0070A0  6E5D               	movwf	(i2c_probe_addr@msg+5)^0,c
 16951  0070A2  0E00               	movlw	0
 16952  0070A4  6E5E               	movwf	(i2c_probe_addr@msg+6)^0,c
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;src/driver/base/i2c.c: 42:  return i2c_transfer(dev, &msg, 1);
 16956  0070A6  C055  F050         	movff	i2c_probe_addr@dev,i2c_transfer@dev
 16957  0070AA  C056  F051         	movff	i2c_probe_addr@dev+1,i2c_transfer@dev+1
 16958  0070AE  0E58               	movlw	low i2c_probe_addr@msg
 16959  0070B0  6E52               	movwf	i2c_transfer@msg^0,c
 16960  0070B2  0E00               	movlw	0
 16961  0070B4  6E54               	movwf	(i2c_transfer@num+1)^0,c
 16962  0070B6  0E01               	movlw	1
 16963  0070B8  6E53               	movwf	i2c_transfer@num^0,c
 16964  0070BA  ECF9  F035         	call	_i2c_transfer	;wreg free
 16965  0070BE  C050  F055         	movff	?_i2c_transfer,?_i2c_probe_addr
 16966  0070C2  C051  F056         	movff	?_i2c_transfer+1,?_i2c_probe_addr+1
 16967  0070C6  0012               	return		;funcret
 16968  0070C8                     __end_of_i2c_probe_addr:
 16969                           	opt callstack 0
 16970                           
 16971 ;; *************** function _init_timer *****************
 16972 ;; Defined at:
 16973 ;;		line 66 in file "src/driver/timer.c"
 16974 ;; Parameters:    Size  Location     Type
 16975 ;;		None
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;		None
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  1    wreg      void 
 16980 ;; Registers used:
 16981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16987 ;;      Params:         0       0       0       0       0       0       0
 16988 ;;      Locals:         0       0       0       0       0       0       0
 16989 ;;      Temps:          0       0       0       0       0       0       0
 16990 ;;      Totals:         0       0       0       0       0       0       0
 16991 ;;Total ram usage:        0 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    3
 16994 ;; This function calls:
 16995 ;;		_irq_set_handler
 16996 ;; This function is called by:
 16997 ;;		_main
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           	psect	text62
 17002  00738A                     __ptext62:
 17003                           	opt callstack 0
 17004  00738A                     _init_timer:
 17005                           	opt callstack 27
 17006                           
 17007                           ;src/driver/timer.c: 68:     T0CON = 0x88;
 17008                           
 17009                           ;incstack = 0
 17010  00738A  0E88               	movlw	136
 17011  00738C  6ED5               	movwf	213,c	;volatile
 17012                           
 17013                           ;src/driver/timer.c: 69:  INTCONbits.TMR0IE = 1;
 17014  00738E  8AF2               	bsf	242,5,c	;volatile
 17015                           
 17016                           ;src/driver/timer.c: 71:  INTCONbits.TMR0IF = 0;
 17017  007390  94F2               	bcf	242,2,c	;volatile
 17018                           
 17019                           ;src/driver/timer.c: 72:  TMR0L = 0xe0;
 17020  007392  0EE0               	movlw	224
 17021  007394  6ED6               	movwf	214,c	;volatile
 17022                           
 17023                           ;src/driver/timer.c: 73:  TMR0H = 0xb1;
 17024  007396  0EB1               	movlw	177
 17025  007398  6ED7               	movwf	215,c	;volatile
 17026                           
 17027                           ;src/driver/timer.c: 75:  irq_set_handler(IRQ_HANDLER_ID_TIMER0, t0_irq, ((void*)0));
 17028  00739A  0E8C               	movlw	low _t0_irq
 17029  00739C  6E0E               	movwf	irq_set_handler@handler^0,c
 17030  00739E  0E6E               	movlw	high _t0_irq
 17031  0073A0  6E0F               	movwf	(irq_set_handler@handler+1)^0,c
 17032  0073A2  0E00               	movlw	0
 17033  0073A4  6E10               	movwf	irq_set_handler@udata^0,c
 17034  0073A6  0E00               	movlw	0
 17035  0073A8  6E11               	movwf	(irq_set_handler@udata+1)^0,c
 17036  0073AA  0E01               	movlw	1
 17037  0073AC  EC81  F038         	call	_irq_set_handler
 17038  0073B0  0012               	return		;funcret
 17039  0073B2                     __end_of_init_timer:
 17040                           	opt callstack 0
 17041                           
 17042 ;; *************** function _irq_set_handler *****************
 17043 ;; Defined at:
 17044 ;;		line 23 in file "src/driver/irq.c"
 17045 ;; Parameters:    Size  Location     Type
 17046 ;;  id              1    wreg     enum E2251
 17047 ;;  handler         2   13[COMRAM] PTR FTN(PTR void ,)void 
 17048 ;;		 -> t0_irq(1), usart_rx_irq_handler(1), 
 17049 ;;  udata           2   15[COMRAM] PTR void 
 17050 ;;		 -> NULL(0), 
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;  id              1   17[COMRAM] enum E2251
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  1    wreg      void 
 17055 ;; Registers used:
 17056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17057 ;; Tracked objects:
 17058 ;;		On entry : 0/0
 17059 ;;		On exit  : 0/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17062 ;;      Params:         4       0       0       0       0       0       0
 17063 ;;      Locals:         1       0       0       0       0       0       0
 17064 ;;      Temps:          0       0       0       0       0       0       0
 17065 ;;      Totals:         5       0       0       0       0       0       0
 17066 ;;Total ram usage:        5 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; Hardware stack levels required when called:    2
 17069 ;; This function calls:
 17070 ;;		Nothing
 17071 ;; This function is called by:
 17072 ;;		_usart_init
 17073 ;;		_init_timer
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           	psect	text63
 17078  007102                     __ptext63:
 17079                           	opt callstack 0
 17080  007102                     _irq_set_handler:
 17081                           	opt callstack 27
 17082                           
 17083                           ;incstack = 0
 17084                           ;irq_set_handler@id stored from wreg
 17085  007102  6E12               	movwf	irq_set_handler@id^0,c
 17086                           
 17087                           ;src/driver/irq.c: 23: void irq_set_handler(IRQ_HANDLER_ID id, irq_handler_func handler,
      +                           void *udata);src/driver/irq.c: 24: {;src/driver/irq.c: 25:     if(id < IRQ_HANDLER_ID_C
      +                          NT) {
 17088  007104  0E02               	movlw	2
 17089  007106  6012               	cpfslt	irq_set_handler@id^0,c
 17090  007108  0012               	return	
 17091                           
 17092                           ;src/driver/irq.c: 26:         g_irq_handler_info[id].udata = udata;
 17093  00710A  5012               	movf	irq_set_handler@id^0,w,c
 17094  00710C  0D04               	mullw	4
 17095  00710E  0EA2               	movlw	low (_g_irq_handler_info+2)
 17096  007110  24F3               	addwf	243,w,c
 17097  007112  6ED9               	movwf	fsr2l,c
 17098  007114  0E02               	movlw	high (_g_irq_handler_info+2)
 17099  007116  20F4               	addwfc	prodh,w,c
 17100  007118  6EDA               	movwf	fsr2h,c
 17101  00711A  C010  FFDE         	movff	irq_set_handler@udata,postinc2
 17102  00711E  C011  FFDD         	movff	irq_set_handler@udata+1,postdec2
 17103                           
 17104                           ;src/driver/irq.c: 27:         g_irq_handler_info[id].handler = handler;
 17105  007122  5012               	movf	irq_set_handler@id^0,w,c
 17106  007124  0D04               	mullw	4
 17107  007126  0EA0               	movlw	low _g_irq_handler_info
 17108  007128  24F3               	addwf	243,w,c
 17109  00712A  6ED9               	movwf	fsr2l,c
 17110  00712C  0E02               	movlw	high _g_irq_handler_info
 17111  00712E  20F4               	addwfc	prodh,w,c
 17112  007130  6EDA               	movwf	fsr2h,c
 17113  007132  C00E  FFDE         	movff	irq_set_handler@handler,postinc2
 17114  007136  C00F  FFDD         	movff	irq_set_handler@handler+1,postdec2
 17115  00713A  0012               	return		;funcret
 17116  00713C                     __end_of_irq_set_handler:
 17117                           	opt callstack 0
 17118                           
 17119 ;; *************** function _init_gps *****************
 17120 ;; Defined at:
 17121 ;;		line 326 in file "src/gps.c"
 17122 ;; Parameters:    Size  Location     Type
 17123 ;;		None
 17124 ;; Auto vars:     Size  Location     Type
 17125 ;;		None
 17126 ;; Return value:  Size  Location     Type
 17127 ;;                  1    wreg      void 
 17128 ;; Registers used:
 17129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17130 ;; Tracked objects:
 17131 ;;		On entry : 3F/0
 17132 ;;		On exit  : 3C/0
 17133 ;;		Unchanged: 0/0
 17134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17135 ;;      Params:         0       0       0       0       0       0       0
 17136 ;;      Locals:         0       0       0       0       0       0       0
 17137 ;;      Temps:          0       0       0       0       0       0       0
 17138 ;;      Totals:         0       0       0       0       0       0       0
 17139 ;;Total ram usage:        0 bytes
 17140 ;; Hardware stack levels used:    1
 17141 ;; Hardware stack levels required when called:   11
 17142 ;; This function calls:
 17143 ;;		_send_UBX_string
 17144 ;; This function is called by:
 17145 ;;		_main
 17146 ;; This function uses a non-reentrant model
 17147 ;;
 17148                           
 17149                           	psect	text64
 17150  00735E                     __ptext64:
 17151                           	opt callstack 0
 17152  00735E                     _init_gps:
 17153                           	opt callstack 19
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;src/gps.c: 328:  if(gps_init_timer == 1 && ubx_ack == 0)
 17157                           
 17158                           ;incstack = 0
 17159  00735E  05CD               	decf	_gps_init_timer& (0+255),w,b
 17160  007360  A4D8               	btfss	status,2,c
 17161  007362  0012               	return	
 17162                           
 17163                           ; BSR set to: 0
 17164  007364  506E               	movf	_ubx_ack^0,w,c
 17165  007366  A4D8               	btfss	status,2,c
 17166  007368  0012               	return	
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;src/gps.c: 329:  {;src/gps.c: 330:   gps_init_timer = 0;
 17170  00736A  0E00               	movlw	0
 17171  00736C  6FCD               	movwf	_gps_init_timer& (0+255),b
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;src/gps.c: 332:   send_UBX_string(6,0x31,sizeof(gps_config_data),gps_config_data);
 17175  00736E  0E31               	movlw	49
 17176  007370  6FA4               	movwf	send_UBX_string@id& (0+255),b
 17177  007372  0E00               	movlw	0
 17178  007374  6FA6               	movwf	(send_UBX_string@len+1)& (0+255),b
 17179  007376  0E20               	movlw	32
 17180  007378  6FA5               	movwf	send_UBX_string@len& (0+255),b
 17181  00737A  0E1A               	movlw	low _gps_config_data
 17182  00737C  6FA7               	movwf	send_UBX_string@payload& (0+255),b
 17183  00737E  0E02               	movlw	high _gps_config_data
 17184  007380  6FA8               	movwf	(send_UBX_string@payload+1)& (0+255),b
 17185  007382  0E06               	movlw	6
 17186  007384  EC1C  F01D         	call	_send_UBX_string
 17187  007388  0012               	return		;funcret
 17188  00738A                     __end_of_init_gps:
 17189                           	opt callstack 0
 17190                           
 17191 ;; *************** function _send_UBX_string *****************
 17192 ;; Defined at:
 17193 ;;		line 337 in file "src/gps.c"
 17194 ;; Parameters:    Size  Location     Type
 17195 ;;  class           1    wreg     unsigned char 
 17196 ;;  id              1   36[BANK0 ] unsigned char 
 17197 ;;  len             2   37[BANK0 ] unsigned short 
 17198 ;;  payload         2   39[BANK0 ] PTR unsigned char 
 17199 ;;		 -> gps_config_data(32), 
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;  class           1   50[BANK1 ] unsigned char 
 17202 ;;  i               2   55[BANK1 ] int 
 17203 ;;  i               2   53[BANK1 ] int 
 17204 ;;  i               2   51[BANK1 ] int 
 17205 ;;  txbuf          50    0[BANK1 ] unsigned char [50]
 17206 ;;  idx             2   59[BANK1 ] int 
 17207 ;;  CK_A            1   58[BANK1 ] unsigned char 
 17208 ;;  CK_B            1   57[BANK1 ] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;                  1    wreg      void 
 17211 ;; Registers used:
 17212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17213 ;; Tracked objects:
 17214 ;;		On entry : 3F/0
 17215 ;;		On exit  : 3C/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17218 ;;      Params:         0       5       0       0       0       0       0
 17219 ;;      Locals:         0       0      61       0       0       0       0
 17220 ;;      Temps:          1       0       0       0       0       0       0
 17221 ;;      Totals:         1       5      61       0       0       0       0
 17222 ;;Total ram usage:       67 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:   10
 17225 ;; This function calls:
 17226 ;;		_printf
 17227 ;;		_putgps
 17228 ;; This function is called by:
 17229 ;;		_init_gps
 17230 ;; This function uses a non-reentrant model
 17231 ;;
 17232                           
 17233                           	psect	text65
 17234  003A38                     __ptext65:
 17235                           	opt callstack 0
 17236  003A38                     _send_UBX_string:
 17237                           	opt callstack 19
 17238                           
 17239                           ;incstack = 0
 17240                           ;send_UBX_string@class stored from wreg
 17241  003A38  0101               	movlb	1	; () banked
 17242  003A3A  6F32               	movwf	send_UBX_string@class& (0+255),b
 17243                           
 17244                           ;src/gps.c: 337: void send_UBX_string(u8 class, u8 id, u16 len, u8 *payload);src/gps.c: 
      +                          338: {;src/gps.c: 339:  u8 txbuf[50];;src/gps.c: 340:  int idx = 0;
 17245  003A3C  0E00               	movlw	0
 17246  003A3E  0101               	movlb	1	; () banked
 17247  003A40  6F3C               	movwf	(send_UBX_string@idx+1)& (0+255),b
 17248  003A42  0E00               	movlw	0
 17249  003A44  6F3B               	movwf	send_UBX_string@idx& (0+255),b
 17250                           
 17251                           ; BSR set to: 1
 17252                           ;src/gps.c: 341:  static u8 giveup = 0;;src/gps.c: 343:  if(giveup == 100) printf("GPS:n
      +                          ot found\n");
 17253  003A46  0E64               	movlw	100
 17254  003A48  0100               	movlb	0	; () banked
 17255  003A4A  19CC               	xorwf	send_UBX_string@giveup& (0+255),w,b
 17256  003A4C  A4D8               	btfss	status,2,c
 17257  003A4E  D006               	goto	l11097
 17258                           
 17259                           ; BSR set to: 0
 17260  003A50  0EB5               	movlw	low STR_90
 17261  003A52  6F97               	movwf	printf@fmt& (0+255),b
 17262  003A54  0E7E               	movlw	high STR_90
 17263  003A56  6F98               	movwf	(printf@fmt+1)& (0+255),b
 17264  003A58  EC30  F03A         	call	_printf	;wreg free
 17265  003A5C                     l11097:
 17266                           
 17267                           ;src/gps.c: 344:  if(++giveup > 100) return;
 17268  003A5C  0100               	movlb	0	; () banked
 17269  003A5E  2BCC               	incf	send_UBX_string@giveup& (0+255),f,b
 17270  003A60  0E64               	movlw	100
 17271  003A62  65CC               	cpfsgt	send_UBX_string@giveup& (0+255),b
 17272  003A64  D001               	goto	l11101
 17273  003A66  0012               	return	
 17274  003A68                     l11101:
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;src/gps.c: 346:  printf("GPS:init Ublox %d of 100\n",giveup);
 17278  003A68  0E8A               	movlw	low STR_91
 17279  003A6A  6F97               	movwf	printf@fmt& (0+255),b
 17280  003A6C  0E7C               	movlw	high STR_91
 17281  003A6E  6F98               	movwf	(printf@fmt+1)& (0+255),b
 17282  003A70  C0CC  F099         	movff	send_UBX_string@giveup,?_printf+2
 17283  003A74  6B9A               	clrf	(?_printf+3)& (0+255),b
 17284  003A76  EC30  F03A         	call	_printf	;wreg free
 17285                           
 17286                           ; BSR set to: 2
 17287                           ;src/gps.c: 348:  txbuf[idx++] = 0xb5;
 17288  003A7A  0EB5               	movlw	181
 17289  003A7C  0101               	movlb	1	; () banked
 17290  003A7E  6F00               	movwf	send_UBX_string@txbuf& (0+255),b
 17291                           
 17292                           ; BSR set to: 1
 17293  003A80  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17294  003A82  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17295                           
 17296                           ; BSR set to: 1
 17297                           ;src/gps.c: 349:  txbuf[idx++] = 0x62;
 17298  003A84  0E00               	movlw	low send_UBX_string@txbuf
 17299  003A86  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17300  003A88  6ED9               	movwf	fsr2l,c
 17301  003A8A  0E01               	movlw	high send_UBX_string@txbuf
 17302  003A8C  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17303  003A8E  6EDA               	movwf	fsr2h,c
 17304  003A90  0E62               	movlw	98
 17305  003A92  6EDF               	movwf	indf2,c
 17306                           
 17307                           ; BSR set to: 1
 17308  003A94  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17309  003A96  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17310                           
 17311                           ; BSR set to: 1
 17312                           ;src/gps.c: 350:  txbuf[idx++] = class;
 17313  003A98  0E00               	movlw	low send_UBX_string@txbuf
 17314  003A9A  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17315  003A9C  6ED9               	movwf	fsr2l,c
 17316  003A9E  0E01               	movlw	high send_UBX_string@txbuf
 17317  003AA0  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17318  003AA2  6EDA               	movwf	fsr2h,c
 17319  003AA4  C132  FFDF         	movff	send_UBX_string@class,indf2
 17320                           
 17321                           ; BSR set to: 1
 17322  003AA8  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17323  003AAA  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17324                           
 17325                           ; BSR set to: 1
 17326                           ;src/gps.c: 351:  txbuf[idx++] = id;
 17327  003AAC  0E00               	movlw	low send_UBX_string@txbuf
 17328  003AAE  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17329  003AB0  6ED9               	movwf	fsr2l,c
 17330  003AB2  0E01               	movlw	high send_UBX_string@txbuf
 17331  003AB4  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17332  003AB6  6EDA               	movwf	fsr2h,c
 17333  003AB8  C0A4  FFDF         	movff	send_UBX_string@id,indf2
 17334                           
 17335                           ; BSR set to: 1
 17336  003ABC  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17337  003ABE  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17338                           
 17339                           ; BSR set to: 1
 17340                           ;src/gps.c: 352:  txbuf[idx++] = (u8)(len & 0xff);
 17341  003AC0  0E00               	movlw	low send_UBX_string@txbuf
 17342  003AC2  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17343  003AC4  6ED9               	movwf	fsr2l,c
 17344  003AC6  0E01               	movlw	high send_UBX_string@txbuf
 17345  003AC8  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17346  003ACA  6EDA               	movwf	fsr2h,c
 17347  003ACC  C0A5  FFDF         	movff	send_UBX_string@len,indf2
 17348                           
 17349                           ; BSR set to: 1
 17350  003AD0  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17351  003AD2  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17352                           
 17353                           ; BSR set to: 1
 17354                           ;src/gps.c: 353:  txbuf[idx++] = (u8)(len >> 8);
 17355  003AD4  0E00               	movlw	low send_UBX_string@txbuf
 17356  003AD6  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17357  003AD8  6ED9               	movwf	fsr2l,c
 17358  003ADA  0E01               	movlw	high send_UBX_string@txbuf
 17359  003ADC  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17360  003ADE  6EDA               	movwf	fsr2h,c
 17361  003AE0  C0A6  FFDF         	movff	send_UBX_string@len+1,indf2
 17362                           
 17363                           ; BSR set to: 1
 17364  003AE4  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17365  003AE6  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17366                           
 17367                           ; BSR set to: 1
 17368                           ;src/gps.c: 354:  for(int i=0; i<len; i++)
 17369  003AE8  0E00               	movlw	0
 17370  003AEA  6F34               	movwf	(send_UBX_string@i+1)& (0+255),b
 17371  003AEC  0E00               	movlw	0
 17372  003AEE  6F33               	movwf	send_UBX_string@i& (0+255),b
 17373  003AF0  D016               	goto	l11135
 17374  003AF2                     l11129:
 17375                           
 17376                           ; BSR set to: 1
 17377                           ;src/gps.c: 355:  {;src/gps.c: 356:   txbuf[idx++] = payload[i];
 17378  003AF2  5133               	movf	send_UBX_string@i& (0+255),w,b
 17379  003AF4  0100               	movlb	0	; () banked
 17380  003AF6  25A7               	addwf	send_UBX_string@payload& (0+255),w,b
 17381  003AF8  6ED9               	movwf	fsr2l,c
 17382  003AFA  0101               	movlb	1	; () banked
 17383  003AFC  5134               	movf	(send_UBX_string@i+1)& (0+255),w,b
 17384  003AFE  0100               	movlb	0	; () banked
 17385  003B00  21A8               	addwfc	(send_UBX_string@payload+1)& (0+255),w,b
 17386  003B02  6EDA               	movwf	fsr2h,c
 17387  003B04  0E00               	movlw	low send_UBX_string@txbuf
 17388  003B06  0101               	movlb	1	; () banked
 17389  003B08  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17390  003B0A  6EE1               	movwf	fsr1l,c
 17391  003B0C  0E01               	movlw	high send_UBX_string@txbuf
 17392  003B0E  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17393  003B10  6EE2               	movwf	fsr1h,c
 17394  003B12  CFDF FFE7          	movff	indf2,indf1
 17395                           
 17396                           ; BSR set to: 1
 17397  003B16  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17398  003B18  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17399                           
 17400                           ; BSR set to: 1
 17401                           ;src/gps.c: 357:  }
 17402  003B1A  4B33               	infsnz	send_UBX_string@i& (0+255),f,b
 17403  003B1C  2B34               	incf	(send_UBX_string@i+1)& (0+255),f,b
 17404  003B1E                     l11135:
 17405                           
 17406                           ; BSR set to: 1
 17407  003B1E  0100               	movlb	0	; () banked
 17408  003B20  51A5               	movf	send_UBX_string@len& (0+255),w,b
 17409  003B22  0101               	movlb	1	; () banked
 17410  003B24  5D33               	subwf	send_UBX_string@i& (0+255),w,b
 17411  003B26  0100               	movlb	0	; () banked
 17412  003B28  51A6               	movf	(send_UBX_string@len+1)& (0+255),w,b
 17413  003B2A  0101               	movlb	1	; () banked
 17414  003B2C  5934               	subwfb	(send_UBX_string@i+1)& (0+255),w,b
 17415  003B2E  A0D8               	btfss	status,0,c
 17416  003B30  D7E0               	goto	l11129
 17417                           
 17418                           ; BSR set to: 1
 17419                           ;src/gps.c: 360:  u8 CK_A = 0, CK_B = 0;
 17420  003B32  0E00               	movlw	0
 17421  003B34  6F3A               	movwf	send_UBX_string@CK_A& (0+255),b
 17422  003B36  0E00               	movlw	0
 17423  003B38  6F39               	movwf	send_UBX_string@CK_B& (0+255),b
 17424                           
 17425                           ;src/gps.c: 361:  for(int i=2; i<idx; i++)
 17426  003B3A  0E00               	movlw	0
 17427  003B3C  6F36               	movwf	(send_UBX_string@i_2074+1)& (0+255),b
 17428  003B3E  0E02               	movlw	2
 17429  003B40  6F35               	movwf	send_UBX_string@i_2074& (0+255),b
 17430  003B42  D00E               	goto	l11145
 17431  003B44                     l11139:
 17432                           
 17433                           ; BSR set to: 1
 17434                           ;src/gps.c: 362:  {;src/gps.c: 363:   CK_A = CK_A + txbuf[i];
 17435  003B44  0E00               	movlw	low send_UBX_string@txbuf
 17436  003B46  2535               	addwf	send_UBX_string@i_2074& (0+255),w,b
 17437  003B48  6ED9               	movwf	fsr2l,c
 17438  003B4A  0E01               	movlw	high send_UBX_string@txbuf
 17439  003B4C  2136               	addwfc	(send_UBX_string@i_2074+1)& (0+255),w,b
 17440  003B4E  6EDA               	movwf	fsr2h,c
 17441  003B50  50DF               	movf	indf2,w,c
 17442  003B52  253A               	addwf	send_UBX_string@CK_A& (0+255),w,b
 17443  003B54  6F3A               	movwf	send_UBX_string@CK_A& (0+255),b
 17444                           
 17445                           ; BSR set to: 1
 17446                           ;src/gps.c: 364:   CK_B = CK_B + CK_A;
 17447  003B56  5139               	movf	send_UBX_string@CK_B& (0+255),w,b
 17448  003B58  253A               	addwf	send_UBX_string@CK_A& (0+255),w,b
 17449  003B5A  6F39               	movwf	send_UBX_string@CK_B& (0+255),b
 17450                           
 17451                           ; BSR set to: 1
 17452                           ;src/gps.c: 365:  }
 17453  003B5C  4B35               	infsnz	send_UBX_string@i_2074& (0+255),f,b
 17454  003B5E  2B36               	incf	(send_UBX_string@i_2074+1)& (0+255),f,b
 17455  003B60                     l11145:
 17456                           
 17457                           ; BSR set to: 1
 17458  003B60  513B               	movf	send_UBX_string@idx& (0+255),w,b
 17459  003B62  5D35               	subwf	send_UBX_string@i_2074& (0+255),w,b
 17460  003B64  5136               	movf	(send_UBX_string@i_2074+1)& (0+255),w,b
 17461  003B66  0A80               	xorlw	128
 17462  003B68  6E64               	movwf	??_send_UBX_string^0,c
 17463  003B6A  513C               	movf	(send_UBX_string@idx+1)& (0+255),w,b
 17464  003B6C  0A80               	xorlw	128
 17465  003B6E  5864               	subwfb	??_send_UBX_string^0,w,c
 17466  003B70  A0D8               	btfss	status,0,c
 17467  003B72  D7E8               	goto	l11139
 17468                           
 17469                           ; BSR set to: 1
 17470                           ;src/gps.c: 366:  txbuf[idx++] = CK_A;
 17471  003B74  0E00               	movlw	low send_UBX_string@txbuf
 17472  003B76  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17473  003B78  6ED9               	movwf	fsr2l,c
 17474  003B7A  0E01               	movlw	high send_UBX_string@txbuf
 17475  003B7C  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17476  003B7E  6EDA               	movwf	fsr2h,c
 17477  003B80  C13A  FFDF         	movff	send_UBX_string@CK_A,indf2
 17478                           
 17479                           ; BSR set to: 1
 17480  003B84  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17481  003B86  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17482                           
 17483                           ; BSR set to: 1
 17484                           ;src/gps.c: 367:  txbuf[idx++] = CK_B;
 17485  003B88  0E00               	movlw	low send_UBX_string@txbuf
 17486  003B8A  253B               	addwf	send_UBX_string@idx& (0+255),w,b
 17487  003B8C  6ED9               	movwf	fsr2l,c
 17488  003B8E  0E01               	movlw	high send_UBX_string@txbuf
 17489  003B90  213C               	addwfc	(send_UBX_string@idx+1)& (0+255),w,b
 17490  003B92  6EDA               	movwf	fsr2h,c
 17491  003B94  C139  FFDF         	movff	send_UBX_string@CK_B,indf2
 17492  003B98  4B3B               	infsnz	send_UBX_string@idx& (0+255),f,b
 17493  003B9A  2B3C               	incf	(send_UBX_string@idx+1)& (0+255),f,b
 17494                           
 17495                           ; BSR set to: 1
 17496                           ;src/gps.c: 369:  if(idx >= 50)
 17497  003B9C  BF3C               	btfsc	(send_UBX_string@idx+1)& (0+255),7,b
 17498  003B9E  D006               	goto	l11157
 17499  003BA0  513C               	movf	(send_UBX_string@idx+1)& (0+255),w,b
 17500  003BA2  E126               	bnz	l871
 17501  003BA4  0E32               	movlw	50
 17502  003BA6  5D3B               	subwf	send_UBX_string@idx& (0+255),w,b
 17503  003BA8  B0D8               	btfsc	status,0,c
 17504  003BAA  0012               	return	
 17505  003BAC                     l11157:
 17506                           
 17507                           ; BSR set to: 1
 17508                           ;src/gps.c: 372:  for(int i=0; i<idx; i++)
 17509  003BAC  0E00               	movlw	0
 17510  003BAE  6F38               	movwf	(send_UBX_string@i_2075+1)& (0+255),b
 17511  003BB0  0E00               	movlw	0
 17512  003BB2  6F37               	movwf	send_UBX_string@i_2075& (0+255),b
 17513  003BB4  D00C               	goto	l11163
 17514  003BB6                     l11159:
 17515                           
 17516                           ; BSR set to: 1
 17517                           ;src/gps.c: 373:   putgps(txbuf[i]);
 17518  003BB6  0E00               	movlw	low send_UBX_string@txbuf
 17519  003BB8  2537               	addwf	send_UBX_string@i_2075& (0+255),w,b
 17520  003BBA  6ED9               	movwf	fsr2l,c
 17521  003BBC  0E01               	movlw	high send_UBX_string@txbuf
 17522  003BBE  2138               	addwfc	(send_UBX_string@i_2075+1)& (0+255),w,b
 17523  003BC0  6EDA               	movwf	fsr2h,c
 17524  003BC2  50DF               	movf	indf2,w,c
 17525  003BC4  EC7D  F03A         	call	_putgps
 17526  003BC8  0101               	movlb	1	; () banked
 17527  003BCA  4B37               	infsnz	send_UBX_string@i_2075& (0+255),f,b
 17528  003BCC  2B38               	incf	(send_UBX_string@i_2075+1)& (0+255),f,b
 17529  003BCE                     l11163:
 17530                           
 17531                           ; BSR set to: 1
 17532  003BCE  513B               	movf	send_UBX_string@idx& (0+255),w,b
 17533  003BD0  5D37               	subwf	send_UBX_string@i_2075& (0+255),w,b
 17534  003BD2  5138               	movf	(send_UBX_string@i_2075+1)& (0+255),w,b
 17535  003BD4  0A80               	xorlw	128
 17536  003BD6  6E64               	movwf	??_send_UBX_string^0,c
 17537  003BD8  513C               	movf	(send_UBX_string@idx+1)& (0+255),w,b
 17538  003BDA  0A80               	xorlw	128
 17539  003BDC  5864               	subwfb	??_send_UBX_string^0,w,c
 17540  003BDE  A0D8               	btfss	status,0,c
 17541  003BE0  D7EA               	goto	l11159
 17542                           
 17543                           ; BSR set to: 1
 17544                           ;src/gps.c: 375:  printf("\n");
 17545  003BE2  0E84               	movlw	low (STR_37+15)
 17546  003BE4  0100               	movlb	0	; () banked
 17547  003BE6  6F97               	movwf	printf@fmt& (0+255),b
 17548  003BE8  0E7D               	movlw	high (STR_37+15)
 17549  003BEA  6F98               	movwf	(printf@fmt+1)& (0+255),b
 17550  003BEC  EC30  F03A         	call	_printf	;wreg free
 17551  003BF0                     l871:
 17552  003BF0  0012               	return		;funcret
 17553  003BF2                     __end_of_send_UBX_string:
 17554                           	opt callstack 0
 17555                           
 17556 ;; *************** function _putgps *****************
 17557 ;; Defined at:
 17558 ;;		line 148 in file "src/driver/usart.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;  c               1    wreg     unsigned char 
 17561 ;; Auto vars:     Size  Location     Type
 17562 ;;  c               1   14[COMRAM] unsigned char 
 17563 ;; Return value:  Size  Location     Type
 17564 ;;                  1    wreg      void 
 17565 ;; Registers used:
 17566 ;;		wreg, status,2, cstack
 17567 ;; Tracked objects:
 17568 ;;		On entry : 3F/1
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17572 ;;      Params:         0       0       0       0       0       0       0
 17573 ;;      Locals:         1       0       0       0       0       0       0
 17574 ;;      Temps:          0       0       0       0       0       0       0
 17575 ;;      Totals:         1       0       0       0       0       0       0
 17576 ;;Total ram usage:        1 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; Hardware stack levels required when called:    3
 17579 ;; This function calls:
 17580 ;;		_usart_putc
 17581 ;; This function is called by:
 17582 ;;		_send_UBX_string
 17583 ;; This function uses a non-reentrant model
 17584 ;;
 17585                           
 17586                           	psect	text66
 17587  0074FA                     __ptext66:
 17588                           	opt callstack 0
 17589  0074FA                     _putgps:
 17590                           	opt callstack 25
 17591                           
 17592                           ;incstack = 0
 17593                           ;putgps@c stored from wreg
 17594  0074FA  6E0F               	movwf	putgps@c^0,c
 17595                           
 17596                           ;src/driver/usart.c: 148: void putgps(u8 c);src/driver/usart.c: 149: {;src/driver/usart.
      +                          c: 150:  usart_putc(c);
 17597  0074FC  500F               	movf	putgps@c^0,w,c
 17598  0074FE  EC76  F03A         	call	_usart_putc
 17599  007502  0012               	return		;funcret
 17600  007504                     __end_of_putgps:
 17601                           	opt callstack 0
 17602                           
 17603 ;; *************** function _init_gpios *****************
 17604 ;; Defined at:
 17605 ;;		line 23 in file "src/gpio.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;		None
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;		None
 17610 ;; Return value:  Size  Location     Type
 17611 ;;                  1    wreg      void 
 17612 ;; Registers used:
 17613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17614 ;; Tracked objects:
 17615 ;;		On entry : 0/0
 17616 ;;		On exit  : 3F/0
 17617 ;;		Unchanged: 0/0
 17618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17619 ;;      Params:         0       0       0       0       0       0       0
 17620 ;;      Locals:         0       0       0       0       0       0       0
 17621 ;;      Temps:          3       0       0       0       0       0       0
 17622 ;;      Totals:         3       0       0       0       0       0       0
 17623 ;;Total ram usage:        3 bytes
 17624 ;; Hardware stack levels used:    1
 17625 ;; Hardware stack levels required when called:    3
 17626 ;; This function calls:
 17627 ;;		_check_RXTX
 17628 ;; This function is called by:
 17629 ;;		_main
 17630 ;; This function uses a non-reentrant model
 17631 ;;
 17632                           
 17633                           	psect	text67
 17634  00088E                     __ptext67:
 17635                           	opt callstack 0
 17636  00088E                     _init_gpios:
 17637                           	opt callstack 27
 17638                           
 17639                           ;src/gpio.c: 26:     ADCON1bits.PCFG = 0xF;
 17640                           
 17641                           ;incstack = 0
 17642  00088E  0E0F               	movlw	15
 17643  000890  12C1               	iorwf	193,f,c	;volatile
 17644                           
 17645                           ;src/gpio.c: 27:     INTCON2bits.nRBPU = 0;
 17646  000892  9EF1               	bcf	241,7,c	;volatile
 17647                           
 17648                           ;src/gpio.c: 30:     *((PIN_ADF_LOCK)->pTRIS) |= (PIN_ADF_LOCK)->mask;
 17649  000894  0ECC               	movlw	low (_PIN_ADF_LOCK_DEF+4)
 17650  000896  6EF6               	movwf	tblptrl,c
 17651  000898  0E7B               	movlw	high (_PIN_ADF_LOCK_DEF+4)
 17652  00089A  6EF7               	movwf	tblptrh,c
 17653  00089C                     	if	0	;tblptru may be non-zero
 17654  00089C                     	endif
 17655  00089C                     	if	0	;tblptru may be non-zero
 17656  00089C                     	endif
 17657  00089C  0008               	tblrd		*
 17658  00089E  CFF5 F013          	movff	tablat,??_init_gpios
 17659  0008A2  0ECA               	movlw	low (_PIN_ADF_LOCK_DEF+2)
 17660  0008A4  6EF6               	movwf	tblptrl,c
 17661  0008A6  0E7B               	movlw	high (_PIN_ADF_LOCK_DEF+2)
 17662  0008A8  6EF7               	movwf	tblptrh,c
 17663  0008AA                     	if	0	;tblptru may be non-zero
 17664  0008AA                     	endif
 17665  0008AA                     	if	0	;tblptru may be non-zero
 17666  0008AA                     	endif
 17667  0008AA  0009               	tblrd		*+
 17668  0008AC  CFF5 FFD9          	movff	tablat,fsr2l
 17669  0008B0  0009               	tblrd		*+
 17670  0008B2  CFF5 FFDA          	movff	tablat,fsr2h
 17671  0008B6  5013               	movf	??_init_gpios^0,w,c
 17672  0008B8  12DF               	iorwf	indf2,f,c
 17673                           
 17674                           ;src/gpio.c: 32:     *((PIN_ADF_CE)->pPORT) &= ~(PIN_ADF_CE)->mask;
 17675  0008BA  0EC7               	movlw	low (_PIN_ADF_CE_DEF+4)
 17676  0008BC  6EF6               	movwf	tblptrl,c
 17677  0008BE  0E7B               	movlw	high (_PIN_ADF_CE_DEF+4)
 17678  0008C0  6EF7               	movwf	tblptrh,c
 17679  0008C2                     	if	0	;tblptru may be non-zero
 17680  0008C2                     	endif
 17681  0008C2                     	if	0	;tblptru may be non-zero
 17682  0008C2                     	endif
 17683  0008C2  0008               	tblrd		*
 17684  0008C4  50F5               	movf	tablat,w,c
 17685  0008C6  0AFF               	xorlw	255
 17686  0008C8  6E13               	movwf	??_init_gpios^0,c
 17687  0008CA  0EC3               	movlw	low _PIN_ADF_CE_DEF
 17688  0008CC  6EF6               	movwf	tblptrl,c
 17689  0008CE                     	if	1	;There is more than 1 active tblptr byte
 17690  0008CE  0E7B               	movlw	high _PIN_ADF_CE_DEF
 17691  0008D0  6EF7               	movwf	tblptrh,c
 17692  0008D2                     	endif
 17693  0008D2                     	if	0	;There are less than 3 active tblptr bytes
 17694  0008D2                     	endif
 17695  0008D2  0009               	tblrd		*+
 17696  0008D4  CFF5 F014          	movff	tablat,??_init_gpios+1
 17697  0008D8  0009               	tblrd		*+
 17698  0008DA  CFF5 F015          	movff	tablat,??_init_gpios+2
 17699  0008DE  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 17700  0008E2  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 17701  0008E6  5013               	movf	??_init_gpios^0,w,c
 17702  0008E8  16DF               	andwf	indf2,f,c
 17703                           
 17704                           ;src/gpio.c: 33:     *((PIN_ADF_CE)->pTRIS) &= ~(PIN_ADF_CE)->mask;
 17705  0008EA  0EC7               	movlw	low (_PIN_ADF_CE_DEF+4)
 17706  0008EC  6EF6               	movwf	tblptrl,c
 17707  0008EE  0E7B               	movlw	high (_PIN_ADF_CE_DEF+4)
 17708  0008F0  6EF7               	movwf	tblptrh,c
 17709  0008F2                     	if	0	;tblptru may be non-zero
 17710  0008F2                     	endif
 17711  0008F2                     	if	0	;tblptru may be non-zero
 17712  0008F2                     	endif
 17713  0008F2  0008               	tblrd		*
 17714  0008F4  50F5               	movf	tablat,w,c
 17715  0008F6  0AFF               	xorlw	255
 17716  0008F8  6E13               	movwf	??_init_gpios^0,c
 17717  0008FA  0EC5               	movlw	low (_PIN_ADF_CE_DEF+2)
 17718  0008FC  6EF6               	movwf	tblptrl,c
 17719  0008FE  0E7B               	movlw	high (_PIN_ADF_CE_DEF+2)
 17720  000900  6EF7               	movwf	tblptrh,c
 17721  000902                     	if	0	;tblptru may be non-zero
 17722  000902                     	endif
 17723  000902                     	if	0	;tblptru may be non-zero
 17724  000902                     	endif
 17725  000902  0009               	tblrd		*+
 17726  000904  CFF5 FFD9          	movff	tablat,fsr2l
 17727  000908  0009               	tblrd		*+
 17728  00090A  CFF5 FFDA          	movff	tablat,fsr2h
 17729  00090E  5013               	movf	??_init_gpios^0,w,c
 17730  000910  16DF               	andwf	indf2,f,c
 17731                           
 17732                           ;src/gpio.c: 35:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 17733  000912  0EC2               	movlw	low (_PIN_ADF_LE_DEF+4)
 17734  000914  6EF6               	movwf	tblptrl,c
 17735  000916  0E7B               	movlw	high (_PIN_ADF_LE_DEF+4)
 17736  000918  6EF7               	movwf	tblptrh,c
 17737  00091A                     	if	0	;tblptru may be non-zero
 17738  00091A                     	endif
 17739  00091A                     	if	0	;tblptru may be non-zero
 17740  00091A                     	endif
 17741  00091A  0008               	tblrd		*
 17742  00091C  50F5               	movf	tablat,w,c
 17743  00091E  0AFF               	xorlw	255
 17744  000920  6E13               	movwf	??_init_gpios^0,c
 17745  000922  0EBE               	movlw	low _PIN_ADF_LE_DEF
 17746  000924  6EF6               	movwf	tblptrl,c
 17747  000926                     	if	1	;There is more than 1 active tblptr byte
 17748  000926  0E7B               	movlw	high _PIN_ADF_LE_DEF
 17749  000928  6EF7               	movwf	tblptrh,c
 17750  00092A                     	endif
 17751  00092A                     	if	0	;There are less than 3 active tblptr bytes
 17752  00092A                     	endif
 17753  00092A  0009               	tblrd		*+
 17754  00092C  CFF5 F014          	movff	tablat,??_init_gpios+1
 17755  000930  0009               	tblrd		*+
 17756  000932  CFF5 F015          	movff	tablat,??_init_gpios+2
 17757  000936  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 17758  00093A  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 17759  00093E  5013               	movf	??_init_gpios^0,w,c
 17760  000940  16DF               	andwf	indf2,f,c
 17761                           
 17762                           ;src/gpio.c: 36:     *((PIN_ADF_LE)->pTRIS) &= ~(PIN_ADF_LE)->mask;
 17763  000942  0EC2               	movlw	low (_PIN_ADF_LE_DEF+4)
 17764  000944  6EF6               	movwf	tblptrl,c
 17765  000946  0E7B               	movlw	high (_PIN_ADF_LE_DEF+4)
 17766  000948  6EF7               	movwf	tblptrh,c
 17767  00094A                     	if	0	;tblptru may be non-zero
 17768  00094A                     	endif
 17769  00094A                     	if	0	;tblptru may be non-zero
 17770  00094A                     	endif
 17771  00094A  0008               	tblrd		*
 17772  00094C  50F5               	movf	tablat,w,c
 17773  00094E  0AFF               	xorlw	255
 17774  000950  6E13               	movwf	??_init_gpios^0,c
 17775  000952  0EC0               	movlw	low (_PIN_ADF_LE_DEF+2)
 17776  000954  6EF6               	movwf	tblptrl,c
 17777  000956  0E7B               	movlw	high (_PIN_ADF_LE_DEF+2)
 17778  000958  6EF7               	movwf	tblptrh,c
 17779  00095A                     	if	0	;tblptru may be non-zero
 17780  00095A                     	endif
 17781  00095A                     	if	0	;tblptru may be non-zero
 17782  00095A                     	endif
 17783  00095A  0009               	tblrd		*+
 17784  00095C  CFF5 FFD9          	movff	tablat,fsr2l
 17785  000960  0009               	tblrd		*+
 17786  000962  CFF5 FFDA          	movff	tablat,fsr2h
 17787  000966  5013               	movf	??_init_gpios^0,w,c
 17788  000968  16DF               	andwf	indf2,f,c
 17789                           
 17790                           ;src/gpio.c: 38:     *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mask;
 17791  00096A  0EBD               	movlw	low (_PIN_SIO_DATA_DEF+4)
 17792  00096C  6EF6               	movwf	tblptrl,c
 17793  00096E  0E7B               	movlw	high (_PIN_SIO_DATA_DEF+4)
 17794  000970  6EF7               	movwf	tblptrh,c
 17795  000972                     	if	0	;tblptru may be non-zero
 17796  000972                     	endif
 17797  000972                     	if	0	;tblptru may be non-zero
 17798  000972                     	endif
 17799  000972  0008               	tblrd		*
 17800  000974  50F5               	movf	tablat,w,c
 17801  000976  0AFF               	xorlw	255
 17802  000978  6E13               	movwf	??_init_gpios^0,c
 17803  00097A  0EB9               	movlw	low _PIN_SIO_DATA_DEF
 17804  00097C  6EF6               	movwf	tblptrl,c
 17805  00097E                     	if	1	;There is more than 1 active tblptr byte
 17806  00097E  0E7B               	movlw	high _PIN_SIO_DATA_DEF
 17807  000980  6EF7               	movwf	tblptrh,c
 17808  000982                     	endif
 17809  000982                     	if	0	;There are less than 3 active tblptr bytes
 17810  000982                     	endif
 17811  000982  0009               	tblrd		*+
 17812  000984  CFF5 F014          	movff	tablat,??_init_gpios+1
 17813  000988  0009               	tblrd		*+
 17814  00098A  CFF5 F015          	movff	tablat,??_init_gpios+2
 17815  00098E  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 17816  000992  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 17817  000996  5013               	movf	??_init_gpios^0,w,c
 17818  000998  16DF               	andwf	indf2,f,c
 17819                           
 17820                           ;src/gpio.c: 39:     *((PIN_SIO_DATA)->pTRIS) &= ~(PIN_SIO_DATA)->mask;
 17821  00099A  0EBD               	movlw	low (_PIN_SIO_DATA_DEF+4)
 17822  00099C  6EF6               	movwf	tblptrl,c
 17823  00099E  0E7B               	movlw	high (_PIN_SIO_DATA_DEF+4)
 17824  0009A0  6EF7               	movwf	tblptrh,c
 17825  0009A2                     	if	0	;tblptru may be non-zero
 17826  0009A2                     	endif
 17827  0009A2                     	if	0	;tblptru may be non-zero
 17828  0009A2                     	endif
 17829  0009A2  0008               	tblrd		*
 17830  0009A4  50F5               	movf	tablat,w,c
 17831  0009A6  0AFF               	xorlw	255
 17832  0009A8  6E13               	movwf	??_init_gpios^0,c
 17833  0009AA  0EBB               	movlw	low (_PIN_SIO_DATA_DEF+2)
 17834  0009AC  6EF6               	movwf	tblptrl,c
 17835  0009AE  0E7B               	movlw	high (_PIN_SIO_DATA_DEF+2)
 17836  0009B0  6EF7               	movwf	tblptrh,c
 17837  0009B2                     	if	0	;tblptru may be non-zero
 17838  0009B2                     	endif
 17839  0009B2                     	if	0	;tblptru may be non-zero
 17840  0009B2                     	endif
 17841  0009B2  0009               	tblrd		*+
 17842  0009B4  CFF5 FFD9          	movff	tablat,fsr2l
 17843  0009B8  0009               	tblrd		*+
 17844  0009BA  CFF5 FFDA          	movff	tablat,fsr2h
 17845  0009BE  5013               	movf	??_init_gpios^0,w,c
 17846  0009C0  16DF               	andwf	indf2,f,c
 17847                           
 17848                           ;src/gpio.c: 41:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 17849  0009C2  0EB8               	movlw	low (_PIN_SIO_CLK_DEF+4)
 17850  0009C4  6EF6               	movwf	tblptrl,c
 17851  0009C6  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+4)
 17852  0009C8  6EF7               	movwf	tblptrh,c
 17853  0009CA                     	if	0	;tblptru may be non-zero
 17854  0009CA                     	endif
 17855  0009CA                     	if	0	;tblptru may be non-zero
 17856  0009CA                     	endif
 17857  0009CA  0008               	tblrd		*
 17858  0009CC  50F5               	movf	tablat,w,c
 17859  0009CE  0AFF               	xorlw	255
 17860  0009D0  6E13               	movwf	??_init_gpios^0,c
 17861  0009D2  0EB4               	movlw	low _PIN_SIO_CLK_DEF
 17862  0009D4  6EF6               	movwf	tblptrl,c
 17863  0009D6                     	if	1	;There is more than 1 active tblptr byte
 17864  0009D6  0E7B               	movlw	high _PIN_SIO_CLK_DEF
 17865  0009D8  6EF7               	movwf	tblptrh,c
 17866  0009DA                     	endif
 17867  0009DA                     	if	0	;There are less than 3 active tblptr bytes
 17868  0009DA                     	endif
 17869  0009DA  0009               	tblrd		*+
 17870  0009DC  CFF5 F014          	movff	tablat,??_init_gpios+1
 17871  0009E0  0009               	tblrd		*+
 17872  0009E2  CFF5 F015          	movff	tablat,??_init_gpios+2
 17873  0009E6  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 17874  0009EA  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 17875  0009EE  5013               	movf	??_init_gpios^0,w,c
 17876  0009F0  16DF               	andwf	indf2,f,c
 17877                           
 17878                           ;src/gpio.c: 42:     *((PIN_SIO_CLK)->pTRIS) &= ~(PIN_SIO_CLK)->mask;
 17879  0009F2  0EB8               	movlw	low (_PIN_SIO_CLK_DEF+4)
 17880  0009F4  6EF6               	movwf	tblptrl,c
 17881  0009F6  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+4)
 17882  0009F8  6EF7               	movwf	tblptrh,c
 17883  0009FA                     	if	0	;tblptru may be non-zero
 17884  0009FA                     	endif
 17885  0009FA                     	if	0	;tblptru may be non-zero
 17886  0009FA                     	endif
 17887  0009FA  0008               	tblrd		*
 17888  0009FC  50F5               	movf	tablat,w,c
 17889  0009FE  0AFF               	xorlw	255
 17890  000A00  6E13               	movwf	??_init_gpios^0,c
 17891  000A02  0EB6               	movlw	low (_PIN_SIO_CLK_DEF+2)
 17892  000A04  6EF6               	movwf	tblptrl,c
 17893  000A06  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+2)
 17894  000A08  6EF7               	movwf	tblptrh,c
 17895  000A0A                     	if	0	;tblptru may be non-zero
 17896  000A0A                     	endif
 17897  000A0A                     	if	0	;tblptru may be non-zero
 17898  000A0A                     	endif
 17899  000A0A  0009               	tblrd		*+
 17900  000A0C  CFF5 FFD9          	movff	tablat,fsr2l
 17901  000A10  0009               	tblrd		*+
 17902  000A12  CFF5 FFDA          	movff	tablat,fsr2h
 17903  000A16  5013               	movf	??_init_gpios^0,w,c
 17904  000A18  16DF               	andwf	indf2,f,c
 17905                           
 17906                           ;src/gpio.c: 46:  *((PIN_SI5328_LOL)->pTRIS) |= (PIN_SI5328_LOL)->mask;
 17907  000A1A  0EB3               	movlw	low (_PIN_SI5328_LOL_DEF+4)
 17908  000A1C  6EF6               	movwf	tblptrl,c
 17909  000A1E  0E7B               	movlw	high (_PIN_SI5328_LOL_DEF+4)
 17910  000A20  6EF7               	movwf	tblptrh,c
 17911  000A22                     	if	0	;tblptru may be non-zero
 17912  000A22                     	endif
 17913  000A22                     	if	0	;tblptru may be non-zero
 17914  000A22                     	endif
 17915  000A22  0008               	tblrd		*
 17916  000A24  CFF5 F013          	movff	tablat,??_init_gpios
 17917  000A28  0EB1               	movlw	low (_PIN_SI5328_LOL_DEF+2)
 17918  000A2A  6EF6               	movwf	tblptrl,c
 17919  000A2C  0E7B               	movlw	high (_PIN_SI5328_LOL_DEF+2)
 17920  000A2E  6EF7               	movwf	tblptrh,c
 17921  000A30                     	if	0	;tblptru may be non-zero
 17922  000A30                     	endif
 17923  000A30                     	if	0	;tblptru may be non-zero
 17924  000A30                     	endif
 17925  000A30  0009               	tblrd		*+
 17926  000A32  CFF5 FFD9          	movff	tablat,fsr2l
 17927  000A36  0009               	tblrd		*+
 17928  000A38  CFF5 FFDA          	movff	tablat,fsr2h
 17929  000A3C  5013               	movf	??_init_gpios^0,w,c
 17930  000A3E  12DF               	iorwf	indf2,f,c
 17931                           
 17932                           ;src/gpio.c: 48:     *((PIN_SI5328_CS_CA)->pPORT) |= (PIN_SI5328_CS_CA)->mask;
 17933  000A40  0EAE               	movlw	low (_PIN_SI5328_CS_CA_DEF+4)
 17934  000A42  6EF6               	movwf	tblptrl,c
 17935  000A44  0E7B               	movlw	high (_PIN_SI5328_CS_CA_DEF+4)
 17936  000A46  6EF7               	movwf	tblptrh,c
 17937  000A48                     	if	0	;tblptru may be non-zero
 17938  000A48                     	endif
 17939  000A48                     	if	0	;tblptru may be non-zero
 17940  000A48                     	endif
 17941  000A48  0008               	tblrd		*
 17942  000A4A  CFF5 F013          	movff	tablat,??_init_gpios
 17943  000A4E  0EAA               	movlw	low _PIN_SI5328_CS_CA_DEF
 17944  000A50  6EF6               	movwf	tblptrl,c
 17945  000A52                     	if	1	;There is more than 1 active tblptr byte
 17946  000A52  0E7B               	movlw	high _PIN_SI5328_CS_CA_DEF
 17947  000A54  6EF7               	movwf	tblptrh,c
 17948  000A56                     	endif
 17949  000A56                     	if	0	;There are less than 3 active tblptr bytes
 17950  000A56                     	endif
 17951  000A56  0009               	tblrd		*+
 17952  000A58  CFF5 F014          	movff	tablat,??_init_gpios+1
 17953  000A5C  0009               	tblrd		*+
 17954  000A5E  CFF5 F015          	movff	tablat,??_init_gpios+2
 17955  000A62  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 17956  000A66  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 17957  000A6A  5013               	movf	??_init_gpios^0,w,c
 17958  000A6C  12DF               	iorwf	indf2,f,c
 17959                           
 17960                           ;src/gpio.c: 49:     *((PIN_SI5328_CS_CA)->pTRIS) |= (PIN_SI5328_CS_CA)->mask;
 17961  000A6E  0EAE               	movlw	low (_PIN_SI5328_CS_CA_DEF+4)
 17962  000A70  6EF6               	movwf	tblptrl,c
 17963  000A72  0E7B               	movlw	high (_PIN_SI5328_CS_CA_DEF+4)
 17964  000A74  6EF7               	movwf	tblptrh,c
 17965  000A76                     	if	0	;tblptru may be non-zero
 17966  000A76                     	endif
 17967  000A76                     	if	0	;tblptru may be non-zero
 17968  000A76                     	endif
 17969  000A76  0008               	tblrd		*
 17970  000A78  CFF5 F013          	movff	tablat,??_init_gpios
 17971  000A7C  0EAC               	movlw	low (_PIN_SI5328_CS_CA_DEF+2)
 17972  000A7E  6EF6               	movwf	tblptrl,c
 17973  000A80  0E7B               	movlw	high (_PIN_SI5328_CS_CA_DEF+2)
 17974  000A82  6EF7               	movwf	tblptrh,c
 17975  000A84                     	if	0	;tblptru may be non-zero
 17976  000A84                     	endif
 17977  000A84                     	if	0	;tblptru may be non-zero
 17978  000A84                     	endif
 17979  000A84  0009               	tblrd		*+
 17980  000A86  CFF5 FFD9          	movff	tablat,fsr2l
 17981  000A8A  0009               	tblrd		*+
 17982  000A8C  CFF5 FFDA          	movff	tablat,fsr2h
 17983  000A90  5013               	movf	??_init_gpios^0,w,c
 17984  000A92  12DF               	iorwf	indf2,f,c
 17985                           
 17986                           ;src/gpio.c: 52:     *((PIN_LED_SI_LOCK)->pPORT) |= (PIN_LED_SI_LOCK)->mask;
 17987  000A94  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 17988  000A96  6EF6               	movwf	tblptrl,c
 17989  000A98  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 17990  000A9A  6EF7               	movwf	tblptrh,c
 17991  000A9C                     	if	0	;tblptru may be non-zero
 17992  000A9C                     	endif
 17993  000A9C                     	if	0	;tblptru may be non-zero
 17994  000A9C                     	endif
 17995  000A9C  0008               	tblrd		*
 17996  000A9E  CFF5 F013          	movff	tablat,??_init_gpios
 17997  000AA2  0EA5               	movlw	low _PIN_LED_SI_LOCK_DEF
 17998  000AA4  6EF6               	movwf	tblptrl,c
 17999  000AA6                     	if	1	;There is more than 1 active tblptr byte
 18000  000AA6  0E7B               	movlw	high _PIN_LED_SI_LOCK_DEF
 18001  000AA8  6EF7               	movwf	tblptrh,c
 18002  000AAA                     	endif
 18003  000AAA                     	if	0	;There are less than 3 active tblptr bytes
 18004  000AAA                     	endif
 18005  000AAA  0009               	tblrd		*+
 18006  000AAC  CFF5 F014          	movff	tablat,??_init_gpios+1
 18007  000AB0  0009               	tblrd		*+
 18008  000AB2  CFF5 F015          	movff	tablat,??_init_gpios+2
 18009  000AB6  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18010  000ABA  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18011  000ABE  5013               	movf	??_init_gpios^0,w,c
 18012  000AC0  12DF               	iorwf	indf2,f,c
 18013                           
 18014                           ;src/gpio.c: 53:     *((PIN_LED_SI_LOCK)->pTRIS) &= ~(PIN_LED_SI_LOCK)->mask;
 18015  000AC2  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 18016  000AC4  6EF6               	movwf	tblptrl,c
 18017  000AC6  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 18018  000AC8  6EF7               	movwf	tblptrh,c
 18019  000ACA                     	if	0	;tblptru may be non-zero
 18020  000ACA                     	endif
 18021  000ACA                     	if	0	;tblptru may be non-zero
 18022  000ACA                     	endif
 18023  000ACA  0008               	tblrd		*
 18024  000ACC  50F5               	movf	tablat,w,c
 18025  000ACE  0AFF               	xorlw	255
 18026  000AD0  6E13               	movwf	??_init_gpios^0,c
 18027  000AD2  0EA7               	movlw	low (_PIN_LED_SI_LOCK_DEF+2)
 18028  000AD4  6EF6               	movwf	tblptrl,c
 18029  000AD6  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+2)
 18030  000AD8  6EF7               	movwf	tblptrh,c
 18031  000ADA                     	if	0	;tblptru may be non-zero
 18032  000ADA                     	endif
 18033  000ADA                     	if	0	;tblptru may be non-zero
 18034  000ADA                     	endif
 18035  000ADA  0009               	tblrd		*+
 18036  000ADC  CFF5 FFD9          	movff	tablat,fsr2l
 18037  000AE0  0009               	tblrd		*+
 18038  000AE2  CFF5 FFDA          	movff	tablat,fsr2h
 18039  000AE6  5013               	movf	??_init_gpios^0,w,c
 18040  000AE8  16DF               	andwf	indf2,f,c
 18041                           
 18042                           ;src/gpio.c: 55:     *((PIN_LED_CPU_OK)->pPORT) |= (PIN_LED_CPU_OK)->mask;
 18043  000AEA  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
 18044  000AEC  6EF6               	movwf	tblptrl,c
 18045  000AEE  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
 18046  000AF0  6EF7               	movwf	tblptrh,c
 18047  000AF2                     	if	0	;tblptru may be non-zero
 18048  000AF2                     	endif
 18049  000AF2                     	if	0	;tblptru may be non-zero
 18050  000AF2                     	endif
 18051  000AF2  0008               	tblrd		*
 18052  000AF4  CFF5 F013          	movff	tablat,??_init_gpios
 18053  000AF8  0E9B               	movlw	low _PIN_LED_CPU_OK_DEF
 18054  000AFA  6EF6               	movwf	tblptrl,c
 18055  000AFC                     	if	1	;There is more than 1 active tblptr byte
 18056  000AFC  0E7B               	movlw	high _PIN_LED_CPU_OK_DEF
 18057  000AFE  6EF7               	movwf	tblptrh,c
 18058  000B00                     	endif
 18059  000B00                     	if	0	;There are less than 3 active tblptr bytes
 18060  000B00                     	endif
 18061  000B00  0009               	tblrd		*+
 18062  000B02  CFF5 F014          	movff	tablat,??_init_gpios+1
 18063  000B06  0009               	tblrd		*+
 18064  000B08  CFF5 F015          	movff	tablat,??_init_gpios+2
 18065  000B0C  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18066  000B10  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18067  000B14  5013               	movf	??_init_gpios^0,w,c
 18068  000B16  12DF               	iorwf	indf2,f,c
 18069                           
 18070                           ;src/gpio.c: 56:     *((PIN_LED_CPU_OK)->pTRIS) &= ~(PIN_LED_CPU_OK)->mask;
 18071  000B18  0E9F               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
 18072  000B1A  6EF6               	movwf	tblptrl,c
 18073  000B1C  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
 18074  000B1E  6EF7               	movwf	tblptrh,c
 18075  000B20                     	if	0	;tblptru may be non-zero
 18076  000B20                     	endif
 18077  000B20                     	if	0	;tblptru may be non-zero
 18078  000B20                     	endif
 18079  000B20  0008               	tblrd		*
 18080  000B22  50F5               	movf	tablat,w,c
 18081  000B24  0AFF               	xorlw	255
 18082  000B26  6E13               	movwf	??_init_gpios^0,c
 18083  000B28  0E9D               	movlw	low (_PIN_LED_CPU_OK_DEF+2)
 18084  000B2A  6EF6               	movwf	tblptrl,c
 18085  000B2C  0E7B               	movlw	high (_PIN_LED_CPU_OK_DEF+2)
 18086  000B2E  6EF7               	movwf	tblptrh,c
 18087  000B30                     	if	0	;tblptru may be non-zero
 18088  000B30                     	endif
 18089  000B30                     	if	0	;tblptru may be non-zero
 18090  000B30                     	endif
 18091  000B30  0009               	tblrd		*+
 18092  000B32  CFF5 FFD9          	movff	tablat,fsr2l
 18093  000B36  0009               	tblrd		*+
 18094  000B38  CFF5 FFDA          	movff	tablat,fsr2h
 18095  000B3C  5013               	movf	??_init_gpios^0,w,c
 18096  000B3E  16DF               	andwf	indf2,f,c
 18097                           
 18098                           ;src/gpio.c: 58:     *((PIN_LED_ADF_LOCK)->pPORT) |= (PIN_LED_ADF_LOCK)->mask;
 18099  000B40  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 18100  000B42  6EF6               	movwf	tblptrl,c
 18101  000B44  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 18102  000B46  6EF7               	movwf	tblptrh,c
 18103  000B48                     	if	0	;tblptru may be non-zero
 18104  000B48                     	endif
 18105  000B48                     	if	0	;tblptru may be non-zero
 18106  000B48                     	endif
 18107  000B48  0008               	tblrd		*
 18108  000B4A  CFF5 F013          	movff	tablat,??_init_gpios
 18109  000B4E  0E91               	movlw	low _PIN_LED_ADF_LOCK_DEF
 18110  000B50  6EF6               	movwf	tblptrl,c
 18111  000B52                     	if	1	;There is more than 1 active tblptr byte
 18112  000B52  0E7B               	movlw	high _PIN_LED_ADF_LOCK_DEF
 18113  000B54  6EF7               	movwf	tblptrh,c
 18114  000B56                     	endif
 18115  000B56                     	if	0	;There are less than 3 active tblptr bytes
 18116  000B56                     	endif
 18117  000B56  0009               	tblrd		*+
 18118  000B58  CFF5 F014          	movff	tablat,??_init_gpios+1
 18119  000B5C  0009               	tblrd		*+
 18120  000B5E  CFF5 F015          	movff	tablat,??_init_gpios+2
 18121  000B62  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18122  000B66  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18123  000B6A  5013               	movf	??_init_gpios^0,w,c
 18124  000B6C  12DF               	iorwf	indf2,f,c
 18125                           
 18126                           ;src/gpio.c: 59:     *((PIN_LED_ADF_LOCK)->pTRIS) &= ~(PIN_LED_ADF_LOCK)->mask;
 18127  000B6E  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 18128  000B70  6EF6               	movwf	tblptrl,c
 18129  000B72  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 18130  000B74  6EF7               	movwf	tblptrh,c
 18131  000B76                     	if	0	;tblptru may be non-zero
 18132  000B76                     	endif
 18133  000B76                     	if	0	;tblptru may be non-zero
 18134  000B76                     	endif
 18135  000B76  0008               	tblrd		*
 18136  000B78  50F5               	movf	tablat,w,c
 18137  000B7A  0AFF               	xorlw	255
 18138  000B7C  6E13               	movwf	??_init_gpios^0,c
 18139  000B7E  0E93               	movlw	low (_PIN_LED_ADF_LOCK_DEF+2)
 18140  000B80  6EF6               	movwf	tblptrl,c
 18141  000B82  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+2)
 18142  000B84  6EF7               	movwf	tblptrh,c
 18143  000B86                     	if	0	;tblptru may be non-zero
 18144  000B86                     	endif
 18145  000B86                     	if	0	;tblptru may be non-zero
 18146  000B86                     	endif
 18147  000B86  0009               	tblrd		*+
 18148  000B88  CFF5 FFD9          	movff	tablat,fsr2l
 18149  000B8C  0009               	tblrd		*+
 18150  000B8E  CFF5 FFDA          	movff	tablat,fsr2h
 18151  000B92  5013               	movf	??_init_gpios^0,w,c
 18152  000B94  16DF               	andwf	indf2,f,c
 18153                           
 18154                           ;src/gpio.c: 61:     *((PIN_LED_LNB_GOOD)->pPORT) |= (PIN_LED_LNB_GOOD)->mask;
 18155  000B96  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 18156  000B98  6EF6               	movwf	tblptrl,c
 18157  000B9A  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 18158  000B9C  6EF7               	movwf	tblptrh,c
 18159  000B9E                     	if	0	;tblptru may be non-zero
 18160  000B9E                     	endif
 18161  000B9E                     	if	0	;tblptru may be non-zero
 18162  000B9E                     	endif
 18163  000B9E  0008               	tblrd		*
 18164  000BA0  CFF5 F013          	movff	tablat,??_init_gpios
 18165  000BA4  0E87               	movlw	low _PIN_LED_LNB_GOOD_DEF
 18166  000BA6  6EF6               	movwf	tblptrl,c
 18167  000BA8                     	if	1	;There is more than 1 active tblptr byte
 18168  000BA8  0E7B               	movlw	high _PIN_LED_LNB_GOOD_DEF
 18169  000BAA  6EF7               	movwf	tblptrh,c
 18170  000BAC                     	endif
 18171  000BAC                     	if	0	;There are less than 3 active tblptr bytes
 18172  000BAC                     	endif
 18173  000BAC  0009               	tblrd		*+
 18174  000BAE  CFF5 F014          	movff	tablat,??_init_gpios+1
 18175  000BB2  0009               	tblrd		*+
 18176  000BB4  CFF5 F015          	movff	tablat,??_init_gpios+2
 18177  000BB8  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18178  000BBC  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18179  000BC0  5013               	movf	??_init_gpios^0,w,c
 18180  000BC2  12DF               	iorwf	indf2,f,c
 18181                           
 18182                           ;src/gpio.c: 62:     *((PIN_LED_LNB_GOOD)->pTRIS) &= ~(PIN_LED_LNB_GOOD)->mask;
 18183  000BC4  0E8B               	movlw	low (_PIN_LED_LNB_GOOD_DEF+4)
 18184  000BC6  6EF6               	movwf	tblptrl,c
 18185  000BC8  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+4)
 18186  000BCA  6EF7               	movwf	tblptrh,c
 18187  000BCC                     	if	0	;tblptru may be non-zero
 18188  000BCC                     	endif
 18189  000BCC                     	if	0	;tblptru may be non-zero
 18190  000BCC                     	endif
 18191  000BCC  0008               	tblrd		*
 18192  000BCE  50F5               	movf	tablat,w,c
 18193  000BD0  0AFF               	xorlw	255
 18194  000BD2  6E13               	movwf	??_init_gpios^0,c
 18195  000BD4  0E89               	movlw	low (_PIN_LED_LNB_GOOD_DEF+2)
 18196  000BD6  6EF6               	movwf	tblptrl,c
 18197  000BD8  0E7B               	movlw	high (_PIN_LED_LNB_GOOD_DEF+2)
 18198  000BDA  6EF7               	movwf	tblptrh,c
 18199  000BDC                     	if	0	;tblptru may be non-zero
 18200  000BDC                     	endif
 18201  000BDC                     	if	0	;tblptru may be non-zero
 18202  000BDC                     	endif
 18203  000BDC  0009               	tblrd		*+
 18204  000BDE  CFF5 FFD9          	movff	tablat,fsr2l
 18205  000BE2  0009               	tblrd		*+
 18206  000BE4  CFF5 FFDA          	movff	tablat,fsr2h
 18207  000BE8  5013               	movf	??_init_gpios^0,w,c
 18208  000BEA  16DF               	andwf	indf2,f,c
 18209                           
 18210                           ;src/gpio.c: 65:     *((PIN_I2C_SCL)->pTRIS) |= (PIN_I2C_SCL)->mask;
 18211  000BEC  0E81               	movlw	low (_PIN_I2C_SCL_DEF+4)
 18212  000BEE  6EF6               	movwf	tblptrl,c
 18213  000BF0  0E7B               	movlw	high (_PIN_I2C_SCL_DEF+4)
 18214  000BF2  6EF7               	movwf	tblptrh,c
 18215  000BF4                     	if	0	;tblptru may be non-zero
 18216  000BF4                     	endif
 18217  000BF4                     	if	0	;tblptru may be non-zero
 18218  000BF4                     	endif
 18219  000BF4  0008               	tblrd		*
 18220  000BF6  CFF5 F013          	movff	tablat,??_init_gpios
 18221  000BFA  0E7F               	movlw	low (_PIN_I2C_SCL_DEF+2)
 18222  000BFC  6EF6               	movwf	tblptrl,c
 18223  000BFE  0E7B               	movlw	high (_PIN_I2C_SCL_DEF+2)
 18224  000C00  6EF7               	movwf	tblptrh,c
 18225  000C02                     	if	0	;tblptru may be non-zero
 18226  000C02                     	endif
 18227  000C02                     	if	0	;tblptru may be non-zero
 18228  000C02                     	endif
 18229  000C02  0009               	tblrd		*+
 18230  000C04  CFF5 FFD9          	movff	tablat,fsr2l
 18231  000C08  0009               	tblrd		*+
 18232  000C0A  CFF5 FFDA          	movff	tablat,fsr2h
 18233  000C0E  5013               	movf	??_init_gpios^0,w,c
 18234  000C10  12DF               	iorwf	indf2,f,c
 18235                           
 18236                           ;src/gpio.c: 66:     *((PIN_I2C_SDA)->pTRIS) |= (PIN_I2C_SDA)->mask;
 18237  000C12  0E7C               	movlw	low (_PIN_I2C_SDA_DEF+4)
 18238  000C14  6EF6               	movwf	tblptrl,c
 18239  000C16  0E7B               	movlw	high (_PIN_I2C_SDA_DEF+4)
 18240  000C18  6EF7               	movwf	tblptrh,c
 18241  000C1A                     	if	0	;tblptru may be non-zero
 18242  000C1A                     	endif
 18243  000C1A                     	if	0	;tblptru may be non-zero
 18244  000C1A                     	endif
 18245  000C1A  0008               	tblrd		*
 18246  000C1C  CFF5 F013          	movff	tablat,??_init_gpios
 18247  000C20  0E7A               	movlw	low (_PIN_I2C_SDA_DEF+2)
 18248  000C22  6EF6               	movwf	tblptrl,c
 18249  000C24  0E7B               	movlw	high (_PIN_I2C_SDA_DEF+2)
 18250  000C26  6EF7               	movwf	tblptrh,c
 18251  000C28                     	if	0	;tblptru may be non-zero
 18252  000C28                     	endif
 18253  000C28                     	if	0	;tblptru may be non-zero
 18254  000C28                     	endif
 18255  000C28  0009               	tblrd		*+
 18256  000C2A  CFF5 FFD9          	movff	tablat,fsr2l
 18257  000C2E  0009               	tblrd		*+
 18258  000C30  CFF5 FFDA          	movff	tablat,fsr2h
 18259  000C34  5013               	movf	??_init_gpios^0,w,c
 18260  000C36  12DF               	iorwf	indf2,f,c
 18261                           
 18262                           ;src/gpio.c: 69:  check_RXTX();
 18263  000C38  ECFE  F022         	call	_check_RXTX	;wreg free
 18264                           
 18265                           ; BSR set to: 0
 18266                           ;src/gpio.c: 72:     *((PIN_SJ3)->pTRIS) |= (PIN_SJ3)->mask;
 18267  000C3C  0E6D               	movlw	low (_PIN_SJ3_DEF+4)
 18268  000C3E  6EF6               	movwf	tblptrl,c
 18269  000C40  0E7B               	movlw	high (_PIN_SJ3_DEF+4)
 18270  000C42  6EF7               	movwf	tblptrh,c
 18271  000C44                     	if	0	;tblptru may be non-zero
 18272  000C44                     	endif
 18273  000C44                     	if	0	;tblptru may be non-zero
 18274  000C44                     	endif
 18275  000C44  0008               	tblrd		*
 18276  000C46  CFF5 F013          	movff	tablat,??_init_gpios
 18277  000C4A  0E6B               	movlw	low (_PIN_SJ3_DEF+2)
 18278  000C4C  6EF6               	movwf	tblptrl,c
 18279  000C4E  0E7B               	movlw	high (_PIN_SJ3_DEF+2)
 18280  000C50  6EF7               	movwf	tblptrh,c
 18281  000C52                     	if	0	;tblptru may be non-zero
 18282  000C52                     	endif
 18283  000C52                     	if	0	;tblptru may be non-zero
 18284  000C52                     	endif
 18285  000C52  0009               	tblrd		*+
 18286  000C54  CFF5 FFD9          	movff	tablat,fsr2l
 18287  000C58  0009               	tblrd		*+
 18288  000C5A  CFF5 FFDA          	movff	tablat,fsr2h
 18289  000C5E  5013               	movf	??_init_gpios^0,w,c
 18290  000C60  12DF               	iorwf	indf2,f,c
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;src/gpio.c: 73:     *((PIN_SJ3)->pPORT) |= (PIN_SJ3)->mask;
 18294  000C62  0E6D               	movlw	low (_PIN_SJ3_DEF+4)
 18295  000C64  6EF6               	movwf	tblptrl,c
 18296  000C66  0E7B               	movlw	high (_PIN_SJ3_DEF+4)
 18297  000C68  6EF7               	movwf	tblptrh,c
 18298  000C6A                     	if	0	;tblptru may be non-zero
 18299  000C6A                     	endif
 18300  000C6A                     	if	0	;tblptru may be non-zero
 18301  000C6A                     	endif
 18302  000C6A  0008               	tblrd		*
 18303  000C6C  CFF5 F013          	movff	tablat,??_init_gpios
 18304  000C70  0E69               	movlw	low _PIN_SJ3_DEF
 18305  000C72  6EF6               	movwf	tblptrl,c
 18306  000C74                     	if	1	;There is more than 1 active tblptr byte
 18307  000C74  0E7B               	movlw	high _PIN_SJ3_DEF
 18308  000C76  6EF7               	movwf	tblptrh,c
 18309  000C78                     	endif
 18310  000C78                     	if	0	;There are less than 3 active tblptr bytes
 18311  000C78                     	endif
 18312  000C78  0009               	tblrd		*+
 18313  000C7A  CFF5 F014          	movff	tablat,??_init_gpios+1
 18314  000C7E  0009               	tblrd		*+
 18315  000C80  CFF5 F015          	movff	tablat,??_init_gpios+2
 18316  000C84  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18317  000C88  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18318  000C8C  5013               	movf	??_init_gpios^0,w,c
 18319  000C8E  12DF               	iorwf	indf2,f,c
 18320                           
 18321                           ; BSR set to: 0
 18322                           ;src/gpio.c: 74:     *((PIN_SJ4)->pTRIS) |= (PIN_SJ4)->mask;
 18323  000C90  0E68               	movlw	low (_PIN_SJ4_DEF+4)
 18324  000C92  6EF6               	movwf	tblptrl,c
 18325  000C94  0E7B               	movlw	high (_PIN_SJ4_DEF+4)
 18326  000C96  6EF7               	movwf	tblptrh,c
 18327  000C98                     	if	0	;tblptru may be non-zero
 18328  000C98                     	endif
 18329  000C98                     	if	0	;tblptru may be non-zero
 18330  000C98                     	endif
 18331  000C98  0008               	tblrd		*
 18332  000C9A  CFF5 F013          	movff	tablat,??_init_gpios
 18333  000C9E  0E66               	movlw	low (_PIN_SJ4_DEF+2)
 18334  000CA0  6EF6               	movwf	tblptrl,c
 18335  000CA2  0E7B               	movlw	high (_PIN_SJ4_DEF+2)
 18336  000CA4  6EF7               	movwf	tblptrh,c
 18337  000CA6                     	if	0	;tblptru may be non-zero
 18338  000CA6                     	endif
 18339  000CA6                     	if	0	;tblptru may be non-zero
 18340  000CA6                     	endif
 18341  000CA6  0009               	tblrd		*+
 18342  000CA8  CFF5 FFD9          	movff	tablat,fsr2l
 18343  000CAC  0009               	tblrd		*+
 18344  000CAE  CFF5 FFDA          	movff	tablat,fsr2h
 18345  000CB2  5013               	movf	??_init_gpios^0,w,c
 18346  000CB4  12DF               	iorwf	indf2,f,c
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;src/gpio.c: 75:     *((PIN_SJ4)->pPORT) |= (PIN_SJ4)->mask;
 18350  000CB6  0E68               	movlw	low (_PIN_SJ4_DEF+4)
 18351  000CB8  6EF6               	movwf	tblptrl,c
 18352  000CBA  0E7B               	movlw	high (_PIN_SJ4_DEF+4)
 18353  000CBC  6EF7               	movwf	tblptrh,c
 18354  000CBE                     	if	0	;tblptru may be non-zero
 18355  000CBE                     	endif
 18356  000CBE                     	if	0	;tblptru may be non-zero
 18357  000CBE                     	endif
 18358  000CBE  0008               	tblrd		*
 18359  000CC0  CFF5 F013          	movff	tablat,??_init_gpios
 18360  000CC4  0E64               	movlw	low _PIN_SJ4_DEF
 18361  000CC6  6EF6               	movwf	tblptrl,c
 18362  000CC8                     	if	1	;There is more than 1 active tblptr byte
 18363  000CC8  0E7B               	movlw	high _PIN_SJ4_DEF
 18364  000CCA  6EF7               	movwf	tblptrh,c
 18365  000CCC                     	endif
 18366  000CCC                     	if	0	;There are less than 3 active tblptr bytes
 18367  000CCC                     	endif
 18368  000CCC  0009               	tblrd		*+
 18369  000CCE  CFF5 F014          	movff	tablat,??_init_gpios+1
 18370  000CD2  0009               	tblrd		*+
 18371  000CD4  CFF5 F015          	movff	tablat,??_init_gpios+2
 18372  000CD8  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18373  000CDC  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18374  000CE0  5013               	movf	??_init_gpios^0,w,c
 18375  000CE2  12DF               	iorwf	indf2,f,c
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;src/gpio.c: 76:     *((PIN_SJ5)->pTRIS) |= (PIN_SJ5)->mask;
 18379  000CE4  0E63               	movlw	low (_PIN_SJ5_DEF+4)
 18380  000CE6  6EF6               	movwf	tblptrl,c
 18381  000CE8  0E7B               	movlw	high (_PIN_SJ5_DEF+4)
 18382  000CEA  6EF7               	movwf	tblptrh,c
 18383  000CEC                     	if	0	;tblptru may be non-zero
 18384  000CEC                     	endif
 18385  000CEC                     	if	0	;tblptru may be non-zero
 18386  000CEC                     	endif
 18387  000CEC  0008               	tblrd		*
 18388  000CEE  CFF5 F013          	movff	tablat,??_init_gpios
 18389  000CF2  0E61               	movlw	low (_PIN_SJ5_DEF+2)
 18390  000CF4  6EF6               	movwf	tblptrl,c
 18391  000CF6  0E7B               	movlw	high (_PIN_SJ5_DEF+2)
 18392  000CF8  6EF7               	movwf	tblptrh,c
 18393  000CFA                     	if	0	;tblptru may be non-zero
 18394  000CFA                     	endif
 18395  000CFA                     	if	0	;tblptru may be non-zero
 18396  000CFA                     	endif
 18397  000CFA  0009               	tblrd		*+
 18398  000CFC  CFF5 FFD9          	movff	tablat,fsr2l
 18399  000D00  0009               	tblrd		*+
 18400  000D02  CFF5 FFDA          	movff	tablat,fsr2h
 18401  000D06  5013               	movf	??_init_gpios^0,w,c
 18402  000D08  12DF               	iorwf	indf2,f,c
 18403                           
 18404                           ; BSR set to: 0
 18405                           ;src/gpio.c: 77:     *((PIN_SJ5)->pPORT) |= (PIN_SJ5)->mask;
 18406  000D0A  0E63               	movlw	low (_PIN_SJ5_DEF+4)
 18407  000D0C  6EF6               	movwf	tblptrl,c
 18408  000D0E  0E7B               	movlw	high (_PIN_SJ5_DEF+4)
 18409  000D10  6EF7               	movwf	tblptrh,c
 18410  000D12                     	if	0	;tblptru may be non-zero
 18411  000D12                     	endif
 18412  000D12                     	if	0	;tblptru may be non-zero
 18413  000D12                     	endif
 18414  000D12  0008               	tblrd		*
 18415  000D14  CFF5 F013          	movff	tablat,??_init_gpios
 18416  000D18  0E5F               	movlw	low _PIN_SJ5_DEF
 18417  000D1A  6EF6               	movwf	tblptrl,c
 18418  000D1C                     	if	1	;There is more than 1 active tblptr byte
 18419  000D1C  0E7B               	movlw	high _PIN_SJ5_DEF
 18420  000D1E  6EF7               	movwf	tblptrh,c
 18421  000D20                     	endif
 18422  000D20                     	if	0	;There are less than 3 active tblptr bytes
 18423  000D20                     	endif
 18424  000D20  0009               	tblrd		*+
 18425  000D22  CFF5 F014          	movff	tablat,??_init_gpios+1
 18426  000D26  0009               	tblrd		*+
 18427  000D28  CFF5 F015          	movff	tablat,??_init_gpios+2
 18428  000D2C  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18429  000D30  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18430  000D34  5013               	movf	??_init_gpios^0,w,c
 18431  000D36  12DF               	iorwf	indf2,f,c
 18432                           
 18433                           ; BSR set to: 0
 18434                           ;src/gpio.c: 78:     *((PIN_SJ6)->pTRIS) |= (PIN_SJ6)->mask;
 18435  000D38  0E5E               	movlw	low (_PIN_SJ6_DEF+4)
 18436  000D3A  6EF6               	movwf	tblptrl,c
 18437  000D3C  0E7B               	movlw	high (_PIN_SJ6_DEF+4)
 18438  000D3E  6EF7               	movwf	tblptrh,c
 18439  000D40                     	if	0	;tblptru may be non-zero
 18440  000D40                     	endif
 18441  000D40                     	if	0	;tblptru may be non-zero
 18442  000D40                     	endif
 18443  000D40  0008               	tblrd		*
 18444  000D42  CFF5 F013          	movff	tablat,??_init_gpios
 18445  000D46  0E5C               	movlw	low (_PIN_SJ6_DEF+2)
 18446  000D48  6EF6               	movwf	tblptrl,c
 18447  000D4A  0E7B               	movlw	high (_PIN_SJ6_DEF+2)
 18448  000D4C  6EF7               	movwf	tblptrh,c
 18449  000D4E                     	if	0	;tblptru may be non-zero
 18450  000D4E                     	endif
 18451  000D4E                     	if	0	;tblptru may be non-zero
 18452  000D4E                     	endif
 18453  000D4E  0009               	tblrd		*+
 18454  000D50  CFF5 FFD9          	movff	tablat,fsr2l
 18455  000D54  0009               	tblrd		*+
 18456  000D56  CFF5 FFDA          	movff	tablat,fsr2h
 18457  000D5A  5013               	movf	??_init_gpios^0,w,c
 18458  000D5C  12DF               	iorwf	indf2,f,c
 18459                           
 18460                           ; BSR set to: 0
 18461                           ;src/gpio.c: 79:     *((PIN_SJ6)->pPORT) |= (PIN_SJ6)->mask;
 18462  000D5E  0E5E               	movlw	low (_PIN_SJ6_DEF+4)
 18463  000D60  6EF6               	movwf	tblptrl,c
 18464  000D62  0E7B               	movlw	high (_PIN_SJ6_DEF+4)
 18465  000D64  6EF7               	movwf	tblptrh,c
 18466  000D66                     	if	0	;tblptru may be non-zero
 18467  000D66                     	endif
 18468  000D66                     	if	0	;tblptru may be non-zero
 18469  000D66                     	endif
 18470  000D66  0008               	tblrd		*
 18471  000D68  CFF5 F013          	movff	tablat,??_init_gpios
 18472  000D6C  0E5A               	movlw	low _PIN_SJ6_DEF
 18473  000D6E  6EF6               	movwf	tblptrl,c
 18474  000D70                     	if	1	;There is more than 1 active tblptr byte
 18475  000D70  0E7B               	movlw	high _PIN_SJ6_DEF
 18476  000D72  6EF7               	movwf	tblptrh,c
 18477  000D74                     	endif
 18478  000D74                     	if	0	;There are less than 3 active tblptr bytes
 18479  000D74                     	endif
 18480  000D74  0009               	tblrd		*+
 18481  000D76  CFF5 F014          	movff	tablat,??_init_gpios+1
 18482  000D7A  0009               	tblrd		*+
 18483  000D7C  CFF5 F015          	movff	tablat,??_init_gpios+2
 18484  000D80  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18485  000D84  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18486  000D88  5013               	movf	??_init_gpios^0,w,c
 18487  000D8A  12DF               	iorwf	indf2,f,c
 18488                           
 18489                           ; BSR set to: 0
 18490                           ;src/gpio.c: 82:     *((PIN_LNB_QRG2)->pTRIS) |= (PIN_LNB_QRG2)->mask;
 18491  000D8C  0E59               	movlw	low (_PIN_LNB_QRG2_DEF+4)
 18492  000D8E  6EF6               	movwf	tblptrl,c
 18493  000D90  0E7B               	movlw	high (_PIN_LNB_QRG2_DEF+4)
 18494  000D92  6EF7               	movwf	tblptrh,c
 18495  000D94                     	if	0	;tblptru may be non-zero
 18496  000D94                     	endif
 18497  000D94                     	if	0	;tblptru may be non-zero
 18498  000D94                     	endif
 18499  000D94  0008               	tblrd		*
 18500  000D96  CFF5 F013          	movff	tablat,??_init_gpios
 18501  000D9A  0E57               	movlw	low (_PIN_LNB_QRG2_DEF+2)
 18502  000D9C  6EF6               	movwf	tblptrl,c
 18503  000D9E  0E7B               	movlw	high (_PIN_LNB_QRG2_DEF+2)
 18504  000DA0  6EF7               	movwf	tblptrh,c
 18505  000DA2                     	if	0	;tblptru may be non-zero
 18506  000DA2                     	endif
 18507  000DA2                     	if	0	;tblptru may be non-zero
 18508  000DA2                     	endif
 18509  000DA2  0009               	tblrd		*+
 18510  000DA4  CFF5 FFD9          	movff	tablat,fsr2l
 18511  000DA8  0009               	tblrd		*+
 18512  000DAA  CFF5 FFDA          	movff	tablat,fsr2h
 18513  000DAE  5013               	movf	??_init_gpios^0,w,c
 18514  000DB0  12DF               	iorwf	indf2,f,c
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;src/gpio.c: 83:     *((PIN_LNB_QRG2)->pPORT) |= (PIN_LNB_QRG2)->mask;
 18518  000DB2  0E59               	movlw	low (_PIN_LNB_QRG2_DEF+4)
 18519  000DB4  6EF6               	movwf	tblptrl,c
 18520  000DB6  0E7B               	movlw	high (_PIN_LNB_QRG2_DEF+4)
 18521  000DB8  6EF7               	movwf	tblptrh,c
 18522  000DBA                     	if	0	;tblptru may be non-zero
 18523  000DBA                     	endif
 18524  000DBA                     	if	0	;tblptru may be non-zero
 18525  000DBA                     	endif
 18526  000DBA  0008               	tblrd		*
 18527  000DBC  CFF5 F013          	movff	tablat,??_init_gpios
 18528  000DC0  0E55               	movlw	low _PIN_LNB_QRG2_DEF
 18529  000DC2  6EF6               	movwf	tblptrl,c
 18530  000DC4                     	if	1	;There is more than 1 active tblptr byte
 18531  000DC4  0E7B               	movlw	high _PIN_LNB_QRG2_DEF
 18532  000DC6  6EF7               	movwf	tblptrh,c
 18533  000DC8                     	endif
 18534  000DC8                     	if	0	;There are less than 3 active tblptr bytes
 18535  000DC8                     	endif
 18536  000DC8  0009               	tblrd		*+
 18537  000DCA  CFF5 F014          	movff	tablat,??_init_gpios+1
 18538  000DCE  0009               	tblrd		*+
 18539  000DD0  CFF5 F015          	movff	tablat,??_init_gpios+2
 18540  000DD4  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18541  000DD8  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18542  000DDC  5013               	movf	??_init_gpios^0,w,c
 18543  000DDE  12DF               	iorwf	indf2,f,c
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;src/gpio.c: 84:     *((PIN_LNB_QRG1)->pTRIS) |= (PIN_LNB_QRG1)->mask;
 18547  000DE0  0E54               	movlw	low (_PIN_LNB_QRG1_DEF+4)
 18548  000DE2  6EF6               	movwf	tblptrl,c
 18549  000DE4  0E7B               	movlw	high (_PIN_LNB_QRG1_DEF+4)
 18550  000DE6  6EF7               	movwf	tblptrh,c
 18551  000DE8                     	if	0	;tblptru may be non-zero
 18552  000DE8                     	endif
 18553  000DE8                     	if	0	;tblptru may be non-zero
 18554  000DE8                     	endif
 18555  000DE8  0008               	tblrd		*
 18556  000DEA  CFF5 F013          	movff	tablat,??_init_gpios
 18557  000DEE  0E52               	movlw	low (_PIN_LNB_QRG1_DEF+2)
 18558  000DF0  6EF6               	movwf	tblptrl,c
 18559  000DF2  0E7B               	movlw	high (_PIN_LNB_QRG1_DEF+2)
 18560  000DF4  6EF7               	movwf	tblptrh,c
 18561  000DF6                     	if	0	;tblptru may be non-zero
 18562  000DF6                     	endif
 18563  000DF6                     	if	0	;tblptru may be non-zero
 18564  000DF6                     	endif
 18565  000DF6  0009               	tblrd		*+
 18566  000DF8  CFF5 FFD9          	movff	tablat,fsr2l
 18567  000DFC  0009               	tblrd		*+
 18568  000DFE  CFF5 FFDA          	movff	tablat,fsr2h
 18569  000E02  5013               	movf	??_init_gpios^0,w,c
 18570  000E04  12DF               	iorwf	indf2,f,c
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;src/gpio.c: 85:     *((PIN_LNB_QRG1)->pPORT) |= (PIN_LNB_QRG1)->mask;
 18574  000E06  0E54               	movlw	low (_PIN_LNB_QRG1_DEF+4)
 18575  000E08  6EF6               	movwf	tblptrl,c
 18576  000E0A  0E7B               	movlw	high (_PIN_LNB_QRG1_DEF+4)
 18577  000E0C  6EF7               	movwf	tblptrh,c
 18578  000E0E                     	if	0	;tblptru may be non-zero
 18579  000E0E                     	endif
 18580  000E0E                     	if	0	;tblptru may be non-zero
 18581  000E0E                     	endif
 18582  000E0E  0008               	tblrd		*
 18583  000E10  CFF5 F013          	movff	tablat,??_init_gpios
 18584  000E14  0E50               	movlw	low _PIN_LNB_QRG1_DEF
 18585  000E16  6EF6               	movwf	tblptrl,c
 18586  000E18                     	if	1	;There is more than 1 active tblptr byte
 18587  000E18  0E7B               	movlw	high _PIN_LNB_QRG1_DEF
 18588  000E1A  6EF7               	movwf	tblptrh,c
 18589  000E1C                     	endif
 18590  000E1C                     	if	0	;There are less than 3 active tblptr bytes
 18591  000E1C                     	endif
 18592  000E1C  0009               	tblrd		*+
 18593  000E1E  CFF5 F014          	movff	tablat,??_init_gpios+1
 18594  000E22  0009               	tblrd		*+
 18595  000E24  CFF5 F015          	movff	tablat,??_init_gpios+2
 18596  000E28  C014  FFD9         	movff	??_init_gpios+1,fsr2l
 18597  000E2C  C015  FFDA         	movff	??_init_gpios+2,fsr2h
 18598  000E30  5013               	movf	??_init_gpios^0,w,c
 18599  000E32  12DF               	iorwf	indf2,f,c
 18600                           
 18601                           ; BSR set to: 0
 18602                           ;src/gpio.c: 88:     *((PIN_LNB_FAULT)->pTRIS) |= (PIN_LNB_FAULT)->mask;
 18603  000E34  0E4F               	movlw	low (_PIN_LNB_FAULT_DEF+4)
 18604  000E36  6EF6               	movwf	tblptrl,c
 18605  000E38  0E7B               	movlw	high (_PIN_LNB_FAULT_DEF+4)
 18606  000E3A  6EF7               	movwf	tblptrh,c
 18607  000E3C                     	if	0	;tblptru may be non-zero
 18608  000E3C                     	endif
 18609  000E3C                     	if	0	;tblptru may be non-zero
 18610  000E3C                     	endif
 18611  000E3C  0008               	tblrd		*
 18612  000E3E  CFF5 F013          	movff	tablat,??_init_gpios
 18613  000E42  0E4D               	movlw	low (_PIN_LNB_FAULT_DEF+2)
 18614  000E44  6EF6               	movwf	tblptrl,c
 18615  000E46  0E7B               	movlw	high (_PIN_LNB_FAULT_DEF+2)
 18616  000E48  6EF7               	movwf	tblptrh,c
 18617  000E4A                     	if	0	;tblptru may be non-zero
 18618  000E4A                     	endif
 18619  000E4A                     	if	0	;tblptru may be non-zero
 18620  000E4A                     	endif
 18621  000E4A  0009               	tblrd		*+
 18622  000E4C  CFF5 FFD9          	movff	tablat,fsr2l
 18623  000E50  0009               	tblrd		*+
 18624  000E52  CFF5 FFDA          	movff	tablat,fsr2h
 18625  000E56  5013               	movf	??_init_gpios^0,w,c
 18626  000E58  12DF               	iorwf	indf2,f,c
 18627                           
 18628                           ; BSR set to: 0
 18629  000E5A  0012               	return		;funcret
 18630  000E5C                     __end_of_init_gpios:
 18631                           	opt callstack 0
 18632                           
 18633 ;; *************** function _check_RXTX *****************
 18634 ;; Defined at:
 18635 ;;		line 92 in file "src/gpio.c"
 18636 ;; Parameters:    Size  Location     Type
 18637 ;;		None
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;  i               2   16[COMRAM] int 
 18640 ;; Return value:  Size  Location     Type
 18641 ;;                  1    wreg      void 
 18642 ;; Registers used:
 18643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/0
 18646 ;;		On exit  : 3F/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18649 ;;      Params:         0       0       0       0       0       0       0
 18650 ;;      Locals:         2       0       0       0       0       0       0
 18651 ;;      Temps:          3       0       0       0       0       0       0
 18652 ;;      Totals:         5       0       0       0       0       0       0
 18653 ;;Total ram usage:        5 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    2
 18656 ;; This function calls:
 18657 ;;		Nothing
 18658 ;; This function is called by:
 18659 ;;		_init_gpios
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           	psect	text68
 18664  0045FC                     __ptext68:
 18665                           	opt callstack 0
 18666  0045FC                     _check_RXTX:
 18667                           	opt callstack 27
 18668                           
 18669                           ;src/gpio.c: 94:  *((PIN_USART_TX)->pTRIS) &= ~(PIN_USART_TX)->mask;
 18670                           
 18671                           ; BSR set to: 0
 18672                           ;incstack = 0
 18673  0045FC  0E77               	movlw	low (_PIN_USART_TX_DEF+4)
 18674  0045FE  6EF6               	movwf	tblptrl,c
 18675  004600  0E7B               	movlw	high (_PIN_USART_TX_DEF+4)
 18676  004602  6EF7               	movwf	tblptrh,c
 18677  004604                     	if	0	;tblptru may be non-zero
 18678  004604                     	endif
 18679  004604                     	if	0	;tblptru may be non-zero
 18680  004604                     	endif
 18681  004604  0008               	tblrd		*
 18682  004606  50F5               	movf	tablat,w,c
 18683  004608  0AFF               	xorlw	255
 18684  00460A  6E0E               	movwf	??_check_RXTX^0,c
 18685  00460C  0E75               	movlw	low (_PIN_USART_TX_DEF+2)
 18686  00460E  6EF6               	movwf	tblptrl,c
 18687  004610  0E7B               	movlw	high (_PIN_USART_TX_DEF+2)
 18688  004612  6EF7               	movwf	tblptrh,c
 18689  004614                     	if	0	;tblptru may be non-zero
 18690  004614                     	endif
 18691  004614                     	if	0	;tblptru may be non-zero
 18692  004614                     	endif
 18693  004614  0009               	tblrd		*+
 18694  004616  CFF5 FFD9          	movff	tablat,fsr2l
 18695  00461A  0009               	tblrd		*+
 18696  00461C  CFF5 FFDA          	movff	tablat,fsr2h
 18697  004620  500E               	movf	??_check_RXTX^0,w,c
 18698  004622  16DF               	andwf	indf2,f,c
 18699                           
 18700                           ;src/gpio.c: 95:     *((PIN_USART_RX)->pTRIS) |= (PIN_USART_RX)->mask;
 18701  004624  0E72               	movlw	low (_PIN_USART_RX_DEF+4)
 18702  004626  6EF6               	movwf	tblptrl,c
 18703  004628  0E7B               	movlw	high (_PIN_USART_RX_DEF+4)
 18704  00462A  6EF7               	movwf	tblptrh,c
 18705  00462C                     	if	0	;tblptru may be non-zero
 18706  00462C                     	endif
 18707  00462C                     	if	0	;tblptru may be non-zero
 18708  00462C                     	endif
 18709  00462C  0008               	tblrd		*
 18710  00462E  CFF5 F00E          	movff	tablat,??_check_RXTX
 18711  004632  0E70               	movlw	low (_PIN_USART_RX_DEF+2)
 18712  004634  6EF6               	movwf	tblptrl,c
 18713  004636  0E7B               	movlw	high (_PIN_USART_RX_DEF+2)
 18714  004638  6EF7               	movwf	tblptrh,c
 18715  00463A                     	if	0	;tblptru may be non-zero
 18716  00463A                     	endif
 18717  00463A                     	if	0	;tblptru may be non-zero
 18718  00463A                     	endif
 18719  00463A  0009               	tblrd		*+
 18720  00463C  CFF5 FFD9          	movff	tablat,fsr2l
 18721  004640  0009               	tblrd		*+
 18722  004642  CFF5 FFDA          	movff	tablat,fsr2h
 18723  004646  500E               	movf	??_check_RXTX^0,w,c
 18724  004648  12DF               	iorwf	indf2,f,c
 18725                           
 18726                           ;src/gpio.c: 98:  for(int i=0; i<5; i++)
 18727  00464A  0E00               	movlw	0
 18728  00464C  6E12               	movwf	(check_RXTX@i+1)^0,c
 18729  00464E  0E00               	movlw	0
 18730  004650  6E11               	movwf	check_RXTX@i^0,c
 18731  004652                     l8211:
 18732                           
 18733                           ;src/gpio.c: 99:  {;src/gpio.c: 100:   *((PIN_USART_TX)->pPORT) &= ~(PIN_USART_TX)->mask
      +                          ;
 18734  004652  0E77               	movlw	low (_PIN_USART_TX_DEF+4)
 18735  004654  6EF6               	movwf	tblptrl,c
 18736  004656  0E7B               	movlw	high (_PIN_USART_TX_DEF+4)
 18737  004658  6EF7               	movwf	tblptrh,c
 18738  00465A                     	if	0	;tblptru may be non-zero
 18739  00465A                     	endif
 18740  00465A                     	if	0	;tblptru may be non-zero
 18741  00465A                     	endif
 18742  00465A  0008               	tblrd		*
 18743  00465C  50F5               	movf	tablat,w,c
 18744  00465E  0AFF               	xorlw	255
 18745  004660  6E0E               	movwf	??_check_RXTX^0,c
 18746  004662  0E73               	movlw	low _PIN_USART_TX_DEF
 18747  004664  6EF6               	movwf	tblptrl,c
 18748  004666                     	if	1	;There is more than 1 active tblptr byte
 18749  004666  0E7B               	movlw	high _PIN_USART_TX_DEF
 18750  004668  6EF7               	movwf	tblptrh,c
 18751  00466A                     	endif
 18752  00466A                     	if	0	;There are less than 3 active tblptr bytes
 18753  00466A                     	endif
 18754  00466A  0009               	tblrd		*+
 18755  00466C  CFF5 F00F          	movff	tablat,??_check_RXTX+1
 18756  004670  0009               	tblrd		*+
 18757  004672  CFF5 F010          	movff	tablat,??_check_RXTX+2
 18758  004676  C00F  FFD9         	movff	??_check_RXTX+1,fsr2l
 18759  00467A  C010  FFDA         	movff	??_check_RXTX+2,fsr2h
 18760  00467E  500E               	movf	??_check_RXTX^0,w,c
 18761  004680  16DF               	andwf	indf2,f,c
 18762                           
 18763                           ;src/gpio.c: 101:   _delaywdt((unsigned long)((10)*(8000000/4000.0)));
 18764  004682  0E14               	movlw	20
 18765  004684  6E0E               	movwf	??_check_RXTX^0,c
 18766  004686  0E7D               	movlw	125
 18767  004688                     u15017:
 18768  004688  0004               	clrwdt	
 18769  00468A  2EE8               	decfsz	wreg,f,c
 18770  00468C  D7FD               	bra	u15017
 18771  00468E  2E0E               	decfsz	??_check_RXTX^0,f,c
 18772  004690  D7FB               	bra	u15017
 18773  004692  0004               	clrwdt	
 18774  004694  F000               	nop	
 18775                           
 18776                           ;src/gpio.c: 102:   if(((*((PIN_USART_RX)->pPORT) & (PIN_USART_RX)->mask) != 0))
 18777  004696  0E72               	movlw	low (_PIN_USART_RX_DEF+4)
 18778  004698  6EF6               	movwf	tblptrl,c
 18779  00469A  0E7B               	movlw	high (_PIN_USART_RX_DEF+4)
 18780  00469C  6EF7               	movwf	tblptrh,c
 18781  00469E                     	if	0	;tblptru may be non-zero
 18782  00469E                     	endif
 18783  00469E                     	if	0	;tblptru may be non-zero
 18784  00469E                     	endif
 18785  00469E  0008               	tblrd		*
 18786  0046A0  CFF5 F00E          	movff	tablat,??_check_RXTX
 18787  0046A4  0E6E               	movlw	low _PIN_USART_RX_DEF
 18788  0046A6  6EF6               	movwf	tblptrl,c
 18789  0046A8                     	if	1	;There is more than 1 active tblptr byte
 18790  0046A8  0E7B               	movlw	high _PIN_USART_RX_DEF
 18791  0046AA  6EF7               	movwf	tblptrh,c
 18792  0046AC                     	endif
 18793  0046AC                     	if	0	;There are less than 3 active tblptr bytes
 18794  0046AC                     	endif
 18795  0046AC  0009               	tblrd		*+
 18796  0046AE  CFF5 F00F          	movff	tablat,??_check_RXTX+1
 18797  0046B2  0009               	tblrd		*+
 18798  0046B4  CFF5 F010          	movff	tablat,??_check_RXTX+2
 18799  0046B8  C00F  FFD9         	movff	??_check_RXTX+1,fsr2l
 18800  0046BC  C010  FFDA         	movff	??_check_RXTX+2,fsr2h
 18801  0046C0  50DF               	movf	indf2,w,c
 18802  0046C2  140E               	andwf	??_check_RXTX^0,w,c
 18803  0046C4  0900               	iorlw	0
 18804  0046C6  B4D8               	btfsc	status,2,c
 18805  0046C8  D004               	goto	l8221
 18806  0046CA                     u9250:
 18807                           
 18808                           ;src/gpio.c: 103:   {;src/gpio.c: 104:    ext10MHzReference = 0;
 18809  0046CA  0E00               	movlw	0
 18810  0046CC  0100               	movlb	0	; () banked
 18811  0046CE  6FD7               	movwf	_ext10MHzReference& (0+255),b
 18812  0046D0  0012               	return	
 18813  0046D2                     l8221:
 18814                           
 18815                           ;src/gpio.c: 108:   *((PIN_USART_TX)->pPORT) |= (PIN_USART_TX)->mask;
 18816  0046D2  0E77               	movlw	low (_PIN_USART_TX_DEF+4)
 18817  0046D4  6EF6               	movwf	tblptrl,c
 18818  0046D6  0E7B               	movlw	high (_PIN_USART_TX_DEF+4)
 18819  0046D8  6EF7               	movwf	tblptrh,c
 18820  0046DA                     	if	0	;tblptru may be non-zero
 18821  0046DA                     	endif
 18822  0046DA                     	if	0	;tblptru may be non-zero
 18823  0046DA                     	endif
 18824  0046DA  0008               	tblrd		*
 18825  0046DC  CFF5 F00E          	movff	tablat,??_check_RXTX
 18826  0046E0  0E73               	movlw	low _PIN_USART_TX_DEF
 18827  0046E2  6EF6               	movwf	tblptrl,c
 18828  0046E4                     	if	1	;There is more than 1 active tblptr byte
 18829  0046E4  0E7B               	movlw	high _PIN_USART_TX_DEF
 18830  0046E6  6EF7               	movwf	tblptrh,c
 18831  0046E8                     	endif
 18832  0046E8                     	if	0	;There are less than 3 active tblptr bytes
 18833  0046E8                     	endif
 18834  0046E8  0009               	tblrd		*+
 18835  0046EA  CFF5 F00F          	movff	tablat,??_check_RXTX+1
 18836  0046EE  0009               	tblrd		*+
 18837  0046F0  CFF5 F010          	movff	tablat,??_check_RXTX+2
 18838  0046F4  C00F  FFD9         	movff	??_check_RXTX+1,fsr2l
 18839  0046F8  C010  FFDA         	movff	??_check_RXTX+2,fsr2h
 18840  0046FC  500E               	movf	??_check_RXTX^0,w,c
 18841  0046FE  12DF               	iorwf	indf2,f,c
 18842                           
 18843                           ;src/gpio.c: 109:   _delaywdt((unsigned long)((10)*(8000000/4000.0)));
 18844  004700  0E14               	movlw	20
 18845  004702  6E0E               	movwf	??_check_RXTX^0,c
 18846  004704  0E7D               	movlw	125
 18847  004706                     u15027:
 18848  004706  0004               	clrwdt	
 18849  004708  2EE8               	decfsz	wreg,f,c
 18850  00470A  D7FD               	bra	u15027
 18851  00470C  2E0E               	decfsz	??_check_RXTX^0,f,c
 18852  00470E  D7FB               	bra	u15027
 18853  004710  0004               	clrwdt	
 18854  004712  F000               	nop	
 18855                           
 18856                           ;src/gpio.c: 110:   if(((*((PIN_USART_RX)->pPORT) & (PIN_USART_RX)->mask) != 0) == 0)
 18857  004714  0E72               	movlw	low (_PIN_USART_RX_DEF+4)
 18858  004716  6EF6               	movwf	tblptrl,c
 18859  004718  0E7B               	movlw	high (_PIN_USART_RX_DEF+4)
 18860  00471A  6EF7               	movwf	tblptrh,c
 18861  00471C                     	if	0	;tblptru may be non-zero
 18862  00471C                     	endif
 18863  00471C                     	if	0	;tblptru may be non-zero
 18864  00471C                     	endif
 18865  00471C  0008               	tblrd		*
 18866  00471E  CFF5 F00E          	movff	tablat,??_check_RXTX
 18867  004722  0E6E               	movlw	low _PIN_USART_RX_DEF
 18868  004724  6EF6               	movwf	tblptrl,c
 18869  004726                     	if	1	;There is more than 1 active tblptr byte
 18870  004726  0E7B               	movlw	high _PIN_USART_RX_DEF
 18871  004728  6EF7               	movwf	tblptrh,c
 18872  00472A                     	endif
 18873  00472A                     	if	0	;There are less than 3 active tblptr bytes
 18874  00472A                     	endif
 18875  00472A  0009               	tblrd		*+
 18876  00472C  CFF5 F00F          	movff	tablat,??_check_RXTX+1
 18877  004730  0009               	tblrd		*+
 18878  004732  CFF5 F010          	movff	tablat,??_check_RXTX+2
 18879  004736  C00F  FFD9         	movff	??_check_RXTX+1,fsr2l
 18880  00473A  C010  FFDA         	movff	??_check_RXTX+2,fsr2h
 18881  00473E  50DF               	movf	indf2,w,c
 18882  004740  140E               	andwf	??_check_RXTX^0,w,c
 18883  004742  0900               	iorlw	0
 18884  004744  B4D8               	btfsc	status,2,c
 18885  004746  D7C1               	goto	u9250
 18886                           
 18887                           ;src/gpio.c: 115:  }
 18888  004748  4A11               	infsnz	check_RXTX@i^0,f,c
 18889  00474A  2A12               	incf	(check_RXTX@i+1)^0,f,c
 18890  00474C  BE12               	btfsc	(check_RXTX@i+1)^0,7,c
 18891  00474E  D781               	goto	l8211
 18892  004750  5012               	movf	(check_RXTX@i+1)^0,w,c
 18893  004752  E104               	bnz	u9270
 18894  004754  0E05               	movlw	5
 18895  004756  5C11               	subwf	check_RXTX@i^0,w,c
 18896  004758  A0D8               	btfss	status,0,c
 18897  00475A  D77B               	goto	l8211
 18898  00475C                     u9270:
 18899                           
 18900                           ;src/gpio.c: 117:  ext10MHzReference = 1;
 18901  00475C  0E01               	movlw	1
 18902  00475E  0100               	movlb	0	; () banked
 18903  004760  6FD7               	movwf	_ext10MHzReference& (0+255),b
 18904                           
 18905                           ; BSR set to: 0
 18906  004762  0012               	return		;funcret
 18907  004764                     __end_of_check_RXTX:
 18908                           	opt callstack 0
 18909                           
 18910 ;; *************** function _i2c_native_init *****************
 18911 ;; Defined at:
 18912 ;;		line 41 in file "src/driver/i2c_native.c"
 18913 ;; Parameters:    Size  Location     Type
 18914 ;;  ctx             2   52[COMRAM] PTR struct i2c_data_nati
 18915 ;;		 -> g_i2c_bus(8), 
 18916 ;;  baud            4   54[COMRAM] unsigned long 
 18917 ;; Auto vars:     Size  Location     Type
 18918 ;;		None
 18919 ;; Return value:  Size  Location     Type
 18920 ;;                  1    wreg      void 
 18921 ;; Registers used:
 18922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18923 ;; Tracked objects:
 18924 ;;		On entry : 0/0
 18925 ;;		On exit  : 0/0
 18926 ;;		Unchanged: 0/0
 18927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18928 ;;      Params:         6       0       0       0       0       0       0
 18929 ;;      Locals:         0       0       0       0       0       0       0
 18930 ;;      Temps:          0       0       0       0       0       0       0
 18931 ;;      Totals:         6       0       0       0       0       0       0
 18932 ;;Total ram usage:        6 bytes
 18933 ;; Hardware stack levels used:    1
 18934 ;; Hardware stack levels required when called:    4
 18935 ;; This function calls:
 18936 ;;		_i2c_reset
 18937 ;;		_memset
 18938 ;; This function is called by:
 18939 ;;		_main
 18940 ;; This function uses a non-reentrant model
 18941 ;;
 18942                           
 18943                           	psect	text69
 18944  00690A                     __ptext69:
 18945                           	opt callstack 0
 18946  00690A                     _i2c_native_init:
 18947                           	opt callstack 26
 18948                           
 18949                           ;src/driver/i2c_native.c: 41: void i2c_native_init(i2c_data_native *ctx, u32 baud);src/d
      +                          river/i2c_native.c: 42: {;src/driver/i2c_native.c: 43:     memset(ctx, 0, sizeof(*ctx));
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;incstack = 0
 18953  00690A  C035  F00E         	movff	i2c_native_init@ctx,memset@dest
 18954  00690E  C036  F00F         	movff	i2c_native_init@ctx+1,memset@dest+1
 18955  006912  0E00               	movlw	0
 18956  006914  6E11               	movwf	(memset@c+1)^0,c
 18957  006916  0E00               	movlw	0
 18958  006918  6E10               	movwf	memset@c^0,c
 18959  00691A  0E00               	movlw	0
 18960  00691C  6E13               	movwf	(memset@n+1)^0,c
 18961  00691E  0E08               	movlw	8
 18962  006920  6E12               	movwf	memset@n^0,c
 18963  006922  ECF4  F024         	call	_memset	;wreg free
 18964                           
 18965                           ;src/driver/i2c_native.c: 44:     ctx->baud = baud;
 18966  006926  EE20 F004          	lfsr	2,4
 18967  00692A  5035               	movf	i2c_native_init@ctx^0,w,c
 18968  00692C  26D9               	addwf	fsr2l,f,c
 18969  00692E  5036               	movf	(i2c_native_init@ctx+1)^0,w,c
 18970  006930  22DA               	addwfc	fsr2h,f,c
 18971  006932  C037  FFDE         	movff	i2c_native_init@baud,postinc2
 18972  006936  C038  FFDE         	movff	i2c_native_init@baud+1,postinc2
 18973  00693A  C039  FFDE         	movff	i2c_native_init@baud+2,postinc2
 18974  00693E  C03A  FFDE         	movff	i2c_native_init@baud+3,postinc2
 18975                           
 18976                           ;src/driver/i2c_native.c: 47:  i2c_reset(ctx);
 18977  006942  C035  F027         	movff	i2c_native_init@ctx,i2c_reset@ctx
 18978  006946  C036  F028         	movff	i2c_native_init@ctx+1,i2c_reset@ctx+1
 18979  00694A  EC3B  F02D         	call	_i2c_reset	;wreg free
 18980                           
 18981                           ;src/driver/i2c_native.c: 50:  ctx->ops.transfer = i2c_transfer_native;
 18982  00694E  C035  FFD9         	movff	i2c_native_init@ctx,fsr2l
 18983  006952  C036  FFDA         	movff	i2c_native_init@ctx+1,fsr2h
 18984  006956  0E54               	movlw	low _i2c_transfer_native
 18985  006958  6EDE               	movwf	postinc2,c
 18986  00695A  0E38               	movlw	high _i2c_transfer_native
 18987  00695C  6EDD               	movwf	postdec2,c
 18988  00695E  0012               	return		;funcret
 18989  006960                     __end_of_i2c_native_init:
 18990                           	opt callstack 0
 18991                           
 18992 ;; *************** function _check_si5328_status *****************
 18993 ;; Defined at:
 18994 ;;		line 514 in file "src/driver/si5328.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;  i2c             2   36[BANK0 ] PTR struct i2c_dev__
 18997 ;;		 -> g_i2c_bus(8), 
 18998 ;;  addr            1   38[BANK0 ] unsigned char 
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;  res             1   44[BANK0 ] unsigned char 
 19001 ;;  lock            1   43[BANK0 ] unsigned char 
 19002 ;;  ret             1   42[BANK0 ] unsigned char 
 19003 ;; Return value:  Size  Location     Type
 19004 ;;                  1    wreg      unsigned char 
 19005 ;; Registers used:
 19006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19007 ;; Tracked objects:
 19008 ;;		On entry : 3F/0
 19009 ;;		On exit  : 3F/0
 19010 ;;		Unchanged: 0/0
 19011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19012 ;;      Params:         0       3       0       0       0       0       0
 19013 ;;      Locals:         0       3       0       0       0       0       0
 19014 ;;      Temps:          0       3       0       0       0       0       0
 19015 ;;      Totals:         0       9       0       0       0       0       0
 19016 ;;Total ram usage:        9 bytes
 19017 ;; Hardware stack levels used:    1
 19018 ;; Hardware stack levels required when called:   10
 19019 ;; This function calls:
 19020 ;;		_printf
 19021 ;;		_read_reg
 19022 ;; This function is called by:
 19023 ;;		_main
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           	psect	text70
 19028  004E68                     __ptext70:
 19029                           	opt callstack 0
 19030  004E68                     _check_si5328_status:
 19031                           	opt callstack 20
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;src/driver/si5328.c: 514: u8 check_si5328_status(i2c_dev i2c, u8 addr);src/driver/si532
      +                          8.c: 515: {;src/driver/si5328.c: 516:  u8 res, ret = 0;
 19035                           
 19036                           ;incstack = 0
 19037  004E68  0E00               	movlw	0
 19038  004E6A  6FAA               	movwf	check_si5328_status@ret& (0+255),b
 19039                           
 19040                           ; BSR set to: 0
 19041                           ;src/driver/si5328.c: 517:  static u8 lastlock = 0xff;;src/driver/si5328.c: 519:  u8 loc
      +                          k = ((*((PIN_SI5328_LOL)->pPORT) & (PIN_SI5328_LOL)->mask) != 0);
 19042  004E6C  0EB3               	movlw	low (_PIN_SI5328_LOL_DEF+4)
 19043  004E6E  6EF6               	movwf	tblptrl,c
 19044  004E70  0E7B               	movlw	high (_PIN_SI5328_LOL_DEF+4)
 19045  004E72  6EF7               	movwf	tblptrh,c
 19046  004E74                     	if	0	;tblptru may be non-zero
 19047  004E74                     	endif
 19048  004E74                     	if	0	;tblptru may be non-zero
 19049  004E74                     	endif
 19050  004E74  0008               	tblrd		*
 19051  004E76  CFF5 F0A7          	movff	tablat,??_check_si5328_status
 19052  004E7A  0EAF               	movlw	low _PIN_SI5328_LOL_DEF
 19053  004E7C  6EF6               	movwf	tblptrl,c
 19054  004E7E                     	if	1	;There is more than 1 active tblptr byte
 19055  004E7E  0E7B               	movlw	high _PIN_SI5328_LOL_DEF
 19056  004E80  6EF7               	movwf	tblptrh,c
 19057  004E82                     	endif
 19058  004E82                     	if	0	;There are less than 3 active tblptr bytes
 19059  004E82                     	endif
 19060  004E82  0009               	tblrd		*+
 19061  004E84  CFF5 F0A8          	movff	tablat,??_check_si5328_status+1
 19062  004E88  0009               	tblrd		*+
 19063  004E8A  CFF5 F0A9          	movff	tablat,??_check_si5328_status+2
 19064  004E8E  C0A8  FFD9         	movff	??_check_si5328_status+1,fsr2l
 19065  004E92  C0A9  FFDA         	movff	??_check_si5328_status+2,fsr2h
 19066  004E96  50DF               	movf	indf2,w,c
 19067  004E98  15A7               	andwf	??_check_si5328_status& (0+255),w,b
 19068  004E9A  0900               	iorlw	0
 19069  004E9C  B4D8               	btfsc	status,2,c
 19070  004E9E  D002               	goto	u14210
 19071  004EA0  0E01               	movlw	1
 19072  004EA2  D001               	goto	u14220
 19073  004EA4                     u14210:
 19074  004EA4  0E00               	movlw	0
 19075  004EA6                     u14220:
 19076  004EA6  6FAB               	movwf	check_si5328_status@lock& (0+255),b
 19077                           
 19078                           ; BSR set to: 0
 19079                           ;src/driver/si5328.c: 520:  if(lock != lastlock)
 19080  004EA8  51E6               	movf	check_si5328_status@lastlock& (0+255),w,b
 19081  004EAA  19AB               	xorwf	check_si5328_status@lock& (0+255),w,b
 19082  004EAC  B4D8               	btfsc	status,2,c
 19083  004EAE  D049               	goto	l11403
 19084                           
 19085                           ; BSR set to: 0
 19086                           ;src/driver/si5328.c: 521:  {;src/driver/si5328.c: 522:   lastlock = lock;
 19087  004EB0  C0AB  F0E6         	movff	check_si5328_status@lock,check_si5328_status@lastlock
 19088                           
 19089                           ; BSR set to: 0
 19090                           ;src/driver/si5328.c: 523:   if(lock == 1)
 19091  004EB4  05AB               	decf	check_si5328_status@lock& (0+255),w,b
 19092  004EB6  A4D8               	btfss	status,2,c
 19093  004EB8  D021               	goto	l11395
 19094                           
 19095                           ; BSR set to: 0
 19096                           ;src/driver/si5328.c: 524:   {;src/driver/si5328.c: 525:    printf("si:unlocked\n");
 19097  004EBA  0E0B               	movlw	low STR_33
 19098  004EBC  6F97               	movwf	printf@fmt& (0+255),b
 19099  004EBE  0E7F               	movlw	high STR_33
 19100  004EC0  6F98               	movwf	(printf@fmt+1)& (0+255),b
 19101  004EC2  EC30  F03A         	call	_printf	;wreg free
 19102                           
 19103                           ; BSR set to: 2
 19104                           ;src/driver/si5328.c: 526:    si5328locked = 0;
 19105  004EC6  0E00               	movlw	0
 19106  004EC8  0100               	movlb	0	; () banked
 19107  004ECA  6FD5               	movwf	_si5328locked& (0+255),b
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;src/driver/si5328.c: 527:    *((PIN_LED_SI_LOCK)->pPORT) |= (PIN_LED_SI_LOCK)->mask;
 19111  004ECC  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 19112  004ECE  6EF6               	movwf	tblptrl,c
 19113  004ED0  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 19114  004ED2  6EF7               	movwf	tblptrh,c
 19115  004ED4                     	if	0	;tblptru may be non-zero
 19116  004ED4                     	endif
 19117  004ED4                     	if	0	;tblptru may be non-zero
 19118  004ED4                     	endif
 19119  004ED4  0008               	tblrd		*
 19120  004ED6  CFF5 F0A7          	movff	tablat,??_check_si5328_status
 19121  004EDA  0EA5               	movlw	low _PIN_LED_SI_LOCK_DEF
 19122  004EDC  6EF6               	movwf	tblptrl,c
 19123  004EDE                     	if	1	;There is more than 1 active tblptr byte
 19124  004EDE  0E7B               	movlw	high _PIN_LED_SI_LOCK_DEF
 19125  004EE0  6EF7               	movwf	tblptrh,c
 19126  004EE2                     	endif
 19127  004EE2                     	if	0	;There are less than 3 active tblptr bytes
 19128  004EE2                     	endif
 19129  004EE2  0009               	tblrd		*+
 19130  004EE4  CFF5 F0A8          	movff	tablat,??_check_si5328_status+1
 19131  004EE8  0009               	tblrd		*+
 19132  004EEA  CFF5 F0A9          	movff	tablat,??_check_si5328_status+2
 19133  004EEE  C0A8  FFD9         	movff	??_check_si5328_status+1,fsr2l
 19134  004EF2  C0A9  FFDA         	movff	??_check_si5328_status+2,fsr2h
 19135  004EF6  51A7               	movf	??_check_si5328_status& (0+255),w,b
 19136  004EF8  12DF               	iorwf	indf2,f,c
 19137                           
 19138                           ;src/driver/si5328.c: 528:   }
 19139  004EFA  D023               	goto	l11403
 19140  004EFC                     l11395:
 19141                           
 19142                           ; BSR set to: 0
 19143                           ;src/driver/si5328.c: 530:   {;src/driver/si5328.c: 531:    printf("si:locked\n");
 19144  004EFC  0E54               	movlw	low STR_34
 19145  004EFE  6F97               	movwf	printf@fmt& (0+255),b
 19146  004F00  0E7F               	movlw	high STR_34
 19147  004F02  6F98               	movwf	(printf@fmt+1)& (0+255),b
 19148  004F04  EC30  F03A         	call	_printf	;wreg free
 19149                           
 19150                           ; BSR set to: 2
 19151                           ;src/driver/si5328.c: 532:    si5328locked = 1;
 19152  004F08  0E01               	movlw	1
 19153  004F0A  0100               	movlb	0	; () banked
 19154  004F0C  6FD5               	movwf	_si5328locked& (0+255),b
 19155                           
 19156                           ; BSR set to: 0
 19157                           ;src/driver/si5328.c: 533:    *((PIN_LED_SI_LOCK)->pPORT) &= ~(PIN_LED_SI_LOCK)->mask;
 19158  004F0E  0EA9               	movlw	low (_PIN_LED_SI_LOCK_DEF+4)
 19159  004F10  6EF6               	movwf	tblptrl,c
 19160  004F12  0E7B               	movlw	high (_PIN_LED_SI_LOCK_DEF+4)
 19161  004F14  6EF7               	movwf	tblptrh,c
 19162  004F16                     	if	0	;tblptru may be non-zero
 19163  004F16                     	endif
 19164  004F16                     	if	0	;tblptru may be non-zero
 19165  004F16                     	endif
 19166  004F16  0008               	tblrd		*
 19167  004F18  50F5               	movf	tablat,w,c
 19168  004F1A  0AFF               	xorlw	255
 19169  004F1C  6FA7               	movwf	??_check_si5328_status& (0+255),b
 19170  004F1E  0EA5               	movlw	low _PIN_LED_SI_LOCK_DEF
 19171  004F20  6EF6               	movwf	tblptrl,c
 19172  004F22                     	if	1	;There is more than 1 active tblptr byte
 19173  004F22  0E7B               	movlw	high _PIN_LED_SI_LOCK_DEF
 19174  004F24  6EF7               	movwf	tblptrh,c
 19175  004F26                     	endif
 19176  004F26                     	if	0	;There are less than 3 active tblptr bytes
 19177  004F26                     	endif
 19178  004F26  0009               	tblrd		*+
 19179  004F28  CFF5 F0A8          	movff	tablat,??_check_si5328_status+1
 19180  004F2C  0009               	tblrd		*+
 19181  004F2E  CFF5 F0A9          	movff	tablat,??_check_si5328_status+2
 19182  004F32  C0A8  FFD9         	movff	??_check_si5328_status+1,fsr2l
 19183  004F36  C0A9  FFDA         	movff	??_check_si5328_status+2,fsr2h
 19184  004F3A  51A7               	movf	??_check_si5328_status& (0+255),w,b
 19185  004F3C  16DF               	andwf	indf2,f,c
 19186                           
 19187                           ; BSR set to: 0
 19188                           ;src/driver/si5328.c: 534:    ret = 1;
 19189  004F3E  0E01               	movlw	1
 19190  004F40  6FAA               	movwf	check_si5328_status@ret& (0+255),b
 19191  004F42                     l11403:
 19192                           
 19193                           ; BSR set to: 0
 19194                           ;src/driver/si5328.c: 556:  static u8 lastinput = 0xff;;src/driver/si5328.c: 557:  res =
      +                           read_reg(i2c, addr, 128);
 19195  004F42  C0A4  F05A         	movff	check_si5328_status@i2c,read_reg@i2c
 19196  004F46  C0A5  F05B         	movff	check_si5328_status@i2c+1,read_reg@i2c+1
 19197  004F4A  C0A6  F05C         	movff	check_si5328_status@addr,read_reg@addr
 19198  004F4E  0E80               	movlw	128
 19199  004F50  6E5D               	movwf	read_reg@reg^0,c
 19200  004F52  EC3F  F03A         	call	_read_reg	;wreg free
 19201  004F56  0100               	movlb	0	; () banked
 19202  004F58  6FAC               	movwf	check_si5328_status@res& (0+255),b
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;src/driver/si5328.c: 558:  if(res != lastinput)
 19206  004F5A  51E5               	movf	check_si5328_status@lastinput& (0+255),w,b
 19207  004F5C  19AC               	xorwf	check_si5328_status@res& (0+255),w,b
 19208  004F5E  B4D8               	btfsc	status,2,c
 19209  004F60  D00A               	goto	l518
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;src/driver/si5328.c: 559:  {;src/driver/si5328.c: 561:   if(res & 1)
 19213  004F62  A1AC               	btfss	check_si5328_status@res& (0+255),0,b
 19214  004F64  D002               	goto	l11411
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;src/driver/si5328.c: 562:   {;src/driver/si5328.c: 564:    GPS_fix = 1;
 19218  004F66  0E01               	movlw	1
 19219  004F68  6FD6               	movwf	_GPS_fix& (0+255),b
 19220  004F6A                     l11411:
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;src/driver/si5328.c: 566:   if(res & 2)
 19224  004F6A  A3AC               	btfss	check_si5328_status@res& (0+255),1,b
 19225  004F6C  D002               	goto	l11415
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;src/driver/si5328.c: 567:   {;src/driver/si5328.c: 569:    GPS_fix = 0;
 19229  004F6E  0E00               	movlw	0
 19230  004F70  6FD6               	movwf	_GPS_fix& (0+255),b
 19231  004F72                     l11415:
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;src/driver/si5328.c: 571:   lastinput = res;
 19235  004F72  C0AC  F0E5         	movff	check_si5328_status@res,check_si5328_status@lastinput
 19236  004F76                     l518:
 19237                           
 19238                           ; BSR set to: 0
 19239                           ;src/driver/si5328.c: 585:  return ret;
 19240  004F76  51AA               	movf	check_si5328_status@ret& (0+255),w,b
 19241                           
 19242                           ; BSR set to: 0
 19243  004F78  0012               	return		;funcret
 19244  004F7A                     __end_of_check_si5328_status:
 19245                           	opt callstack 0
 19246                           
 19247 ;; *************** function _read_reg *****************
 19248 ;; Defined at:
 19249 ;;		line 603 in file "src/driver/si5328.c"
 19250 ;; Parameters:    Size  Location     Type
 19251 ;;  i2c             2   89[COMRAM] PTR struct i2c_dev__
 19252 ;;		 -> g_i2c_bus(8), 
 19253 ;;  addr            1   91[COMRAM] unsigned char 
 19254 ;;  reg             1   92[COMRAM] unsigned char 
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;  res             2    0        int 
 19257 ;;  val             1   95[COMRAM] unsigned char 
 19258 ;; Return value:  Size  Location     Type
 19259 ;;                  1    wreg      unsigned char 
 19260 ;; Registers used:
 19261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19262 ;; Tracked objects:
 19263 ;;		On entry : 3F/0
 19264 ;;		On exit  : 0/0
 19265 ;;		Unchanged: 0/0
 19266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19267 ;;      Params:         4       0       0       0       0       0       0
 19268 ;;      Locals:         3       0       0       0       0       0       0
 19269 ;;      Temps:          0       0       0       0       0       0       0
 19270 ;;      Totals:         7       0       0       0       0       0       0
 19271 ;;Total ram usage:        7 bytes
 19272 ;; Hardware stack levels used:    1
 19273 ;; Hardware stack levels required when called:    8
 19274 ;; This function calls:
 19275 ;;		_smbus8_read_byte
 19276 ;; This function is called by:
 19277 ;;		_check_si5328_status
 19278 ;; This function uses a non-reentrant model
 19279 ;;
 19280                           
 19281                           	psect	text71
 19282  00747E                     __ptext71:
 19283                           	opt callstack 0
 19284  00747E                     _read_reg:
 19285                           	opt callstack 21
 19286                           
 19287                           ; BSR set to: 0
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;incstack = 0
 19291  00747E  C05A  F055         	movff	read_reg@i2c,smbus8_read_byte@dev
 19292  007482  C05B  F056         	movff	read_reg@i2c+1,smbus8_read_byte@dev+1
 19293  007486  C05C  F057         	movff	read_reg@addr,smbus8_read_byte@addr
 19294  00748A  C05D  F058         	movff	read_reg@reg,smbus8_read_byte@reg
 19295  00748E  0E60               	movlw	low read_reg@val
 19296  007490  6E59               	movwf	smbus8_read_byte@data^0,c
 19297  007492  EC7F  F035         	call	_smbus8_read_byte	;wreg free
 19298                           
 19299                           ;src/driver/si5328.c: 608:  return val;
 19300  007496  5060               	movf	read_reg@val^0,w,c
 19301  007498  0012               	return		;funcret
 19302  00749A                     __end_of_read_reg:
 19303                           	opt callstack 0
 19304                           
 19305 ;; *************** function _smbus8_read_byte *****************
 19306 ;; Defined at:
 19307 ;;		line 130 in file "src/driver/base/i2c.c"
 19308 ;; Parameters:    Size  Location     Type
 19309 ;;  dev             2   84[COMRAM] PTR struct i2c_dev__
 19310 ;;		 -> g_i2c_bus(8), 
 19311 ;;  addr            1   86[COMRAM] unsigned char 
 19312 ;;  reg             1   87[COMRAM] unsigned char 
 19313 ;;  data            1   88[COMRAM] PTR unsigned char 
 19314 ;;		 -> read_reg@val(1), LNB_error(1), lnb_do_configure@value(1), 
 19315 ;; Auto vars:     Size  Location     Type
 19316 ;;  msg            14    0[BANK0 ] struct i2c_msg[2]
 19317 ;; Return value:  Size  Location     Type
 19318 ;;                  2   84[COMRAM] int 
 19319 ;; Registers used:
 19320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19321 ;; Tracked objects:
 19322 ;;		On entry : 3F/0
 19323 ;;		On exit  : 0/0
 19324 ;;		Unchanged: 0/0
 19325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19326 ;;      Params:         5       0       0       0       0       0       0
 19327 ;;      Locals:         0      14       0       0       0       0       0
 19328 ;;      Temps:          0       0       0       0       0       0       0
 19329 ;;      Totals:         5      14       0       0       0       0       0
 19330 ;;Total ram usage:       19 bytes
 19331 ;; Hardware stack levels used:    1
 19332 ;; Hardware stack levels required when called:    7
 19333 ;; This function calls:
 19334 ;;		_i2c_transfer
 19335 ;; This function is called by:
 19336 ;;		_lnb_do_configure
 19337 ;;		_check_LNB_status
 19338 ;;		_read_reg
 19339 ;; This function uses a non-reentrant model
 19340 ;;
 19341                           
 19342                           	psect	text72
 19343  006AFE                     __ptext72:
 19344                           	opt callstack 0
 19345  006AFE                     _smbus8_read_byte:
 19346                           	opt callstack 21
 19347                           
 19348                           ; BSR set to: 0
 19349                           ;src/driver/base/i2c.c: 130: int smbus8_read_byte(i2c_dev dev, u8 addr, u8 reg, u8 *data
      +                          );src/driver/base/i2c.c: 131: {;src/driver/base/i2c.c: 132:  i2c_msg msg[2];;src/driver/
      +                          base/i2c.c: 134:  msg[0].addr = addr;
 19350                           
 19351                           ;incstack = 0
 19352  006AFE  C057  F080         	movff	smbus8_read_byte@addr,smbus8_read_byte@msg
 19353  006B02  6B81               	clrf	(smbus8_read_byte@msg+1)& (0+255),b
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;src/driver/base/i2c.c: 135:  msg[0].flags = (1<<1);
 19357  006B04  0E02               	movlw	2
 19358  006B06  6F82               	movwf	(smbus8_read_byte@msg+2)& (0+255),b
 19359                           
 19360                           ;src/driver/base/i2c.c: 136:  msg[0].len = 1;
 19361  006B08  0E00               	movlw	0
 19362  006B0A  6F84               	movwf	(smbus8_read_byte@msg+4)& (0+255),b
 19363  006B0C  0E01               	movlw	1
 19364  006B0E  6F83               	movwf	(smbus8_read_byte@msg+3)& (0+255),b
 19365                           
 19366                           ; BSR set to: 0
 19367                           ;src/driver/base/i2c.c: 137:  msg[0].data = &reg;
 19368  006B10  0E58               	movlw	low smbus8_read_byte@reg
 19369  006B12  6F85               	movwf	(smbus8_read_byte@msg+5)& (0+255),b
 19370  006B14  6B86               	clrf	(smbus8_read_byte@msg+6)& (0+255),b
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;src/driver/base/i2c.c: 139:  msg[1].addr = addr;
 19374  006B16  C057  F087         	movff	smbus8_read_byte@addr,smbus8_read_byte@msg+7
 19375  006B1A  6B88               	clrf	(smbus8_read_byte@msg+8)& (0+255),b
 19376                           
 19377                           ; BSR set to: 0
 19378                           ;src/driver/base/i2c.c: 140:  msg[1].flags = (1<<1) | (1<<2) | (1<<0);
 19379  006B1C  0E07               	movlw	7
 19380  006B1E  6F89               	movwf	(smbus8_read_byte@msg+9)& (0+255),b
 19381                           
 19382                           ; BSR set to: 0
 19383                           ;src/driver/base/i2c.c: 141:  msg[1].len = 1;
 19384  006B20  0E00               	movlw	0
 19385  006B22  6F8B               	movwf	(smbus8_read_byte@msg+11)& (0+255),b
 19386  006B24  0E01               	movlw	1
 19387  006B26  6F8A               	movwf	(smbus8_read_byte@msg+10)& (0+255),b
 19388                           
 19389                           ; BSR set to: 0
 19390                           ;src/driver/base/i2c.c: 142:  msg[1].data = data;
 19391  006B28  C059  F08C         	movff	smbus8_read_byte@data,smbus8_read_byte@msg+12
 19392  006B2C  6B8D               	clrf	(smbus8_read_byte@msg+13)& (0+255),b
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;src/driver/base/i2c.c: 144:  return i2c_transfer(dev, msg, 2);
 19396  006B2E  C055  F050         	movff	smbus8_read_byte@dev,i2c_transfer@dev
 19397  006B32  C056  F051         	movff	smbus8_read_byte@dev+1,i2c_transfer@dev+1
 19398  006B36  0E80               	movlw	low smbus8_read_byte@msg
 19399  006B38  6E52               	movwf	i2c_transfer@msg^0,c
 19400  006B3A  0E00               	movlw	0
 19401  006B3C  6E54               	movwf	(i2c_transfer@num+1)^0,c
 19402  006B3E  0E02               	movlw	2
 19403  006B40  6E53               	movwf	i2c_transfer@num^0,c
 19404  006B42  ECF9  F035         	call	_i2c_transfer	;wreg free
 19405  006B46  C050  F055         	movff	?_i2c_transfer,?_smbus8_read_byte
 19406  006B4A  C051  F056         	movff	?_i2c_transfer+1,?_smbus8_read_byte+1
 19407  006B4E  0012               	return		;funcret
 19408  006B50                     __end_of_smbus8_read_byte:
 19409                           	opt callstack 0
 19410                           
 19411 ;; *************** function _i2c_transfer *****************
 19412 ;; Defined at:
 19413 ;;		line 29 in file "src/driver/base/i2c.c"
 19414 ;; Parameters:    Size  Location     Type
 19415 ;;  dev             2   79[COMRAM] PTR struct i2c_dev__
 19416 ;;		 -> g_i2c_bus(8), NULL(0), 
 19417 ;;  msg             1   81[COMRAM] PTR struct i2c_msg
 19418 ;;		 -> smbus8_read_byte@msg(14), smbus8_write_data@msg(14), smbus8_write_byte@msg(7), i2c_probe_addr@msg(7), 
 19419 ;;  num             2   82[COMRAM] int 
 19420 ;; Auto vars:     Size  Location     Type
 19421 ;;		None
 19422 ;; Return value:  Size  Location     Type
 19423 ;;                  2   79[COMRAM] int 
 19424 ;; Registers used:
 19425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19426 ;; Tracked objects:
 19427 ;;		On entry : 0/2
 19428 ;;		On exit  : 0/0
 19429 ;;		Unchanged: 0/0
 19430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19431 ;;      Params:         5       0       0       0       0       0       0
 19432 ;;      Locals:         0       0       0       0       0       0       0
 19433 ;;      Temps:          0       0       0       0       0       0       0
 19434 ;;      Totals:         5       0       0       0       0       0       0
 19435 ;;Total ram usage:        5 bytes
 19436 ;; Hardware stack levels used:    1
 19437 ;; Hardware stack levels required when called:    6
 19438 ;; This function calls:
 19439 ;;		_i2c_transfer_native
 19440 ;; This function is called by:
 19441 ;;		_i2c_probe_addr
 19442 ;;		_smbus8_write_byte
 19443 ;;		_smbus8_write_data
 19444 ;;		_smbus8_read_byte
 19445 ;; This function uses a non-reentrant model
 19446 ;;
 19447                           
 19448                           	psect	text73
 19449  006BF2                     __ptext73:
 19450                           	opt callstack 0
 19451  006BF2                     _i2c_transfer:
 19452                           	opt callstack 21
 19453                           
 19454                           ;src/driver/base/i2c.c: 29: int i2c_transfer(i2c_dev dev, i2c_msg *msg, int num);src/dri
      +                          ver/base/i2c.c: 30: {;src/driver/base/i2c.c: 31:  if(!dev) return -3;
 19455                           
 19456                           ;incstack = 0
 19457  006BF2  5050               	movf	i2c_transfer@dev^0,w,c
 19458  006BF4  1051               	iorwf	(i2c_transfer@dev+1)^0,w,c
 19459  006BF6  A4D8               	btfss	status,2,c
 19460  006BF8  D005               	goto	l9423
 19461  006BFA  0EFF               	movlw	255
 19462  006BFC  6E51               	movwf	(?_i2c_transfer+1)^0,c
 19463  006BFE  0EFD               	movlw	253
 19464  006C00  6E50               	movwf	?_i2c_transfer^0,c
 19465  006C02  0012               	return	
 19466  006C04                     l9423:
 19467                           
 19468                           ;src/driver/base/i2c.c: 32:  return ((i2c_driver_ops*)dev)->transfer(dev, msg, num);
 19469  006C04  C050  F037         	movff	i2c_transfer@dev,i2c_transfer_native@dev
 19470  006C08  C051  F038         	movff	i2c_transfer@dev+1,i2c_transfer_native@dev+1
 19471  006C0C  C052  F039         	movff	i2c_transfer@msg,i2c_transfer_native@msg
 19472  006C10  C053  F03A         	movff	i2c_transfer@num,i2c_transfer_native@num
 19473  006C14  C054  F03B         	movff	i2c_transfer@num+1,i2c_transfer_native@num+1
 19474  006C18  C050  FFD9         	movff	i2c_transfer@dev,fsr2l
 19475  006C1C  C051  FFDA         	movff	i2c_transfer@dev+1,fsr2h
 19476  006C20  D801               	call	u10928
 19477  006C22  D00A               	goto	u10929
 19478  006C24                     u10928:
 19479  006C24  0005               	push	
 19480  006C26  6EFA               	movwf	pclath,c
 19481  006C28  50DE               	movf	postinc2,w,c
 19482  006C2A  6EFD               	movwf	tosl,c
 19483  006C2C  50DE               	movf	postinc2,w,c
 19484  006C2E  6EFE               	movwf	tosh,c
 19485  006C30  50F8               	movf	tblptru,w,c
 19486  006C32  6EFF               	movwf	tosu,c
 19487  006C34  50FA               	movf	pclath,w,c
 19488  006C36  0012               	return		;indir
 19489  006C38                     u10929:
 19490  006C38  C037  F050         	movff	?_i2c_transfer_native,?_i2c_transfer
 19491  006C3C  C038  F051         	movff	?_i2c_transfer_native+1,?_i2c_transfer+1
 19492  006C40  0012               	return		;funcret
 19493  006C42                     __end_of_i2c_transfer:
 19494                           	opt callstack 0
 19495                           
 19496 ;; *************** function _i2c_transfer_native *****************
 19497 ;; Defined at:
 19498 ;;		line 217 in file "src/driver/i2c_native.c"
 19499 ;; Parameters:    Size  Location     Type
 19500 ;;  dev             2   54[COMRAM] PTR struct i2c_dev__
 19501 ;;		 -> g_i2c_bus(8), NULL(0), 
 19502 ;;  msg             1   56[COMRAM] PTR struct i2c_msg
 19503 ;;		 -> smbus8_read_byte@msg(14), smbus8_write_data@msg(14), smbus8_write_byte@msg(7), i2c_probe_addr@msg(7), 
 19504 ;;  num             2   57[COMRAM] int 
 19505 ;; Auto vars:     Size  Location     Type
 19506 ;;  res             2   76[COMRAM] int 
 19507 ;;  left            2   74[COMRAM] unsigned short 
 19508 ;;  ctx             2   72[COMRAM] PTR struct i2c_data_nati
 19509 ;;		 -> g_i2c_bus(8), NULL(0), 
 19510 ;;  bdata           2   70[COMRAM] PTR unsigned char 
 19511 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), ssd1306_setpos@data(3), ssd1306_init_commands(27), 
 19512 ;;		 -> read_reg@val(1), LNB_error(1), lnb_do_configure@value(1), smbus8_read_byte@reg(1), 
 19513 ;;		 -> smbus8_write_data@reg(1), smbus8_write_byte@tmp(2), NULL(0), 
 19514 ;;  i               2   68[COMRAM] int 
 19515 ;;  wantack         2   66[COMRAM] int 
 19516 ;;  read            2   64[COMRAM] int 
 19517 ;;  inmsg           2   62[COMRAM] int 
 19518 ;;  ack             2   60[COMRAM] int 
 19519 ;;  pmsg            1   78[COMRAM] PTR struct i2c_msg
 19520 ;;		 -> smbus8_read_byte@msg(14), smbus8_write_data@msg(14), smbus8_write_byte@msg(7), i2c_probe_addr@msg(7), 
 19521 ;; Return value:  Size  Location     Type
 19522 ;;                  2   54[COMRAM] int 
 19523 ;; Registers used:
 19524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19525 ;; Tracked objects:
 19526 ;;		On entry : 0/2
 19527 ;;		On exit  : 0/0
 19528 ;;		Unchanged: 0/0
 19529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19530 ;;      Params:         5       0       0       0       0       0       0
 19531 ;;      Locals:        19       0       0       0       0       0       0
 19532 ;;      Temps:          1       0       0       0       0       0       0
 19533 ;;      Totals:        25       0       0       0       0       0       0
 19534 ;;Total ram usage:       25 bytes
 19535 ;; Hardware stack levels used:    1
 19536 ;; Hardware stack levels required when called:    5
 19537 ;; This function calls:
 19538 ;;		_i2c_read
 19539 ;;		_i2c_reset
 19540 ;;		_i2c_start
 19541 ;;		_i2c_stop
 19542 ;;		_i2c_write
 19543 ;; This function is called by:
 19544 ;;		_i2c_native_init
 19545 ;;		_i2c_transfer
 19546 ;; This function uses a non-reentrant model
 19547 ;;
 19548                           
 19549                           	psect	text74
 19550  003854                     __ptext74:
 19551                           	opt callstack 0
 19552  003854                     _i2c_transfer_native:
 19553                           	opt callstack 21
 19554                           
 19555                           ;src/driver/i2c_native.c: 217: static int i2c_transfer_native(i2c_dev dev, i2c_msg *msg,
      +                           int num);src/driver/i2c_native.c: 218: {;src/driver/i2c_native.c: 219:  i2c_data_native
      +                           *ctx = (i2c_data_native*)dev;
 19556                           
 19557                           ;incstack = 0
 19558  003854  C037  F049         	movff	i2c_transfer_native@dev,i2c_transfer_native@ctx
 19559  003858  C038  F04A         	movff	i2c_transfer_native@dev+1,i2c_transfer_native@ctx+1
 19560                           
 19561                           ;src/driver/i2c_native.c: 220:  struct i2c_msg *pmsg;;src/driver/i2c_native.c: 221:  BOO
      +                          L read, ack, wantack, inmsg;;src/driver/i2c_native.c: 222:  int i, res;;src/driver/i2c_n
      +                          ative.c: 223:  u16 left;;src/driver/i2c_native.c: 224:  u8* bdata;;src/driver/i2c_native
      +                          .c: 226:  inmsg = 0;
 19562  00385C  0E00               	movlw	0
 19563  00385E  6E40               	movwf	(i2c_transfer_native@inmsg+1)^0,c
 19564  003860  0E00               	movlw	0
 19565  003862  6E3F               	movwf	i2c_transfer_native@inmsg^0,c
 19566                           
 19567                           ;src/driver/i2c_native.c: 227:  for(i=0;i<num;i++) {
 19568  003864  0E00               	movlw	0
 19569  003866  6E46               	movwf	(i2c_transfer_native@i+1)^0,c
 19570  003868  0E00               	movlw	0
 19571  00386A  6E45               	movwf	i2c_transfer_native@i^0,c
 19572  00386C  D0B9               	goto	l9393
 19573  00386E                     l9339:
 19574                           
 19575                           ;src/driver/i2c_native.c: 229:   pmsg = &msg[i];
 19576  00386E  5045               	movf	i2c_transfer_native@i^0,w,c
 19577  003870  0D07               	mullw	7
 19578  003872  5039               	movf	i2c_transfer_native@msg^0,w,c
 19579  003874  24F3               	addwf	243,w,c
 19580  003876  6E4F               	movwf	i2c_transfer_native@pmsg^0,c
 19581                           
 19582                           ;src/driver/i2c_native.c: 230:   bdata = (u8*)pmsg->data;
 19583  003878  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19584  00387A  6ED9               	movwf	fsr2l,c
 19585  00387C  6ADA               	clrf	fsr2h,c
 19586  00387E  0E05               	movlw	5
 19587  003880  26D9               	addwf	fsr2l,f,c
 19588  003882  CFDE F047          	movff	postinc2,i2c_transfer_native@bdata
 19589  003886  CFDD F048          	movff	postdec2,i2c_transfer_native@bdata+1
 19590                           
 19591                           ;src/driver/i2c_native.c: 231:   read = ((pmsg->flags & (1<<0)) != 0);
 19592  00388A  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19593  00388C  6ED9               	movwf	fsr2l,c
 19594  00388E  6ADA               	clrf	fsr2h,c
 19595  003890  0E02               	movlw	2
 19596  003892  26D9               	addwf	fsr2l,f,c
 19597  003894  A0DF               	btfss	indf2,0,c
 19598  003896  D002               	goto	u10730
 19599  003898  0E01               	movlw	1
 19600  00389A  D001               	goto	u10740
 19601  00389C                     u10730:
 19602  00389C  0E00               	movlw	0
 19603  00389E                     u10740:
 19604  00389E  6E41               	movwf	i2c_transfer_native@read^0,c
 19605  0038A0  6A42               	clrf	(i2c_transfer_native@read+1)^0,c
 19606                           
 19607                           ;src/driver/i2c_native.c: 232:   wantack = ((pmsg->flags & (1<<3)) == 0);
 19608  0038A2  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19609  0038A4  6ED9               	movwf	fsr2l,c
 19610  0038A6  6ADA               	clrf	fsr2h,c
 19611  0038A8  0E02               	movlw	2
 19612  0038AA  26D9               	addwf	fsr2l,f,c
 19613  0038AC  B6DF               	btfsc	indf2,3,c
 19614  0038AE  D002               	goto	u10750
 19615  0038B0  0E01               	movlw	1
 19616  0038B2  D001               	goto	u10760
 19617  0038B4                     u10750:
 19618  0038B4  0E00               	movlw	0
 19619  0038B6                     u10760:
 19620  0038B6  6E43               	movwf	i2c_transfer_native@wantack^0,c
 19621  0038B8  6A44               	clrf	(i2c_transfer_native@wantack+1)^0,c
 19622                           
 19623                           ;src/driver/i2c_native.c: 235:   if(pmsg->flags&(1<<1)) {
 19624  0038BA  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19625  0038BC  6ED9               	movwf	fsr2l,c
 19626  0038BE  6ADA               	clrf	fsr2h,c
 19627  0038C0  0E02               	movlw	2
 19628  0038C2  26D9               	addwf	fsr2l,f,c
 19629  0038C4  A2DF               	btfss	indf2,1,c
 19630  0038C6  D01E               	goto	l9357
 19631                           
 19632                           ;src/driver/i2c_native.c: 236:    res = i2c_start(pmsg->addr, read, inmsg, wantack);
 19633  0038C8  C041  F012         	movff	i2c_transfer_native@read,i2c_start@read
 19634  0038CC  C042  F013         	movff	i2c_transfer_native@read+1,i2c_start@read+1
 19635  0038D0  C03F  F014         	movff	i2c_transfer_native@inmsg,i2c_start@rep
 19636  0038D4  C040  F015         	movff	i2c_transfer_native@inmsg+1,i2c_start@rep+1
 19637  0038D8  C043  F016         	movff	i2c_transfer_native@wantack,i2c_start@wantack
 19638  0038DC  C044  F017         	movff	i2c_transfer_native@wantack+1,i2c_start@wantack+1
 19639  0038E0  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19640  0038E2  6ED9               	movwf	fsr2l,c
 19641  0038E4  6ADA               	clrf	fsr2h,c
 19642  0038E6  50DF               	movf	indf2,w,c
 19643  0038E8  EC7B  F030         	call	_i2c_start
 19644  0038EC  C012  F04D         	movff	?_i2c_start,i2c_transfer_native@res
 19645  0038F0  C013  F04E         	movff	?_i2c_start+1,i2c_transfer_native@res+1
 19646                           
 19647                           ;src/driver/i2c_native.c: 237:    if(res) goto error;
 19648  0038F4  504D               	movf	i2c_transfer_native@res^0,w,c
 19649  0038F6  104E               	iorwf	(i2c_transfer_native@res+1)^0,w,c
 19650  0038F8  A4D8               	btfss	status,2,c
 19651  0038FA  D081               	goto	l9399
 19652                           
 19653                           ;src/driver/i2c_native.c: 238:    inmsg = 1;
 19654  0038FC  0E00               	movlw	0
 19655  0038FE  6E40               	movwf	(i2c_transfer_native@inmsg+1)^0,c
 19656  003900  0E01               	movlw	1
 19657  003902  6E3F               	movwf	i2c_transfer_native@inmsg^0,c
 19658  003904                     l9357:
 19659                           
 19660                           ;src/driver/i2c_native.c: 241:   if(read) {
 19661  003904  5041               	movf	i2c_transfer_native@read^0,w,c
 19662  003906  1042               	iorwf	(i2c_transfer_native@read+1)^0,w,c
 19663  003908  B4D8               	btfsc	status,2,c
 19664  00390A  D030               	goto	l9373
 19665                           
 19666                           ;src/driver/i2c_native.c: 243:    left = pmsg->len;
 19667  00390C  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19668  00390E  6ED9               	movwf	fsr2l,c
 19669  003910  6ADA               	clrf	fsr2h,c
 19670  003912  0E03               	movlw	3
 19671  003914  26D9               	addwf	fsr2l,f,c
 19672  003916  CFDE F04B          	movff	postinc2,i2c_transfer_native@left
 19673  00391A  CFDD F04C          	movff	postdec2,i2c_transfer_native@left+1
 19674                           
 19675                           ;src/driver/i2c_native.c: 244:    while(left--) {
 19676  00391E  D01D               	goto	l9371
 19677  003920                     l9361:
 19678                           
 19679                           ;src/driver/i2c_native.c: 245:     ack = (left!=0);
 19680  003920  504B               	movf	i2c_transfer_native@left^0,w,c
 19681  003922  104C               	iorwf	(i2c_transfer_native@left+1)^0,w,c
 19682  003924  B4D8               	btfsc	status,2,c
 19683  003926  D002               	goto	u10800
 19684  003928  0E01               	movlw	1
 19685  00392A  D001               	goto	u10810
 19686  00392C                     u10800:
 19687  00392C  0E00               	movlw	0
 19688  00392E                     u10810:
 19689  00392E  6E3D               	movwf	i2c_transfer_native@ack^0,c
 19690  003930  6A3E               	clrf	(i2c_transfer_native@ack+1)^0,c
 19691                           
 19692                           ;src/driver/i2c_native.c: 246:     res = i2c_read(bdata++, ack);
 19693  003932  C047  F012         	movff	i2c_transfer_native@bdata,i2c_read@data
 19694  003936  C048  F013         	movff	i2c_transfer_native@bdata+1,i2c_read@data+1
 19695  00393A  C03D  F014         	movff	i2c_transfer_native@ack,i2c_read@ack
 19696  00393E  C03E  F015         	movff	i2c_transfer_native@ack+1,i2c_read@ack+1
 19697  003942  ECA7  F031         	call	_i2c_read	;wreg free
 19698  003946  C012  F04D         	movff	?_i2c_read,i2c_transfer_native@res
 19699  00394A  C013  F04E         	movff	?_i2c_read+1,i2c_transfer_native@res+1
 19700  00394E  4A47               	infsnz	i2c_transfer_native@bdata^0,f,c
 19701  003950  2A48               	incf	(i2c_transfer_native@bdata+1)^0,f,c
 19702                           
 19703                           ;src/driver/i2c_native.c: 247:     if(res) goto error;
 19704  003952  504D               	movf	i2c_transfer_native@res^0,w,c
 19705  003954  104E               	iorwf	(i2c_transfer_native@res+1)^0,w,c
 19706  003956  A4D8               	btfss	status,2,c
 19707  003958  D052               	goto	l9399
 19708  00395A                     l9371:
 19709                           
 19710                           ;src/driver/i2c_native.c: 244:    while(left--) {
 19711  00395A  064B               	decf	i2c_transfer_native@left^0,f,c
 19712  00395C  A0D8               	btfss	status,0,c
 19713  00395E  064C               	decf	(i2c_transfer_native@left+1)^0,f,c
 19714  003960  284B               	incf	i2c_transfer_native@left^0,w,c
 19715  003962  E1DE               	bnz	l9361
 19716  003964  284C               	incf	(i2c_transfer_native@left+1)^0,w,c
 19717  003966  B4D8               	btfsc	status,2,c
 19718  003968  D028               	goto	u10850
 19719  00396A  D7DA               	goto	l9361
 19720  00396C                     l9373:
 19721                           
 19722                           ;src/driver/i2c_native.c: 251:    left = pmsg->len;
 19723  00396C  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19724  00396E  6ED9               	movwf	fsr2l,c
 19725  003970  6ADA               	clrf	fsr2h,c
 19726  003972  0E03               	movlw	3
 19727  003974  26D9               	addwf	fsr2l,f,c
 19728  003976  CFDE F04B          	movff	postinc2,i2c_transfer_native@left
 19729  00397A  CFDD F04C          	movff	postdec2,i2c_transfer_native@left+1
 19730                           
 19731                           ;src/driver/i2c_native.c: 252:    while(left--) {
 19732  00397E  D015               	goto	l9383
 19733  003980                     l9375:
 19734                           
 19735                           ;src/driver/i2c_native.c: 253:     res = i2c_write(*bdata++, wantack);
 19736  003980  C043  F012         	movff	i2c_transfer_native@wantack,i2c_write@wantack
 19737  003984  C044  F013         	movff	i2c_transfer_native@wantack+1,i2c_write@wantack+1
 19738  003988  C047  FFD9         	movff	i2c_transfer_native@bdata,fsr2l
 19739  00398C  C048  FFDA         	movff	i2c_transfer_native@bdata+1,fsr2h
 19740  003990  50DF               	movf	indf2,w,c
 19741  003992  ECDA  F034         	call	_i2c_write
 19742  003996  C012  F04D         	movff	?_i2c_write,i2c_transfer_native@res
 19743  00399A  C013  F04E         	movff	?_i2c_write+1,i2c_transfer_native@res+1
 19744  00399E  4A47               	infsnz	i2c_transfer_native@bdata^0,f,c
 19745  0039A0  2A48               	incf	(i2c_transfer_native@bdata+1)^0,f,c
 19746                           
 19747                           ;src/driver/i2c_native.c: 254:     if(res) goto error;
 19748  0039A2  504D               	movf	i2c_transfer_native@res^0,w,c
 19749  0039A4  104E               	iorwf	(i2c_transfer_native@res+1)^0,w,c
 19750  0039A6  A4D8               	btfss	status,2,c
 19751  0039A8  D02A               	goto	l9399
 19752  0039AA                     l9383:
 19753                           
 19754                           ;src/driver/i2c_native.c: 252:    while(left--) {
 19755  0039AA  064B               	decf	i2c_transfer_native@left^0,f,c
 19756  0039AC  A0D8               	btfss	status,0,c
 19757  0039AE  064C               	decf	(i2c_transfer_native@left+1)^0,f,c
 19758  0039B0  284B               	incf	i2c_transfer_native@left^0,w,c
 19759  0039B2  E1E6               	bnz	l9375
 19760  0039B4  284C               	incf	(i2c_transfer_native@left+1)^0,w,c
 19761  0039B6  A4D8               	btfss	status,2,c
 19762  0039B8  D7E3               	goto	l9375
 19763  0039BA                     u10850:
 19764                           
 19765                           ;src/driver/i2c_native.c: 259:   if(pmsg->flags&(1<<2)) {
 19766  0039BA  504F               	movf	i2c_transfer_native@pmsg^0,w,c
 19767  0039BC  6ED9               	movwf	fsr2l,c
 19768  0039BE  6ADA               	clrf	fsr2h,c
 19769  0039C0  0E02               	movlw	2
 19770  0039C2  26D9               	addwf	fsr2l,f,c
 19771  0039C4  A4DF               	btfss	indf2,2,c
 19772  0039C6  D00A               	goto	l9391
 19773                           
 19774                           ;src/driver/i2c_native.c: 260:    i2c_stop(ctx);
 19775  0039C8  C049  F035         	movff	i2c_transfer_native@ctx,i2c_stop@ctx
 19776  0039CC  C04A  F036         	movff	i2c_transfer_native@ctx+1,i2c_stop@ctx+1
 19777  0039D0  EC98  F039         	call	_i2c_stop	;wreg free
 19778                           
 19779                           ;src/driver/i2c_native.c: 261:    inmsg = 0;
 19780  0039D4  0E00               	movlw	0
 19781  0039D6  6E40               	movwf	(i2c_transfer_native@inmsg+1)^0,c
 19782  0039D8  0E00               	movlw	0
 19783  0039DA  6E3F               	movwf	i2c_transfer_native@inmsg^0,c
 19784  0039DC                     l9391:
 19785                           
 19786                           ;src/driver/i2c_native.c: 263:  }
 19787  0039DC  4A45               	infsnz	i2c_transfer_native@i^0,f,c
 19788  0039DE  2A46               	incf	(i2c_transfer_native@i+1)^0,f,c
 19789  0039E0                     l9393:
 19790  0039E0  503A               	movf	i2c_transfer_native@num^0,w,c
 19791  0039E2  5C45               	subwf	i2c_transfer_native@i^0,w,c
 19792  0039E4  5046               	movf	(i2c_transfer_native@i+1)^0,w,c
 19793  0039E6  0A80               	xorlw	128
 19794  0039E8  6E3C               	movwf	??_i2c_transfer_native^0,c
 19795  0039EA  503B               	movf	(i2c_transfer_native@num+1)^0,w,c
 19796  0039EC  0A80               	xorlw	128
 19797  0039EE  583C               	subwfb	??_i2c_transfer_native^0,w,c
 19798  0039F0  A0D8               	btfss	status,0,c
 19799  0039F2  D73D               	goto	l9339
 19800                           
 19801                           ;src/driver/i2c_native.c: 264:  return 0;
 19802  0039F4  0E00               	movlw	0
 19803  0039F6  6E38               	movwf	(?_i2c_transfer_native+1)^0,c
 19804  0039F8  0E00               	movlw	0
 19805  0039FA  6E37               	movwf	?_i2c_transfer_native^0,c
 19806  0039FC  0012               	return	
 19807  0039FE                     l9399:
 19808                           
 19809                           ;src/driver/i2c_native.c: 267:  if(res!=-5 && res!=-6) i2c_stop(ctx);
 19810  0039FE  0EFB               	movlw	251
 19811  003A00  184D               	xorwf	i2c_transfer_native@res^0,w,c
 19812  003A02  E103               	bnz	u10880
 19813  003A04  284E               	incf	(i2c_transfer_native@res+1)^0,w,c
 19814  003A06  B4D8               	btfsc	status,2,c
 19815  003A08  D00C               	goto	l239
 19816  003A0A                     u10880:
 19817  003A0A  0EFA               	movlw	250
 19818  003A0C  184D               	xorwf	i2c_transfer_native@res^0,w,c
 19819  003A0E  E103               	bnz	u10890
 19820  003A10  284E               	incf	(i2c_transfer_native@res+1)^0,w,c
 19821  003A12  B4D8               	btfsc	status,2,c
 19822  003A14  D006               	goto	l239
 19823  003A16                     u10890:
 19824  003A16  C049  F035         	movff	i2c_transfer_native@ctx,i2c_stop@ctx
 19825  003A1A  C04A  F036         	movff	i2c_transfer_native@ctx+1,i2c_stop@ctx+1
 19826  003A1E  EC98  F039         	call	_i2c_stop	;wreg free
 19827  003A22                     l239:
 19828                           
 19829                           ;src/driver/i2c_native.c: 268:  i2c_reset(ctx);
 19830  003A22  C049  F027         	movff	i2c_transfer_native@ctx,i2c_reset@ctx
 19831  003A26  C04A  F028         	movff	i2c_transfer_native@ctx+1,i2c_reset@ctx+1
 19832  003A2A  EC3B  F02D         	call	_i2c_reset	;wreg free
 19833                           
 19834                           ;src/driver/i2c_native.c: 269:  return res;
 19835  003A2E  C04D  F037         	movff	i2c_transfer_native@res,?_i2c_transfer_native
 19836  003A32  C04E  F038         	movff	i2c_transfer_native@res+1,?_i2c_transfer_native+1
 19837  003A36  0012               	return		;funcret
 19838  003A38                     __end_of_i2c_transfer_native:
 19839                           	opt callstack 0
 19840                           
 19841 ;; *************** function _i2c_write *****************
 19842 ;; Defined at:
 19843 ;;		line 194 in file "src/driver/i2c_native.c"
 19844 ;; Parameters:    Size  Location     Type
 19845 ;;  data            1    wreg     unsigned char 
 19846 ;;  wantack         2   17[COMRAM] int 
 19847 ;; Auto vars:     Size  Location     Type
 19848 ;;  data            1   19[COMRAM] unsigned char 
 19849 ;;  res             2   20[COMRAM] int 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  2   17[COMRAM] int 
 19852 ;; Registers used:
 19853 ;;		wreg, status,2, status,0, cstack
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/2
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19859 ;;      Params:         2       0       0       0       0       0       0
 19860 ;;      Locals:         3       0       0       0       0       0       0
 19861 ;;      Temps:          0       0       0       0       0       0       0
 19862 ;;      Totals:         5       0       0       0       0       0       0
 19863 ;;Total ram usage:        5 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    3
 19866 ;; This function calls:
 19867 ;;		_i2c_wait_int
 19868 ;; This function is called by:
 19869 ;;		_i2c_transfer_native
 19870 ;; This function uses a non-reentrant model
 19871 ;;
 19872                           
 19873                           	psect	text75
 19874  0069B4                     __ptext75:
 19875                           	opt callstack 0
 19876  0069B4                     _i2c_write:
 19877                           	opt callstack 22
 19878                           
 19879                           ;incstack = 0
 19880                           ;i2c_write@data stored from wreg
 19881  0069B4  6E14               	movwf	i2c_write@data^0,c
 19882                           
 19883                           ;src/driver/i2c_native.c: 194: static int i2c_write(u8 data, BOOL wantack);src/driver/i2
      +                          c_native.c: 195: {;src/driver/i2c_native.c: 196:  int res;;src/driver/i2c_native.c: 198:
      +                               PIR1bits.SSPIF = 0;
 19884  0069B6  969E               	bcf	158,3,c	;volatile
 19885                           
 19886                           ;src/driver/i2c_native.c: 201:  SSPBUF = data;
 19887  0069B8  C014  FFC9         	movff	i2c_write@data,4041	;volatile
 19888                           
 19889                           ;src/driver/i2c_native.c: 204:  res = i2c_wait_int(2500);
 19890  0069BC  0EC4               	movlw	196
 19891  0069BE  6E0E               	movwf	i2c_wait_int@timeout^0,c
 19892  0069C0  0E09               	movlw	9
 19893  0069C2  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 19894  0069C4  0E00               	movlw	0
 19895  0069C6  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 19896  0069C8  0E00               	movlw	0
 19897  0069CA  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 19898  0069CC  ECDE  F036         	call	_i2c_wait_int	;wreg free
 19899  0069D0  C00E  F015         	movff	?_i2c_wait_int,i2c_write@res
 19900  0069D4  C00F  F016         	movff	?_i2c_wait_int+1,i2c_write@res+1
 19901                           
 19902                           ;src/driver/i2c_native.c: 205:  if(res) return res;
 19903  0069D8  5015               	movf	i2c_write@res^0,w,c
 19904  0069DA  1016               	iorwf	(i2c_write@res+1)^0,w,c
 19905  0069DC  B4D8               	btfsc	status,2,c
 19906  0069DE  D005               	goto	l9315
 19907  0069E0  C015  F012         	movff	i2c_write@res,?_i2c_write
 19908  0069E4  C016  F013         	movff	i2c_write@res+1,?_i2c_write+1
 19909  0069E8  0012               	return	
 19910  0069EA                     l9315:
 19911                           
 19912                           ;src/driver/i2c_native.c: 208:     if(wantack && (SSPCON2bits.ACKSTAT != 0)) {
 19913  0069EA  5012               	movf	i2c_write@wantack^0,w,c
 19914  0069EC  1013               	iorwf	(i2c_write@wantack+1)^0,w,c
 19915  0069EE  A4D8               	btfss	status,2,c
 19916  0069F0  ACC5               	btfss	197,6,c	;volatile
 19917  0069F2  D005               	goto	l9323
 19918                           
 19919                           ;src/driver/i2c_native.c: 209:   return -7;
 19920  0069F4  0EFF               	movlw	255
 19921  0069F6  6E13               	movwf	(?_i2c_write+1)^0,c
 19922  0069F8  0EF9               	movlw	249
 19923  0069FA  6E12               	movwf	?_i2c_write^0,c
 19924  0069FC  0012               	return	
 19925  0069FE                     l9323:
 19926                           
 19927                           ;src/driver/i2c_native.c: 213:  return 0;
 19928  0069FE  0E00               	movlw	0
 19929  006A00  6E13               	movwf	(?_i2c_write+1)^0,c
 19930  006A02  0E00               	movlw	0
 19931  006A04  6E12               	movwf	?_i2c_write^0,c
 19932  006A06  0012               	return		;funcret
 19933  006A08                     __end_of_i2c_write:
 19934                           	opt callstack 0
 19935                           
 19936 ;; *************** function _i2c_stop *****************
 19937 ;; Defined at:
 19938 ;;		line 150 in file "src/driver/i2c_native.c"
 19939 ;; Parameters:    Size  Location     Type
 19940 ;;  ctx             2   52[COMRAM] PTR struct i2c_data_nati
 19941 ;;		 -> g_i2c_bus(8), NULL(0), 
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;		None
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  1    wreg      void 
 19946 ;; Registers used:
 19947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19948 ;; Tracked objects:
 19949 ;;		On entry : 0/2
 19950 ;;		On exit  : 0/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19953 ;;      Params:         2       0       0       0       0       0       0
 19954 ;;      Locals:         0       0       0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0
 19956 ;;      Totals:         2       0       0       0       0       0       0
 19957 ;;Total ram usage:        2 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; Hardware stack levels required when called:    4
 19960 ;; This function calls:
 19961 ;;		_i2c_reset
 19962 ;;		_i2c_wait_int
 19963 ;; This function is called by:
 19964 ;;		_i2c_transfer_native
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           	psect	text76
 19969  007330                     __ptext76:
 19970                           	opt callstack 0
 19971  007330                     _i2c_stop:
 19972                           	opt callstack 21
 19973                           
 19974                           ;src/driver/i2c_native.c: 150: static void i2c_stop(i2c_data_native *ctx);src/driver/i2c
      +                          _native.c: 151: {;src/driver/i2c_native.c: 152:     PIR1bits.SSPIF = 0;
 19975                           
 19976                           ;incstack = 0
 19977  007330  969E               	bcf	158,3,c	;volatile
 19978                           
 19979                           ;src/driver/i2c_native.c: 154:  SSPCON2bits.PEN = 1;
 19980  007332  84C5               	bsf	197,2,c	;volatile
 19981                           
 19982                           ;src/driver/i2c_native.c: 157:  if(i2c_wait_int(10000)) {
 19983  007334  0E10               	movlw	16
 19984  007336  6E0E               	movwf	i2c_wait_int@timeout^0,c
 19985  007338  0E27               	movlw	39
 19986  00733A  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 19987  00733C  0E00               	movlw	0
 19988  00733E  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 19989  007340  0E00               	movlw	0
 19990  007342  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 19991  007344  ECDE  F036         	call	_i2c_wait_int	;wreg free
 19992  007348  500E               	movf	?_i2c_wait_int^0,w,c
 19993  00734A  100F               	iorwf	(?_i2c_wait_int+1)^0,w,c
 19994  00734C  B4D8               	btfsc	status,2,c
 19995  00734E  0012               	return	
 19996                           
 19997                           ;src/driver/i2c_native.c: 159:   i2c_reset(ctx);
 19998  007350  C035  F027         	movff	i2c_stop@ctx,i2c_reset@ctx
 19999  007354  C036  F028         	movff	i2c_stop@ctx+1,i2c_reset@ctx+1
 20000  007358  EC3B  F02D         	call	_i2c_reset	;wreg free
 20001  00735C  0012               	return		;funcret
 20002  00735E                     __end_of_i2c_stop:
 20003                           	opt callstack 0
 20004                           
 20005 ;; *************** function _i2c_reset *****************
 20006 ;; Defined at:
 20007 ;;		line 56 in file "src/driver/i2c_native.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;  ctx             2   38[COMRAM] PTR struct i2c_data_nati
 20010 ;;		 -> g_i2c_bus(8), NULL(0), 
 20011 ;; Auto vars:     Size  Location     Type
 20012 ;;  reg             4   48[COMRAM] unsigned long 
 20013 ;; Return value:  Size  Location     Type
 20014 ;;                  1    wreg      void 
 20015 ;; Registers used:
 20016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20017 ;; Tracked objects:
 20018 ;;		On entry : 0/0
 20019 ;;		On exit  : 0/0
 20020 ;;		Unchanged: 0/0
 20021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20022 ;;      Params:         2       0       0       0       0       0       0
 20023 ;;      Locals:         8       0       0       0       0       0       0
 20024 ;;      Temps:          4       0       0       0       0       0       0
 20025 ;;      Totals:        14       0       0       0       0       0       0
 20026 ;;Total ram usage:       14 bytes
 20027 ;; Hardware stack levels used:    1
 20028 ;; Hardware stack levels required when called:    3
 20029 ;; This function calls:
 20030 ;;		___lldiv
 20031 ;; This function is called by:
 20032 ;;		_i2c_native_init
 20033 ;;		_i2c_stop
 20034 ;;		_i2c_transfer_native
 20035 ;; This function uses a non-reentrant model
 20036 ;;
 20037                           
 20038                           	psect	text77
 20039  005A76                     __ptext77:
 20040                           	opt callstack 0
 20041  005A76                     _i2c_reset:
 20042                           	opt callstack 21
 20043                           
 20044                           ;src/driver/i2c_native.c: 56: static void i2c_reset(i2c_data_native *ctx);src/driver/i2c
      +                          _native.c: 57: {;src/driver/i2c_native.c: 58:     u32 reg;;src/driver/i2c_native.c: 60: 
      +                              SSPCON1bits.SSPEN = 0;
 20045                           
 20046                           ;incstack = 0
 20047  005A76  9AC6               	bcf	198,5,c	;volatile
 20048                           
 20049                           ;src/driver/i2c_native.c: 61:     SSPCON1bits.SSPM = 0x08;
 20050  005A78  50C6               	movf	198,w,c	;volatile
 20051  005A7A  0BF0               	andlw	-16
 20052  005A7C  0908               	iorlw	8
 20053  005A7E  6EC6               	movwf	198,c	;volatile
 20054                           
 20055                           ;src/driver/i2c_native.c: 63:     SSPSTATbits.SMP = 1;
 20056  005A80  8EC7               	bsf	199,7,c	;volatile
 20057                           
 20058                           ;src/driver/i2c_native.c: 64:     SSPSTATbits.CKE = 0;
 20059  005A82  9CC7               	bcf	199,6,c	;volatile
 20060                           
 20061                           ;src/driver/i2c_native.c: 66:  TRISC |= 0b00011000;
 20062  005A84  0E18               	movlw	24
 20063  005A86  1294               	iorwf	148,f,c	;volatile
 20064                           
 20065                           ;src/driver/i2c_native.c: 69:     reg = (8000000 / (4*ctx->baud)) - 1;
 20066  005A88  0E00               	movlw	0
 20067  005A8A  6E1A               	movwf	___lldiv@dividend^0,c
 20068  005A8C  0E12               	movlw	18
 20069  005A8E  6E1B               	movwf	(___lldiv@dividend+1)^0,c
 20070  005A90  0E7A               	movlw	122
 20071  005A92  6E1C               	movwf	(___lldiv@dividend+2)^0,c
 20072  005A94  0E00               	movlw	0
 20073  005A96  6E1D               	movwf	(___lldiv@dividend+3)^0,c
 20074  005A98  EE20 F004          	lfsr	2,4
 20075  005A9C  5027               	movf	i2c_reset@ctx^0,w,c
 20076  005A9E  26D9               	addwf	fsr2l,f,c
 20077  005AA0  5028               	movf	(i2c_reset@ctx+1)^0,w,c
 20078  005AA2  22DA               	addwfc	fsr2h,f,c
 20079  005AA4  CFDE F029          	movff	postinc2,??_i2c_reset
 20080  005AA8  CFDE F02A          	movff	postinc2,??_i2c_reset+1
 20081  005AAC  CFDE F02B          	movff	postinc2,??_i2c_reset+2
 20082  005AB0  CFDE F02C          	movff	postinc2,??_i2c_reset+3
 20083  005AB4  0E02               	movlw	2
 20084  005AB6                     u10515:
 20085  005AB6  90D8               	bcf	status,0,c
 20086  005AB8  3629               	rlcf	??_i2c_reset^0,f,c
 20087  005ABA  362A               	rlcf	(??_i2c_reset+1)^0,f,c
 20088  005ABC  362B               	rlcf	(??_i2c_reset+2)^0,f,c
 20089  005ABE  362C               	rlcf	(??_i2c_reset+3)^0,f,c
 20090  005AC0  2EE8               	decfsz	wreg,f,c
 20091  005AC2  D7F9               	goto	u10515
 20092  005AC4  C029  F01E         	movff	??_i2c_reset,___lldiv@divisor
 20093  005AC8  C02A  F01F         	movff	??_i2c_reset+1,___lldiv@divisor+1
 20094  005ACC  C02B  F020         	movff	??_i2c_reset+2,___lldiv@divisor+2
 20095  005AD0  C02C  F021         	movff	??_i2c_reset+3,___lldiv@divisor+3
 20096  005AD4  ECBF  F032         	call	___lldiv	;wreg free
 20097  005AD8  0EFF               	movlw	255
 20098  005ADA  241A               	addwf	?___lldiv^0,w,c
 20099  005ADC  6E31               	movwf	i2c_reset@reg^0,c
 20100  005ADE  0EFF               	movlw	255
 20101  005AE0  201B               	addwfc	(?___lldiv+1)^0,w,c
 20102  005AE2  6E32               	movwf	(i2c_reset@reg+1)^0,c
 20103  005AE4  0EFF               	movlw	255
 20104  005AE6  201C               	addwfc	(?___lldiv+2)^0,w,c
 20105  005AE8  6E33               	movwf	(i2c_reset@reg+2)^0,c
 20106  005AEA  0EFF               	movlw	255
 20107  005AEC  201D               	addwfc	(?___lldiv+3)^0,w,c
 20108  005AEE  6E34               	movwf	(i2c_reset@reg+3)^0,c
 20109                           
 20110                           ;src/driver/i2c_native.c: 70:     SSPADD = (reg<127)?reg:127;
 20111  005AF0  5034               	movf	(i2c_reset@reg+3)^0,w,c
 20112  005AF2  1033               	iorwf	(i2c_reset@reg+2)^0,w,c
 20113  005AF4  1032               	iorwf	(i2c_reset@reg+1)^0,w,c
 20114  005AF6  E104               	bnz	u10520
 20115  005AF8  0E7F               	movlw	127
 20116  005AFA  5C31               	subwf	i2c_reset@reg^0,w,c
 20117  005AFC  A0D8               	btfss	status,0,c
 20118  005AFE  D009               	goto	l178
 20119  005B00                     u10520:
 20120  005B00  0E7F               	movlw	127
 20121  005B02  6E2D               	movwf	_i2c_reset$1141^0,c
 20122  005B04  0E00               	movlw	0
 20123  005B06  6E2E               	movwf	(_i2c_reset$1141+1)^0,c
 20124  005B08  0E00               	movlw	0
 20125  005B0A  6E2F               	movwf	(_i2c_reset$1141+2)^0,c
 20126  005B0C  0E00               	movlw	0
 20127  005B0E  6E30               	movwf	(_i2c_reset$1141+3)^0,c
 20128  005B10  D008               	goto	l180
 20129  005B12                     l178:
 20130  005B12  C031  F02D         	movff	i2c_reset@reg,_i2c_reset$1141
 20131  005B16  C032  F02E         	movff	i2c_reset@reg+1,_i2c_reset$1141+1
 20132  005B1A  C033  F02F         	movff	i2c_reset@reg+2,_i2c_reset$1141+2
 20133  005B1E  C034  F030         	movff	i2c_reset@reg+3,_i2c_reset$1141+3
 20134  005B22                     l180:
 20135  005B22  C02D  FFC8         	movff	_i2c_reset$1141,4040	;volatile
 20136                           
 20137                           ;src/driver/i2c_native.c: 72:     SSPCON1bits.SSPEN = 1;
 20138  005B26  8AC6               	bsf	198,5,c	;volatile
 20139  005B28  0012               	return		;funcret
 20140  005B2A                     __end_of_i2c_reset:
 20141                           	opt callstack 0
 20142                           
 20143 ;; *************** function ___lldiv *****************
 20144 ;; Defined at:
 20145 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/__lldiv.c"
 20146 ;; Parameters:    Size  Location     Type
 20147 ;;  dividend        4   25[COMRAM] unsigned long 
 20148 ;;  divisor         4   29[COMRAM] unsigned long 
 20149 ;; Auto vars:     Size  Location     Type
 20150 ;;  quotient        4   33[COMRAM] unsigned long 
 20151 ;;  counter         1   37[COMRAM] unsigned char 
 20152 ;; Return value:  Size  Location     Type
 20153 ;;                  4   25[COMRAM] unsigned long 
 20154 ;; Registers used:
 20155 ;;		wreg, status,2, status,0
 20156 ;; Tracked objects:
 20157 ;;		On entry : 0/0
 20158 ;;		On exit  : 0/0
 20159 ;;		Unchanged: 0/0
 20160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20161 ;;      Params:         8       0       0       0       0       0       0
 20162 ;;      Locals:         5       0       0       0       0       0       0
 20163 ;;      Temps:          0       0       0       0       0       0       0
 20164 ;;      Totals:        13       0       0       0       0       0       0
 20165 ;;Total ram usage:       13 bytes
 20166 ;; Hardware stack levels used:    1
 20167 ;; Hardware stack levels required when called:    2
 20168 ;; This function calls:
 20169 ;;		Nothing
 20170 ;; This function is called by:
 20171 ;;		_adf4351_set_freq
 20172 ;;		_i2c_reset
 20173 ;;		_usart_init
 20174 ;;		_CalculateGridSquare
 20175 ;; This function uses a non-reentrant model
 20176 ;;
 20177                           
 20178                           	psect	text78
 20179  00657E                     __ptext78:
 20180                           	opt callstack 0
 20181  00657E                     ___lldiv:
 20182                           	opt callstack 27
 20183                           
 20184                           ;incstack = 0
 20185  00657E  0E00               	movlw	0
 20186  006580  6E22               	movwf	___lldiv@quotient^0,c
 20187  006582  0E00               	movlw	0
 20188  006584  6E23               	movwf	(___lldiv@quotient+1)^0,c
 20189  006586  0E00               	movlw	0
 20190  006588  6E24               	movwf	(___lldiv@quotient+2)^0,c
 20191  00658A  0E00               	movlw	0
 20192  00658C  6E25               	movwf	(___lldiv@quotient+3)^0,c
 20193  00658E  501E               	movf	___lldiv@divisor^0,w,c
 20194  006590  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
 20195  006592  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
 20196  006594  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
 20197  006596  B4D8               	btfsc	status,2,c
 20198  006598  D02A               	goto	l1543
 20199  00659A  0E01               	movlw	1
 20200  00659C  6E26               	movwf	___lldiv@counter^0,c
 20201  00659E  D006               	goto	l9185
 20202  0065A0                     l9183:
 20203  0065A0  90D8               	bcf	status,0,c
 20204  0065A2  361E               	rlcf	___lldiv@divisor^0,f,c
 20205  0065A4  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
 20206  0065A6  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
 20207  0065A8  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
 20208  0065AA  2A26               	incf	___lldiv@counter^0,f,c
 20209  0065AC                     l9185:
 20210  0065AC  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
 20211  0065AE  D7F8               	goto	l9183
 20212  0065B0                     u10490:
 20213  0065B0  90D8               	bcf	status,0,c
 20214  0065B2  3622               	rlcf	___lldiv@quotient^0,f,c
 20215  0065B4  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
 20216  0065B6  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
 20217  0065B8  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
 20218  0065BA  501E               	movf	___lldiv@divisor^0,w,c
 20219  0065BC  5C1A               	subwf	___lldiv@dividend^0,w,c
 20220  0065BE  501F               	movf	(___lldiv@divisor+1)^0,w,c
 20221  0065C0  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
 20222  0065C2  5020               	movf	(___lldiv@divisor+2)^0,w,c
 20223  0065C4  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
 20224  0065C6  5021               	movf	(___lldiv@divisor+3)^0,w,c
 20225  0065C8  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
 20226  0065CA  A0D8               	btfss	status,0,c
 20227  0065CC  D009               	goto	l9195
 20228  0065CE  501E               	movf	___lldiv@divisor^0,w,c
 20229  0065D0  5E1A               	subwf	___lldiv@dividend^0,f,c
 20230  0065D2  501F               	movf	(___lldiv@divisor+1)^0,w,c
 20231  0065D4  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
 20232  0065D6  5020               	movf	(___lldiv@divisor+2)^0,w,c
 20233  0065D8  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
 20234  0065DA  5021               	movf	(___lldiv@divisor+3)^0,w,c
 20235  0065DC  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
 20236  0065DE  8022               	bsf	___lldiv@quotient^0,0,c
 20237  0065E0                     l9195:
 20238  0065E0  90D8               	bcf	status,0,c
 20239  0065E2  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
 20240  0065E4  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
 20241  0065E6  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
 20242  0065E8  321E               	rrcf	___lldiv@divisor^0,f,c
 20243  0065EA  2E26               	decfsz	___lldiv@counter^0,f,c
 20244  0065EC  D7E1               	goto	u10490
 20245  0065EE                     l1543:
 20246  0065EE  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 20247  0065F2  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 20248  0065F6  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 20249  0065FA  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 20250  0065FE  0012               	return		;funcret
 20251  006600                     __end_of___lldiv:
 20252                           	opt callstack 0
 20253                           
 20254 ;; *************** function _i2c_start *****************
 20255 ;; Defined at:
 20256 ;;		line 118 in file "src/driver/i2c_native.c"
 20257 ;; Parameters:    Size  Location     Type
 20258 ;;  addr            1    wreg     unsigned char 
 20259 ;;  read            2   17[COMRAM] int 
 20260 ;;  rep             2   19[COMRAM] int 
 20261 ;;  wantack         2   21[COMRAM] int 
 20262 ;; Auto vars:     Size  Location     Type
 20263 ;;  addr            1   23[COMRAM] unsigned char 
 20264 ;;  res             2   24[COMRAM] int 
 20265 ;; Return value:  Size  Location     Type
 20266 ;;                  2   17[COMRAM] int 
 20267 ;; Registers used:
 20268 ;;		wreg, status,2, status,0, cstack
 20269 ;; Tracked objects:
 20270 ;;		On entry : 0/2
 20271 ;;		On exit  : 0/0
 20272 ;;		Unchanged: 0/0
 20273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20274 ;;      Params:         6       0       0       0       0       0       0
 20275 ;;      Locals:         3       0       0       0       0       0       0
 20276 ;;      Temps:          0       0       0       0       0       0       0
 20277 ;;      Totals:         9       0       0       0       0       0       0
 20278 ;;Total ram usage:        9 bytes
 20279 ;; Hardware stack levels used:    1
 20280 ;; Hardware stack levels required when called:    3
 20281 ;; This function calls:
 20282 ;;		_i2c_wait_int
 20283 ;; This function is called by:
 20284 ;;		_i2c_transfer_native
 20285 ;; This function uses a non-reentrant model
 20286 ;;
 20287                           
 20288                           	psect	text79
 20289  0060F6                     __ptext79:
 20290                           	opt callstack 0
 20291  0060F6                     _i2c_start:
 20292                           	opt callstack 22
 20293                           
 20294                           ;incstack = 0
 20295                           ;i2c_start@addr stored from wreg
 20296  0060F6  6E18               	movwf	i2c_start@addr^0,c
 20297                           
 20298                           ;src/driver/i2c_native.c: 118: static int i2c_start(u8 addr, BOOL read, BOOL rep, BOOL w
      +                          antack);src/driver/i2c_native.c: 119: {;src/driver/i2c_native.c: 120:     int res;;src/d
      +                          river/i2c_native.c: 122:     PIR1bits.SSPIF = 0;
 20299  0060F8  969E               	bcf	158,3,c	;volatile
 20300                           
 20301                           ;src/driver/i2c_native.c: 124:  if(rep) SSPCON2bits.RSEN = 1;
 20302  0060FA  5014               	movf	i2c_start@rep^0,w,c
 20303  0060FC  1015               	iorwf	(i2c_start@rep+1)^0,w,c
 20304  0060FE  B4D8               	btfsc	status,2,c
 20305  006100  D002               	goto	l194
 20306  006102  82C5               	bsf	197,1,c	;volatile
 20307  006104  D001               	goto	l9241
 20308  006106                     l194:
 20309  006106  80C5               	bsf	197,0,c	;volatile
 20310  006108                     l9241:
 20311                           
 20312                           ;src/driver/i2c_native.c: 128:     res = i2c_wait_int(2500);
 20313  006108  0EC4               	movlw	196
 20314  00610A  6E0E               	movwf	i2c_wait_int@timeout^0,c
 20315  00610C  0E09               	movlw	9
 20316  00610E  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 20317  006110  0E00               	movlw	0
 20318  006112  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 20319  006114  0E00               	movlw	0
 20320  006116  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 20321  006118  ECDE  F036         	call	_i2c_wait_int	;wreg free
 20322  00611C  C00E  F019         	movff	?_i2c_wait_int,i2c_start@res
 20323  006120  C00F  F01A         	movff	?_i2c_wait_int+1,i2c_start@res+1
 20324                           
 20325                           ;src/driver/i2c_native.c: 129:  if(res) return res;
 20326  006124  5019               	movf	i2c_start@res^0,w,c
 20327  006126  101A               	iorwf	(i2c_start@res+1)^0,w,c
 20328  006128  B4D8               	btfsc	status,2,c
 20329  00612A  D005               	goto	l196
 20330  00612C                     u10580:
 20331  00612C  C019  F012         	movff	i2c_start@res,?_i2c_start
 20332  006130  C01A  F013         	movff	i2c_start@res+1,?_i2c_start+1
 20333  006134  0012               	return	
 20334  006136                     l196:
 20335                           
 20336                           ;src/driver/i2c_native.c: 131:     PIR1bits.SSPIF = 0;
 20337  006136  969E               	bcf	158,3,c	;volatile
 20338                           
 20339                           ;src/driver/i2c_native.c: 133:  if(read) SSPBUF = (addr<<1) | 1;
 20340  006138  5012               	movf	i2c_start@read^0,w,c
 20341  00613A  1013               	iorwf	(i2c_start@read+1)^0,w,c
 20342  00613C  B4D8               	btfsc	status,2,c
 20343  00613E  D003               	goto	l9251
 20344  006140  80D8               	bsf	status,0,c
 20345  006142  3418               	rlcf	i2c_start@addr^0,w,c
 20346  006144  D002               	goto	L13
 20347  006146                     l9251:
 20348  006146  5018               	movf	i2c_start@addr^0,w,c
 20349  006148  2418               	addwf	i2c_start@addr^0,w,c
 20350  00614A                     L13:
 20351  00614A  6EC9               	movwf	201,c	;volatile
 20352                           
 20353                           ;src/driver/i2c_native.c: 137:     res = i2c_wait_int(2500);
 20354  00614C  0EC4               	movlw	196
 20355  00614E  6E0E               	movwf	i2c_wait_int@timeout^0,c
 20356  006150  0E09               	movlw	9
 20357  006152  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 20358  006154  0E00               	movlw	0
 20359  006156  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 20360  006158  0E00               	movlw	0
 20361  00615A  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 20362  00615C  ECDE  F036         	call	_i2c_wait_int	;wreg free
 20363  006160  C00E  F019         	movff	?_i2c_wait_int,i2c_start@res
 20364  006164  C00F  F01A         	movff	?_i2c_wait_int+1,i2c_start@res+1
 20365                           
 20366                           ;src/driver/i2c_native.c: 138:  if(res) return res;
 20367  006168  5019               	movf	i2c_start@res^0,w,c
 20368  00616A  101A               	iorwf	(i2c_start@res+1)^0,w,c
 20369  00616C  A4D8               	btfss	status,2,c
 20370  00616E  D7DE               	goto	u10580
 20371                           
 20372                           ;src/driver/i2c_native.c: 141:  if(wantack && (SSPCON2bits.ACKSTAT != 0)) {
 20373  006170  5016               	movf	i2c_start@wantack^0,w,c
 20374  006172  1017               	iorwf	(i2c_start@wantack+1)^0,w,c
 20375  006174  A4D8               	btfss	status,2,c
 20376  006176  ACC5               	btfss	197,6,c	;volatile
 20377  006178  D005               	goto	l9267
 20378                           
 20379                           ;src/driver/i2c_native.c: 142:   return -7;
 20380  00617A  0EFF               	movlw	255
 20381  00617C  6E13               	movwf	(?_i2c_start+1)^0,c
 20382  00617E  0EF9               	movlw	249
 20383  006180  6E12               	movwf	?_i2c_start^0,c
 20384  006182  0012               	return	
 20385  006184                     l9267:
 20386                           
 20387                           ;src/driver/i2c_native.c: 146:  return 0;
 20388  006184  0E00               	movlw	0
 20389  006186  6E13               	movwf	(?_i2c_start+1)^0,c
 20390  006188  0E00               	movlw	0
 20391  00618A  6E12               	movwf	?_i2c_start^0,c
 20392  00618C  0012               	return		;funcret
 20393  00618E                     __end_of_i2c_start:
 20394                           	opt callstack 0
 20395                           
 20396 ;; *************** function _i2c_read *****************
 20397 ;; Defined at:
 20398 ;;		line 164 in file "src/driver/i2c_native.c"
 20399 ;; Parameters:    Size  Location     Type
 20400 ;;  data            2   17[COMRAM] PTR unsigned char 
 20401 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), ssd1306_setpos@data(3), ssd1306_init_commands(27), 
 20402 ;;		 -> read_reg@val(1), LNB_error(1), lnb_do_configure@value(1), smbus8_read_byte@reg(1), 
 20403 ;;		 -> smbus8_write_data@reg(1), smbus8_write_byte@tmp(2), NULL(0), 
 20404 ;;  ack             2   19[COMRAM] int 
 20405 ;; Auto vars:     Size  Location     Type
 20406 ;;  res             2   22[COMRAM] int 
 20407 ;; Return value:  Size  Location     Type
 20408 ;;                  2   17[COMRAM] int 
 20409 ;; Registers used:
 20410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20411 ;; Tracked objects:
 20412 ;;		On entry : 0/2
 20413 ;;		On exit  : 0/0
 20414 ;;		Unchanged: 0/0
 20415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20416 ;;      Params:         4       0       0       0       0       0       0
 20417 ;;      Locals:         2       0       0       0       0       0       0
 20418 ;;      Temps:          1       0       0       0       0       0       0
 20419 ;;      Totals:         7       0       0       0       0       0       0
 20420 ;;Total ram usage:        7 bytes
 20421 ;; Hardware stack levels used:    1
 20422 ;; Hardware stack levels required when called:    3
 20423 ;; This function calls:
 20424 ;;		_i2c_wait_int
 20425 ;; This function is called by:
 20426 ;;		_i2c_transfer_native
 20427 ;; This function uses a non-reentrant model
 20428 ;;
 20429                           
 20430                           	psect	text80
 20431  00634E                     __ptext80:
 20432                           	opt callstack 0
 20433  00634E                     _i2c_read:
 20434                           	opt callstack 22
 20435                           
 20436                           ;src/driver/i2c_native.c: 164: static int i2c_read(u8 *data, BOOL ack);src/driver/i2c_na
      +                          tive.c: 165: {;src/driver/i2c_native.c: 166:  int res;;src/driver/i2c_native.c: 168:    
      +                           PIR1bits.SSPIF = 0;
 20437                           
 20438                           ;incstack = 0
 20439  00634E  969E               	bcf	158,3,c	;volatile
 20440                           
 20441                           ;src/driver/i2c_native.c: 171:  SSPCON2bits.RCEN = 1;
 20442  006350  86C5               	bsf	197,3,c	;volatile
 20443                           
 20444                           ;src/driver/i2c_native.c: 174:  res = i2c_wait_int(2500);
 20445  006352  0EC4               	movlw	196
 20446  006354  6E0E               	movwf	i2c_wait_int@timeout^0,c
 20447  006356  0E09               	movlw	9
 20448  006358  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 20449  00635A  0E00               	movlw	0
 20450  00635C  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 20451  00635E  0E00               	movlw	0
 20452  006360  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 20453  006362  ECDE  F036         	call	_i2c_wait_int	;wreg free
 20454  006366  C00E  F017         	movff	?_i2c_wait_int,i2c_read@res
 20455  00636A  C00F  F018         	movff	?_i2c_wait_int+1,i2c_read@res+1
 20456                           
 20457                           ;src/driver/i2c_native.c: 175:  if(res) return res;
 20458  00636E  5017               	movf	i2c_read@res^0,w,c
 20459  006370  1018               	iorwf	(i2c_read@res+1)^0,w,c
 20460  006372  B4D8               	btfsc	status,2,c
 20461  006374  D005               	goto	l208
 20462  006376                     u10640:
 20463  006376  C017  F012         	movff	i2c_read@res,?_i2c_read
 20464  00637A  C018  F013         	movff	i2c_read@res+1,?_i2c_read+1
 20465  00637E  0012               	return	
 20466  006380                     l208:
 20467                           
 20468                           ;src/driver/i2c_native.c: 177:     if(SSPCON2bits.RCEN != 0 || SSPSTATbits.BF == 0) {
 20469  006380  A6C5               	btfss	197,3,c	;volatile
 20470  006382  50C7               	movf	199,w,c	;volatile
 20471                           
 20472                           ;src/driver/i2c_native.c: 181:  *data = SSPBUF;
 20473  006384  C012  FFD9         	movff	i2c_read@data,fsr2l
 20474  006388  C013  FFDA         	movff	i2c_read@data+1,fsr2h
 20475  00638C  CFC9 FFDF          	movff	4041,indf2	;volatile
 20476                           
 20477                           ;src/driver/i2c_native.c: 183:     PIR1bits.SSPIF = 0;
 20478  006390  969E               	bcf	158,3,c	;volatile
 20479                           
 20480                           ;src/driver/i2c_native.c: 185:     SSPCON2bits.ACKDT = (ack)?0:1;
 20481  006392  5014               	movf	i2c_read@ack^0,w,c
 20482  006394  1015               	iorwf	(i2c_read@ack+1)^0,w,c
 20483  006396  A4D8               	btfss	status,2,c
 20484  006398  D003               	goto	u10660
 20485  00639A  6A16               	clrf	??_i2c_read^0,c
 20486  00639C  2A16               	incf	??_i2c_read^0,f,c
 20487  00639E  D001               	goto	u10678
 20488  0063A0                     u10660:
 20489  0063A0  6A16               	clrf	??_i2c_read^0,c
 20490  0063A2                     u10678:
 20491  0063A2  3A16               	swapf	??_i2c_read^0,f,c
 20492  0063A4  4616               	rlncf	??_i2c_read^0,f,c
 20493  0063A6  50C5               	movf	197,w,c	;volatile
 20494  0063A8  1816               	xorwf	??_i2c_read^0,w,c
 20495  0063AA  0BDF               	andlw	-33
 20496  0063AC  1816               	xorwf	??_i2c_read^0,w,c
 20497  0063AE  6EC5               	movwf	197,c	;volatile
 20498                           
 20499                           ;src/driver/i2c_native.c: 186:     SSPCON2bits.ACKEN = 1;
 20500  0063B0  88C5               	bsf	197,4,c	;volatile
 20501                           
 20502                           ;src/driver/i2c_native.c: 187:     res = i2c_wait_int(2500);
 20503  0063B2  0EC4               	movlw	196
 20504  0063B4  6E0E               	movwf	i2c_wait_int@timeout^0,c
 20505  0063B6  0E09               	movlw	9
 20506  0063B8  6E0F               	movwf	(i2c_wait_int@timeout+1)^0,c
 20507  0063BA  0E00               	movlw	0
 20508  0063BC  6E10               	movwf	(i2c_wait_int@timeout+2)^0,c
 20509  0063BE  0E00               	movlw	0
 20510  0063C0  6E11               	movwf	(i2c_wait_int@timeout+3)^0,c
 20511  0063C2  ECDE  F036         	call	_i2c_wait_int	;wreg free
 20512  0063C6  C00E  F017         	movff	?_i2c_wait_int,i2c_read@res
 20513  0063CA  C00F  F018         	movff	?_i2c_wait_int+1,i2c_read@res+1
 20514                           
 20515                           ;src/driver/i2c_native.c: 188:     if(res) return res;
 20516  0063CE  5017               	movf	i2c_read@res^0,w,c
 20517  0063D0  1018               	iorwf	(i2c_read@res+1)^0,w,c
 20518  0063D2  A4D8               	btfss	status,2,c
 20519  0063D4  D7D0               	goto	u10640
 20520                           
 20521                           ;src/driver/i2c_native.c: 190:     return 0;
 20522  0063D6  0E00               	movlw	0
 20523  0063D8  6E13               	movwf	(?_i2c_read+1)^0,c
 20524  0063DA  0E00               	movlw	0
 20525  0063DC  6E12               	movwf	?_i2c_read^0,c
 20526  0063DE  0012               	return		;funcret
 20527  0063E0                     __end_of_i2c_read:
 20528                           	opt callstack 0
 20529                           
 20530 ;; *************** function _i2c_wait_int *****************
 20531 ;; Defined at:
 20532 ;;		line 95 in file "src/driver/i2c_native.c"
 20533 ;; Parameters:    Size  Location     Type
 20534 ;;  timeout         4   13[COMRAM] unsigned long 
 20535 ;; Auto vars:     Size  Location     Type
 20536 ;;		None
 20537 ;; Return value:  Size  Location     Type
 20538 ;;                  2   13[COMRAM] int 
 20539 ;; Registers used:
 20540 ;;		wreg, status,2, status,0
 20541 ;; Tracked objects:
 20542 ;;		On entry : 0/2
 20543 ;;		On exit  : 0/0
 20544 ;;		Unchanged: 0/0
 20545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20546 ;;      Params:         4       0       0       0       0       0       0
 20547 ;;      Locals:         0       0       0       0       0       0       0
 20548 ;;      Temps:          0       0       0       0       0       0       0
 20549 ;;      Totals:         4       0       0       0       0       0       0
 20550 ;;Total ram usage:        4 bytes
 20551 ;; Hardware stack levels used:    1
 20552 ;; Hardware stack levels required when called:    2
 20553 ;; This function calls:
 20554 ;;		Nothing
 20555 ;; This function is called by:
 20556 ;;		_i2c_start
 20557 ;;		_i2c_stop
 20558 ;;		_i2c_read
 20559 ;;		_i2c_write
 20560 ;; This function uses a non-reentrant model
 20561 ;;
 20562                           
 20563                           	psect	text81
 20564  006DBC                     __ptext81:
 20565                           	opt callstack 0
 20566  006DBC                     _i2c_wait_int:
 20567                           	opt callstack 22
 20568                           
 20569                           ;src/driver/i2c_native.c: 95: static int i2c_wait_int(u32 timeout);src/driver/i2c_native
      +                          .c: 96: {;src/driver/i2c_native.c: 98:  while((PIR1bits.SSPIF == 0) && (SSPCON1bits.WCOL
      +                           == 0)) {
 20570                           
 20571                           ;incstack = 0
 20572  006DBC  D012               	goto	l184
 20573  006DBE                     l185:
 20574                           
 20575                           ;src/driver/i2c_native.c: 99:   _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 20576  006DBE  0004               	clrwdt	
 20577  006DC0  F000               	nop		;2 cycle nop
 20578                           
 20579                           ;src/driver/i2c_native.c: 100:   if(--timeout == 0) {
 20580  006DC2  060E               	decf	i2c_wait_int@timeout^0,f,c
 20581  006DC4  0E00               	movlw	0
 20582  006DC6  5A0F               	subwfb	(i2c_wait_int@timeout+1)^0,f,c
 20583  006DC8  5A10               	subwfb	(i2c_wait_int@timeout+2)^0,f,c
 20584  006DCA  5A11               	subwfb	(i2c_wait_int@timeout+3)^0,f,c
 20585  006DCC  500E               	movf	i2c_wait_int@timeout^0,w,c
 20586  006DCE  100F               	iorwf	(i2c_wait_int@timeout+1)^0,w,c
 20587  006DD0  1010               	iorwf	(i2c_wait_int@timeout+2)^0,w,c
 20588  006DD2  1011               	iorwf	(i2c_wait_int@timeout+3)^0,w,c
 20589  006DD4  A4D8               	btfss	status,2,c
 20590  006DD6  D005               	goto	l184
 20591                           
 20592                           ;src/driver/i2c_native.c: 102:    return -4;
 20593  006DD8  0EFF               	movlw	255
 20594  006DDA  6E0F               	movwf	(?_i2c_wait_int+1)^0,c
 20595  006DDC  0EFC               	movlw	252
 20596  006DDE  6E0E               	movwf	?_i2c_wait_int^0,c
 20597  006DE0  0012               	return	
 20598  006DE2                     l184:
 20599                           
 20600                           ;src/driver/i2c_native.c: 98:  while((PIR1bits.SSPIF == 0) && (SSPCON1bits.WCOL == 0)) {
 20601  006DE2  B69E               	btfsc	158,3,c	;volatile
 20602  006DE4  D002               	goto	u10550
 20603  006DE6  AEC6               	btfss	198,7,c	;volatile
 20604  006DE8  D7EA               	goto	l185
 20605  006DEA                     u10550:
 20606                           
 20607                           ;src/driver/i2c_native.c: 107:  if(SSPCON1bits.WCOL != 0) {
 20608  006DEA  AEC6               	btfss	198,7,c	;volatile
 20609  006DEC  D006               	goto	l9231
 20610                           
 20611                           ;src/driver/i2c_native.c: 109:   SSPCON1bits.WCOL = 0;
 20612  006DEE  9EC6               	bcf	198,7,c	;volatile
 20613                           
 20614                           ;src/driver/i2c_native.c: 110:   return -5;
 20615  006DF0  0EFF               	movlw	255
 20616  006DF2  6E0F               	movwf	(?_i2c_wait_int+1)^0,c
 20617  006DF4  0EFB               	movlw	251
 20618  006DF6  6E0E               	movwf	?_i2c_wait_int^0,c
 20619  006DF8  0012               	return	
 20620  006DFA                     l9231:
 20621                           
 20622                           ;src/driver/i2c_native.c: 114:  return 0;
 20623  006DFA  0E00               	movlw	0
 20624  006DFC  6E0F               	movwf	(?_i2c_wait_int+1)^0,c
 20625  006DFE  0E00               	movlw	0
 20626  006E00  6E0E               	movwf	?_i2c_wait_int^0,c
 20627  006E02  0012               	return		;funcret
 20628  006E04                     __end_of_i2c_wait_int:
 20629                           	opt callstack 0
 20630                           
 20631 ;; *************** function _check_ADF5341_status *****************
 20632 ;; Defined at:
 20633 ;;		line 169 in file "src/driver/adf4351.c"
 20634 ;; Parameters:    Size  Location     Type
 20635 ;;  ctx             2   36[BANK0 ] PTR struct adf4351_ctx
 20636 ;;		 -> g_adf4351(55), 
 20637 ;; Auto vars:     Size  Location     Type
 20638 ;;  stat            1   99[COMRAM] unsigned char 
 20639 ;; Return value:  Size  Location     Type
 20640 ;;                  1    wreg      void 
 20641 ;; Registers used:
 20642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20643 ;; Tracked objects:
 20644 ;;		On entry : 3F/0
 20645 ;;		On exit  : 3F/0
 20646 ;;		Unchanged: 0/0
 20647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20648 ;;      Params:         0       2       0       0       0       0       0
 20649 ;;      Locals:         1       0       0       0       0       0       0
 20650 ;;      Temps:          0       3       0       0       0       0       0
 20651 ;;      Totals:         1       5       0       0       0       0       0
 20652 ;;Total ram usage:        6 bytes
 20653 ;; Hardware stack levels used:    1
 20654 ;; Hardware stack levels required when called:   10
 20655 ;; This function calls:
 20656 ;;		_printf
 20657 ;; This function is called by:
 20658 ;;		_main
 20659 ;; This function uses a non-reentrant model
 20660 ;;
 20661                           
 20662                           	psect	text82
 20663  005838                     __ptext82:
 20664                           	opt callstack 0
 20665  005838                     _check_ADF5341_status:
 20666                           	opt callstack 20
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;src/driver/adf4351.c: 169: void check_ADF5341_status(adf4351_ctx* ctx);src/driver/adf43
      +                          51.c: 170: {;src/driver/adf4351.c: 173:  u8 stat = ((*((PIN_ADF_LOCK)->pPORT) & (PIN_ADF
      +                          _LOCK)->mask) != 0);
 20670                           
 20671                           ;incstack = 0
 20672  005838  0ECC               	movlw	low (_PIN_ADF_LOCK_DEF+4)
 20673  00583A  6EF6               	movwf	tblptrl,c
 20674  00583C  0E7B               	movlw	high (_PIN_ADF_LOCK_DEF+4)
 20675  00583E  6EF7               	movwf	tblptrh,c
 20676  005840                     	if	0	;tblptru may be non-zero
 20677  005840                     	endif
 20678  005840                     	if	0	;tblptru may be non-zero
 20679  005840                     	endif
 20680  005840  0008               	tblrd		*
 20681  005842  CFF5 F0A6          	movff	tablat,??_check_ADF5341_status
 20682  005846  0EC8               	movlw	low _PIN_ADF_LOCK_DEF
 20683  005848  6EF6               	movwf	tblptrl,c
 20684  00584A                     	if	1	;There is more than 1 active tblptr byte
 20685  00584A  0E7B               	movlw	high _PIN_ADF_LOCK_DEF
 20686  00584C  6EF7               	movwf	tblptrh,c
 20687  00584E                     	endif
 20688  00584E                     	if	0	;There are less than 3 active tblptr bytes
 20689  00584E                     	endif
 20690  00584E  0009               	tblrd		*+
 20691  005850  CFF5 F0A7          	movff	tablat,??_check_ADF5341_status+1
 20692  005854  0009               	tblrd		*+
 20693  005856  CFF5 F0A8          	movff	tablat,??_check_ADF5341_status+2
 20694  00585A  C0A7  FFD9         	movff	??_check_ADF5341_status+1,fsr2l
 20695  00585E  C0A8  FFDA         	movff	??_check_ADF5341_status+2,fsr2h
 20696  005862  50DF               	movf	indf2,w,c
 20697  005864  15A6               	andwf	??_check_ADF5341_status& (0+255),w,b
 20698  005866  0900               	iorlw	0
 20699  005868  B4D8               	btfsc	status,2,c
 20700  00586A  D002               	goto	u14030
 20701  00586C  0E01               	movlw	1
 20702  00586E  D001               	goto	u14040
 20703  005870                     u14030:
 20704  005870  0E00               	movlw	0
 20705  005872                     u14040:
 20706  005872  6E64               	movwf	check_ADF5341_status@stat^0,c
 20707                           
 20708                           ; BSR set to: 0
 20709                           ;src/driver/adf4351.c: 175:  if(stat != adf4351_lockstat)
 20710  005874  5070               	movf	_adf4351_lockstat^0,w,c
 20711  005876  1864               	xorwf	check_ADF5341_status@stat^0,w,c
 20712  005878  B4D8               	btfsc	status,2,c
 20713  00587A  0012               	return	
 20714                           
 20715                           ; BSR set to: 0
 20716                           ;src/driver/adf4351.c: 176:  {;src/driver/adf4351.c: 177:   if(stat == 0)
 20717  00587C  5064               	movf	check_ADF5341_status@stat^0,w,c
 20718  00587E  A4D8               	btfss	status,2,c
 20719  005880  D01F               	goto	l11225
 20720                           
 20721                           ; BSR set to: 0
 20722                           ;src/driver/adf4351.c: 178:   {;src/driver/adf4351.c: 179:    printf("ADF:unlocked\n");
 20723  005882  0EF0               	movlw	low STR_2
 20724  005884  6F97               	movwf	printf@fmt& (0+255),b
 20725  005886  0E7E               	movlw	high STR_2
 20726  005888  6F98               	movwf	(printf@fmt+1)& (0+255),b
 20727  00588A  EC30  F03A         	call	_printf	;wreg free
 20728                           
 20729                           ; BSR set to: 2
 20730                           ;src/driver/adf4351.c: 180:    *((PIN_LED_ADF_LOCK)->pPORT) |= (PIN_LED_ADF_LOCK)->mask;
 20731  00588E  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 20732  005890  6EF6               	movwf	tblptrl,c
 20733  005892  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 20734  005894  6EF7               	movwf	tblptrh,c
 20735  005896                     	if	0	;tblptru may be non-zero
 20736  005896                     	endif
 20737  005896                     	if	0	;tblptru may be non-zero
 20738  005896                     	endif
 20739  005896  0008               	tblrd		*
 20740  005898  CFF5 F0A6          	movff	tablat,??_check_ADF5341_status
 20741  00589C  0E91               	movlw	low _PIN_LED_ADF_LOCK_DEF
 20742  00589E  6EF6               	movwf	tblptrl,c
 20743  0058A0                     	if	1	;There is more than 1 active tblptr byte
 20744  0058A0  0E7B               	movlw	high _PIN_LED_ADF_LOCK_DEF
 20745  0058A2  6EF7               	movwf	tblptrh,c
 20746  0058A4                     	endif
 20747  0058A4                     	if	0	;There are less than 3 active tblptr bytes
 20748  0058A4                     	endif
 20749  0058A4  0009               	tblrd		*+
 20750  0058A6  CFF5 F0A7          	movff	tablat,??_check_ADF5341_status+1
 20751  0058AA  0009               	tblrd		*+
 20752  0058AC  CFF5 F0A8          	movff	tablat,??_check_ADF5341_status+2
 20753  0058B0  C0A7  FFD9         	movff	??_check_ADF5341_status+1,fsr2l
 20754  0058B4  C0A8  FFDA         	movff	??_check_ADF5341_status+2,fsr2h
 20755  0058B8  0100               	movlb	0	; () banked
 20756  0058BA  51A6               	movf	??_check_ADF5341_status& (0+255),w,b
 20757  0058BC  12DF               	iorwf	indf2,f,c
 20758                           
 20759                           ;src/driver/adf4351.c: 181:   }
 20760  0058BE  D01F               	goto	l11229
 20761  0058C0                     l11225:
 20762                           
 20763                           ; BSR set to: 0
 20764                           ;src/driver/adf4351.c: 183:   {;src/driver/adf4351.c: 184:    printf("ADF:locked\n");
 20765  0058C0  0E3D               	movlw	low STR_3
 20766  0058C2  6F97               	movwf	printf@fmt& (0+255),b
 20767  0058C4  0E7F               	movlw	high STR_3
 20768  0058C6  6F98               	movwf	(printf@fmt+1)& (0+255),b
 20769  0058C8  EC30  F03A         	call	_printf	;wreg free
 20770                           
 20771                           ; BSR set to: 2
 20772                           ;src/driver/adf4351.c: 185:    *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask
      +                          ;
 20773  0058CC  0E95               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
 20774  0058CE  6EF6               	movwf	tblptrl,c
 20775  0058D0  0E7B               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
 20776  0058D2  6EF7               	movwf	tblptrh,c
 20777  0058D4                     	if	0	;tblptru may be non-zero
 20778  0058D4                     	endif
 20779  0058D4                     	if	0	;tblptru may be non-zero
 20780  0058D4                     	endif
 20781  0058D4  0008               	tblrd		*
 20782  0058D6  50F5               	movf	tablat,w,c
 20783  0058D8  0AFF               	xorlw	255
 20784  0058DA  0100               	movlb	0	; () banked
 20785  0058DC  6FA6               	movwf	??_check_ADF5341_status& (0+255),b
 20786  0058DE  0E91               	movlw	low _PIN_LED_ADF_LOCK_DEF
 20787  0058E0  6EF6               	movwf	tblptrl,c
 20788  0058E2                     	if	1	;There is more than 1 active tblptr byte
 20789  0058E2  0E7B               	movlw	high _PIN_LED_ADF_LOCK_DEF
 20790  0058E4  6EF7               	movwf	tblptrh,c
 20791  0058E6                     	endif
 20792  0058E6                     	if	0	;There are less than 3 active tblptr bytes
 20793  0058E6                     	endif
 20794  0058E6  0009               	tblrd		*+
 20795  0058E8  CFF5 F0A7          	movff	tablat,??_check_ADF5341_status+1
 20796  0058EC  0009               	tblrd		*+
 20797  0058EE  CFF5 F0A8          	movff	tablat,??_check_ADF5341_status+2
 20798  0058F2  C0A7  FFD9         	movff	??_check_ADF5341_status+1,fsr2l
 20799  0058F6  C0A8  FFDA         	movff	??_check_ADF5341_status+2,fsr2h
 20800  0058FA  51A6               	movf	??_check_ADF5341_status& (0+255),w,b
 20801  0058FC  16DF               	andwf	indf2,f,c
 20802  0058FE                     l11229:
 20803                           
 20804                           ; BSR set to: 0
 20805                           ;src/driver/adf4351.c: 187:   adf4351_lockstat = stat;
 20806  0058FE  C064  F070         	movff	check_ADF5341_status@stat,_adf4351_lockstat
 20807                           
 20808                           ; BSR set to: 0
 20809  005902  0012               	return		;funcret
 20810  005904                     __end_of_check_ADF5341_status:
 20811                           	opt callstack 0
 20812                           
 20813 ;; *************** function _printf *****************
 20814 ;; Defined at:
 20815 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/printf.c"
 20816 ;; Parameters:    Size  Location     Type
 20817 ;;  fmt             2   23[BANK0 ] PTR const unsigned char 
 20818 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 20819 ;;		 -> STR_91(26), STR_90(15), STR_40(18), STR_37(17), 
 20820 ;;		 -> STR_36(21), STR_35(28), STR_34(11), STR_33(13), 
 20821 ;;		 -> STR_32(27), STR_31(20), STR_30(13), STR_29(9), 
 20822 ;;		 -> STR_28(12), STR_27(15), STR_26(9), STR_25(11), 
 20823 ;;		 -> STR_24(15), STR_23(32), STR_22(16), STR_21(18), 
 20824 ;;		 -> STR_20(16), STR_19(15), STR_18(32), STR_17(16), 
 20825 ;;		 -> STR_16(18), STR_15(16), STR_14(15), STR_13(32), 
 20826 ;;		 -> STR_12(16), STR_11(18), STR_10(20), STR_9(18), 
 20827 ;;		 -> STR_8(8), STR_7(39), STR_6(25), STR_5(25), 
 20828 ;;		 -> STR_4(20), STR_3(12), STR_2(14), STR_1(24), 
 20829 ;; Auto vars:     Size  Location     Type
 20830 ;;  ret             2    0        int 
 20831 ;;  ap              1   35[BANK0 ] PTR void [1]
 20832 ;;		 -> ?_printf(2), 
 20833 ;; Return value:  Size  Location     Type
 20834 ;;                  2   23[BANK0 ] int 
 20835 ;; Registers used:
 20836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20837 ;; Tracked objects:
 20838 ;;		On entry : 3F/0
 20839 ;;		On exit  : 3F/2
 20840 ;;		Unchanged: 0/0
 20841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20842 ;;      Params:         0      10       0       0       0       0       0
 20843 ;;      Locals:         0       3       0       0       0       0       0
 20844 ;;      Temps:          0       0       0       0       0       0       0
 20845 ;;      Totals:         0      13       0       0       0       0       0
 20846 ;;Total ram usage:       13 bytes
 20847 ;; Hardware stack levels used:    1
 20848 ;; Hardware stack levels required when called:    9
 20849 ;; This function calls:
 20850 ;;		_vfprintf
 20851 ;; This function is called by:
 20852 ;;		_adf4351_set_freq
 20853 ;;		_check_ADF5341_status
 20854 ;;		_lnb_configure
 20855 ;;		_lnb_do_configure
 20856 ;;		_check_LNB_status
 20857 ;;		_set_reg24
 20858 ;;		_set_reg25
 20859 ;;		_set_reg26
 20860 ;;		_si5328_init
 20861 ;;		_si5328_set_freq
 20862 ;;		_si5328_perform_ical
 20863 ;;		_si5328_checkGPS
 20864 ;;		_check_si5328_status
 20865 ;;		_write_regset
 20866 ;;		_lcd_init
 20867 ;;		_print_string
 20868 ;;		_send_UBX_string
 20869 ;;		_setADF4351frequency
 20870 ;;		_secret_settings
 20871 ;; This function uses a non-reentrant model
 20872 ;;
 20873                           
 20874                           	psect	text83
 20875  007460                     __ptext83:
 20876                           	opt callstack 0
 20877  007460                     _printf:
 20878                           	opt callstack 19
 20879                           
 20880                           ; BSR set to: 0
 20881                           
 20882                           ; BSR set to: 0
 20883                           ;incstack = 0
 20884  007460  0E99               	movlw	low (?_printf+2)
 20885  007462  6FA3               	movwf	printf@ap& (0+255),b
 20886                           
 20887                           ; BSR set to: 0
 20888  007464  0E00               	movlw	0
 20889  007466  6E5D               	movwf	vfprintf@fp^0,c
 20890  007468  0E00               	movlw	0
 20891  00746A  6E5E               	movwf	(vfprintf@fp+1)^0,c
 20892  00746C  C097  F05F         	movff	printf@fmt,vfprintf@fmt
 20893  007470  C098  F060         	movff	printf@fmt+1,vfprintf@fmt+1
 20894  007474  0EA3               	movlw	low printf@ap
 20895  007476  6E61               	movwf	vfprintf@ap^0,c
 20896  007478  EC48  F036         	call	_vfprintf	;wreg free
 20897                           
 20898                           ; BSR set to: 2
 20899  00747C  0012               	return		;funcret
 20900  00747E                     __end_of_printf:
 20901                           	opt callstack 0
 20902                           
 20903 ;; *************** function _vfprintf *****************
 20904 ;; Defined at:
 20905 ;;		line 1368 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 20906 ;; Parameters:    Size  Location     Type
 20907 ;;  fp              2   92[COMRAM] PTR struct _IO_FILE
 20908 ;;		 -> NULL(0), 
 20909 ;;  fmt             2   94[COMRAM] PTR const unsigned char 
 20910 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 20911 ;;		 -> STR_91(26), STR_90(15), STR_40(18), STR_37(17), 
 20912 ;;		 -> STR_36(21), STR_35(28), STR_34(11), STR_33(13), 
 20913 ;;		 -> STR_32(27), STR_31(20), STR_30(13), STR_29(9), 
 20914 ;;		 -> STR_28(12), STR_27(15), STR_26(9), STR_25(11), 
 20915 ;;		 -> STR_24(15), STR_23(32), STR_22(16), STR_21(18), 
 20916 ;;		 -> STR_20(16), STR_19(15), STR_18(32), STR_17(16), 
 20917 ;;		 -> STR_16(18), STR_15(16), STR_14(15), STR_13(32), 
 20918 ;;		 -> STR_12(16), STR_11(18), STR_10(20), STR_9(18), 
 20919 ;;		 -> STR_8(8), STR_7(39), STR_6(25), STR_5(25), 
 20920 ;;		 -> STR_4(20), STR_3(12), STR_2(14), STR_1(24), 
 20921 ;;  ap              1   96[COMRAM] PTR PTR void 
 20922 ;;		 -> printf@ap(1), 
 20923 ;; Auto vars:     Size  Location     Type
 20924 ;;  cfmt            2   97[COMRAM] PTR unsigned char 
 20925 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 20926 ;;		 -> STR_91(26), STR_90(15), STR_40(18), STR_37(17), 
 20927 ;;		 -> STR_36(21), STR_35(28), STR_34(11), STR_33(13), 
 20928 ;;		 -> STR_32(27), STR_31(20), STR_30(13), STR_29(9), 
 20929 ;;		 -> STR_28(12), STR_27(15), STR_26(9), STR_25(11), 
 20930 ;;		 -> STR_24(15), STR_23(32), STR_22(16), STR_21(18), 
 20931 ;;		 -> STR_20(16), STR_19(15), STR_18(32), STR_17(16), 
 20932 ;;		 -> STR_16(18), STR_15(16), STR_14(15), STR_13(32), 
 20933 ;;		 -> STR_12(16), STR_11(18), STR_10(20), STR_9(18), 
 20934 ;;		 -> STR_8(8), STR_7(39), STR_6(25), STR_5(25), 
 20935 ;;		 -> STR_4(20), STR_3(12), STR_2(14), STR_1(24), 
 20936 ;; Return value:  Size  Location     Type
 20937 ;;                  2   92[COMRAM] int 
 20938 ;; Registers used:
 20939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20940 ;; Tracked objects:
 20941 ;;		On entry : 3F/0
 20942 ;;		On exit  : 3F/2
 20943 ;;		Unchanged: 0/0
 20944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20945 ;;      Params:         5       0       0       0       0       0       0
 20946 ;;      Locals:         2       0       0       0       0       0       0
 20947 ;;      Temps:          0       0       0       0       0       0       0
 20948 ;;      Totals:         7       0       0       0       0       0       0
 20949 ;;Total ram usage:        7 bytes
 20950 ;; Hardware stack levels used:    1
 20951 ;; Hardware stack levels required when called:    8
 20952 ;; This function calls:
 20953 ;;		_vfpfcnvrt
 20954 ;; This function is called by:
 20955 ;;		_printf
 20956 ;; This function uses a non-reentrant model
 20957 ;;
 20958                           
 20959                           	psect	text84
 20960  006C90                     __ptext84:
 20961                           	opt callstack 0
 20962  006C90                     _vfprintf:
 20963                           	opt callstack 19
 20964                           
 20965                           ; BSR set to: 0
 20966                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
 20967                           
 20968                           ; BSR set to: 2
 20969                           ;incstack = 0
 20970  006C90  C05F  F062         	movff	vfprintf@fmt,vfprintf@cfmt
 20971  006C94  C060  F063         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 20972                           
 20973                           ; BSR set to: 0
 20974                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
 20975  006C98  0E00               	movlw	0
 20976  006C9A  0102               	movlb	2	; () banked
 20977  006C9C  6FAF               	movwf	(_nout+1)& (0+255),b
 20978  006C9E  0E00               	movlw	0
 20979  006CA0  6FAE               	movwf	_nout& (0+255),b
 20980                           
 20981                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 20982  006CA2  D00F               	goto	l10027
 20983  006CA4                     l10025:
 20984                           
 20985                           ; BSR set to: 2
 20986                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
 20987  006CA4  C05D  F04C         	movff	vfprintf@fp,vfpfcnvrt@fp
 20988  006CA8  C05E  F04D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
 20989  006CAC  0E62               	movlw	low vfprintf@cfmt
 20990  006CAE  6E4E               	movwf	vfpfcnvrt@fmt^0,c
 20991  006CB0  C061  F04F         	movff	vfprintf@ap,vfpfcnvrt@ap
 20992  006CB4  EC00  F00A         	call	_vfpfcnvrt	;wreg free
 20993  006CB8  504C               	movf	?_vfpfcnvrt^0,w,c
 20994  006CBA  0102               	movlb	2	; () banked
 20995  006CBC  27AE               	addwf	_nout& (0+255),f,b
 20996  006CBE  504D               	movf	(?_vfpfcnvrt+1)^0,w,c
 20997  006CC0  23AF               	addwfc	(_nout+1)& (0+255),f,b
 20998  006CC2                     l10027:
 20999                           
 21000                           ; BSR set to: 2
 21001                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 21002  006CC2  C062  FFF6         	movff	vfprintf@cfmt,tblptrl
 21003  006CC6  C063  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 21004  006CCA                     	if	0	;tblptru may be non-zero
 21005  006CCA                     	endif
 21006  006CCA                     	if	0	;tblptru may be non-zero
 21007  006CCA                     	endif
 21008  006CCA  0008               	tblrd		*
 21009  006CCC  50F5               	movf	tablat,w,c
 21010  006CCE  0900               	iorlw	0
 21011  006CD0  A4D8               	btfss	status,2,c
 21012  006CD2  D7E8               	goto	l10025
 21013                           
 21014                           ; BSR set to: 2
 21015                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1378:     return nout;
 21016  006CD4  C2AE  F05D         	movff	_nout,?_vfprintf
 21017  006CD8  C2AF  F05E         	movff	_nout+1,?_vfprintf+1
 21018                           
 21019                           ; BSR set to: 2
 21020  006CDC  0012               	return		;funcret
 21021  006CDE                     __end_of_vfprintf:
 21022                           	opt callstack 0
 21023                           
 21024 ;; *************** function _vfpfcnvrt *****************
 21025 ;; Defined at:
 21026 ;;		line 670 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 21027 ;; Parameters:    Size  Location     Type
 21028 ;;  fp              2   75[COMRAM] PTR struct _IO_FILE
 21029 ;;		 -> NULL(0), 
 21030 ;;  fmt             1   77[COMRAM] PTR PTR unsigned char 
 21031 ;;		 -> vfprintf@cfmt(2), 
 21032 ;;  ap              1   78[COMRAM] PTR PTR void 
 21033 ;;		 -> printf@ap(1), 
 21034 ;; Auto vars:     Size  Location     Type
 21035 ;;  llu             8   14[BANK0 ] unsigned long long 
 21036 ;;  ll              8    6[BANK0 ] long long 
 21037 ;;  f               4    0        long long 
 21038 ;;  vp              3    0        PTR void 
 21039 ;;  ct              3    0        unsigned char [3]
 21040 ;;  done            2    2[BANK0 ] int 
 21041 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 21042 ;;		 -> ?_printf(2), CalculateGridSquare@grid(7), STR_89(14), STR_88(7), 
 21043 ;;		 -> STR_87(6), STR_86(12), STR_85(17), itoa@buffer(12), 
 21044 ;;		 -> STR_84(5), STR_83(5), STR_82(7), STR_81(7), 
 21045 ;;		 -> STR_80(8), STR_79(5), GPS_lon(15), GPS_lat(15), 
 21046 ;;		 -> STR_78(4), STR_77(4), STR_76(6), STR_75(5), 
 21047 ;;		 -> STR_74(4), STR_73(4), STR_72(10), GPS_time(9), 
 21048 ;;		 -> STR_71(17), STR_70(17), STR_69(17), STR_68(7), 
 21049 ;;		 -> STR_67(7), STR_66(17), STR_65(17), STR_64(17), 
 21050 ;;		 -> STR_63(7), STR_62(7), STR_61(17), STR_60(17), 
 21051 ;;		 -> STR_59(17), STR_58(7), STR_57(7), STR_56(6), 
 21052 ;;		 -> STR_55(6), STR_54(17), STR_53(5), STR_52(5), 
 21053 ;;		 -> STR_51(5), STR_50(5), STR_49(3), STR_48(17), 
 21054 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 21055 ;;		 -> STR_43(17), STR_42(4), STR_41(17), ssd1306_setpos@x(1), 
 21056 ;;		 -> STR_39(17), STR_38(17), 
 21057 ;;  i               2    0        int 
 21058 ;;  c               1   22[BANK0 ] unsigned char 
 21059 ;; Return value:  Size  Location     Type
 21060 ;;                  2   75[COMRAM] int 
 21061 ;; Registers used:
 21062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21063 ;; Tracked objects:
 21064 ;;		On entry : 3D/2
 21065 ;;		On exit  : 0/0
 21066 ;;		Unchanged: 0/0
 21067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21068 ;;      Params:         4       0       0       0       0       0       0
 21069 ;;      Locals:         0      23       0       0       0       0       0
 21070 ;;      Temps:         13       0       0       0       0       0       0
 21071 ;;      Totals:        17      23       0       0       0       0       0
 21072 ;;Total ram usage:       40 bytes
 21073 ;; Hardware stack levels used:    1
 21074 ;; Hardware stack levels required when called:    7
 21075 ;; This function calls:
 21076 ;;		_atoi
 21077 ;;		_dtoa
 21078 ;;		_fputc
 21079 ;;		_isdigit
 21080 ;;		_stoa
 21081 ;;		_strncmp
 21082 ;;		_xtoa
 21083 ;; This function is called by:
 21084 ;;		_vfprintf
 21085 ;; This function uses a non-reentrant model
 21086 ;;
 21087                           
 21088                           	psect	text85
 21089  001400                     __ptext85:
 21090                           	opt callstack 0
 21091  001400                     _vfpfcnvrt:
 21092                           	opt callstack 19
 21093                           
 21094                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
 21095                           
 21096                           ; BSR set to: 2
 21097                           ;incstack = 0
 21098  001400  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21099  001402  6ED9               	movwf	fsr2l,c
 21100  001404  6ADA               	clrf	fsr2h,c
 21101  001406  CFDE FFF6          	movff	postinc2,tblptrl
 21102  00140A  CFDD FFF7          	movff	postdec2,tblptrh
 21103  00140E                     	if	0	;tblptru may be non-zero
 21104  00140E                     	endif
 21105  00140E                     	if	0	;tblptru may be non-zero
 21106  00140E                     	endif
 21107  00140E  0008               	tblrd		*
 21108  001410  50F5               	movf	tablat,w,c
 21109  001412  0A25               	xorlw	37
 21110  001414  A4D8               	btfss	status,2,c
 21111  001416  D2AE               	goto	l10001
 21112                           
 21113                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
 21114  001418  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21115  00141A  6ED9               	movwf	fsr2l,c
 21116  00141C  6ADA               	clrf	fsr2h,c
 21117  00141E  2ADE               	incf	postinc2,f,c
 21118  001420  0E00               	movlw	0
 21119  001422  22DD               	addwfc	postdec2,f,c
 21120                           
 21121                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
 21122  001424  0E00               	movlw	0
 21123  001426  0100               	movlb	0	; () banked
 21124  001428  6FC6               	movwf	(_width+1)& (0+255),b
 21125  00142A  0E00               	movlw	0
 21126  00142C  6FC5               	movwf	_width& (0+255),b
 21127  00142E  C0C5  F067         	movff	_width,_flags
 21128  001432  C0C6  F068         	movff	_width+1,_flags+1
 21129                           
 21130                           ; BSR set to: 0
 21131                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
 21132  001436  6865               	setf	_prec^0,c
 21133  001438  6866               	setf	(_prec+1)^0,c
 21134                           
 21135                           ; BSR set to: 0
 21136                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 688:         done = 0;
 21137  00143A  0E00               	movlw	0
 21138  00143C  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 21139  00143E  0E00               	movlw	0
 21140  001440  D013               	goto	L14
 21141  001442                     l9873:
 21142                           
 21143                           ; BSR set to: 0
 21144                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 692:                     flag
      +                          s |= (1 << 0);
 21145  001442  8067               	bsf	_flags^0,0,c
 21146  001444                     l9875:
 21147                           
 21148                           ; BSR set to: 0
 21149                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 693:                     ++*f
      +                          mt;
 21150  001444  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21151  001446  6ED9               	movwf	fsr2l,c
 21152  001448  6ADA               	clrf	fsr2h,c
 21153  00144A  2ADE               	incf	postinc2,f,c
 21154  00144C  0E00               	movlw	0
 21155  00144E  22DD               	addwfc	postdec2,f,c
 21156                           
 21157                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 694:                     brea
      +                          k;
 21158  001450  D02D               	goto	l9899
 21159  001452                     l9877:
 21160                           
 21161                           ; BSR set to: 0
 21162                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 696:                     flag
      +                          s |= (1 << 1);
 21163  001452  8267               	bsf	_flags^0,1,c
 21164  001454  D7F7               	goto	l9875
 21165  001456                     l9881:
 21166                           
 21167                           ; BSR set to: 0
 21168                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 700:                     flag
      +                          s |= (1 << 2);
 21169  001456  8467               	bsf	_flags^0,2,c
 21170  001458  D7F5               	goto	l9875
 21171  00145A                     l9885:
 21172                           
 21173                           ; BSR set to: 0
 21174                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 704:                     flag
      +                          s |= (1 << 3);
 21175  00145A  8667               	bsf	_flags^0,3,c
 21176  00145C  D7F3               	goto	l9875
 21177  00145E                     l9889:
 21178                           
 21179                           ; BSR set to: 0
 21180                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 708:                     flag
      +                          s |= (1 << 4);
 21181  00145E  8867               	bsf	_flags^0,4,c
 21182  001460  D7F1               	goto	l9875
 21183  001462                     l9893:
 21184                           
 21185                           ; BSR set to: 0
 21186                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 712:                     done
      +                           = 1;
 21187  001462  0E00               	movlw	0
 21188  001464  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 21189  001466  0E01               	movlw	1
 21190  001468                     L14:
 21191  001468  6F82               	movwf	vfpfcnvrt@done& (0+255),b
 21192                           
 21193                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 713:                     brea
      +                          k;
 21194  00146A  D020               	goto	l9899
 21195  00146C                     l9897:
 21196                           
 21197                           ; BSR set to: 0
 21198  00146C  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21199  00146E  6ED9               	movwf	fsr2l,c
 21200  001470  6ADA               	clrf	fsr2h,c
 21201  001472  CFDE FFF6          	movff	postinc2,tblptrl
 21202  001476  CFDD FFF7          	movff	postdec2,tblptrh
 21203  00147A                     	if	0	;tblptru may be non-zero
 21204  00147A                     	endif
 21205  00147A                     	if	0	;tblptru may be non-zero
 21206  00147A                     	endif
 21207  00147A  0008               	tblrd		*
 21208  00147C  50F5               	movf	tablat,w,c
 21209  00147E  6E50               	movwf	??_vfpfcnvrt^0,c
 21210  001480  6A51               	clrf	(??_vfpfcnvrt+1)^0,c
 21211                           
 21212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21213                           ; Switch size 1, requested type "simple"
 21214                           ; Number of cases is 1, Range of values is 0 to 0
 21215                           ; switch strategies available:
 21216                           ; Name         Instructions Cycles
 21217                           ; simple_byte            4     3 (average)
 21218                           ;	Chosen strategy is simple_byte
 21219  001482  5051               	movf	(??_vfpfcnvrt+1)^0,w,c
 21220  001484  0A00               	xorlw	0	; case 0
 21221  001486  A4D8               	btfss	status,2,c
 21222  001488  D7EC               	goto	l9893
 21223                           
 21224                           ; BSR set to: 0
 21225                           ; Switch size 1, requested type "simple"
 21226                           ; Number of cases is 5, Range of values is 32 to 48
 21227                           ; switch strategies available:
 21228                           ; Name         Instructions Cycles
 21229                           ; simple_byte           16     9 (average)
 21230                           ;	Chosen strategy is simple_byte
 21231  00148A  5050               	movf	??_vfpfcnvrt^0,w,c
 21232  00148C  0A20               	xorlw	32	; case 32
 21233  00148E  B4D8               	btfsc	status,2,c
 21234  001490  D7E4               	goto	l9885
 21235  001492  0A03               	xorlw	3	; case 35
 21236  001494  B4D8               	btfsc	status,2,c
 21237  001496  D7E3               	goto	l9889
 21238  001498  0A08               	xorlw	8	; case 43
 21239  00149A  B4D8               	btfsc	status,2,c
 21240  00149C  D7DC               	goto	l9881
 21241  00149E  0A06               	xorlw	6	; case 45
 21242  0014A0  B4D8               	btfsc	status,2,c
 21243  0014A2  D7CF               	goto	l9873
 21244  0014A4  0A1D               	xorlw	29	; case 48
 21245  0014A6  B4D8               	btfsc	status,2,c
 21246  0014A8  D7D4               	goto	l9877
 21247  0014AA  D7DB               	goto	l9893
 21248  0014AC                     l9899:
 21249                           
 21250                           ; BSR set to: 0
 21251                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
 21252  0014AC  5182               	movf	vfpfcnvrt@done& (0+255),w,b
 21253  0014AE  1183               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
 21254  0014B0  B4D8               	btfsc	status,2,c
 21255  0014B2  D7DC               	goto	l9897
 21256                           
 21257                           ; BSR set to: 0
 21258                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 716:         if (flags & (1 <
      +                          < 0)) {
 21259  0014B4  B067               	btfsc	_flags^0,0,c
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 717:             flags &= ~(1
      +                           << 1);
 21263  0014B6  9267               	bcf	_flags^0,1,c
 21264                           
 21265                           ; BSR set to: 0
 21266                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 723:         if ((*fmt)[0] ==
      +                           '*') {
 21267  0014B8  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21268  0014BA  6ED9               	movwf	fsr2l,c
 21269  0014BC  6ADA               	clrf	fsr2h,c
 21270  0014BE  CFDE FFF6          	movff	postinc2,tblptrl
 21271  0014C2  CFDD FFF7          	movff	postdec2,tblptrh
 21272  0014C6                     	if	0	;tblptru may be non-zero
 21273  0014C6                     	endif
 21274  0014C6                     	if	0	;tblptru may be non-zero
 21275  0014C6                     	endif
 21276  0014C6  0008               	tblrd		*
 21277  0014C8  50F5               	movf	tablat,w,c
 21278  0014CA  0A2A               	xorlw	42
 21279  0014CC  A4D8               	btfss	status,2,c
 21280  0014CE  D01A               	goto	l9913
 21281                           
 21282                           ; BSR set to: 0
 21283                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 724:             ++*fmt;
 21284  0014D0  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21285  0014D2  6ED9               	movwf	fsr2l,c
 21286  0014D4  6ADA               	clrf	fsr2h,c
 21287  0014D6  2ADE               	incf	postinc2,f,c
 21288  0014D8  0E00               	movlw	0
 21289  0014DA  22DD               	addwfc	postdec2,f,c
 21290                           
 21291                           ; BSR set to: 0
 21292                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 725:             width = (*(i
      +                          nt *)__va_arg(*(int **)ap, (int)0));
 21293  0014DC  504F               	movf	vfpfcnvrt@ap^0,w,c
 21294  0014DE  6ED9               	movwf	fsr2l,c
 21295  0014E0  6ADA               	clrf	fsr2h,c
 21296  0014E2  0E02               	movlw	2
 21297  0014E4  26DF               	addwf	indf2,f,c
 21298  0014E6  5CDF               	subwf	indf2,w,c
 21299  0014E8  6ED9               	movwf	fsr2l,c
 21300  0014EA  6ADA               	clrf	fsr2h,c
 21301  0014EC  CFDE F0C5          	movff	postinc2,_width
 21302  0014F0  CFDE F0C6          	movff	postinc2,_width+1
 21303                           
 21304                           ; BSR set to: 0
 21305                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 726:             if (width < 
      +                          0) {
 21306  0014F4  AFC6               	btfss	(_width+1)& (0+255),7,b
 21307  0014F6  D03D               	goto	u11950
 21308                           
 21309                           ; BSR set to: 0
 21310                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 727:                 flags |=
      +                           (1 << 0);
 21311  0014F8  8067               	bsf	_flags^0,0,c
 21312                           
 21313                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 728:                 width = 
      +                          -width;
 21314  0014FA  6DC5               	negf	_width& (0+255),b
 21315  0014FC  1FC6               	comf	(_width+1)& (0+255),f,b
 21316  0014FE  B0D8               	btfsc	status,0,c
 21317  001500  2BC6               	incf	(_width+1)& (0+255),f,b
 21318  001502  D037               	goto	u11950
 21319  001504                     l9913:
 21320                           
 21321                           ; BSR set to: 0
 21322                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 731:             width = atoi
      +                          (*fmt);
 21323  001504  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21324  001506  6ED9               	movwf	fsr2l,c
 21325  001508  6ADA               	clrf	fsr2h,c
 21326  00150A  CFDE F01B          	movff	postinc2,atoi@s
 21327  00150E  CFDD F01C          	movff	postdec2,atoi@s+1
 21328  001512  EC57  F021         	call	_atoi	;wreg free
 21329  001516  C01B  F0C5         	movff	?_atoi,_width
 21330  00151A  C01C  F0C6         	movff	?_atoi+1,_width+1
 21331                           
 21332                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 732:             while ((0 ? 
      +                          isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 21333  00151E  D006               	goto	l9917
 21334  001520                     l9915:
 21335                           
 21336                           ; BSR set to: 0
 21337                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 733:                 ++*fmt;
 21338  001520  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21339  001522  6ED9               	movwf	fsr2l,c
 21340  001524  6ADA               	clrf	fsr2h,c
 21341  001526  2ADE               	incf	postinc2,f,c
 21342  001528  0E00               	movlw	0
 21343  00152A  22DD               	addwfc	postdec2,f,c
 21344  00152C                     l9917:
 21345  00152C  0ED0               	movlw	208
 21346  00152E  6E50               	movwf	??_vfpfcnvrt^0,c
 21347  001530  0EFF               	movlw	255
 21348  001532  6E51               	movwf	(??_vfpfcnvrt+1)^0,c
 21349  001534  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21350  001536  6ED9               	movwf	fsr2l,c
 21351  001538  6ADA               	clrf	fsr2h,c
 21352  00153A  CFDE FFF6          	movff	postinc2,tblptrl
 21353  00153E  CFDD FFF7          	movff	postdec2,tblptrh
 21354  001542                     	if	0	;tblptru may be non-zero
 21355  001542                     	endif
 21356  001542                     	if	0	;tblptru may be non-zero
 21357  001542                     	endif
 21358  001542  0008               	tblrd		*
 21359  001544  50F5               	movf	tablat,w,c
 21360  001546  6E52               	movwf	(??_vfpfcnvrt+2)^0,c
 21361  001548  6A53               	clrf	(??_vfpfcnvrt+3)^0,c
 21362  00154A  5050               	movf	??_vfpfcnvrt^0,w,c
 21363  00154C  2652               	addwf	(??_vfpfcnvrt+2)^0,f,c
 21364  00154E  5051               	movf	(??_vfpfcnvrt+1)^0,w,c
 21365  001550  2253               	addwfc	(??_vfpfcnvrt+3)^0,f,c
 21366  001552  5053               	movf	(??_vfpfcnvrt+3)^0,w,c
 21367  001554  E106               	bnz	u11930
 21368  001556  0E0A               	movlw	10
 21369  001558  5C52               	subwf	(??_vfpfcnvrt+2)^0,w,c
 21370  00155A  B0D8               	btfsc	status,0,c
 21371  00155C  D002               	goto	u11930
 21372  00155E  0E01               	movlw	1
 21373  001560  D001               	goto	u11940
 21374  001562                     u11930:
 21375  001562  0E00               	movlw	0
 21376  001564                     u11940:
 21377  001564  0100               	movlb	0	; () banked
 21378  001566  6F84               	movwf	_vfpfcnvrt$3123& (0+255),b
 21379  001568  6B85               	clrf	(_vfpfcnvrt$3123+1)& (0+255),b
 21380                           
 21381                           ; BSR set to: 0
 21382  00156A  5184               	movf	_vfpfcnvrt$3123& (0+255),w,b
 21383  00156C  1185               	iorwf	(_vfpfcnvrt$3123+1)& (0+255),w,b
 21384  00156E  A4D8               	btfss	status,2,c
 21385  001570  D7D7               	goto	l9915
 21386  001572                     u11950:
 21387                           
 21388                           ; BSR set to: 0
 21389                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 825:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
 21390  001572  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21391  001574  6ED9               	movwf	fsr2l,c
 21392  001576  6ADA               	clrf	fsr2h,c
 21393  001578  CFDE FFF6          	movff	postinc2,tblptrl
 21394  00157C  CFDD FFF7          	movff	postdec2,tblptrh
 21395  001580                     	if	0	;tblptru may be non-zero
 21396  001580                     	endif
 21397  001580                     	if	0	;tblptru may be non-zero
 21398  001580                     	endif
 21399  001580  0008               	tblrd		*
 21400  001582  50F5               	movf	tablat,w,c
 21401  001584  0A64               	xorlw	100
 21402  001586  B4D8               	btfsc	status,2,c
 21403  001588  D00C               	goto	u11970
 21404                           
 21405                           ; BSR set to: 0
 21406  00158A  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21407  00158C  6ED9               	movwf	fsr2l,c
 21408  00158E  6ADA               	clrf	fsr2h,c
 21409  001590  CFDE FFF6          	movff	postinc2,tblptrl
 21410  001594  CFDD FFF7          	movff	postdec2,tblptrh
 21411  001598                     	if	0	;tblptru may be non-zero
 21412  001598                     	endif
 21413  001598                     	if	0	;tblptru may be non-zero
 21414  001598                     	endif
 21415  001598  0008               	tblrd		*
 21416  00159A  50F5               	movf	tablat,w,c
 21417  00159C  0A69               	xorlw	105
 21418  00159E  A4D8               	btfss	status,2,c
 21419  0015A0  D036               	goto	l9935
 21420  0015A2                     u11970:
 21421                           
 21422                           ; BSR set to: 0
 21423                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 827:             ++*fmt;
 21424  0015A2  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21425  0015A4  6ED9               	movwf	fsr2l,c
 21426  0015A6  6ADA               	clrf	fsr2h,c
 21427  0015A8  2ADE               	incf	postinc2,f,c
 21428  0015AA  0E00               	movlw	0
 21429  0015AC  22DD               	addwfc	postdec2,f,c
 21430                           
 21431                           ; BSR set to: 0
 21432                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 828:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
 21433  0015AE  504F               	movf	vfpfcnvrt@ap^0,w,c
 21434  0015B0  6ED9               	movwf	fsr2l,c
 21435  0015B2  6ADA               	clrf	fsr2h,c
 21436  0015B4  50DF               	movf	indf2,w,c
 21437  0015B6  2ADF               	incf	indf2,f,c
 21438  0015B8  2ADF               	incf	indf2,f,c
 21439  0015BA  6ED9               	movwf	fsr2l,c
 21440  0015BC  6ADA               	clrf	fsr2h,c
 21441  0015BE  CFDE F086          	movff	postinc2,vfpfcnvrt@ll
 21442  0015C2  CFDD F087          	movff	postdec2,vfpfcnvrt@ll+1
 21443  0015C6  0E00               	movlw	0
 21444  0015C8  BF87               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 21445  0015CA  0EFF               	movlw	-1
 21446  0015CC  6F88               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 21447  0015CE  6F89               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 21448  0015D0  6F8A               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 21449  0015D2  6F8B               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 21450  0015D4  6F8C               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 21451  0015D6  6F8D               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 21452                           
 21453                           ; BSR set to: 0
 21454                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 830:             return dtoa(
      +                          fp, ll);
 21455  0015D8  C04C  F028         	movff	vfpfcnvrt@fp,dtoa@fp
 21456  0015DC  C04D  F029         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 21457  0015E0  C086  F02A         	movff	vfpfcnvrt@ll,dtoa@d
 21458  0015E4  C087  F02B         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 21459  0015E8  C088  F02C         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 21460  0015EC  C089  F02D         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 21461  0015F0  C08A  F02E         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 21462  0015F4  C08B  F02F         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 21463  0015F8  C08C  F030         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 21464  0015FC  C08D  F031         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 21465  001600  ECED  F018         	call	_dtoa	;wreg free
 21466  001604  C028  F04C         	movff	?_dtoa,?_vfpfcnvrt
 21467  001608  C029  F04D         	movff	?_dtoa+1,?_vfpfcnvrt+1
 21468  00160C  0012               	return	
 21469  00160E                     l9935:
 21470                           
 21471                           ; BSR set to: 0
 21472                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 835:         if (!strncmp(*fm
      +                          t, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", ((sizeof("li")/size
      +                          of("li"[0]))-1))) {
 21473  00160E  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21474  001610  6ED9               	movwf	fsr2l,c
 21475  001612  6ADA               	clrf	fsr2h,c
 21476  001614  CFDE F00E          	movff	postinc2,strncmp@_l
 21477  001618  CFDD F00F          	movff	postdec2,strncmp@_l+1
 21478  00161C  0EF6               	movlw	low STR_96
 21479  00161E  6E10               	movwf	strncmp@_r^0,c
 21480  001620  0E7F               	movlw	high STR_96
 21481  001622  6E11               	movwf	(strncmp@_r+1)^0,c
 21482  001624  0E00               	movlw	0
 21483  001626  6E13               	movwf	(strncmp@n+1)^0,c
 21484  001628  0E02               	movlw	2
 21485  00162A  6E12               	movwf	strncmp@n^0,c
 21486  00162C  EC42  F02E         	call	_strncmp	;wreg free
 21487  001630  500E               	movf	?_strncmp^0,w,c
 21488  001632  100F               	iorwf	(?_strncmp+1)^0,w,c
 21489  001634  B4D8               	btfsc	status,2,c
 21490  001636  D015               	goto	u11990
 21491  001638  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21492  00163A  6ED9               	movwf	fsr2l,c
 21493  00163C  6ADA               	clrf	fsr2h,c
 21494  00163E  CFDE F00E          	movff	postinc2,strncmp@_l
 21495  001642  CFDD F00F          	movff	postdec2,strncmp@_l+1
 21496  001646  0EF9               	movlw	low STR_100
 21497  001648  6E10               	movwf	strncmp@_r^0,c
 21498  00164A  0E7F               	movlw	high STR_100
 21499  00164C  6E11               	movwf	(strncmp@_r+1)^0,c
 21500  00164E  0E00               	movlw	0
 21501  001650  6E13               	movwf	(strncmp@n+1)^0,c
 21502  001652  0E02               	movlw	2
 21503  001654  6E12               	movwf	strncmp@n^0,c
 21504  001656  EC42  F02E         	call	_strncmp	;wreg free
 21505  00165A  500E               	movf	?_strncmp^0,w,c
 21506  00165C  100F               	iorwf	(?_strncmp+1)^0,w,c
 21507  00165E  A4D8               	btfss	status,2,c
 21508  001660  D055               	goto	l9947
 21509  001662                     u11990:
 21510                           
 21511                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 836: ;/opt/microchip/xc8/v2.1
      +                          0/pic/sources/c99/common/doprnt.c: 838:             *fmt += ((sizeof("ld")/sizeof("ld"[0
      +                          ]))-1);
 21512  001662  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21513  001664  6ED9               	movwf	fsr2l,c
 21514  001666  6ADA               	clrf	fsr2h,c
 21515  001668  0E02               	movlw	2
 21516  00166A  26DE               	addwf	postinc2,f,c
 21517  00166C  0E00               	movlw	0
 21518  00166E  22DD               	addwfc	postdec2,f,c
 21519                           
 21520                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 839:             ll = (long l
      +                          ong)(*(long *)__va_arg(*(long **)ap, (long)0));
 21521  001670  504F               	movf	vfpfcnvrt@ap^0,w,c
 21522  001672  6ED9               	movwf	fsr2l,c
 21523  001674  6ADA               	clrf	fsr2h,c
 21524  001676  CFDF F050          	movff	indf2,??_vfpfcnvrt
 21525  00167A  0E04               	movlw	4
 21526  00167C  26DF               	addwf	indf2,f,c
 21527  00167E  5050               	movf	??_vfpfcnvrt^0,w,c
 21528  001680  6ED9               	movwf	fsr2l,c
 21529  001682  6ADA               	clrf	fsr2h,c
 21530  001684  CFDE F051          	movff	postinc2,??_vfpfcnvrt+1
 21531  001688  CFDE F052          	movff	postinc2,??_vfpfcnvrt+2
 21532  00168C  CFDE F053          	movff	postinc2,??_vfpfcnvrt+3
 21533  001690  CFDE F054          	movff	postinc2,??_vfpfcnvrt+4
 21534  001694  C051  F055         	movff	??_vfpfcnvrt+1,??_vfpfcnvrt+5
 21535  001698  C052  F056         	movff	??_vfpfcnvrt+2,??_vfpfcnvrt+6
 21536  00169C  C053  F057         	movff	??_vfpfcnvrt+3,??_vfpfcnvrt+7
 21537  0016A0  C054  F058         	movff	??_vfpfcnvrt+4,??_vfpfcnvrt+8
 21538  0016A4  6A59               	clrf	(??_vfpfcnvrt+9)^0,c
 21539  0016A6  BE58               	btfsc	(??_vfpfcnvrt+8)^0,7,c
 21540  0016A8  6859               	setf	(??_vfpfcnvrt+9)^0,c
 21541  0016AA  C059  F05A         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+10
 21542  0016AE  C059  F05B         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+11
 21543  0016B2  C059  F05C         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+12
 21544  0016B6  C055  F086         	movff	??_vfpfcnvrt+5,vfpfcnvrt@ll
 21545  0016BA  C056  F087         	movff	??_vfpfcnvrt+6,vfpfcnvrt@ll+1
 21546  0016BE  C057  F088         	movff	??_vfpfcnvrt+7,vfpfcnvrt@ll+2
 21547  0016C2  C058  F089         	movff	??_vfpfcnvrt+8,vfpfcnvrt@ll+3
 21548  0016C6  C059  F08A         	movff	??_vfpfcnvrt+9,vfpfcnvrt@ll+4
 21549  0016CA  C05A  F08B         	movff	??_vfpfcnvrt+10,vfpfcnvrt@ll+5
 21550  0016CE  C05B  F08C         	movff	??_vfpfcnvrt+11,vfpfcnvrt@ll+6
 21551  0016D2  C05C  F08D         	movff	??_vfpfcnvrt+12,vfpfcnvrt@ll+7
 21552                           
 21553                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 841:             return dtoa(
      +                          fp, ll);
 21554  0016D6  C04C  F028         	movff	vfpfcnvrt@fp,dtoa@fp
 21555  0016DA  C04D  F029         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 21556  0016DE  C086  F02A         	movff	vfpfcnvrt@ll,dtoa@d
 21557  0016E2  C087  F02B         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 21558  0016E6  C088  F02C         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 21559  0016EA  C089  F02D         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 21560  0016EE  C08A  F02E         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 21561  0016F2  C08B  F02F         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 21562  0016F6  C08C  F030         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 21563  0016FA  C08D  F031         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 21564  0016FE  ECED  F018         	call	_dtoa	;wreg free
 21565  001702  C028  F04C         	movff	?_dtoa,?_vfpfcnvrt
 21566  001706  C029  F04D         	movff	?_dtoa+1,?_vfpfcnvrt+1
 21567  00170A  0012               	return	
 21568  00170C                     l9947:
 21569                           
 21570                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1149:         if (*fmt[0] == 
      +                          's') {
 21571  00170C  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21572  00170E  6ED9               	movwf	fsr2l,c
 21573  001710  6ADA               	clrf	fsr2h,c
 21574  001712  CFDE FFF6          	movff	postinc2,tblptrl
 21575  001716  CFDD FFF7          	movff	postdec2,tblptrh
 21576  00171A                     	if	0	;tblptru may be non-zero
 21577  00171A                     	endif
 21578  00171A                     	if	0	;tblptru may be non-zero
 21579  00171A                     	endif
 21580  00171A  0008               	tblrd		*
 21581  00171C  50F5               	movf	tablat,w,c
 21582  00171E  0A73               	xorlw	115
 21583  001720  A4D8               	btfss	status,2,c
 21584  001722  D021               	goto	l9957
 21585                           
 21586                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1151:             ++*fmt;
 21587  001724  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21588  001726  6ED9               	movwf	fsr2l,c
 21589  001728  6ADA               	clrf	fsr2h,c
 21590  00172A  2ADE               	incf	postinc2,f,c
 21591  00172C  0E00               	movlw	0
 21592  00172E  22DD               	addwfc	postdec2,f,c
 21593                           
 21594                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1152:             cp = (*(cha
      +                          r * *)__va_arg(*(char * **)ap, (char *)0));
 21595  001730  504F               	movf	vfpfcnvrt@ap^0,w,c
 21596  001732  6ED9               	movwf	fsr2l,c
 21597  001734  6ADA               	clrf	fsr2h,c
 21598  001736  0E02               	movlw	2
 21599  001738  26DF               	addwf	indf2,f,c
 21600  00173A  5CDF               	subwf	indf2,w,c
 21601  00173C  6ED9               	movwf	fsr2l,c
 21602  00173E  6ADA               	clrf	fsr2h,c
 21603  001740  CFDE F080          	movff	postinc2,vfpfcnvrt@cp
 21604  001744  CFDE F081          	movff	postinc2,vfpfcnvrt@cp+1
 21605                           
 21606                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1154:             return stoa
      +                          (fp, cp);
 21607  001748  C04C  F013         	movff	vfpfcnvrt@fp,stoa@fp
 21608  00174C  C04D  F014         	movff	vfpfcnvrt@fp+1,stoa@fp+1
 21609  001750  C080  F015         	movff	vfpfcnvrt@cp,stoa@s
 21610  001754  C081  F016         	movff	vfpfcnvrt@cp+1,stoa@s+1
 21611  001758  EC56  F024         	call	_stoa	;wreg free
 21612  00175C  C013  F04C         	movff	?_stoa,?_vfpfcnvrt
 21613  001760  C014  F04D         	movff	?_stoa+1,?_vfpfcnvrt+1
 21614  001764  0012               	return	
 21615  001766                     l9957:
 21616                           
 21617                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1274:         if ((*fmt[0] ==
      +                           'x') || (*fmt[0] == 'X')) {
 21618  001766  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21619  001768  6ED9               	movwf	fsr2l,c
 21620  00176A  6ADA               	clrf	fsr2h,c
 21621  00176C  CFDE FFF6          	movff	postinc2,tblptrl
 21622  001770  CFDD FFF7          	movff	postdec2,tblptrh
 21623  001774                     	if	0	;tblptru may be non-zero
 21624  001774                     	endif
 21625  001774                     	if	0	;tblptru may be non-zero
 21626  001774                     	endif
 21627  001774  0008               	tblrd		*
 21628  001776  50F5               	movf	tablat,w,c
 21629  001778  0A78               	xorlw	120
 21630  00177A  B4D8               	btfsc	status,2,c
 21631  00177C  D00C               	goto	u12020
 21632  00177E  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21633  001780  6ED9               	movwf	fsr2l,c
 21634  001782  6ADA               	clrf	fsr2h,c
 21635  001784  CFDE FFF6          	movff	postinc2,tblptrl
 21636  001788  CFDD FFF7          	movff	postdec2,tblptrh
 21637  00178C                     	if	0	;tblptru may be non-zero
 21638  00178C                     	endif
 21639  00178C                     	if	0	;tblptru may be non-zero
 21640  00178C                     	endif
 21641  00178C  0008               	tblrd		*
 21642  00178E  50F5               	movf	tablat,w,c
 21643  001790  0A58               	xorlw	88
 21644  001792  A4D8               	btfss	status,2,c
 21645  001794  D044               	goto	l9971
 21646  001796                     u12020:
 21647                           
 21648                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1276:             c = (*fmt)[
      +                          0];
 21649  001796  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21650  001798  6ED9               	movwf	fsr2l,c
 21651  00179A  6ADA               	clrf	fsr2h,c
 21652  00179C  CFDE FFF6          	movff	postinc2,tblptrl
 21653  0017A0  CFDD FFF7          	movff	postdec2,tblptrh
 21654  0017A4                     	if	0	;tblptru may be non-zero
 21655  0017A4                     	endif
 21656  0017A4                     	if	0	;tblptru may be non-zero
 21657  0017A4                     	endif
 21658  0017A4  0008               	tblrd		*
 21659  0017A6  CFF5 F096          	movff	tablat,vfpfcnvrt@c
 21660                           
 21661                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1277:             ++*fmt;
 21662  0017AA  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21663  0017AC  6ED9               	movwf	fsr2l,c
 21664  0017AE  6ADA               	clrf	fsr2h,c
 21665  0017B0  2ADE               	incf	postinc2,f,c
 21666  0017B2  0E00               	movlw	0
 21667  0017B4  22DD               	addwfc	postdec2,f,c
 21668                           
 21669                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1278:             llu = (unsi
      +                          gned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
 21670  0017B6  504F               	movf	vfpfcnvrt@ap^0,w,c
 21671  0017B8  6ED9               	movwf	fsr2l,c
 21672  0017BA  6ADA               	clrf	fsr2h,c
 21673  0017BC  50DF               	movf	indf2,w,c
 21674  0017BE  2ADF               	incf	indf2,f,c
 21675  0017C0  2ADF               	incf	indf2,f,c
 21676  0017C2  6ED9               	movwf	fsr2l,c
 21677  0017C4  6ADA               	clrf	fsr2h,c
 21678  0017C6  CFDE F050          	movff	postinc2,??_vfpfcnvrt
 21679  0017CA  CFDD F051          	movff	postdec2,??_vfpfcnvrt+1
 21680  0017CE  C050  F08E         	movff	??_vfpfcnvrt,vfpfcnvrt@llu
 21681  0017D2  C051  F08F         	movff	??_vfpfcnvrt+1,vfpfcnvrt@llu+1
 21682  0017D6  0100               	movlb	0	; () banked
 21683  0017D8  6B90               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 21684  0017DA  6B91               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 21685  0017DC  6B92               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 21686  0017DE  6B93               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 21687  0017E0  6B94               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 21688  0017E2  6B95               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 21689                           
 21690                           ; BSR set to: 0
 21691                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1280:             return xtoa
      +                          (fp, llu, c);
 21692  0017E4  C04C  F025         	movff	vfpfcnvrt@fp,xtoa@fp
 21693  0017E8  C04D  F026         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 21694  0017EC  C08E  F027         	movff	vfpfcnvrt@llu,xtoa@d
 21695  0017F0  C08F  F028         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 21696  0017F4  C090  F029         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 21697  0017F8  C091  F02A         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 21698  0017FC  C092  F02B         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 21699  001800  C093  F02C         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 21700  001804  C094  F02D         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 21701  001808  C095  F02E         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 21702  00180C  C096  F02F         	movff	vfpfcnvrt@c,xtoa@x
 21703  001810  EC0E  F01A         	call	_xtoa	;wreg free
 21704  001814  C025  F04C         	movff	?_xtoa,?_vfpfcnvrt
 21705  001818  C026  F04D         	movff	?_xtoa+1,?_vfpfcnvrt+1
 21706  00181C  0012               	return	
 21707  00181E                     l9971:
 21708                           
 21709                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1285:         if (!strncmp(*f
      +                          mt, "lx", ((sizeof("lx")/sizeof("lx"[0]))-1)) || !strncmp(*fmt, "lX", ((sizeof("lX")/siz
      +                          eof("lX"[0]))-1))) {
 21710  00181E  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21711  001820  6ED9               	movwf	fsr2l,c
 21712  001822  6ADA               	clrf	fsr2h,c
 21713  001824  CFDE F00E          	movff	postinc2,strncmp@_l
 21714  001828  CFDD F00F          	movff	postdec2,strncmp@_l+1
 21715  00182C  0EFC               	movlw	low STR_105
 21716  00182E  6E10               	movwf	strncmp@_r^0,c
 21717  001830  0E7F               	movlw	high STR_105
 21718  001832  6E11               	movwf	(strncmp@_r+1)^0,c
 21719  001834  0E00               	movlw	0
 21720  001836  6E13               	movwf	(strncmp@n+1)^0,c
 21721  001838  0E02               	movlw	2
 21722  00183A  6E12               	movwf	strncmp@n^0,c
 21723  00183C  EC42  F02E         	call	_strncmp	;wreg free
 21724  001840  500E               	movf	?_strncmp^0,w,c
 21725  001842  100F               	iorwf	(?_strncmp+1)^0,w,c
 21726  001844  B4D8               	btfsc	status,2,c
 21727  001846  D015               	goto	u12040
 21728  001848  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21729  00184A  6ED9               	movwf	fsr2l,c
 21730  00184C  6ADA               	clrf	fsr2h,c
 21731  00184E  CFDE F00E          	movff	postinc2,strncmp@_l
 21732  001852  CFDD F00F          	movff	postdec2,strncmp@_l+1
 21733  001856  0EF3               	movlw	low STR_109
 21734  001858  6E10               	movwf	strncmp@_r^0,c
 21735  00185A  0E7F               	movlw	high STR_109
 21736  00185C  6E11               	movwf	(strncmp@_r+1)^0,c
 21737  00185E  0E00               	movlw	0
 21738  001860  6E13               	movwf	(strncmp@n+1)^0,c
 21739  001862  0E02               	movlw	2
 21740  001864  6E12               	movwf	strncmp@n^0,c
 21741  001866  EC42  F02E         	call	_strncmp	;wreg free
 21742  00186A  500E               	movf	?_strncmp^0,w,c
 21743  00186C  100F               	iorwf	(?_strncmp+1)^0,w,c
 21744  00186E  A4D8               	btfss	status,2,c
 21745  001870  D055               	goto	l9985
 21746  001872                     u12040:
 21747                           
 21748                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1286: ;/opt/microchip/xc8/v2.
      +                          10/pic/sources/c99/common/doprnt.c: 1288:             c = (*fmt)[1];
 21749  001872  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21750  001874  6ED9               	movwf	fsr2l,c
 21751  001876  6ADA               	clrf	fsr2h,c
 21752  001878  CFDE F050          	movff	postinc2,??_vfpfcnvrt
 21753  00187C  CFDD F051          	movff	postdec2,??_vfpfcnvrt+1
 21754  001880  0E01               	movlw	1
 21755  001882  2650               	addwf	??_vfpfcnvrt^0,f,c
 21756  001884  0E00               	movlw	0
 21757  001886  2251               	addwfc	(??_vfpfcnvrt+1)^0,f,c
 21758  001888  C050  FFF6         	movff	??_vfpfcnvrt,tblptrl
 21759  00188C  C051  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
 21760  001890                     	if	0	;tblptru may be non-zero
 21761  001890                     	endif
 21762  001890                     	if	0	;tblptru may be non-zero
 21763  001890                     	endif
 21764  001890  0008               	tblrd		*
 21765  001892  CFF5 F096          	movff	tablat,vfpfcnvrt@c
 21766                           
 21767                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1289:             *fmt += ((s
      +                          izeof("lx")/sizeof("lx"[0]))-1);
 21768  001896  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21769  001898  6ED9               	movwf	fsr2l,c
 21770  00189A  6ADA               	clrf	fsr2h,c
 21771  00189C  0E02               	movlw	2
 21772  00189E  26DE               	addwf	postinc2,f,c
 21773  0018A0  0E00               	movlw	0
 21774  0018A2  22DD               	addwfc	postdec2,f,c
 21775                           
 21776                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1290:             llu = (unsi
      +                          gned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned long)0));
 21777  0018A4  504F               	movf	vfpfcnvrt@ap^0,w,c
 21778  0018A6  6ED9               	movwf	fsr2l,c
 21779  0018A8  6ADA               	clrf	fsr2h,c
 21780  0018AA  CFDF F050          	movff	indf2,??_vfpfcnvrt
 21781  0018AE  0E04               	movlw	4
 21782  0018B0  26DF               	addwf	indf2,f,c
 21783  0018B2  5050               	movf	??_vfpfcnvrt^0,w,c
 21784  0018B4  6ED9               	movwf	fsr2l,c
 21785  0018B6  6ADA               	clrf	fsr2h,c
 21786  0018B8  CFDE F051          	movff	postinc2,??_vfpfcnvrt+1
 21787  0018BC  CFDE F052          	movff	postinc2,??_vfpfcnvrt+2
 21788  0018C0  CFDE F053          	movff	postinc2,??_vfpfcnvrt+3
 21789  0018C4  CFDE F054          	movff	postinc2,??_vfpfcnvrt+4
 21790  0018C8  5051               	movf	(??_vfpfcnvrt+1)^0,w,c
 21791  0018CA  0100               	movlb	0	; () banked
 21792  0018CC  6F8E               	movwf	vfpfcnvrt@llu& (0+255),b
 21793  0018CE  5052               	movf	(??_vfpfcnvrt+2)^0,w,c
 21794  0018D0  6F8F               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 21795  0018D2  5053               	movf	(??_vfpfcnvrt+3)^0,w,c
 21796  0018D4  6F90               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 21797  0018D6  5054               	movf	(??_vfpfcnvrt+4)^0,w,c
 21798  0018D8  6F91               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 21799  0018DA  6B92               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 21800  0018DC  6B93               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 21801  0018DE  6B94               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 21802  0018E0  6B95               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1292:             return xtoa
      +                          (fp, llu, c);
 21806  0018E2  C04C  F025         	movff	vfpfcnvrt@fp,xtoa@fp
 21807  0018E6  C04D  F026         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 21808  0018EA  C08E  F027         	movff	vfpfcnvrt@llu,xtoa@d
 21809  0018EE  C08F  F028         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 21810  0018F2  C090  F029         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 21811  0018F6  C091  F02A         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 21812  0018FA  C092  F02B         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 21813  0018FE  C093  F02C         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 21814  001902  C094  F02D         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 21815  001906  C095  F02E         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 21816  00190A  C096  F02F         	movff	vfpfcnvrt@c,xtoa@x
 21817  00190E  EC0E  F01A         	call	_xtoa	;wreg free
 21818  001912  C025  F04C         	movff	?_xtoa,?_vfpfcnvrt
 21819  001916  C026  F04D         	movff	?_xtoa+1,?_vfpfcnvrt+1
 21820  00191A  0012               	return	
 21821  00191C                     l9985:
 21822                           
 21823                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
 21824  00191C  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21825  00191E  6ED9               	movwf	fsr2l,c
 21826  001920  6ADA               	clrf	fsr2h,c
 21827  001922  CFDE FFF6          	movff	postinc2,tblptrl
 21828  001926  CFDD FFF7          	movff	postdec2,tblptrh
 21829  00192A                     	if	0	;tblptru may be non-zero
 21830  00192A                     	endif
 21831  00192A                     	if	0	;tblptru may be non-zero
 21832  00192A                     	endif
 21833  00192A  0008               	tblrd		*
 21834  00192C  50F5               	movf	tablat,w,c
 21835  00192E  0A25               	xorlw	37
 21836  001930  A4D8               	btfss	status,2,c
 21837  001932  D015               	goto	l9995
 21838                           
 21839                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
 21840  001934  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21841  001936  6ED9               	movwf	fsr2l,c
 21842  001938  6ADA               	clrf	fsr2h,c
 21843  00193A  2ADE               	incf	postinc2,f,c
 21844  00193C  0E00               	movlw	0
 21845  00193E  22DD               	addwfc	postdec2,f,c
 21846                           
 21847                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
 21848  001940  0E00               	movlw	0
 21849  001942  6E10               	movwf	(fputc@c+1)^0,c
 21850  001944  0E25               	movlw	37
 21851  001946  6E0F               	movwf	fputc@c^0,c
 21852  001948  C04C  F011         	movff	vfpfcnvrt@fp,fputc@fp
 21853  00194C  C04D  F012         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 21854  001950  EC5B  F03A         	call	_fputc	;wreg free
 21855  001954                     l9991:
 21856                           
 21857                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1353:             return 1;
 21858  001954  0E00               	movlw	0
 21859  001956  6E4D               	movwf	(?_vfpfcnvrt+1)^0,c
 21860  001958  0E01               	movlw	1
 21861  00195A  6E4C               	movwf	?_vfpfcnvrt^0,c
 21862  00195C  0012               	return	
 21863  00195E                     l9995:
 21864                           
 21865                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
 21866  00195E  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21867  001960  6ED9               	movwf	fsr2l,c
 21868  001962  6ADA               	clrf	fsr2h,c
 21869  001964  2ADE               	incf	postinc2,f,c
 21870  001966  0E00               	movlw	0
 21871  001968  22DD               	addwfc	postdec2,f,c
 21872                           
 21873                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1358:         return 0;
 21874  00196A  0E00               	movlw	0
 21875  00196C  6E4D               	movwf	(?_vfpfcnvrt+1)^0,c
 21876  00196E  0E00               	movlw	0
 21877  001970  6E4C               	movwf	?_vfpfcnvrt^0,c
 21878  001972  0012               	return	
 21879  001974                     l10001:
 21880                           
 21881                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
 21882  001974  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21883  001976  6ED9               	movwf	fsr2l,c
 21884  001978  6ADA               	clrf	fsr2h,c
 21885  00197A  CFDE FFF6          	movff	postinc2,tblptrl
 21886  00197E  CFDD FFF7          	movff	postdec2,tblptrh
 21887  001982                     	if	0	;tblptru may be non-zero
 21888  001982                     	endif
 21889  001982                     	if	0	;tblptru may be non-zero
 21890  001982                     	endif
 21891  001982  0008               	tblrd		*
 21892  001984  50F5               	movf	tablat,w,c
 21893  001986  6E0F               	movwf	fputc@c^0,c
 21894  001988  6A10               	clrf	(fputc@c+1)^0,c
 21895  00198A  C04C  F011         	movff	vfpfcnvrt@fp,fputc@fp
 21896  00198E  C04D  F012         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 21897  001992  EC5B  F03A         	call	_fputc	;wreg free
 21898                           
 21899                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
 21900  001996  504E               	movf	vfpfcnvrt@fmt^0,w,c
 21901  001998  6ED9               	movwf	fsr2l,c
 21902  00199A  6ADA               	clrf	fsr2h,c
 21903  00199C  2ADE               	incf	postinc2,f,c
 21904  00199E  0E00               	movlw	0
 21905  0019A0  22DD               	addwfc	postdec2,f,c
 21906  0019A2  D7D8               	goto	l9991
 21907  0019A4                     __end_of_vfpfcnvrt:
 21908                           	opt callstack 0
 21909                           
 21910 ;; *************** function _xtoa *****************
 21911 ;; Defined at:
 21912 ;;		line 623 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 21913 ;; Parameters:    Size  Location     Type
 21914 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
 21915 ;;		 -> NULL(0), 
 21916 ;;  d               8   38[COMRAM] unsigned long long 
 21917 ;;  x               1   46[COMRAM] unsigned char 
 21918 ;; Auto vars:     Size  Location     Type
 21919 ;;  n               8   63[COMRAM] unsigned long long 
 21920 ;;  c               2   73[COMRAM] int 
 21921 ;;  i               2   71[COMRAM] int 
 21922 ;;  w               2   61[COMRAM] int 
 21923 ;;  p               2   59[COMRAM] int 
 21924 ;; Return value:  Size  Location     Type
 21925 ;;                  2   36[COMRAM] int 
 21926 ;; Registers used:
 21927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21928 ;; Tracked objects:
 21929 ;;		On entry : 3F/0
 21930 ;;		On exit  : 0/0
 21931 ;;		Unchanged: 0/0
 21932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21933 ;;      Params:        11       0       0       0       0       0       0
 21934 ;;      Locals:        20       0       0       0       0       0       0
 21935 ;;      Temps:          8       0       0       0       0       0       0
 21936 ;;      Totals:        39       0       0       0       0       0       0
 21937 ;;Total ram usage:       39 bytes
 21938 ;; Hardware stack levels used:    1
 21939 ;; Hardware stack levels required when called:    6
 21940 ;; This function calls:
 21941 ;;		_isalpha
 21942 ;;		_isupper
 21943 ;;		_pad
 21944 ;;		_toupper
 21945 ;; This function is called by:
 21946 ;;		_vfpfcnvrt
 21947 ;; This function uses a non-reentrant model
 21948 ;;
 21949                           
 21950                           	psect	text86
 21951  00341C                     __ptext86:
 21952                           	opt callstack 0
 21953  00341C                     _xtoa:
 21954                           	opt callstack 19
 21955                           
 21956                           ; BSR set to: 0
 21957                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 623: static int xtoa(FILE *fp
      +                          , unsigned long long d, char x);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c
      +                          : 624: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 625:     int c, i, p,
      +                           w;;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 626:     unsigned long lon
      +                          g n;;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 629:     if (!(prec < 0))
      +                           {
 21958                           
 21959                           ;incstack = 0
 21960  00341C  AE66               	btfss	(_prec+1)^0,7,c
 21961                           
 21962                           ; BSR set to: 0
 21963                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 630:         flags &= ~(1 << 
      +                          1);
 21964  00341E  9267               	bcf	_flags^0,1,c
 21965                           
 21966                           ; BSR set to: 0
 21967                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 632:     p = (0 < prec) ? pre
      +                          c : 1;
 21968  003420  BE66               	btfsc	(_prec+1)^0,7,c
 21969  003422  D005               	goto	u11660
 21970  003424  5066               	movf	(_prec+1)^0,w,c
 21971  003426  E108               	bnz	l1442
 21972  003428  0465               	decf	_prec^0,w,c
 21973  00342A  B0D8               	btfsc	status,0,c
 21974  00342C  D005               	goto	l1442
 21975  00342E                     u11660:
 21976                           
 21977                           ; BSR set to: 0
 21978  00342E  0E00               	movlw	0
 21979  003430  6E3D               	movwf	(xtoa@p+1)^0,c
 21980  003432  0E01               	movlw	1
 21981  003434  6E3C               	movwf	xtoa@p^0,c
 21982  003436  D004               	goto	l1444
 21983  003438                     l1442:
 21984                           
 21985                           ; BSR set to: 0
 21986  003438  C065  F03C         	movff	_prec,xtoa@p
 21987  00343C  C066  F03D         	movff	_prec+1,xtoa@p+1
 21988  003440                     l1444:
 21989                           
 21990                           ; BSR set to: 0
 21991                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 633:     w = width;
 21992  003440  C0C5  F03E         	movff	_width,xtoa@w
 21993  003444  C0C6  F03F         	movff	_width+1,xtoa@w+1
 21994                           
 21995                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 634:     if (flags & (1 << 4)
      +                          ) {
 21996  003448  A867               	btfss	_flags^0,4,c
 21997  00344A  D004               	goto	l9775
 21998                           
 21999                           ; BSR set to: 0
 22000                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 635:         w -= 2;
 22001  00344C  0EFE               	movlw	254
 22002  00344E  263E               	addwf	xtoa@w^0,f,c
 22003  003450  0EFF               	movlw	255
 22004  003452  223F               	addwfc	(xtoa@w+1)^0,f,c
 22005  003454                     l9775:
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 639:     n = d;
 22009  003454  C027  F040         	movff	xtoa@d,xtoa@n
 22010  003458  C028  F041         	movff	xtoa@d+1,xtoa@n+1
 22011  00345C  C029  F042         	movff	xtoa@d+2,xtoa@n+2
 22012  003460  C02A  F043         	movff	xtoa@d+3,xtoa@n+3
 22013  003464  C02B  F044         	movff	xtoa@d+4,xtoa@n+4
 22014  003468  C02C  F045         	movff	xtoa@d+5,xtoa@n+5
 22015  00346C  C02D  F046         	movff	xtoa@d+6,xtoa@n+6
 22016  003470  C02E  F047         	movff	xtoa@d+7,xtoa@n+7
 22017                           
 22018                           ; BSR set to: 0
 22019                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 640:     i = sizeof(dbuf) - 1
      +                          ;
 22020  003474  0E00               	movlw	0
 22021  003476  6E49               	movwf	(xtoa@i+1)^0,c
 22022  003478  0E1F               	movlw	31
 22023  00347A  6E48               	movwf	xtoa@i^0,c
 22024                           
 22025                           ; BSR set to: 0
 22026                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 641:     dbuf[i] = '\0';
 22027  00347C  0E00               	movlw	0
 22028  00347E  0102               	movlb	2	; () banked
 22029  003480  6FD8               	movwf	(_dbuf+31)& (0+255),b
 22030                           
 22031                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 22032  003482  D093               	goto	l9811
 22033  003484                     l9781:
 22034                           
 22035                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 643:         --i;
 22036  003484  0648               	decf	xtoa@i^0,f,c
 22037  003486  A0D8               	btfss	status,0,c
 22038  003488  0649               	decf	(xtoa@i+1)^0,f,c
 22039                           
 22040                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 644:         c = n & 0x0f;
 22041  00348A  0E0F               	movlw	15
 22042  00348C  1440               	andwf	xtoa@n^0,w,c
 22043  00348E  6E4A               	movwf	xtoa@c^0,c
 22044  003490  6A4B               	clrf	(xtoa@c+1)^0,c
 22045                           
 22046                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 645:         c = (c < 10) ? '
      +                          0' + c : 'a' + (c - 10);
 22047  003492  BE4B               	btfsc	(xtoa@c+1)^0,7,c
 22048  003494  D008               	goto	l9789
 22049  003496  504B               	movf	(xtoa@c+1)^0,w,c
 22050  003498  E104               	bnz	u11680
 22051  00349A  0E0A               	movlw	10
 22052  00349C  5C4A               	subwf	xtoa@c^0,w,c
 22053  00349E  A0D8               	btfss	status,0,c
 22054  0034A0  D002               	goto	l9789
 22055  0034A2                     u11680:
 22056  0034A2  0E57               	movlw	87
 22057  0034A4  D001               	goto	L15
 22058  0034A6                     l9789:
 22059  0034A6  0E30               	movlw	48
 22060  0034A8                     L15:
 22061  0034A8  244A               	addwf	xtoa@c^0,w,c
 22062  0034AA  6E4A               	movwf	xtoa@c^0,c
 22063  0034AC  0E00               	movlw	0
 22064  0034AE  204B               	addwfc	(xtoa@c+1)^0,w,c
 22065  0034B0  6E4B               	movwf	(xtoa@c+1)^0,c
 22066                           
 22067                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 646:         if ((0 ? isupper
      +                          ((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsigned)(c)|32)-'a') 
      +                          < 26)) {
 22068  0034B2  0EBF               	movlw	191
 22069  0034B4  6E30               	movwf	??_xtoa^0,c
 22070  0034B6  0EFF               	movlw	255
 22071  0034B8  6E31               	movwf	(??_xtoa+1)^0,c
 22072  0034BA  502F               	movf	xtoa@x^0,w,c
 22073  0034BC  6E32               	movwf	(??_xtoa+2)^0,c
 22074  0034BE  6A33               	clrf	(??_xtoa+3)^0,c
 22075  0034C0  5030               	movf	??_xtoa^0,w,c
 22076  0034C2  2632               	addwf	(??_xtoa+2)^0,f,c
 22077  0034C4  5031               	movf	(??_xtoa+1)^0,w,c
 22078  0034C6  2233               	addwfc	(??_xtoa+3)^0,f,c
 22079  0034C8  5033               	movf	(??_xtoa+3)^0,w,c
 22080  0034CA  E106               	bnz	u11690
 22081  0034CC  0E1A               	movlw	26
 22082  0034CE  5C32               	subwf	(??_xtoa+2)^0,w,c
 22083  0034D0  B0D8               	btfsc	status,0,c
 22084  0034D2  D002               	goto	u11690
 22085  0034D4  0E01               	movlw	1
 22086  0034D6  D001               	goto	u11700
 22087  0034D8                     u11690:
 22088  0034D8  0E00               	movlw	0
 22089  0034DA                     u11700:
 22090  0034DA  6E38               	movwf	_xtoa$3108^0,c
 22091  0034DC  6A39               	clrf	(_xtoa$3108+1)^0,c
 22092  0034DE  5038               	movf	_xtoa$3108^0,w,c
 22093  0034E0  1039               	iorwf	(_xtoa$3108+1)^0,w,c
 22094  0034E2  B4D8               	btfsc	status,2,c
 22095  0034E4  D027               	goto	l9803
 22096  0034E6  0E9F               	movlw	159
 22097  0034E8  6E30               	movwf	??_xtoa^0,c
 22098  0034EA  0EFF               	movlw	255
 22099  0034EC  6E31               	movwf	(??_xtoa+1)^0,c
 22100  0034EE  0E20               	movlw	32
 22101  0034F0  104A               	iorwf	xtoa@c^0,w,c
 22102  0034F2  6E32               	movwf	(??_xtoa+2)^0,c
 22103  0034F4  0E00               	movlw	0
 22104  0034F6  104B               	iorwf	(xtoa@c+1)^0,w,c
 22105  0034F8  6E33               	movwf	(??_xtoa+3)^0,c
 22106  0034FA  5030               	movf	??_xtoa^0,w,c
 22107  0034FC  2632               	addwf	(??_xtoa+2)^0,f,c
 22108  0034FE  5031               	movf	(??_xtoa+1)^0,w,c
 22109  003500  2233               	addwfc	(??_xtoa+3)^0,f,c
 22110  003502  5033               	movf	(??_xtoa+3)^0,w,c
 22111  003504  E106               	bnz	u11720
 22112  003506  0E1A               	movlw	26
 22113  003508  5C32               	subwf	(??_xtoa+2)^0,w,c
 22114  00350A  B0D8               	btfsc	status,0,c
 22115  00350C  D002               	goto	u11720
 22116  00350E  0E01               	movlw	1
 22117  003510  D001               	goto	u11730
 22118  003512                     u11720:
 22119  003512  0E00               	movlw	0
 22120  003514                     u11730:
 22121  003514  6E3A               	movwf	_xtoa$3109^0,c
 22122  003516  6A3B               	clrf	(_xtoa$3109+1)^0,c
 22123  003518  503A               	movf	_xtoa$3109^0,w,c
 22124  00351A  103B               	iorwf	(_xtoa$3109+1)^0,w,c
 22125  00351C  B4D8               	btfsc	status,2,c
 22126  00351E  D00A               	goto	l9803
 22127                           
 22128                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 647:             c = toupper(
      +                          c);
 22129  003520  C04A  F014         	movff	xtoa@c,toupper@c
 22130  003524  C04B  F015         	movff	xtoa@c+1,toupper@c+1
 22131  003528  EC6F  F036         	call	_toupper	;wreg free
 22132  00352C  C014  F04A         	movff	?_toupper,xtoa@c
 22133  003530  C015  F04B         	movff	?_toupper+1,xtoa@c+1
 22134  003534                     l9803:
 22135                           
 22136                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 649:         dbuf[i] = (char)
      +                          c;
 22137  003534  0EB9               	movlw	low _dbuf
 22138  003536  2448               	addwf	xtoa@i^0,w,c
 22139  003538  6ED9               	movwf	fsr2l,c
 22140  00353A  0E02               	movlw	high _dbuf
 22141  00353C  2049               	addwfc	(xtoa@i+1)^0,w,c
 22142  00353E  6EDA               	movwf	fsr2h,c
 22143  003540  C04A  FFDF         	movff	xtoa@c,indf2
 22144                           
 22145                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 650:         --p;
 22146  003544  063C               	decf	xtoa@p^0,f,c
 22147  003546  A0D8               	btfss	status,0,c
 22148  003548  063D               	decf	(xtoa@p+1)^0,f,c
 22149                           
 22150                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 651:         --w;
 22151  00354A  063E               	decf	xtoa@w^0,f,c
 22152  00354C  A0D8               	btfss	status,0,c
 22153  00354E  063F               	decf	(xtoa@w+1)^0,f,c
 22154                           
 22155                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 652:         n = n >> 4;
 22156  003550  C040  F030         	movff	xtoa@n,??_xtoa
 22157  003554  C041  F031         	movff	xtoa@n+1,??_xtoa+1
 22158  003558  C042  F032         	movff	xtoa@n+2,??_xtoa+2
 22159  00355C  C043  F033         	movff	xtoa@n+3,??_xtoa+3
 22160  003560  C044  F034         	movff	xtoa@n+4,??_xtoa+4
 22161  003564  C045  F035         	movff	xtoa@n+5,??_xtoa+5
 22162  003568  C046  F036         	movff	xtoa@n+6,??_xtoa+6
 22163  00356C  C047  F037         	movff	xtoa@n+7,??_xtoa+7
 22164  003570  0E05               	movlw	5
 22165  003572  D009               	goto	u11750
 22166  003574                     u11755:
 22167  003574  90D8               	bcf	status,0,c
 22168  003576  3237               	rrcf	(??_xtoa+7)^0,f,c
 22169  003578  3236               	rrcf	(??_xtoa+6)^0,f,c
 22170  00357A  3235               	rrcf	(??_xtoa+5)^0,f,c
 22171  00357C  3234               	rrcf	(??_xtoa+4)^0,f,c
 22172  00357E  3233               	rrcf	(??_xtoa+3)^0,f,c
 22173  003580  3232               	rrcf	(??_xtoa+2)^0,f,c
 22174  003582  3231               	rrcf	(??_xtoa+1)^0,f,c
 22175  003584  3230               	rrcf	??_xtoa^0,f,c
 22176  003586                     u11750:
 22177  003586  2EE8               	decfsz	wreg,f,c
 22178  003588  D7F5               	goto	u11755
 22179  00358A  C030  F040         	movff	??_xtoa,xtoa@n
 22180  00358E  C031  F041         	movff	??_xtoa+1,xtoa@n+1
 22181  003592  C032  F042         	movff	??_xtoa+2,xtoa@n+2
 22182  003596  C033  F043         	movff	??_xtoa+3,xtoa@n+3
 22183  00359A  C034  F044         	movff	??_xtoa+4,xtoa@n+4
 22184  00359E  C035  F045         	movff	??_xtoa+5,xtoa@n+5
 22185  0035A2  C036  F046         	movff	??_xtoa+6,xtoa@n+6
 22186  0035A6  C037  F047         	movff	??_xtoa+7,xtoa@n+7
 22187  0035AA                     l9811:
 22188                           
 22189                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 22190  0035AA  BE49               	btfsc	(xtoa@i+1)^0,7,c
 22191  0035AC  D020               	goto	u11800
 22192  0035AE  5049               	movf	(xtoa@i+1)^0,w,c
 22193  0035B0  E104               	bnz	u11760
 22194  0035B2  0E02               	movlw	2
 22195  0035B4  5C48               	subwf	xtoa@i^0,w,c
 22196  0035B6  A0D8               	btfss	status,0,c
 22197  0035B8  D01A               	goto	u11800
 22198  0035BA                     u11760:
 22199  0035BA  5040               	movf	xtoa@n^0,w,c
 22200  0035BC  1041               	iorwf	(xtoa@n+1)^0,w,c
 22201  0035BE  1042               	iorwf	(xtoa@n+2)^0,w,c
 22202  0035C0  1043               	iorwf	(xtoa@n+3)^0,w,c
 22203  0035C2  1044               	iorwf	(xtoa@n+4)^0,w,c
 22204  0035C4  1045               	iorwf	(xtoa@n+5)^0,w,c
 22205  0035C6  1046               	iorwf	(xtoa@n+6)^0,w,c
 22206  0035C8  1047               	iorwf	(xtoa@n+7)^0,w,c
 22207  0035CA  A4D8               	btfss	status,2,c
 22208  0035CC  D75B               	goto	l9781
 22209  0035CE  BE3D               	btfsc	(xtoa@p+1)^0,7,c
 22210  0035D0  D005               	goto	u11780
 22211  0035D2  503D               	movf	(xtoa@p+1)^0,w,c
 22212  0035D4  E102               	bnz	u11781
 22213  0035D6  043C               	decf	xtoa@p^0,w,c
 22214  0035D8  B0D8               	btfsc	status,0,c
 22215  0035DA                     u11781:
 22216  0035DA  D754               	goto	l9781
 22217  0035DC                     u11780:
 22218  0035DC  BE3F               	btfsc	(xtoa@w+1)^0,7,c
 22219  0035DE  D007               	goto	u11800
 22220  0035E0  503F               	movf	(xtoa@w+1)^0,w,c
 22221  0035E2  E103               	bnz	u11790
 22222  0035E4  043E               	decf	xtoa@w^0,w,c
 22223  0035E6  A0D8               	btfss	status,0,c
 22224  0035E8  D002               	goto	u11800
 22225  0035EA                     u11790:
 22226  0035EA  B267               	btfsc	_flags^0,1,c
 22227  0035EC  D74B               	goto	l9781
 22228  0035EE                     u11800:
 22229                           
 22230                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 656:     if (flags & (1 << 4)
      +                          ) {
 22231  0035EE  A867               	btfss	_flags^0,4,c
 22232  0035F0  D016               	goto	l9827
 22233                           
 22234                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 657:         --i;
 22235  0035F2  0648               	decf	xtoa@i^0,f,c
 22236  0035F4  A0D8               	btfss	status,0,c
 22237  0035F6  0649               	decf	(xtoa@i+1)^0,f,c
 22238                           
 22239                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 658:         dbuf[i] = x;
 22240  0035F8  0EB9               	movlw	low _dbuf
 22241  0035FA  2448               	addwf	xtoa@i^0,w,c
 22242  0035FC  6ED9               	movwf	fsr2l,c
 22243  0035FE  0E02               	movlw	high _dbuf
 22244  003600  2049               	addwfc	(xtoa@i+1)^0,w,c
 22245  003602  6EDA               	movwf	fsr2h,c
 22246  003604  C02F  FFDF         	movff	xtoa@x,indf2
 22247                           
 22248                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 659:         --i;
 22249  003608  0648               	decf	xtoa@i^0,f,c
 22250  00360A  A0D8               	btfss	status,0,c
 22251  00360C  0649               	decf	(xtoa@i+1)^0,f,c
 22252                           
 22253                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 660:         dbuf[i] = '0';
 22254  00360E  0EB9               	movlw	low _dbuf
 22255  003610  2448               	addwf	xtoa@i^0,w,c
 22256  003612  6ED9               	movwf	fsr2l,c
 22257  003614  0E02               	movlw	high _dbuf
 22258  003616  2049               	addwfc	(xtoa@i+1)^0,w,c
 22259  003618  6EDA               	movwf	fsr2h,c
 22260  00361A  0E30               	movlw	48
 22261  00361C  6EDF               	movwf	indf2,c
 22262  00361E                     l9827:
 22263                           
 22264                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 664:     return pad(fp, &dbuf
      +                          [i], w);
 22265  00361E  C025  F01A         	movff	xtoa@fp,pad@fp
 22266  003622  C026  F01B         	movff	xtoa@fp+1,pad@fp+1
 22267  003626  0EB9               	movlw	low _dbuf
 22268  003628  2448               	addwf	xtoa@i^0,w,c
 22269  00362A  6E1C               	movwf	pad@buf^0,c
 22270  00362C  0E02               	movlw	high _dbuf
 22271  00362E  2049               	addwfc	(xtoa@i+1)^0,w,c
 22272  003630  6E1D               	movwf	(pad@buf+1)^0,c
 22273  003632  C03E  F01E         	movff	xtoa@w,pad@p
 22274  003636  C03F  F01F         	movff	xtoa@w+1,pad@p+1
 22275  00363A  EC12  F031         	call	_pad	;wreg free
 22276  00363E  C01A  F025         	movff	?_pad,?_xtoa
 22277  003642  C01B  F026         	movff	?_pad+1,?_xtoa+1
 22278  003646  0012               	return		;funcret
 22279  003648                     __end_of_xtoa:
 22280                           	opt callstack 0
 22281                           
 22282 ;; *************** function _toupper *****************
 22283 ;; Defined at:
 22284 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/toupper.c"
 22285 ;; Parameters:    Size  Location     Type
 22286 ;;  c               2   19[COMRAM] int 
 22287 ;; Auto vars:     Size  Location     Type
 22288 ;;		None
 22289 ;; Return value:  Size  Location     Type
 22290 ;;                  2   19[COMRAM] int 
 22291 ;; Registers used:
 22292 ;;		wreg, status,2, status,0
 22293 ;; Tracked objects:
 22294 ;;		On entry : 0/1
 22295 ;;		On exit  : 0/0
 22296 ;;		Unchanged: 0/0
 22297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22298 ;;      Params:         2       0       0       0       0       0       0
 22299 ;;      Locals:         2       0       0       0       0       0       0
 22300 ;;      Temps:          4       0       0       0       0       0       0
 22301 ;;      Totals:         8       0       0       0       0       0       0
 22302 ;;Total ram usage:        8 bytes
 22303 ;; Hardware stack levels used:    1
 22304 ;; Hardware stack levels required when called:    3
 22305 ;; This function calls:
 22306 ;;		_islower
 22307 ;; This function is called by:
 22308 ;;		_xtoa
 22309 ;;		___strtoxl
 22310 ;; This function uses a non-reentrant model
 22311 ;;
 22312                           
 22313                           	psect	text87
 22314  006CDE                     __ptext87:
 22315                           	opt callstack 0
 22316  006CDE                     _toupper:
 22317                           	opt callstack 21
 22318                           
 22319                           ;incstack = 0
 22320  006CDE  0E9F               	movlw	159
 22321  006CE0  6E16               	movwf	??_toupper^0,c
 22322  006CE2  0EFF               	movlw	255
 22323  006CE4  6E17               	movwf	(??_toupper+1)^0,c
 22324  006CE6  C014  F018         	movff	toupper@c,??_toupper+2
 22325  006CEA  C015  F019         	movff	toupper@c+1,??_toupper+3
 22326  006CEE  5016               	movf	??_toupper^0,w,c
 22327  006CF0  2618               	addwf	(??_toupper+2)^0,f,c
 22328  006CF2  5017               	movf	(??_toupper+1)^0,w,c
 22329  006CF4  2219               	addwfc	(??_toupper+3)^0,f,c
 22330  006CF6  5019               	movf	(??_toupper+3)^0,w,c
 22331  006CF8  E106               	bnz	u11070
 22332  006CFA  0E1A               	movlw	26
 22333  006CFC  5C18               	subwf	(??_toupper+2)^0,w,c
 22334  006CFE  B0D8               	btfsc	status,0,c
 22335  006D00  D002               	goto	u11070
 22336  006D02  0E01               	movlw	1
 22337  006D04  D001               	goto	u11080
 22338  006D06                     u11070:
 22339  006D06  0E00               	movlw	0
 22340  006D08                     u11080:
 22341  006D08  6E1A               	movwf	_toupper$3722^0,c
 22342  006D0A  6A1B               	clrf	(_toupper$3722+1)^0,c
 22343  006D0C  501A               	movf	_toupper$3722^0,w,c
 22344  006D0E  101B               	iorwf	(_toupper$3722+1)^0,w,c
 22345  006D10  B4D8               	btfsc	status,2,c
 22346  006D12  D005               	goto	l2325
 22347  006D14  0E5F               	movlw	95
 22348  006D16  1414               	andwf	toupper@c^0,w,c
 22349  006D18  6E14               	movwf	?_toupper^0,c
 22350  006D1A  6A15               	clrf	(?_toupper+1)^0,c
 22351  006D1C  0012               	return	
 22352  006D1E                     l2325:
 22353  006D1E  C014  F014         	movff	toupper@c,?_toupper
 22354  006D22  C015  F015         	movff	toupper@c+1,?_toupper+1
 22355  006D26  0012               	return		;funcret
 22356  006D28                     __end_of_toupper:
 22357                           	opt callstack 0
 22358                           
 22359 ;; *************** function _islower *****************
 22360 ;; Defined at:
 22361 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/islower.c"
 22362 ;; Parameters:    Size  Location     Type
 22363 ;;  c               2   13[COMRAM] int 
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;		None
 22366 ;; Return value:  Size  Location     Type
 22367 ;;                  2   13[COMRAM] int 
 22368 ;; Registers used:
 22369 ;;		wreg, status,2, status,0
 22370 ;; Tracked objects:
 22371 ;;		On entry : 0/0
 22372 ;;		On exit  : 0/0
 22373 ;;		Unchanged: 0/0
 22374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22375 ;;      Params:         2       0       0       0       0       0       0
 22376 ;;      Locals:         0       0       0       0       0       0       0
 22377 ;;      Temps:          4       0       0       0       0       0       0
 22378 ;;      Totals:         6       0       0       0       0       0       0
 22379 ;;Total ram usage:        6 bytes
 22380 ;; Hardware stack levels used:    1
 22381 ;; Hardware stack levels required when called:    2
 22382 ;; This function calls:
 22383 ;;		Nothing
 22384 ;; This function is called by:
 22385 ;;		_toupper
 22386 ;; This function uses a non-reentrant model
 22387 ;;
 22388                           
 22389                           	psect	text88
 22390  007272                     __ptext88:
 22391                           	opt callstack 0
 22392  007272                     _islower:
 22393                           	opt callstack 21
 22394                           
 22395                           ;incstack = 0
 22396  007272  0E9F               	movlw	159
 22397  007274  6E10               	movwf	??_islower^0,c
 22398  007276  0EFF               	movlw	255
 22399  007278  6E11               	movwf	(??_islower+1)^0,c
 22400  00727A  C00E  F012         	movff	islower@c,??_islower+2
 22401  00727E  C00F  F013         	movff	islower@c+1,??_islower+3
 22402  007282  5010               	movf	??_islower^0,w,c
 22403  007284  2612               	addwf	(??_islower+2)^0,f,c
 22404  007286  5011               	movf	(??_islower+1)^0,w,c
 22405  007288  2213               	addwfc	(??_islower+3)^0,f,c
 22406  00728A  5013               	movf	(??_islower+3)^0,w,c
 22407  00728C  E106               	bnz	u10960
 22408  00728E  0E1A               	movlw	26
 22409  007290  5C12               	subwf	(??_islower+2)^0,w,c
 22410  007292  B0D8               	btfsc	status,0,c
 22411  007294  D002               	goto	u10960
 22412  007296  0E01               	movlw	1
 22413  007298  D001               	goto	u10970
 22414  00729A                     u10960:
 22415  00729A  0E00               	movlw	0
 22416  00729C                     u10970:
 22417  00729C  6E0E               	movwf	?_islower^0,c
 22418  00729E  6A0F               	clrf	(?_islower+1)^0,c
 22419  0072A0  0012               	return		;funcret
 22420  0072A2                     __end_of_islower:
 22421                           	opt callstack 0
 22422                           
 22423 ;; *************** function _isupper *****************
 22424 ;; Defined at:
 22425 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isupper.c"
 22426 ;; Parameters:    Size  Location     Type
 22427 ;;  c               2   13[COMRAM] int 
 22428 ;; Auto vars:     Size  Location     Type
 22429 ;;		None
 22430 ;; Return value:  Size  Location     Type
 22431 ;;                  2   13[COMRAM] int 
 22432 ;; Registers used:
 22433 ;;		wreg, status,2, status,0
 22434 ;; Tracked objects:
 22435 ;;		On entry : 0/0
 22436 ;;		On exit  : 0/0
 22437 ;;		Unchanged: 0/0
 22438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22439 ;;      Params:         2       0       0       0       0       0       0
 22440 ;;      Locals:         0       0       0       0       0       0       0
 22441 ;;      Temps:          4       0       0       0       0       0       0
 22442 ;;      Totals:         6       0       0       0       0       0       0
 22443 ;;Total ram usage:        6 bytes
 22444 ;; Hardware stack levels used:    1
 22445 ;; Hardware stack levels required when called:    2
 22446 ;; This function calls:
 22447 ;;		Nothing
 22448 ;; This function is called by:
 22449 ;;		_xtoa
 22450 ;; This function uses a non-reentrant model
 22451 ;;
 22452                           
 22453                           	psect	text89
 22454  0072A2                     __ptext89:
 22455                           	opt callstack 0
 22456  0072A2                     _isupper:
 22457                           	opt callstack 22
 22458                           
 22459                           ;incstack = 0
 22460  0072A2  0EBF               	movlw	191
 22461  0072A4  6E10               	movwf	??_isupper^0,c
 22462  0072A6  0EFF               	movlw	255
 22463  0072A8  6E11               	movwf	(??_isupper+1)^0,c
 22464  0072AA  C00E  F012         	movff	isupper@c,??_isupper+2
 22465  0072AE  C00F  F013         	movff	isupper@c+1,??_isupper+3
 22466  0072B2  5010               	movf	??_isupper^0,w,c
 22467  0072B4  2612               	addwf	(??_isupper+2)^0,f,c
 22468  0072B6  5011               	movf	(??_isupper+1)^0,w,c
 22469  0072B8  2213               	addwfc	(??_isupper+3)^0,f,c
 22470  0072BA  5013               	movf	(??_isupper+3)^0,w,c
 22471  0072BC  E106               	bnz	u11030
 22472  0072BE  0E1A               	movlw	26
 22473  0072C0  5C12               	subwf	(??_isupper+2)^0,w,c
 22474  0072C2  B0D8               	btfsc	status,0,c
 22475  0072C4  D002               	goto	u11030
 22476  0072C6  0E01               	movlw	1
 22477  0072C8  D001               	goto	u11040
 22478  0072CA                     u11030:
 22479  0072CA  0E00               	movlw	0
 22480  0072CC                     u11040:
 22481  0072CC  6E0E               	movwf	?_isupper^0,c
 22482  0072CE  6A0F               	clrf	(?_isupper+1)^0,c
 22483  0072D0  0012               	return		;funcret
 22484  0072D2                     __end_of_isupper:
 22485                           	opt callstack 0
 22486                           
 22487 ;; *************** function _isalpha *****************
 22488 ;; Defined at:
 22489 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isalpha.c"
 22490 ;; Parameters:    Size  Location     Type
 22491 ;;  c               2   13[COMRAM] int 
 22492 ;; Auto vars:     Size  Location     Type
 22493 ;;		None
 22494 ;; Return value:  Size  Location     Type
 22495 ;;                  2   13[COMRAM] int 
 22496 ;; Registers used:
 22497 ;;		wreg, status,2, status,0
 22498 ;; Tracked objects:
 22499 ;;		On entry : 0/0
 22500 ;;		On exit  : 0/0
 22501 ;;		Unchanged: 0/0
 22502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22503 ;;      Params:         2       0       0       0       0       0       0
 22504 ;;      Locals:         0       0       0       0       0       0       0
 22505 ;;      Temps:          4       0       0       0       0       0       0
 22506 ;;      Totals:         6       0       0       0       0       0       0
 22507 ;;Total ram usage:        6 bytes
 22508 ;; Hardware stack levels used:    1
 22509 ;; Hardware stack levels required when called:    2
 22510 ;; This function calls:
 22511 ;;		Nothing
 22512 ;; This function is called by:
 22513 ;;		_xtoa
 22514 ;;		___strtoxl
 22515 ;; This function uses a non-reentrant model
 22516 ;;
 22517                           
 22518                           	psect	text90
 22519  0071AA                     __ptext90:
 22520                           	opt callstack 0
 22521  0071AA                     _isalpha:
 22522                           	opt callstack 22
 22523                           
 22524                           ;incstack = 0
 22525  0071AA  0E9F               	movlw	159
 22526  0071AC  6E10               	movwf	??_isalpha^0,c
 22527  0071AE  0EFF               	movlw	255
 22528  0071B0  6E11               	movwf	(??_isalpha+1)^0,c
 22529  0071B2  0E20               	movlw	32
 22530  0071B4  100E               	iorwf	isalpha@c^0,w,c
 22531  0071B6  6E12               	movwf	(??_isalpha+2)^0,c
 22532  0071B8  0E00               	movlw	0
 22533  0071BA  100F               	iorwf	(isalpha@c+1)^0,w,c
 22534  0071BC  6E13               	movwf	(??_isalpha+3)^0,c
 22535  0071BE  5010               	movf	??_isalpha^0,w,c
 22536  0071C0  2612               	addwf	(??_isalpha+2)^0,f,c
 22537  0071C2  5011               	movf	(??_isalpha+1)^0,w,c
 22538  0071C4  2213               	addwfc	(??_isalpha+3)^0,f,c
 22539  0071C6  5013               	movf	(??_isalpha+3)^0,w,c
 22540  0071C8  E106               	bnz	u11050
 22541  0071CA  0E1A               	movlw	26
 22542  0071CC  5C12               	subwf	(??_isalpha+2)^0,w,c
 22543  0071CE  B0D8               	btfsc	status,0,c
 22544  0071D0  D002               	goto	u11050
 22545  0071D2  0E01               	movlw	1
 22546  0071D4  D001               	goto	u11060
 22547  0071D6                     u11050:
 22548  0071D6  0E00               	movlw	0
 22549  0071D8                     u11060:
 22550  0071D8  6E0E               	movwf	?_isalpha^0,c
 22551  0071DA  6A0F               	clrf	(?_isalpha+1)^0,c
 22552  0071DC  0012               	return		;funcret
 22553  0071DE                     __end_of_isalpha:
 22554                           	opt callstack 0
 22555                           
 22556 ;; *************** function _strncmp *****************
 22557 ;; Defined at:
 22558 ;;		line 3 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strncmp.c"
 22559 ;; Parameters:    Size  Location     Type
 22560 ;;  _l              2   13[COMRAM] PTR const unsigned char 
 22561 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 22562 ;;		 -> STR_91(26), STR_90(15), STR_40(18), STR_37(17), 
 22563 ;;		 -> STR_36(21), STR_35(28), STR_34(11), STR_33(13), 
 22564 ;;		 -> STR_32(27), STR_31(20), STR_30(13), STR_29(9), 
 22565 ;;		 -> STR_28(12), STR_27(15), STR_26(9), STR_25(11), 
 22566 ;;		 -> STR_24(15), STR_23(32), STR_22(16), STR_21(18), 
 22567 ;;		 -> STR_20(16), STR_19(15), STR_18(32), STR_17(16), 
 22568 ;;		 -> STR_16(18), STR_15(16), STR_14(15), STR_13(32), 
 22569 ;;		 -> STR_12(16), STR_11(18), STR_10(20), STR_9(18), 
 22570 ;;		 -> STR_8(8), STR_7(39), STR_6(25), STR_5(25), 
 22571 ;;		 -> STR_4(20), STR_3(12), STR_2(14), STR_1(24), 
 22572 ;;  _r              2   15[COMRAM] PTR const unsigned char 
 22573 ;;		 -> STR_111(3), STR_107(3), STR_102(3), STR_98(3), 
 22574 ;;  n               2   17[COMRAM] unsigned int 
 22575 ;; Auto vars:     Size  Location     Type
 22576 ;;  r               2   22[COMRAM] PTR const unsigned char 
 22577 ;;		 -> STR_111(3), STR_107(3), STR_102(3), STR_98(3), 
 22578 ;;  l               2   20[COMRAM] PTR const unsigned char 
 22579 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 22580 ;;		 -> STR_91(26), STR_90(15), STR_40(18), STR_37(17), 
 22581 ;;		 -> STR_36(21), STR_35(28), STR_34(11), STR_33(13), 
 22582 ;;		 -> STR_32(27), STR_31(20), STR_30(13), STR_29(9), 
 22583 ;;		 -> STR_28(12), STR_27(15), STR_26(9), STR_25(11), 
 22584 ;;		 -> STR_24(15), STR_23(32), STR_22(16), STR_21(18), 
 22585 ;;		 -> STR_20(16), STR_19(15), STR_18(32), STR_17(16), 
 22586 ;;		 -> STR_16(18), STR_15(16), STR_14(15), STR_13(32), 
 22587 ;;		 -> STR_12(16), STR_11(18), STR_10(20), STR_9(18), 
 22588 ;;		 -> STR_8(8), STR_7(39), STR_6(25), STR_5(25), 
 22589 ;;		 -> STR_4(20), STR_3(12), STR_2(14), STR_1(24), 
 22590 ;; Return value:  Size  Location     Type
 22591 ;;                  2   13[COMRAM] int 
 22592 ;; Registers used:
 22593 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 22594 ;; Tracked objects:
 22595 ;;		On entry : 0/0
 22596 ;;		On exit  : 0/0
 22597 ;;		Unchanged: 0/0
 22598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22599 ;;      Params:         6       0       0       0       0       0       0
 22600 ;;      Locals:         4       0       0       0       0       0       0
 22601 ;;      Temps:          1       0       0       0       0       0       0
 22602 ;;      Totals:        11       0       0       0       0       0       0
 22603 ;;Total ram usage:       11 bytes
 22604 ;; Hardware stack levels used:    1
 22605 ;; Hardware stack levels required when called:    2
 22606 ;; This function calls:
 22607 ;;		Nothing
 22608 ;; This function is called by:
 22609 ;;		_vfpfcnvrt
 22610 ;; This function uses a non-reentrant model
 22611 ;;
 22612                           
 22613                           	psect	text91
 22614  005C84                     __ptext91:
 22615                           	opt callstack 0
 22616  005C84                     _strncmp:
 22617                           	opt callstack 23
 22618                           
 22619                           ;incstack = 0
 22620  005C84  C00E  F015         	movff	strncmp@_l,strncmp@l
 22621  005C88  C00F  F016         	movff	strncmp@_l+1,strncmp@l+1
 22622  005C8C  C010  F017         	movff	strncmp@_r,strncmp@r
 22623  005C90  C011  F018         	movff	strncmp@_r+1,strncmp@r+1
 22624  005C94  0612               	decf	strncmp@n^0,f,c
 22625  005C96  A0D8               	btfss	status,0,c
 22626  005C98  0613               	decf	(strncmp@n+1)^0,f,c
 22627  005C9A  2812               	incf	strncmp@n^0,w,c
 22628  005C9C  E10F               	bnz	l9839
 22629  005C9E  2813               	incf	(strncmp@n+1)^0,w,c
 22630  005CA0  A4D8               	btfss	status,2,c
 22631  005CA2  D00C               	goto	l9839
 22632  005CA4  0E00               	movlw	0
 22633  005CA6  6E0F               	movwf	(?_strncmp+1)^0,c
 22634  005CA8  0E00               	movlw	0
 22635  005CAA  6E0E               	movwf	?_strncmp^0,c
 22636  005CAC  0012               	return	
 22637  005CAE                     l9837:
 22638  005CAE  4A15               	infsnz	strncmp@l^0,f,c
 22639  005CB0  2A16               	incf	(strncmp@l+1)^0,f,c
 22640  005CB2  4A17               	infsnz	strncmp@r^0,f,c
 22641  005CB4  2A18               	incf	(strncmp@r+1)^0,f,c
 22642  005CB6  0612               	decf	strncmp@n^0,f,c
 22643  005CB8  A0D8               	btfss	status,0,c
 22644  005CBA  0613               	decf	(strncmp@n+1)^0,f,c
 22645  005CBC                     l9839:
 22646  005CBC  C015  FFF6         	movff	strncmp@l,tblptrl
 22647  005CC0  C016  FFF7         	movff	strncmp@l+1,tblptrh
 22648  005CC4                     	if	0	;tblptru may be non-zero
 22649  005CC4                     	endif
 22650  005CC4                     	if	0	;tblptru may be non-zero
 22651  005CC4                     	endif
 22652  005CC4  0008               	tblrd		*
 22653  005CC6  50F5               	movf	tablat,w,c
 22654  005CC8  0900               	iorlw	0
 22655  005CCA  B4D8               	btfsc	status,2,c
 22656  005CCC  D01D               	goto	u11860
 22657  005CCE  C017  FFF6         	movff	strncmp@r,tblptrl
 22658  005CD2  C018  FFF7         	movff	strncmp@r+1,tblptrh
 22659  005CD6                     	if	0	;tblptru may be non-zero
 22660  005CD6                     	endif
 22661  005CD6                     	if	0	;tblptru may be non-zero
 22662  005CD6                     	endif
 22663  005CD6  0008               	tblrd		*
 22664  005CD8  50F5               	movf	tablat,w,c
 22665  005CDA  0900               	iorlw	0
 22666  005CDC  B4D8               	btfsc	status,2,c
 22667  005CDE  D014               	goto	u11860
 22668  005CE0  5012               	movf	strncmp@n^0,w,c
 22669  005CE2  1013               	iorwf	(strncmp@n+1)^0,w,c
 22670  005CE4  B4D8               	btfsc	status,2,c
 22671  005CE6  D010               	goto	u11860
 22672  005CE8  C015  FFF6         	movff	strncmp@l,tblptrl
 22673  005CEC  C016  FFF7         	movff	strncmp@l+1,tblptrh
 22674  005CF0                     	if	0	;tblptru may be non-zero
 22675  005CF0                     	endif
 22676  005CF0                     	if	0	;tblptru may be non-zero
 22677  005CF0                     	endif
 22678  005CF0  0008               	tblrd		*
 22679  005CF2  CFF5 F014          	movff	tablat,??_strncmp
 22680  005CF6  C017  FFF6         	movff	strncmp@r,tblptrl
 22681  005CFA  C018  FFF7         	movff	strncmp@r+1,tblptrh
 22682  005CFE                     	if	0	;tblptru may be non-zero
 22683  005CFE                     	endif
 22684  005CFE                     	if	0	;tblptru may be non-zero
 22685  005CFE                     	endif
 22686  005CFE  0008               	tblrd		*
 22687  005D00  50F5               	movf	tablat,w,c
 22688  005D02  1814               	xorwf	??_strncmp^0,w,c
 22689  005D04  B4D8               	btfsc	status,2,c
 22690  005D06  D7D3               	goto	l9837
 22691  005D08                     u11860:
 22692  005D08  C015  FFF6         	movff	strncmp@l,tblptrl
 22693  005D0C  C016  FFF7         	movff	strncmp@l+1,tblptrh
 22694  005D10                     	if	0	;tblptru may be non-zero
 22695  005D10                     	endif
 22696  005D10                     	if	0	;tblptru may be non-zero
 22697  005D10                     	endif
 22698  005D10  0008               	tblrd		*
 22699  005D12  CFF5 F014          	movff	tablat,??_strncmp
 22700  005D16  C017  FFF6         	movff	strncmp@r,tblptrl
 22701  005D1A  C018  FFF7         	movff	strncmp@r+1,tblptrh
 22702  005D1E                     	if	0	;tblptru may be non-zero
 22703  005D1E                     	endif
 22704  005D1E                     	if	0	;tblptru may be non-zero
 22705  005D1E                     	endif
 22706  005D1E  0008               	tblrd		*
 22707  005D20  50F5               	movf	tablat,w,c
 22708  005D22  5C14               	subwf	??_strncmp^0,w,c
 22709  005D24  6E0E               	movwf	?_strncmp^0,c
 22710  005D26  6A0F               	clrf	(?_strncmp+1)^0,c
 22711  005D28  A0D8               	btfss	status,0,c
 22712  005D2A  060F               	decf	(?_strncmp+1)^0,f,c
 22713  005D2C  0012               	return		;funcret
 22714  005D2E                     __end_of_strncmp:
 22715                           	opt callstack 0
 22716                           
 22717 ;; *************** function _stoa *****************
 22718 ;; Defined at:
 22719 ;;		line 546 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 22720 ;; Parameters:    Size  Location     Type
 22721 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
 22722 ;;		 -> NULL(0), 
 22723 ;;  s               2   20[COMRAM] PTR unsigned char 
 22724 ;;		 -> ?_printf(2), CalculateGridSquare@grid(7), STR_89(14), STR_88(7), 
 22725 ;;		 -> STR_87(6), STR_86(12), STR_85(17), itoa@buffer(12), 
 22726 ;;		 -> STR_84(5), STR_83(5), STR_82(7), STR_81(7), 
 22727 ;;		 -> STR_80(8), STR_79(5), GPS_lon(15), GPS_lat(15), 
 22728 ;;		 -> STR_78(4), STR_77(4), STR_76(6), STR_75(5), 
 22729 ;;		 -> STR_74(4), STR_73(4), STR_72(10), GPS_time(9), 
 22730 ;;		 -> STR_71(17), STR_70(17), STR_69(17), STR_68(7), 
 22731 ;;		 -> STR_67(7), STR_66(17), STR_65(17), STR_64(17), 
 22732 ;;		 -> STR_63(7), STR_62(7), STR_61(17), STR_60(17), 
 22733 ;;		 -> STR_59(17), STR_58(7), STR_57(7), STR_56(6), 
 22734 ;;		 -> STR_55(6), STR_54(17), STR_53(5), STR_52(5), 
 22735 ;;		 -> STR_51(5), STR_50(5), STR_49(3), STR_48(17), 
 22736 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 22737 ;;		 -> STR_43(17), STR_42(4), STR_41(17), ssd1306_setpos@x(1), 
 22738 ;;		 -> STR_39(17), STR_38(17), 
 22739 ;; Auto vars:     Size  Location     Type
 22740 ;;  nuls            7   23[COMRAM] unsigned char [7]
 22741 ;;  l               2   38[COMRAM] int 
 22742 ;;  p               2   36[COMRAM] int 
 22743 ;;  cp              2   34[COMRAM] PTR unsigned char 
 22744 ;;		 -> ?_printf(2), stoa@nuls(7), CalculateGridSquare@grid(7), STR_89(14), 
 22745 ;;		 -> STR_88(7), STR_87(6), STR_86(12), STR_85(17), 
 22746 ;;		 -> itoa@buffer(12), STR_84(5), STR_83(5), STR_82(7), 
 22747 ;;		 -> STR_81(7), STR_80(8), STR_79(5), GPS_lon(15), 
 22748 ;;		 -> GPS_lat(15), STR_78(4), STR_77(4), STR_76(6), 
 22749 ;;		 -> STR_75(5), STR_74(4), STR_73(4), STR_72(10), 
 22750 ;;		 -> GPS_time(9), STR_71(17), STR_70(17), STR_69(17), 
 22751 ;;		 -> STR_68(7), STR_67(7), STR_66(17), STR_65(17), 
 22752 ;;		 -> STR_64(17), STR_63(7), STR_62(7), STR_61(17), 
 22753 ;;		 -> STR_60(17), STR_59(17), STR_58(7), STR_57(7), 
 22754 ;;		 -> STR_56(6), STR_55(6), STR_54(17), STR_53(5), 
 22755 ;;		 -> STR_52(5), STR_51(5), STR_50(5), STR_49(3), 
 22756 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 22757 ;;		 -> STR_44(17), STR_43(17), STR_42(4), STR_41(17), 
 22758 ;;		 -> ssd1306_setpos@x(1), STR_39(17), STR_38(17), 
 22759 ;;  w               2   32[COMRAM] int 
 22760 ;;  i               2   30[COMRAM] int 
 22761 ;; Return value:  Size  Location     Type
 22762 ;;                  2   18[COMRAM] int 
 22763 ;; Registers used:
 22764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22765 ;; Tracked objects:
 22766 ;;		On entry : 0/0
 22767 ;;		On exit  : 0/0
 22768 ;;		Unchanged: 0/0
 22769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22770 ;;      Params:         4       0       0       0       0       0       0
 22771 ;;      Locals:        17       0       0       0       0       0       0
 22772 ;;      Temps:          1       0       0       0       0       0       0
 22773 ;;      Totals:        22       0       0       0       0       0       0
 22774 ;;Total ram usage:       22 bytes
 22775 ;; Hardware stack levels used:    1
 22776 ;; Hardware stack levels required when called:    4
 22777 ;; This function calls:
 22778 ;;		_fputc
 22779 ;;		_strlen
 22780 ;; This function is called by:
 22781 ;;		_vfpfcnvrt
 22782 ;; This function uses a non-reentrant model
 22783 ;;
 22784                           
 22785                           	psect	text92
 22786  0048AC                     __ptext92:
 22787                           	opt callstack 0
 22788  0048AC                     _stoa:
 22789                           	opt callstack 21
 22790                           
 22791                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 546: static int stoa(FILE *fp
      +                          , char *s);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 547: {;/opt/microch
      +                          ip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 548:     char *cp, nuls[] = "(null)";
 22792                           
 22793                           ;incstack = 0
 22794  0048AC  EE22  F000         	lfsr	2,stoa@F1139
 22795  0048B0  EE10  F018         	lfsr	1,stoa@nuls
 22796  0048B4  0E06               	movlw	6
 22797  0048B6                     u11551:
 22798  0048B6  CFDB FFE3          	movff	plusw2,plusw1
 22799  0048BA  06E8               	decf	wreg,f,c
 22800  0048BC  E2FC               	bc	u11551
 22801                           
 22802                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 549:     int i, l, p, w;;/opt
      +                          /microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 552:     cp = s;
 22803  0048BE  C015  F023         	movff	stoa@s,stoa@cp
 22804  0048C2  C016  F024         	movff	stoa@s+1,stoa@cp+1
 22805                           
 22806                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 553:     if (!cp) {
 22807  0048C6  5023               	movf	stoa@cp^0,w,c
 22808  0048C8  1024               	iorwf	(stoa@cp+1)^0,w,c
 22809  0048CA  A4D8               	btfss	status,2,c
 22810  0048CC  D003               	goto	l9731
 22811                           
 22812                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 554:         cp = nuls;
 22813  0048CE  0E18               	movlw	low stoa@nuls
 22814  0048D0  6E23               	movwf	stoa@cp^0,c
 22815  0048D2  6A24               	clrf	(stoa@cp+1)^0,c
 22816  0048D4                     l9731:
 22817                           
 22818                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 558:     l = strlen(cp);
 22819  0048D4  C023  F00E         	movff	stoa@cp,strlen@s
 22820  0048D8  C024  F00F         	movff	stoa@cp+1,strlen@s+1
 22821  0048DC  EC89  F037         	call	_strlen	;wreg free
 22822  0048E0  C00E  F027         	movff	?_strlen,stoa@l
 22823  0048E4  C00F  F028         	movff	?_strlen+1,stoa@l+1
 22824                           
 22825                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 559:     p = prec;
 22826  0048E8  C065  F025         	movff	_prec,stoa@p
 22827  0048EC  C066  F026         	movff	_prec+1,stoa@p+1
 22828                           
 22829                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 560:     l = (!(p < 0) && (p 
      +                          < l)) ? p : l;
 22830  0048F0  BE26               	btfsc	(stoa@p+1)^0,7,c
 22831  0048F2  D00E               	goto	l1423
 22832  0048F4  5027               	movf	stoa@l^0,w,c
 22833  0048F6  5C25               	subwf	stoa@p^0,w,c
 22834  0048F8  5026               	movf	(stoa@p+1)^0,w,c
 22835  0048FA  0A80               	xorlw	128
 22836  0048FC  6E17               	movwf	??_stoa^0,c
 22837  0048FE  5028               	movf	(stoa@l+1)^0,w,c
 22838  004900  0A80               	xorlw	128
 22839  004902  5817               	subwfb	??_stoa^0,w,c
 22840  004904  B0D8               	btfsc	status,0,c
 22841  004906  D004               	goto	l1423
 22842  004908  C025  F027         	movff	stoa@p,stoa@l
 22843  00490C  C026  F028         	movff	stoa@p+1,stoa@l+1
 22844  004910                     l1423:
 22845                           
 22846                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 561:     p = l;
 22847  004910  C027  F025         	movff	stoa@l,stoa@p
 22848  004914  C028  F026         	movff	stoa@l+1,stoa@p+1
 22849                           
 22850                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 562:     w = width;
 22851  004918  C0C5  F021         	movff	_width,stoa@w
 22852  00491C  C0C6  F022         	movff	_width+1,stoa@w+1
 22853                           
 22854                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 565:     if (!(flags & (1 << 
      +                          0))) {
 22855  004920  A067               	btfss	_flags^0,0,c
 22856  004922  D00D               	goto	l9745
 22857  004924  D016               	goto	u11600
 22858  004926                     l9741:
 22859                           
 22860                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 567:             fputc(' ', f
      +                          p);
 22861  004926  0E00               	movlw	0
 22862  004928  6E10               	movwf	(fputc@c+1)^0,c
 22863  00492A  0E20               	movlw	32
 22864  00492C  6E0F               	movwf	fputc@c^0,c
 22865  00492E  C013  F011         	movff	stoa@fp,fputc@fp
 22866  004932  C014  F012         	movff	stoa@fp+1,fputc@fp+1
 22867  004936  EC5B  F03A         	call	_fputc	;wreg free
 22868                           
 22869                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 568:             ++l;
 22870  00493A  4A27               	infsnz	stoa@l^0,f,c
 22871  00493C  2A28               	incf	(stoa@l+1)^0,f,c
 22872  00493E                     l9745:
 22873                           
 22874                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 566:         while (l < w) {
 22875  00493E  5021               	movf	stoa@w^0,w,c
 22876  004940  5C27               	subwf	stoa@l^0,w,c
 22877  004942  5028               	movf	(stoa@l+1)^0,w,c
 22878  004944  0A80               	xorlw	128
 22879  004946  6E17               	movwf	??_stoa^0,c
 22880  004948  5022               	movf	(stoa@w+1)^0,w,c
 22881  00494A  0A80               	xorlw	128
 22882  00494C  5817               	subwfb	??_stoa^0,w,c
 22883  00494E  A0D8               	btfss	status,0,c
 22884  004950  D7EA               	goto	l9741
 22885  004952                     u11600:
 22886                           
 22887                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 573:     i = 0;
 22888  004952  0E00               	movlw	0
 22889  004954  6E20               	movwf	(stoa@i+1)^0,c
 22890  004956  0E00               	movlw	0
 22891  004958  6E1F               	movwf	stoa@i^0,c
 22892                           
 22893                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 22894  00495A  D01E               	goto	l9755
 22895  00495C                     l9749:
 22896                           
 22897                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 575:         fputc(*cp, fp);
 22898  00495C  C023  FFF6         	movff	stoa@cp,tblptrl
 22899  004960  C024  FFF7         	movff	stoa@cp+1,tblptrh
 22900  004964  6AF8               	clrf	tblptru,c
 22901  004966  0E05               	movlw	(high __ramtop+-1)
 22902  004968  64F7               	cpfsgt	tblptrh,c
 22903  00496A  D003               	bra	u11617
 22904  00496C  0008               	tblrd		*
 22905  00496E  50F5               	movf	tablat,w,c
 22906  004970  D005               	bra	u11610
 22907  004972                     u11617:
 22908  004972  CFF6 FFE9          	movff	tblptrl,fsr0l
 22909  004976  CFF7 FFEA          	movff	tblptrh,fsr0h
 22910  00497A  50EF               	movf	indf0,w,c
 22911  00497C                     u11610:
 22912  00497C  6E17               	movwf	??_stoa^0,c
 22913  00497E  5017               	movf	??_stoa^0,w,c
 22914  004980  6E0F               	movwf	fputc@c^0,c
 22915  004982  6A10               	clrf	(fputc@c+1)^0,c
 22916  004984  C013  F011         	movff	stoa@fp,fputc@fp
 22917  004988  C014  F012         	movff	stoa@fp+1,fputc@fp+1
 22918  00498C  EC5B  F03A         	call	_fputc	;wreg free
 22919                           
 22920                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 576:         ++cp;
 22921  004990  4A23               	infsnz	stoa@cp^0,f,c
 22922  004992  2A24               	incf	(stoa@cp+1)^0,f,c
 22923                           
 22924                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 577:         ++i;
 22925  004994  4A1F               	infsnz	stoa@i^0,f,c
 22926  004996  2A20               	incf	(stoa@i+1)^0,f,c
 22927  004998                     l9755:
 22928                           
 22929                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 22930  004998  5025               	movf	stoa@p^0,w,c
 22931  00499A  5C1F               	subwf	stoa@i^0,w,c
 22932  00499C  5020               	movf	(stoa@i+1)^0,w,c
 22933  00499E  0A80               	xorlw	128
 22934  0049A0  6E17               	movwf	??_stoa^0,c
 22935  0049A2  5026               	movf	(stoa@p+1)^0,w,c
 22936  0049A4  0A80               	xorlw	128
 22937  0049A6  5817               	subwfb	??_stoa^0,w,c
 22938  0049A8  A0D8               	btfss	status,0,c
 22939  0049AA  D7D8               	goto	l9749
 22940                           
 22941                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 581:     if (flags & (1 << 0)
      +                          ) {
 22942  0049AC  B067               	btfsc	_flags^0,0,c
 22943  0049AE  D00D               	goto	l9763
 22944  0049B0  D016               	goto	u11640
 22945  0049B2                     l9759:
 22946                           
 22947                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 583:             fputc(' ', f
      +                          p);
 22948  0049B2  0E00               	movlw	0
 22949  0049B4  6E10               	movwf	(fputc@c+1)^0,c
 22950  0049B6  0E20               	movlw	32
 22951  0049B8  6E0F               	movwf	fputc@c^0,c
 22952  0049BA  C013  F011         	movff	stoa@fp,fputc@fp
 22953  0049BE  C014  F012         	movff	stoa@fp+1,fputc@fp+1
 22954  0049C2  EC5B  F03A         	call	_fputc	;wreg free
 22955                           
 22956                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 584:             ++l;
 22957  0049C6  4A27               	infsnz	stoa@l^0,f,c
 22958  0049C8  2A28               	incf	(stoa@l+1)^0,f,c
 22959  0049CA                     l9763:
 22960                           
 22961                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 582:         while (l < w) {
 22962  0049CA  5021               	movf	stoa@w^0,w,c
 22963  0049CC  5C27               	subwf	stoa@l^0,w,c
 22964  0049CE  5028               	movf	(stoa@l+1)^0,w,c
 22965  0049D0  0A80               	xorlw	128
 22966  0049D2  6E17               	movwf	??_stoa^0,c
 22967  0049D4  5022               	movf	(stoa@w+1)^0,w,c
 22968  0049D6  0A80               	xorlw	128
 22969  0049D8  5817               	subwfb	??_stoa^0,w,c
 22970  0049DA  A0D8               	btfss	status,0,c
 22971  0049DC  D7EA               	goto	l9759
 22972  0049DE                     u11640:
 22973                           
 22974                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 588:     return l;
 22975                           
 22976                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 586:     }
 22977  0049DE  C027  F013         	movff	stoa@l,?_stoa
 22978  0049E2  C028  F014         	movff	stoa@l+1,?_stoa+1
 22979  0049E6  0012               	return		;funcret
 22980  0049E8                     __end_of_stoa:
 22981                           	opt callstack 0
 22982                           
 22983 ;; *************** function _dtoa *****************
 22984 ;; Defined at:
 22985 ;;		line 274 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 22986 ;; Parameters:    Size  Location     Type
 22987 ;;  fp              2   39[COMRAM] PTR struct _IO_FILE
 22988 ;;		 -> NULL(0), 
 22989 ;;  d               8   41[COMRAM] long long 
 22990 ;; Auto vars:     Size  Location     Type
 22991 ;;  n               8   65[COMRAM] long long 
 22992 ;;  i               2   73[COMRAM] int 
 22993 ;;  s               2   63[COMRAM] int 
 22994 ;;  w               2   61[COMRAM] int 
 22995 ;;  p               2   59[COMRAM] int 
 22996 ;; Return value:  Size  Location     Type
 22997 ;;                  2   39[COMRAM] int 
 22998 ;; Registers used:
 22999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23000 ;; Tracked objects:
 23001 ;;		On entry : 0/0
 23002 ;;		On exit  : 0/0
 23003 ;;		Unchanged: 0/0
 23004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23005 ;;      Params:        10       0       0       0       0       0       0
 23006 ;;      Locals:        18       0       0       0       0       0       0
 23007 ;;      Temps:          8       0       0       0       0       0       0
 23008 ;;      Totals:        36       0       0       0       0       0       0
 23009 ;;Total ram usage:       36 bytes
 23010 ;; Hardware stack levels used:    1
 23011 ;; Hardware stack levels required when called:    6
 23012 ;; This function calls:
 23013 ;;		___aodiv
 23014 ;;		___aomod
 23015 ;;		_abs
 23016 ;;		_pad
 23017 ;; This function is called by:
 23018 ;;		_vfpfcnvrt
 23019 ;; This function uses a non-reentrant model
 23020 ;;
 23021                           
 23022                           	psect	text93
 23023  0031DA                     __ptext93:
 23024                           	opt callstack 0
 23025  0031DA                     _dtoa:
 23026                           	opt callstack 19
 23027                           
 23028                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 274: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 275: {;/opt/mic
      +                          rochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 276:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.10/pic/sources/c99/common/doprnt.c: 277:     long long n;;/opt/microchip/xc8/v2
      +                          .10/pic/sources/c99/common/doprnt.c: 280:     n = d;
 23029                           
 23030                           ;incstack = 0
 23031  0031DA  C02A  F042         	movff	dtoa@d,dtoa@n
 23032  0031DE  C02B  F043         	movff	dtoa@d+1,dtoa@n+1
 23033  0031E2  C02C  F044         	movff	dtoa@d+2,dtoa@n+2
 23034  0031E6  C02D  F045         	movff	dtoa@d+3,dtoa@n+3
 23035  0031EA  C02E  F046         	movff	dtoa@d+4,dtoa@n+4
 23036  0031EE  C02F  F047         	movff	dtoa@d+5,dtoa@n+5
 23037  0031F2  C030  F048         	movff	dtoa@d+6,dtoa@n+6
 23038  0031F6  C031  F049         	movff	dtoa@d+7,dtoa@n+7
 23039                           
 23040                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ? 1 : 0;
 23041  0031FA  AE49               	btfss	(dtoa@n+7)^0,7,c
 23042  0031FC  D002               	goto	u11400
 23043  0031FE  0E01               	movlw	1
 23044  003200  D001               	goto	u11410
 23045  003202                     u11400:
 23046  003202  0E00               	movlw	0
 23047  003204                     u11410:
 23048  003204  6E40               	movwf	dtoa@s^0,c
 23049  003206  6A41               	clrf	(dtoa@s+1)^0,c
 23050                           
 23051                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 282:     if (s) {
 23052  003208  5040               	movf	dtoa@s^0,w,c
 23053  00320A  1041               	iorwf	(dtoa@s+1)^0,w,c
 23054  00320C  B4D8               	btfsc	status,2,c
 23055  00320E  D010               	goto	l9667
 23056                           
 23057                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 283:         n = -n;
 23058  003210  1E49               	comf	(dtoa@n+7)^0,f,c
 23059  003212  1E48               	comf	(dtoa@n+6)^0,f,c
 23060  003214  1E47               	comf	(dtoa@n+5)^0,f,c
 23061  003216  1E46               	comf	(dtoa@n+4)^0,f,c
 23062  003218  1E45               	comf	(dtoa@n+3)^0,f,c
 23063  00321A  1E44               	comf	(dtoa@n+2)^0,f,c
 23064  00321C  1E43               	comf	(dtoa@n+1)^0,f,c
 23065  00321E  6C42               	negf	dtoa@n^0,c
 23066  003220  0E00               	movlw	0
 23067  003222  2243               	addwfc	(dtoa@n+1)^0,f,c
 23068  003224  2244               	addwfc	(dtoa@n+2)^0,f,c
 23069  003226  2245               	addwfc	(dtoa@n+3)^0,f,c
 23070  003228  2246               	addwfc	(dtoa@n+4)^0,f,c
 23071  00322A  2247               	addwfc	(dtoa@n+5)^0,f,c
 23072  00322C  2248               	addwfc	(dtoa@n+6)^0,f,c
 23073  00322E  2249               	addwfc	(dtoa@n+7)^0,f,c
 23074  003230                     l9667:
 23075                           
 23076                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 287:     if (!(prec < 0)) {
 23077  003230  AE66               	btfss	(_prec+1)^0,7,c
 23078                           
 23079                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 288:         flags &= ~(1 << 
      +                          1);
 23080  003232  9267               	bcf	_flags^0,1,c
 23081                           
 23082                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 290:     p = (0 < prec) ? pre
      +                          c : 1;
 23083  003234  BE66               	btfsc	(_prec+1)^0,7,c
 23084  003236  D005               	goto	u11440
 23085  003238  5066               	movf	(_prec+1)^0,w,c
 23086  00323A  E108               	bnz	l1394
 23087  00323C  0465               	decf	_prec^0,w,c
 23088  00323E  B0D8               	btfsc	status,0,c
 23089  003240  D005               	goto	l1394
 23090  003242                     u11440:
 23091  003242  0E00               	movlw	0
 23092  003244  6E3D               	movwf	(dtoa@p+1)^0,c
 23093  003246  0E01               	movlw	1
 23094  003248  6E3C               	movwf	dtoa@p^0,c
 23095  00324A  D004               	goto	l1396
 23096  00324C                     l1394:
 23097  00324C  C065  F03C         	movff	_prec,dtoa@p
 23098  003250  C066  F03D         	movff	_prec+1,dtoa@p+1
 23099  003254                     l1396:
 23100                           
 23101                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 291:     w = width;
 23102  003254  C0C5  F03E         	movff	_width,dtoa@w
 23103  003258  C0C6  F03F         	movff	_width+1,dtoa@w+1
 23104                           
 23105                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 292:     if (s || (flags & (1
      +                           << 2))) {
 23106  00325C  5040               	movf	dtoa@s^0,w,c
 23107  00325E  1041               	iorwf	(dtoa@s+1)^0,w,c
 23108  003260  A4D8               	btfss	status,2,c
 23109  003262  D002               	goto	u11460
 23110  003264  A467               	btfss	_flags^0,2,c
 23111  003266  D003               	goto	l9681
 23112  003268                     u11460:
 23113                           
 23114                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 293:         --w;
 23115  003268  063E               	decf	dtoa@w^0,f,c
 23116  00326A  A0D8               	btfss	status,0,c
 23117  00326C  063F               	decf	(dtoa@w+1)^0,f,c
 23118  00326E                     l9681:
 23119                           
 23120                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(dbuf) - 1
      +                          ;
 23121  00326E  0E00               	movlw	0
 23122  003270  6E4B               	movwf	(dtoa@i+1)^0,c
 23123  003272  0E1F               	movlw	31
 23124  003274  6E4A               	movwf	dtoa@i^0,c
 23125                           
 23126                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '\0';
 23127  003276  0E00               	movlw	0
 23128  003278  0102               	movlb	2	; () banked
 23129  00327A  6FD8               	movwf	(_dbuf+31)& (0+255),b
 23130                           
 23131                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 23132  00327C  D07C               	goto	l9695
 23133  00327E                     l9685:
 23134                           
 23135                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 300:         --i;
 23136  00327E  064A               	decf	dtoa@i^0,f,c
 23137  003280  A0D8               	btfss	status,0,c
 23138  003282  064B               	decf	(dtoa@i+1)^0,f,c
 23139                           
 23140                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 301:         dbuf[i] = '0' + 
      +                          abs(n % 10);
 23141  003284  0EB9               	movlw	low _dbuf
 23142  003286  244A               	addwf	dtoa@i^0,w,c
 23143  003288  6ED9               	movwf	fsr2l,c
 23144  00328A  0E02               	movlw	high _dbuf
 23145  00328C  204B               	addwfc	(dtoa@i+1)^0,w,c
 23146  00328E  6EDA               	movwf	fsr2h,c
 23147  003290  C042  F00E         	movff	dtoa@n,___aomod@dividend
 23148  003294  C043  F00F         	movff	dtoa@n+1,___aomod@dividend+1
 23149  003298  C044  F010         	movff	dtoa@n+2,___aomod@dividend+2
 23150  00329C  C045  F011         	movff	dtoa@n+3,___aomod@dividend+3
 23151  0032A0  C046  F012         	movff	dtoa@n+4,___aomod@dividend+4
 23152  0032A4  C047  F013         	movff	dtoa@n+5,___aomod@dividend+5
 23153  0032A8  C048  F014         	movff	dtoa@n+6,___aomod@dividend+6
 23154  0032AC  C049  F015         	movff	dtoa@n+7,___aomod@dividend+7
 23155  0032B0  0E0A               	movlw	10
 23156  0032B2  6E16               	movwf	___aomod@divisor^0,c
 23157  0032B4  0E00               	movlw	0
 23158  0032B6  6E17               	movwf	(___aomod@divisor+1)^0,c
 23159  0032B8  0E00               	movlw	0
 23160  0032BA  6E18               	movwf	(___aomod@divisor+2)^0,c
 23161  0032BC  0E00               	movlw	0
 23162  0032BE  6E19               	movwf	(___aomod@divisor+3)^0,c
 23163  0032C0  0E00               	movlw	0
 23164  0032C2  6E1A               	movwf	(___aomod@divisor+4)^0,c
 23165  0032C4  0E00               	movlw	0
 23166  0032C6  6E1B               	movwf	(___aomod@divisor+5)^0,c
 23167  0032C8  0E00               	movlw	0
 23168  0032CA  6E1C               	movwf	(___aomod@divisor+6)^0,c
 23169  0032CC  0E00               	movlw	0
 23170  0032CE  6E1D               	movwf	(___aomod@divisor+7)^0,c
 23171  0032D0  EC8D  F025         	call	___aomod	;wreg free
 23172  0032D4  C00E  F032         	movff	?___aomod,??_dtoa
 23173  0032D8  C00F  F033         	movff	?___aomod+1,??_dtoa+1
 23174  0032DC  C010  F034         	movff	?___aomod+2,??_dtoa+2
 23175  0032E0  C011  F035         	movff	?___aomod+3,??_dtoa+3
 23176  0032E4  C012  F036         	movff	?___aomod+4,??_dtoa+4
 23177  0032E8  C013  F037         	movff	?___aomod+5,??_dtoa+5
 23178  0032EC  C014  F038         	movff	?___aomod+6,??_dtoa+6
 23179  0032F0  C015  F039         	movff	?___aomod+7,??_dtoa+7
 23180  0032F4  C032  F020         	movff	??_dtoa,abs@a
 23181  0032F8  C034  F021         	movff	??_dtoa+2,abs@a+1
 23182  0032FC  EC08  F039         	call	_abs	;wreg free
 23183  003300  5020               	movf	?_abs^0,w,c
 23184  003302  0F30               	addlw	48
 23185  003304  6EDF               	movwf	indf2,c
 23186                           
 23187                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 302:         --p;
 23188  003306  063C               	decf	dtoa@p^0,f,c
 23189  003308  A0D8               	btfss	status,0,c
 23190  00330A  063D               	decf	(dtoa@p+1)^0,f,c
 23191                           
 23192                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 303:         --w;
 23193  00330C  063E               	decf	dtoa@w^0,f,c
 23194  00330E  A0D8               	btfss	status,0,c
 23195  003310  063F               	decf	(dtoa@w+1)^0,f,c
 23196                           
 23197                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 304:         n = n / 10;
 23198  003312  C042  F00E         	movff	dtoa@n,___aodiv@dividend
 23199  003316  C043  F00F         	movff	dtoa@n+1,___aodiv@dividend+1
 23200  00331A  C044  F010         	movff	dtoa@n+2,___aodiv@dividend+2
 23201  00331E  C045  F011         	movff	dtoa@n+3,___aodiv@dividend+3
 23202  003322  C046  F012         	movff	dtoa@n+4,___aodiv@dividend+4
 23203  003326  C047  F013         	movff	dtoa@n+5,___aodiv@dividend+5
 23204  00332A  C048  F014         	movff	dtoa@n+6,___aodiv@dividend+6
 23205  00332E  C049  F015         	movff	dtoa@n+7,___aodiv@dividend+7
 23206  003332  0E0A               	movlw	10
 23207  003334  6E16               	movwf	___aodiv@divisor^0,c
 23208  003336  0E00               	movlw	0
 23209  003338  6E17               	movwf	(___aodiv@divisor+1)^0,c
 23210  00333A  0E00               	movlw	0
 23211  00333C  6E18               	movwf	(___aodiv@divisor+2)^0,c
 23212  00333E  0E00               	movlw	0
 23213  003340  6E19               	movwf	(___aodiv@divisor+3)^0,c
 23214  003342  0E00               	movlw	0
 23215  003344  6E1A               	movwf	(___aodiv@divisor+4)^0,c
 23216  003346  0E00               	movlw	0
 23217  003348  6E1B               	movwf	(___aodiv@divisor+5)^0,c
 23218  00334A  0E00               	movlw	0
 23219  00334C  6E1C               	movwf	(___aodiv@divisor+6)^0,c
 23220  00334E  0E00               	movlw	0
 23221  003350  6E1D               	movwf	(___aodiv@divisor+7)^0,c
 23222  003352  ECB2  F023         	call	___aodiv	;wreg free
 23223  003356  C00E  F042         	movff	?___aodiv,dtoa@n
 23224  00335A  C00F  F043         	movff	?___aodiv+1,dtoa@n+1
 23225  00335E  C010  F044         	movff	?___aodiv+2,dtoa@n+2
 23226  003362  C011  F045         	movff	?___aodiv+3,dtoa@n+3
 23227  003366  C012  F046         	movff	?___aodiv+4,dtoa@n+4
 23228  00336A  C013  F047         	movff	?___aodiv+5,dtoa@n+5
 23229  00336E  C014  F048         	movff	?___aodiv+6,dtoa@n+6
 23230  003372  C015  F049         	movff	?___aodiv+7,dtoa@n+7
 23231  003376                     l9695:
 23232                           
 23233                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 23234  003376  BE4B               	btfsc	(dtoa@i+1)^0,7,c
 23235  003378  D01F               	goto	u11510
 23236  00337A  504B               	movf	(dtoa@i+1)^0,w,c
 23237  00337C  E103               	bnz	u11470
 23238  00337E  044A               	decf	dtoa@i^0,w,c
 23239  003380  A0D8               	btfss	status,0,c
 23240  003382  D01A               	goto	u11510
 23241  003384                     u11470:
 23242  003384  5042               	movf	dtoa@n^0,w,c
 23243  003386  1043               	iorwf	(dtoa@n+1)^0,w,c
 23244  003388  1044               	iorwf	(dtoa@n+2)^0,w,c
 23245  00338A  1045               	iorwf	(dtoa@n+3)^0,w,c
 23246  00338C  1046               	iorwf	(dtoa@n+4)^0,w,c
 23247  00338E  1047               	iorwf	(dtoa@n+5)^0,w,c
 23248  003390  1048               	iorwf	(dtoa@n+6)^0,w,c
 23249  003392  1049               	iorwf	(dtoa@n+7)^0,w,c
 23250  003394  A4D8               	btfss	status,2,c
 23251  003396  D773               	goto	l9685
 23252  003398  BE3D               	btfsc	(dtoa@p+1)^0,7,c
 23253  00339A  D005               	goto	u11490
 23254  00339C  503D               	movf	(dtoa@p+1)^0,w,c
 23255  00339E  E102               	bnz	u11491
 23256  0033A0  043C               	decf	dtoa@p^0,w,c
 23257  0033A2  B0D8               	btfsc	status,0,c
 23258  0033A4                     u11491:
 23259  0033A4  D76C               	goto	l9685
 23260  0033A6                     u11490:
 23261  0033A6  BE3F               	btfsc	(dtoa@w+1)^0,7,c
 23262  0033A8  D007               	goto	u11510
 23263  0033AA  503F               	movf	(dtoa@w+1)^0,w,c
 23264  0033AC  E103               	bnz	u11500
 23265  0033AE  043E               	decf	dtoa@w^0,w,c
 23266  0033B0  A0D8               	btfss	status,0,c
 23267  0033B2  D002               	goto	u11510
 23268  0033B4                     u11500:
 23269  0033B4  B267               	btfsc	_flags^0,1,c
 23270  0033B6  D763               	goto	l9685
 23271  0033B8                     u11510:
 23272                           
 23273                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 308:     if (s || (flags & (1
      +                           << 2))) {
 23274  0033B8  5040               	movf	dtoa@s^0,w,c
 23275  0033BA  1041               	iorwf	(dtoa@s+1)^0,w,c
 23276  0033BC  A4D8               	btfss	status,2,c
 23277  0033BE  D002               	goto	u11530
 23278  0033C0  A467               	btfss	_flags^0,2,c
 23279  0033C2  D017               	goto	l9719
 23280  0033C4                     u11530:
 23281                           
 23282                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 309:         --i;
 23283  0033C4  064A               	decf	dtoa@i^0,f,c
 23284  0033C6  A0D8               	btfss	status,0,c
 23285  0033C8  064B               	decf	(dtoa@i+1)^0,f,c
 23286                           
 23287                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 310:         dbuf[i] = s ? '-
      +                          ' : '+';
 23288  0033CA  5040               	movf	dtoa@s^0,w,c
 23289  0033CC  1041               	iorwf	(dtoa@s+1)^0,w,c
 23290  0033CE  A4D8               	btfss	status,2,c
 23291  0033D0  D004               	goto	l9715
 23292  0033D2  0E00               	movlw	0
 23293  0033D4  6E3B               	movwf	(_dtoa$3087+1)^0,c
 23294  0033D6  0E2B               	movlw	43
 23295  0033D8  D003               	goto	L16
 23296  0033DA                     l9715:
 23297  0033DA  0E00               	movlw	0
 23298  0033DC  6E3B               	movwf	(_dtoa$3087+1)^0,c
 23299  0033DE  0E2D               	movlw	45
 23300  0033E0                     L16:
 23301  0033E0  6E3A               	movwf	_dtoa$3087^0,c
 23302  0033E2  0EB9               	movlw	low _dbuf
 23303  0033E4  244A               	addwf	dtoa@i^0,w,c
 23304  0033E6  6ED9               	movwf	fsr2l,c
 23305  0033E8  0E02               	movlw	high _dbuf
 23306  0033EA  204B               	addwfc	(dtoa@i+1)^0,w,c
 23307  0033EC  6EDA               	movwf	fsr2h,c
 23308  0033EE  C03A  FFDF         	movff	_dtoa$3087,indf2
 23309  0033F2                     l9719:
 23310                           
 23311                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 314:     return pad(fp, &dbuf
      +                          [i], w);
 23312  0033F2  C028  F01A         	movff	dtoa@fp,pad@fp
 23313  0033F6  C029  F01B         	movff	dtoa@fp+1,pad@fp+1
 23314  0033FA  0EB9               	movlw	low _dbuf
 23315  0033FC  244A               	addwf	dtoa@i^0,w,c
 23316  0033FE  6E1C               	movwf	pad@buf^0,c
 23317  003400  0E02               	movlw	high _dbuf
 23318  003402  204B               	addwfc	(dtoa@i+1)^0,w,c
 23319  003404  6E1D               	movwf	(pad@buf+1)^0,c
 23320  003406  C03E  F01E         	movff	dtoa@w,pad@p
 23321  00340A  C03F  F01F         	movff	dtoa@w+1,pad@p+1
 23322  00340E  EC12  F031         	call	_pad	;wreg free
 23323  003412  C01A  F028         	movff	?_pad,?_dtoa
 23324  003416  C01B  F029         	movff	?_pad+1,?_dtoa+1
 23325  00341A  0012               	return		;funcret
 23326  00341C                     __end_of_dtoa:
 23327                           	opt callstack 0
 23328                           
 23329 ;; *************** function _pad *****************
 23330 ;; Defined at:
 23331 ;;		line 72 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 23332 ;; Parameters:    Size  Location     Type
 23333 ;;  fp              2   25[COMRAM] PTR struct _IO_FILE
 23334 ;;		 -> NULL(0), 
 23335 ;;  buf             2   27[COMRAM] PTR unsigned char 
 23336 ;;		 -> dbuf(32), 
 23337 ;;  p               2   29[COMRAM] int 
 23338 ;; Auto vars:     Size  Location     Type
 23339 ;;  w               2   34[COMRAM] int 
 23340 ;;  i               2   32[COMRAM] int 
 23341 ;; Return value:  Size  Location     Type
 23342 ;;                  2   25[COMRAM] int 
 23343 ;; Registers used:
 23344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23345 ;; Tracked objects:
 23346 ;;		On entry : 0/2
 23347 ;;		On exit  : 0/0
 23348 ;;		Unchanged: 0/0
 23349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23350 ;;      Params:         6       0       0       0       0       0       0
 23351 ;;      Locals:         4       0       0       0       0       0       0
 23352 ;;      Temps:          1       0       0       0       0       0       0
 23353 ;;      Totals:        11       0       0       0       0       0       0
 23354 ;;Total ram usage:       11 bytes
 23355 ;; Hardware stack levels used:    1
 23356 ;; Hardware stack levels required when called:    5
 23357 ;; This function calls:
 23358 ;;		_fputc
 23359 ;;		_fputs
 23360 ;;		_strlen
 23361 ;; This function is called by:
 23362 ;;		_dtoa
 23363 ;;		_xtoa
 23364 ;; This function uses a non-reentrant model
 23365 ;;
 23366                           
 23367                           	psect	text94
 23368  006224                     __ptext94:
 23369                           	opt callstack 0
 23370  006224                     _pad:
 23371                           	opt callstack 19
 23372                           
 23373                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.10/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
 23374                           
 23375                           ;incstack = 0
 23376  006224  A067               	btfss	_flags^0,0,c
 23377  006226  D00A               	goto	l9469
 23378                           
 23379                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
 23380  006228  C01C  F013         	movff	pad@buf,fputs@s
 23381  00622C  C01D  F014         	movff	pad@buf+1,fputs@s+1
 23382  006230  C01A  F015         	movff	pad@fp,fputs@fp
 23383  006234  C01B  F016         	movff	pad@fp+1,fputs@fp+1
 23384  006238  EC9E  F038         	call	_fputs	;wreg free
 23385  00623C                     l9469:
 23386                           
 23387                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
 23388  00623C  BE1F               	btfsc	(pad@p+1)^0,7,c
 23389  00623E  D005               	goto	l9473
 23390  006240  C01E  F023         	movff	pad@p,pad@w
 23391  006244  C01F  F024         	movff	pad@p+1,pad@w+1
 23392  006248  D004               	goto	l1383
 23393  00624A                     l9473:
 23394  00624A  0E00               	movlw	0
 23395  00624C  6E24               	movwf	(pad@w+1)^0,c
 23396  00624E  0E00               	movlw	0
 23397  006250  6E23               	movwf	pad@w^0,c
 23398  006252                     l1383:
 23399                           
 23400                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 83:     i = 0;
 23401  006252  0E00               	movlw	0
 23402  006254  6E22               	movwf	(pad@i+1)^0,c
 23403  006256  0E00               	movlw	0
 23404  006258  6E21               	movwf	pad@i^0,c
 23405                           
 23406                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 23407  00625A  D00C               	goto	l9479
 23408  00625C                     l9475:
 23409                           
 23410                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
 23411  00625C  0E00               	movlw	0
 23412  00625E  6E10               	movwf	(fputc@c+1)^0,c
 23413  006260  0E20               	movlw	32
 23414  006262  6E0F               	movwf	fputc@c^0,c
 23415  006264  C01A  F011         	movff	pad@fp,fputc@fp
 23416  006268  C01B  F012         	movff	pad@fp+1,fputc@fp+1
 23417  00626C  EC5B  F03A         	call	_fputc	;wreg free
 23418                           
 23419                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 86:         ++i;
 23420  006270  4A21               	infsnz	pad@i^0,f,c
 23421  006272  2A22               	incf	(pad@i+1)^0,f,c
 23422  006274                     l9479:
 23423                           
 23424                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 23425  006274  5023               	movf	pad@w^0,w,c
 23426  006276  5C21               	subwf	pad@i^0,w,c
 23427  006278  5022               	movf	(pad@i+1)^0,w,c
 23428  00627A  0A80               	xorlw	128
 23429  00627C  6E20               	movwf	??_pad^0,c
 23430  00627E  5024               	movf	(pad@w+1)^0,w,c
 23431  006280  0A80               	xorlw	128
 23432  006282  5820               	subwfb	??_pad^0,w,c
 23433  006284  A0D8               	btfss	status,0,c
 23434  006286  D7EA               	goto	l9475
 23435                           
 23436                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
 23437  006288  B067               	btfsc	_flags^0,0,c
 23438  00628A  D00A               	goto	l9483
 23439                           
 23440                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
 23441  00628C  C01C  F013         	movff	pad@buf,fputs@s
 23442  006290  C01D  F014         	movff	pad@buf+1,fputs@s+1
 23443  006294  C01A  F015         	movff	pad@fp,fputs@fp
 23444  006298  C01B  F016         	movff	pad@fp+1,fputs@fp+1
 23445  00629C  EC9E  F038         	call	_fputs	;wreg free
 23446  0062A0                     l9483:
 23447                           
 23448                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
 23449  0062A0  C01C  F00E         	movff	pad@buf,strlen@s
 23450  0062A4  C01D  F00F         	movff	pad@buf+1,strlen@s+1
 23451  0062A8  EC89  F037         	call	_strlen	;wreg free
 23452  0062AC  5023               	movf	pad@w^0,w,c
 23453  0062AE  240E               	addwf	?_strlen^0,w,c
 23454  0062B0  6E1A               	movwf	?_pad^0,c
 23455  0062B2  5024               	movf	(pad@w+1)^0,w,c
 23456  0062B4  200F               	addwfc	(?_strlen+1)^0,w,c
 23457  0062B6  6E1B               	movwf	(?_pad+1)^0,c
 23458  0062B8  0012               	return		;funcret
 23459  0062BA                     __end_of_pad:
 23460                           	opt callstack 0
 23461                           
 23462 ;; *************** function _strlen *****************
 23463 ;; Defined at:
 23464 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strlen.c"
 23465 ;; Parameters:    Size  Location     Type
 23466 ;;  s               2   13[COMRAM] PTR const unsigned char 
 23467 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), CalculateGridSquare@grid(7), 
 23468 ;;		 -> gpsbuf(85), STR_89(14), STR_88(7), STR_87(6), 
 23469 ;;		 -> STR_86(12), STR_85(17), itoa@buffer(12), STR_84(5), 
 23470 ;;		 -> STR_83(5), STR_82(7), STR_81(7), STR_80(8), 
 23471 ;;		 -> STR_79(5), GPS_lon(15), GPS_lat(15), STR_78(4), 
 23472 ;;		 -> STR_77(4), STR_76(6), STR_75(5), STR_74(4), 
 23473 ;;		 -> STR_73(4), STR_72(10), GPS_time(9), STR_71(17), 
 23474 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(7), 
 23475 ;;		 -> STR_66(17), STR_65(17), STR_64(17), STR_63(7), 
 23476 ;;		 -> STR_62(7), STR_61(17), STR_60(17), STR_59(17), 
 23477 ;;		 -> STR_58(7), STR_57(7), STR_56(6), STR_55(6), 
 23478 ;;		 -> STR_54(17), STR_53(5), STR_52(5), STR_51(5), 
 23479 ;;		 -> STR_50(5), STR_49(3), STR_48(17), STR_47(17), 
 23480 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23481 ;;		 -> STR_42(4), STR_41(17), ssd1306_setpos@x(1), STR_39(17), 
 23482 ;;		 -> STR_38(17), 
 23483 ;; Auto vars:     Size  Location     Type
 23484 ;;  a               2   15[COMRAM] PTR const unsigned char 
 23485 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), CalculateGridSquare@grid(7), 
 23486 ;;		 -> gpsbuf(85), STR_89(14), STR_88(7), STR_87(6), 
 23487 ;;		 -> STR_86(12), STR_85(17), itoa@buffer(12), STR_84(5), 
 23488 ;;		 -> STR_83(5), STR_82(7), STR_81(7), STR_80(8), 
 23489 ;;		 -> STR_79(5), GPS_lon(15), GPS_lat(15), STR_78(4), 
 23490 ;;		 -> STR_77(4), STR_76(6), STR_75(5), STR_74(4), 
 23491 ;;		 -> STR_73(4), STR_72(10), GPS_time(9), STR_71(17), 
 23492 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(7), 
 23493 ;;		 -> STR_66(17), STR_65(17), STR_64(17), STR_63(7), 
 23494 ;;		 -> STR_62(7), STR_61(17), STR_60(17), STR_59(17), 
 23495 ;;		 -> STR_58(7), STR_57(7), STR_56(6), STR_55(6), 
 23496 ;;		 -> STR_54(17), STR_53(5), STR_52(5), STR_51(5), 
 23497 ;;		 -> STR_50(5), STR_49(3), STR_48(17), STR_47(17), 
 23498 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23499 ;;		 -> STR_42(4), STR_41(17), ssd1306_setpos@x(1), STR_39(17), 
 23500 ;;		 -> STR_38(17), 
 23501 ;; Return value:  Size  Location     Type
 23502 ;;                  2   13[COMRAM] unsigned int 
 23503 ;; Registers used:
 23504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 23505 ;; Tracked objects:
 23506 ;;		On entry : 0/0
 23507 ;;		On exit  : 0/0
 23508 ;;		Unchanged: 0/0
 23509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23510 ;;      Params:         2       0       0       0       0       0       0
 23511 ;;      Locals:         2       0       0       0       0       0       0
 23512 ;;      Temps:          0       0       0       0       0       0       0
 23513 ;;      Totals:         4       0       0       0       0       0       0
 23514 ;;Total ram usage:        4 bytes
 23515 ;; Hardware stack levels used:    1
 23516 ;; Hardware stack levels required when called:    2
 23517 ;; This function calls:
 23518 ;;		Nothing
 23519 ;; This function is called by:
 23520 ;;		_print_string
 23521 ;;		_show_display
 23522 ;;		_eval_gps
 23523 ;;		_pad
 23524 ;;		_stoa
 23525 ;; This function uses a non-reentrant model
 23526 ;;
 23527                           
 23528                           	psect	text95
 23529  006F12                     __ptext95:
 23530                           	opt callstack 0
 23531  006F12                     _strlen:
 23532                           	opt callstack 21
 23533                           
 23534                           ;incstack = 0
 23535  006F12  C00E  F010         	movff	strlen@s,strlen@a
 23536  006F16  C00F  F011         	movff	strlen@s+1,strlen@a+1
 23537  006F1A  D002               	goto	l9431
 23538  006F1C                     l9429:
 23539  006F1C  4A0E               	infsnz	strlen@s^0,f,c
 23540  006F1E  2A0F               	incf	(strlen@s+1)^0,f,c
 23541  006F20                     l9431:
 23542  006F20  C00E  FFF6         	movff	strlen@s,tblptrl
 23543  006F24  C00F  FFF7         	movff	strlen@s+1,tblptrh
 23544  006F28  6AF8               	clrf	tblptru,c
 23545  006F2A  0E05               	movlw	(high __ramtop+-1)
 23546  006F2C  64F7               	cpfsgt	tblptrh,c
 23547  006F2E  D003               	bra	u10937
 23548  006F30  0008               	tblrd		*
 23549  006F32  50F5               	movf	tablat,w,c
 23550  006F34  D005               	bra	u10930
 23551  006F36                     u10937:
 23552  006F36  CFF6 FFE9          	movff	tblptrl,fsr0l
 23553  006F3A  CFF7 FFEA          	movff	tblptrh,fsr0h
 23554  006F3E  50EF               	movf	indf0,w,c
 23555  006F40                     u10930:
 23556  006F40  0900               	iorlw	0
 23557  006F42  A4D8               	btfss	status,2,c
 23558  006F44  D7EB               	goto	l9429
 23559  006F46  5010               	movf	strlen@a^0,w,c
 23560  006F48  5C0E               	subwf	strlen@s^0,w,c
 23561  006F4A  6E0E               	movwf	?_strlen^0,c
 23562  006F4C  5011               	movf	(strlen@a+1)^0,w,c
 23563  006F4E  580F               	subwfb	(strlen@s+1)^0,w,c
 23564  006F50  6E0F               	movwf	(?_strlen+1)^0,c
 23565  006F52  0012               	return		;funcret
 23566  006F54                     __end_of_strlen:
 23567                           	opt callstack 0
 23568                           
 23569 ;; *************** function _fputs *****************
 23570 ;; Defined at:
 23571 ;;		line 8 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/nf_fputs.c"
 23572 ;; Parameters:    Size  Location     Type
 23573 ;;  s               2   18[COMRAM] PTR const unsigned char 
 23574 ;;		 -> dbuf(32), 
 23575 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
 23576 ;;		 -> NULL(0), 
 23577 ;; Auto vars:     Size  Location     Type
 23578 ;;  i               2   23[COMRAM] int 
 23579 ;;  c               1   22[COMRAM] unsigned char 
 23580 ;; Return value:  Size  Location     Type
 23581 ;;                  2   18[COMRAM] int 
 23582 ;; Registers used:
 23583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23584 ;; Tracked objects:
 23585 ;;		On entry : 0/2
 23586 ;;		On exit  : 0/0
 23587 ;;		Unchanged: 0/0
 23588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23589 ;;      Params:         4       0       0       0       0       0       0
 23590 ;;      Locals:         3       0       0       0       0       0       0
 23591 ;;      Temps:          0       0       0       0       0       0       0
 23592 ;;      Totals:         7       0       0       0       0       0       0
 23593 ;;Total ram usage:        7 bytes
 23594 ;; Hardware stack levels used:    1
 23595 ;; Hardware stack levels required when called:    4
 23596 ;; This function calls:
 23597 ;;		_fputc
 23598 ;; This function is called by:
 23599 ;;		_pad
 23600 ;; This function uses a non-reentrant model
 23601 ;;
 23602                           
 23603                           	psect	text96
 23604  00713C                     __ptext96:
 23605                           	opt callstack 0
 23606  00713C                     _fputs:
 23607                           	opt callstack 19
 23608                           
 23609                           ;incstack = 0
 23610  00713C  0E00               	movlw	0
 23611  00713E  6E19               	movwf	(fputs@i+1)^0,c
 23612  007140  0E00               	movlw	0
 23613  007142  6E18               	movwf	fputs@i^0,c
 23614  007144  D00B               	goto	l9443
 23615  007146                     l9439:
 23616  007146  C017  F00F         	movff	fputs@c,fputc@c
 23617  00714A  6A10               	clrf	(fputc@c+1)^0,c
 23618  00714C  C015  F011         	movff	fputs@fp,fputc@fp
 23619  007150  C016  F012         	movff	fputs@fp+1,fputc@fp+1
 23620  007154  EC5B  F03A         	call	_fputc	;wreg free
 23621  007158  4A18               	infsnz	fputs@i^0,f,c
 23622  00715A  2A19               	incf	(fputs@i+1)^0,f,c
 23623  00715C                     l9443:
 23624  00715C  5018               	movf	fputs@i^0,w,c
 23625  00715E  2413               	addwf	fputs@s^0,w,c
 23626  007160  6ED9               	movwf	fsr2l,c
 23627  007162  5019               	movf	(fputs@i+1)^0,w,c
 23628  007164  2014               	addwfc	(fputs@s+1)^0,w,c
 23629  007166  6EDA               	movwf	fsr2h,c
 23630  007168  50DF               	movf	indf2,w,c
 23631  00716A  6E17               	movwf	fputs@c^0,c
 23632  00716C  5017               	movf	fputs@c^0,w,c
 23633  00716E  B4D8               	btfsc	status,2,c
 23634  007170  0012               	return	
 23635  007172  D7E9               	goto	l9439
 23636  007174                     __end_of_fputs:
 23637                           	opt callstack 0
 23638                           
 23639 ;; *************** function _fputc *****************
 23640 ;; Defined at:
 23641 ;;		line 134 in file "src/driver/usart.c"
 23642 ;; Parameters:    Size  Location     Type
 23643 ;;  c               2   14[COMRAM] int 
 23644 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
 23645 ;;		 -> NULL(0), 
 23646 ;; Auto vars:     Size  Location     Type
 23647 ;;		None
 23648 ;; Return value:  Size  Location     Type
 23649 ;;                  2   14[COMRAM] int 
 23650 ;; Registers used:
 23651 ;;		wreg, status,2, status,0, cstack
 23652 ;; Tracked objects:
 23653 ;;		On entry : 0/0
 23654 ;;		On exit  : 0/0
 23655 ;;		Unchanged: 0/0
 23656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23657 ;;      Params:         4       0       0       0       0       0       0
 23658 ;;      Locals:         0       0       0       0       0       0       0
 23659 ;;      Temps:          0       0       0       0       0       0       0
 23660 ;;      Totals:         4       0       0       0       0       0       0
 23661 ;;Total ram usage:        4 bytes
 23662 ;; Hardware stack levels used:    1
 23663 ;; Hardware stack levels required when called:    3
 23664 ;; This function calls:
 23665 ;;		_usart_putc
 23666 ;; This function is called by:
 23667 ;;		_pad
 23668 ;;		_stoa
 23669 ;;		_vfpfcnvrt
 23670 ;;		_fputs
 23671 ;; This function uses a non-reentrant model
 23672 ;;
 23673                           
 23674                           	psect	text97
 23675  0074B6                     __ptext97:
 23676                           	opt callstack 0
 23677  0074B6                     _fputc:
 23678                           	opt callstack 19
 23679                           
 23680                           ;src/driver/usart.c: 134: int fputc(int c, FILE *fp);src/driver/usart.c: 135: {;src/driv
      +                          er/usart.c: 140:     if(c == '\n') {
 23681                           
 23682                           ;incstack = 0
 23683  0074B6  0E0A               	movlw	10
 23684  0074B8  180F               	xorwf	fputc@c^0,w,c
 23685  0074BA  1010               	iorwf	(fputc@c+1)^0,w,c
 23686  0074BC  A4D8               	btfss	status,2,c
 23687  0074BE  D003               	goto	l9413
 23688                           
 23689                           ;src/driver/usart.c: 141:         usart_putc('\r');
 23690  0074C0  0E0D               	movlw	13
 23691  0074C2  EC76  F03A         	call	_usart_putc
 23692  0074C6                     l9413:
 23693                           
 23694                           ;src/driver/usart.c: 143:     usart_putc((char)c);
 23695  0074C6  500F               	movf	fputc@c^0,w,c
 23696  0074C8  EC76  F03A         	call	_usart_putc
 23697  0074CC  0012               	return		;funcret
 23698  0074CE                     __end_of_fputc:
 23699                           	opt callstack 0
 23700                           
 23701 ;; *************** function _usart_putc *****************
 23702 ;; Defined at:
 23703 ;;		line 56 in file "src/driver/usart.c"
 23704 ;; Parameters:    Size  Location     Type
 23705 ;;  c               1    wreg     unsigned char 
 23706 ;; Auto vars:     Size  Location     Type
 23707 ;;  c               1   13[COMRAM] unsigned char 
 23708 ;; Return value:  Size  Location     Type
 23709 ;;                  1    wreg      unsigned char 
 23710 ;; Registers used:
 23711 ;;		wreg
 23712 ;; Tracked objects:
 23713 ;;		On entry : 0/1
 23714 ;;		On exit  : 0/0
 23715 ;;		Unchanged: 0/0
 23716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23717 ;;      Params:         0       0       0       0       0       0       0
 23718 ;;      Locals:         1       0       0       0       0       0       0
 23719 ;;      Temps:          0       0       0       0       0       0       0
 23720 ;;      Totals:         1       0       0       0       0       0       0
 23721 ;;Total ram usage:        1 bytes
 23722 ;; Hardware stack levels used:    1
 23723 ;; Hardware stack levels required when called:    2
 23724 ;; This function calls:
 23725 ;;		Nothing
 23726 ;; This function is called by:
 23727 ;;		_fputc
 23728 ;;		_putgps
 23729 ;; This function uses a non-reentrant model
 23730 ;;
 23731                           
 23732                           	psect	text98
 23733  0074EC                     __ptext98:
 23734                           	opt callstack 0
 23735  0074EC                     _usart_putc:
 23736                           	opt callstack 19
 23737                           
 23738                           ;incstack = 0
 23739                           ;usart_putc@c stored from wreg
 23740  0074EC  6E0E               	movwf	usart_putc@c^0,c
 23741  0074EE                     
 23742                           ;src/driver/usart.c: 60:     while(TXSTAbits.TRMT == 0) __asm(" clrwdt");
 23743  0074EE  0004               	clrwdt		;# 
 23744  0074F0  A2AC               	btfss	172,1,c	;volatile
 23745  0074F2  D7FD               	goto	l9327
 23746                           
 23747                           ;src/driver/usart.c: 62:     TXREG = c;
 23748  0074F4  C00E  FFAD         	movff	usart_putc@c,4013	;volatile
 23749  0074F8  0012               	return		;funcret
 23750  0074FA                     __end_of_usart_putc:
 23751                           	opt callstack 0
 23752                           
 23753 ;; *************** function _abs *****************
 23754 ;; Defined at:
 23755 ;;		line 1 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/abs.c"
 23756 ;; Parameters:    Size  Location     Type
 23757 ;;  a               2   31[COMRAM] int 
 23758 ;; Auto vars:     Size  Location     Type
 23759 ;;		None
 23760 ;; Return value:  Size  Location     Type
 23761 ;;                  2   31[COMRAM] int 
 23762 ;; Registers used:
 23763 ;;		wreg, status,2, status,0
 23764 ;; Tracked objects:
 23765 ;;		On entry : 0/2
 23766 ;;		On exit  : 0/0
 23767 ;;		Unchanged: 0/0
 23768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23769 ;;      Params:         2       0       0       0       0       0       0
 23770 ;;      Locals:         0       0       0       0       0       0       0
 23771 ;;      Temps:          2       0       0       0       0       0       0
 23772 ;;      Totals:         4       0       0       0       0       0       0
 23773 ;;Total ram usage:        4 bytes
 23774 ;; Hardware stack levels used:    1
 23775 ;; Hardware stack levels required when called:    2
 23776 ;; This function calls:
 23777 ;;		Nothing
 23778 ;; This function is called by:
 23779 ;;		_dtoa
 23780 ;; This function uses a non-reentrant model
 23781 ;;
 23782                           
 23783                           	psect	text99
 23784  007210                     __ptext99:
 23785                           	opt callstack 0
 23786  007210                     _abs:
 23787                           	opt callstack 22
 23788                           
 23789                           ;incstack = 0
 23790  007210  BE21               	btfsc	(abs@a+1)^0,7,c
 23791  007212  D005               	goto	u11020
 23792  007214  5021               	movf	(abs@a+1)^0,w,c
 23793  007216  E110               	bnz	l2191
 23794  007218  0420               	decf	abs@a^0,w,c
 23795  00721A  B0D8               	btfsc	status,0,c
 23796  00721C  D00D               	goto	l2191
 23797  00721E                     u11020:
 23798  00721E  C020  F022         	movff	abs@a,??_abs
 23799  007222  C021  F023         	movff	abs@a+1,??_abs+1
 23800  007226  1E22               	comf	??_abs^0,f,c
 23801  007228  1E23               	comf	(??_abs+1)^0,f,c
 23802  00722A  4A22               	infsnz	??_abs^0,f,c
 23803  00722C  2A23               	incf	(??_abs+1)^0,f,c
 23804  00722E  C022  F020         	movff	??_abs,?_abs
 23805  007232  C023  F021         	movff	??_abs+1,?_abs+1
 23806  007236  0012               	return	
 23807  007238                     l2191:
 23808  007238  C020  F020         	movff	abs@a,?_abs
 23809  00723C  C021  F021         	movff	abs@a+1,?_abs+1
 23810  007240  0012               	return		;funcret
 23811  007242                     __end_of_abs:
 23812                           	opt callstack 0
 23813                           
 23814 ;; *************** function ___aomod *****************
 23815 ;; Defined at:
 23816 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aomod.c"
 23817 ;; Parameters:    Size  Location     Type
 23818 ;;  dividend        8   13[COMRAM] long long 
 23819 ;;  divisor         8   21[COMRAM] long long 
 23820 ;; Auto vars:     Size  Location     Type
 23821 ;;  sign            1   30[COMRAM] unsigned char 
 23822 ;;  counter         1   29[COMRAM] unsigned char 
 23823 ;; Return value:  Size  Location     Type
 23824 ;;                  8   13[COMRAM] long long 
 23825 ;; Registers used:
 23826 ;;		wreg, status,2, status,0
 23827 ;; Tracked objects:
 23828 ;;		On entry : 0/2
 23829 ;;		On exit  : 0/0
 23830 ;;		Unchanged: 0/0
 23831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23832 ;;      Params:        16       0       0       0       0       0       0
 23833 ;;      Locals:         2       0       0       0       0       0       0
 23834 ;;      Temps:          0       0       0       0       0       0       0
 23835 ;;      Totals:        18       0       0       0       0       0       0
 23836 ;;Total ram usage:       18 bytes
 23837 ;; Hardware stack levels used:    1
 23838 ;; Hardware stack levels required when called:    2
 23839 ;; This function calls:
 23840 ;;		Nothing
 23841 ;; This function is called by:
 23842 ;;		_dtoa
 23843 ;; This function uses a non-reentrant model
 23844 ;;
 23845                           
 23846                           	psect	text100
 23847  004B1A                     __ptext100:
 23848                           	opt callstack 0
 23849  004B1A                     ___aomod:
 23850                           	opt callstack 22
 23851                           
 23852                           ;incstack = 0
 23853  004B1A  0E00               	movlw	0
 23854  004B1C  6E1F               	movwf	___aomod@sign^0,c
 23855  004B1E  AE15               	btfss	(___aomod@dividend+7)^0,7,c
 23856  004B20  D012               	goto	l9571
 23857  004B22  1E15               	comf	(___aomod@dividend+7)^0,f,c
 23858  004B24  1E14               	comf	(___aomod@dividend+6)^0,f,c
 23859  004B26  1E13               	comf	(___aomod@dividend+5)^0,f,c
 23860  004B28  1E12               	comf	(___aomod@dividend+4)^0,f,c
 23861  004B2A  1E11               	comf	(___aomod@dividend+3)^0,f,c
 23862  004B2C  1E10               	comf	(___aomod@dividend+2)^0,f,c
 23863  004B2E  1E0F               	comf	(___aomod@dividend+1)^0,f,c
 23864  004B30  6C0E               	negf	___aomod@dividend^0,c
 23865  004B32  0E00               	movlw	0
 23866  004B34  220F               	addwfc	(___aomod@dividend+1)^0,f,c
 23867  004B36  2210               	addwfc	(___aomod@dividend+2)^0,f,c
 23868  004B38  2211               	addwfc	(___aomod@dividend+3)^0,f,c
 23869  004B3A  2212               	addwfc	(___aomod@dividend+4)^0,f,c
 23870  004B3C  2213               	addwfc	(___aomod@dividend+5)^0,f,c
 23871  004B3E  2214               	addwfc	(___aomod@dividend+6)^0,f,c
 23872  004B40  2215               	addwfc	(___aomod@dividend+7)^0,f,c
 23873  004B42  0E01               	movlw	1
 23874  004B44  6E1F               	movwf	___aomod@sign^0,c
 23875  004B46                     l9571:
 23876  004B46  AE1D               	btfss	(___aomod@divisor+7)^0,7,c
 23877  004B48  D010               	goto	l9575
 23878  004B4A  1E1D               	comf	(___aomod@divisor+7)^0,f,c
 23879  004B4C  1E1C               	comf	(___aomod@divisor+6)^0,f,c
 23880  004B4E  1E1B               	comf	(___aomod@divisor+5)^0,f,c
 23881  004B50  1E1A               	comf	(___aomod@divisor+4)^0,f,c
 23882  004B52  1E19               	comf	(___aomod@divisor+3)^0,f,c
 23883  004B54  1E18               	comf	(___aomod@divisor+2)^0,f,c
 23884  004B56  1E17               	comf	(___aomod@divisor+1)^0,f,c
 23885  004B58  6C16               	negf	___aomod@divisor^0,c
 23886  004B5A  0E00               	movlw	0
 23887  004B5C  2217               	addwfc	(___aomod@divisor+1)^0,f,c
 23888  004B5E  2218               	addwfc	(___aomod@divisor+2)^0,f,c
 23889  004B60  2219               	addwfc	(___aomod@divisor+3)^0,f,c
 23890  004B62  221A               	addwfc	(___aomod@divisor+4)^0,f,c
 23891  004B64  221B               	addwfc	(___aomod@divisor+5)^0,f,c
 23892  004B66  221C               	addwfc	(___aomod@divisor+6)^0,f,c
 23893  004B68  221D               	addwfc	(___aomod@divisor+7)^0,f,c
 23894  004B6A                     l9575:
 23895  004B6A  5016               	movf	___aomod@divisor^0,w,c
 23896  004B6C  1017               	iorwf	(___aomod@divisor+1)^0,w,c
 23897  004B6E  1018               	iorwf	(___aomod@divisor+2)^0,w,c
 23898  004B70  1019               	iorwf	(___aomod@divisor+3)^0,w,c
 23899  004B72  101A               	iorwf	(___aomod@divisor+4)^0,w,c
 23900  004B74  101B               	iorwf	(___aomod@divisor+5)^0,w,c
 23901  004B76  101C               	iorwf	(___aomod@divisor+6)^0,w,c
 23902  004B78  101D               	iorwf	(___aomod@divisor+7)^0,w,c
 23903  004B7A  B4D8               	btfsc	status,2,c
 23904  004B7C  D03C               	goto	l9591
 23905  004B7E  0E01               	movlw	1
 23906  004B80  6E1E               	movwf	___aomod@counter^0,c
 23907  004B82  D00A               	goto	l9581
 23908  004B84                     l9579:
 23909  004B84  90D8               	bcf	status,0,c
 23910  004B86  3616               	rlcf	___aomod@divisor^0,f,c
 23911  004B88  3617               	rlcf	(___aomod@divisor+1)^0,f,c
 23912  004B8A  3618               	rlcf	(___aomod@divisor+2)^0,f,c
 23913  004B8C  3619               	rlcf	(___aomod@divisor+3)^0,f,c
 23914  004B8E  361A               	rlcf	(___aomod@divisor+4)^0,f,c
 23915  004B90  361B               	rlcf	(___aomod@divisor+5)^0,f,c
 23916  004B92  361C               	rlcf	(___aomod@divisor+6)^0,f,c
 23917  004B94  361D               	rlcf	(___aomod@divisor+7)^0,f,c
 23918  004B96  2A1E               	incf	___aomod@counter^0,f,c
 23919  004B98                     l9581:
 23920  004B98  AE1D               	btfss	(___aomod@divisor+7)^0,7,c
 23921  004B9A  D7F4               	goto	l9579
 23922  004B9C                     u11220:
 23923  004B9C  5016               	movf	___aomod@divisor^0,w,c
 23924  004B9E  5C0E               	subwf	___aomod@dividend^0,w,c
 23925  004BA0  5017               	movf	(___aomod@divisor+1)^0,w,c
 23926  004BA2  580F               	subwfb	(___aomod@dividend+1)^0,w,c
 23927  004BA4  5018               	movf	(___aomod@divisor+2)^0,w,c
 23928  004BA6  5810               	subwfb	(___aomod@dividend+2)^0,w,c
 23929  004BA8  5019               	movf	(___aomod@divisor+3)^0,w,c
 23930  004BAA  5811               	subwfb	(___aomod@dividend+3)^0,w,c
 23931  004BAC  501A               	movf	(___aomod@divisor+4)^0,w,c
 23932  004BAE  5812               	subwfb	(___aomod@dividend+4)^0,w,c
 23933  004BB0  501B               	movf	(___aomod@divisor+5)^0,w,c
 23934  004BB2  5813               	subwfb	(___aomod@dividend+5)^0,w,c
 23935  004BB4  501C               	movf	(___aomod@divisor+6)^0,w,c
 23936  004BB6  5814               	subwfb	(___aomod@dividend+6)^0,w,c
 23937  004BB8  501D               	movf	(___aomod@divisor+7)^0,w,c
 23938  004BBA  5815               	subwfb	(___aomod@dividend+7)^0,w,c
 23939  004BBC  A0D8               	btfss	status,0,c
 23940  004BBE  D010               	goto	l9587
 23941  004BC0  5016               	movf	___aomod@divisor^0,w,c
 23942  004BC2  5E0E               	subwf	___aomod@dividend^0,f,c
 23943  004BC4  5017               	movf	(___aomod@divisor+1)^0,w,c
 23944  004BC6  5A0F               	subwfb	(___aomod@dividend+1)^0,f,c
 23945  004BC8  5018               	movf	(___aomod@divisor+2)^0,w,c
 23946  004BCA  5A10               	subwfb	(___aomod@dividend+2)^0,f,c
 23947  004BCC  5019               	movf	(___aomod@divisor+3)^0,w,c
 23948  004BCE  5A11               	subwfb	(___aomod@dividend+3)^0,f,c
 23949  004BD0  501A               	movf	(___aomod@divisor+4)^0,w,c
 23950  004BD2  5A12               	subwfb	(___aomod@dividend+4)^0,f,c
 23951  004BD4  501B               	movf	(___aomod@divisor+5)^0,w,c
 23952  004BD6  5A13               	subwfb	(___aomod@dividend+5)^0,f,c
 23953  004BD8  501C               	movf	(___aomod@divisor+6)^0,w,c
 23954  004BDA  5A14               	subwfb	(___aomod@dividend+6)^0,f,c
 23955  004BDC  501D               	movf	(___aomod@divisor+7)^0,w,c
 23956  004BDE  5A15               	subwfb	(___aomod@dividend+7)^0,f,c
 23957  004BE0                     l9587:
 23958  004BE0  90D8               	bcf	status,0,c
 23959  004BE2  321D               	rrcf	(___aomod@divisor+7)^0,f,c
 23960  004BE4  321C               	rrcf	(___aomod@divisor+6)^0,f,c
 23961  004BE6  321B               	rrcf	(___aomod@divisor+5)^0,f,c
 23962  004BE8  321A               	rrcf	(___aomod@divisor+4)^0,f,c
 23963  004BEA  3219               	rrcf	(___aomod@divisor+3)^0,f,c
 23964  004BEC  3218               	rrcf	(___aomod@divisor+2)^0,f,c
 23965  004BEE  3217               	rrcf	(___aomod@divisor+1)^0,f,c
 23966  004BF0  3216               	rrcf	___aomod@divisor^0,f,c
 23967  004BF2  2E1E               	decfsz	___aomod@counter^0,f,c
 23968  004BF4  D7D3               	goto	u11220
 23969  004BF6                     l9591:
 23970  004BF6  501F               	movf	___aomod@sign^0,w,c
 23971  004BF8  B4D8               	btfsc	status,2,c
 23972  004BFA  D010               	goto	l9595
 23973  004BFC  1E15               	comf	(___aomod@dividend+7)^0,f,c
 23974  004BFE  1E14               	comf	(___aomod@dividend+6)^0,f,c
 23975  004C00  1E13               	comf	(___aomod@dividend+5)^0,f,c
 23976  004C02  1E12               	comf	(___aomod@dividend+4)^0,f,c
 23977  004C04  1E11               	comf	(___aomod@dividend+3)^0,f,c
 23978  004C06  1E10               	comf	(___aomod@dividend+2)^0,f,c
 23979  004C08  1E0F               	comf	(___aomod@dividend+1)^0,f,c
 23980  004C0A  6C0E               	negf	___aomod@dividend^0,c
 23981  004C0C  0E00               	movlw	0
 23982  004C0E  220F               	addwfc	(___aomod@dividend+1)^0,f,c
 23983  004C10  2210               	addwfc	(___aomod@dividend+2)^0,f,c
 23984  004C12  2211               	addwfc	(___aomod@dividend+3)^0,f,c
 23985  004C14  2212               	addwfc	(___aomod@dividend+4)^0,f,c
 23986  004C16  2213               	addwfc	(___aomod@dividend+5)^0,f,c
 23987  004C18  2214               	addwfc	(___aomod@dividend+6)^0,f,c
 23988  004C1A  2215               	addwfc	(___aomod@dividend+7)^0,f,c
 23989  004C1C                     l9595:
 23990  004C1C  C00E  F00E         	movff	___aomod@dividend,?___aomod
 23991  004C20  C00F  F00F         	movff	___aomod@dividend+1,?___aomod+1
 23992  004C24  C010  F010         	movff	___aomod@dividend+2,?___aomod+2
 23993  004C28  C011  F011         	movff	___aomod@dividend+3,?___aomod+3
 23994  004C2C  C012  F012         	movff	___aomod@dividend+4,?___aomod+4
 23995  004C30  C013  F013         	movff	___aomod@dividend+5,?___aomod+5
 23996  004C34  C014  F014         	movff	___aomod@dividend+6,?___aomod+6
 23997  004C38  C015  F015         	movff	___aomod@dividend+7,?___aomod+7
 23998  004C3C  0012               	return		;funcret
 23999  004C3E                     __end_of___aomod:
 24000                           	opt callstack 0
 24001                           
 24002 ;; *************** function ___aodiv *****************
 24003 ;; Defined at:
 24004 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aodiv.c"
 24005 ;; Parameters:    Size  Location     Type
 24006 ;;  dividend        8   13[COMRAM] long long 
 24007 ;;  divisor         8   21[COMRAM] long long 
 24008 ;; Auto vars:     Size  Location     Type
 24009 ;;  quotient        8   31[COMRAM] long long 
 24010 ;;  sign            1   30[COMRAM] unsigned char 
 24011 ;;  counter         1   29[COMRAM] unsigned char 
 24012 ;; Return value:  Size  Location     Type
 24013 ;;                  8   13[COMRAM] long long 
 24014 ;; Registers used:
 24015 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24016 ;; Tracked objects:
 24017 ;;		On entry : 0/2
 24018 ;;		On exit  : 0/0
 24019 ;;		Unchanged: 0/0
 24020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24021 ;;      Params:        16       0       0       0       0       0       0
 24022 ;;      Locals:        10       0       0       0       0       0       0
 24023 ;;      Temps:          0       0       0       0       0       0       0
 24024 ;;      Totals:        26       0       0       0       0       0       0
 24025 ;;Total ram usage:       26 bytes
 24026 ;; Hardware stack levels used:    1
 24027 ;; Hardware stack levels required when called:    2
 24028 ;; This function calls:
 24029 ;;		Nothing
 24030 ;; This function is called by:
 24031 ;;		_calc_mixer_corr_value
 24032 ;;		_dtoa
 24033 ;; This function uses a non-reentrant model
 24034 ;;
 24035                           
 24036                           	psect	text101
 24037  004764                     __ptext101:
 24038                           	opt callstack 0
 24039  004764                     ___aodiv:
 24040                           	opt callstack 22
 24041                           
 24042                           ;incstack = 0
 24043  004764  0E00               	movlw	0
 24044  004766  6E1F               	movwf	___aodiv@sign^0,c
 24045  004768  AE1D               	btfss	(___aodiv@divisor+7)^0,7,c
 24046  00476A  D012               	goto	l9527
 24047  00476C  1E1D               	comf	(___aodiv@divisor+7)^0,f,c
 24048  00476E  1E1C               	comf	(___aodiv@divisor+6)^0,f,c
 24049  004770  1E1B               	comf	(___aodiv@divisor+5)^0,f,c
 24050  004772  1E1A               	comf	(___aodiv@divisor+4)^0,f,c
 24051  004774  1E19               	comf	(___aodiv@divisor+3)^0,f,c
 24052  004776  1E18               	comf	(___aodiv@divisor+2)^0,f,c
 24053  004778  1E17               	comf	(___aodiv@divisor+1)^0,f,c
 24054  00477A  6C16               	negf	___aodiv@divisor^0,c
 24055  00477C  0E00               	movlw	0
 24056  00477E  2217               	addwfc	(___aodiv@divisor+1)^0,f,c
 24057  004780  2218               	addwfc	(___aodiv@divisor+2)^0,f,c
 24058  004782  2219               	addwfc	(___aodiv@divisor+3)^0,f,c
 24059  004784  221A               	addwfc	(___aodiv@divisor+4)^0,f,c
 24060  004786  221B               	addwfc	(___aodiv@divisor+5)^0,f,c
 24061  004788  221C               	addwfc	(___aodiv@divisor+6)^0,f,c
 24062  00478A  221D               	addwfc	(___aodiv@divisor+7)^0,f,c
 24063  00478C  0E01               	movlw	1
 24064  00478E  6E1F               	movwf	___aodiv@sign^0,c
 24065  004790                     l9527:
 24066  004790  AE15               	btfss	(___aodiv@dividend+7)^0,7,c
 24067  004792  D012               	goto	l9533
 24068  004794  1E15               	comf	(___aodiv@dividend+7)^0,f,c
 24069  004796  1E14               	comf	(___aodiv@dividend+6)^0,f,c
 24070  004798  1E13               	comf	(___aodiv@dividend+5)^0,f,c
 24071  00479A  1E12               	comf	(___aodiv@dividend+4)^0,f,c
 24072  00479C  1E11               	comf	(___aodiv@dividend+3)^0,f,c
 24073  00479E  1E10               	comf	(___aodiv@dividend+2)^0,f,c
 24074  0047A0  1E0F               	comf	(___aodiv@dividend+1)^0,f,c
 24075  0047A2  6C0E               	negf	___aodiv@dividend^0,c
 24076  0047A4  0E00               	movlw	0
 24077  0047A6  220F               	addwfc	(___aodiv@dividend+1)^0,f,c
 24078  0047A8  2210               	addwfc	(___aodiv@dividend+2)^0,f,c
 24079  0047AA  2211               	addwfc	(___aodiv@dividend+3)^0,f,c
 24080  0047AC  2212               	addwfc	(___aodiv@dividend+4)^0,f,c
 24081  0047AE  2213               	addwfc	(___aodiv@dividend+5)^0,f,c
 24082  0047B0  2214               	addwfc	(___aodiv@dividend+6)^0,f,c
 24083  0047B2  2215               	addwfc	(___aodiv@dividend+7)^0,f,c
 24084  0047B4  0E01               	movlw	1
 24085  0047B6  1A1F               	xorwf	___aodiv@sign^0,f,c
 24086  0047B8                     l9533:
 24087  0047B8  EE20  F020         	lfsr	2,___aodiv@quotient
 24088  0047BC  0E07               	movlw	7
 24089  0047BE                     u11141:
 24090  0047BE  6ADE               	clrf	postinc2,c
 24091  0047C0  06E8               	decf	wreg,f,c
 24092  0047C2  E2FD               	bc	u11141
 24093  0047C4  5016               	movf	___aodiv@divisor^0,w,c
 24094  0047C6  1017               	iorwf	(___aodiv@divisor+1)^0,w,c
 24095  0047C8  1018               	iorwf	(___aodiv@divisor+2)^0,w,c
 24096  0047CA  1019               	iorwf	(___aodiv@divisor+3)^0,w,c
 24097  0047CC  101A               	iorwf	(___aodiv@divisor+4)^0,w,c
 24098  0047CE  101B               	iorwf	(___aodiv@divisor+5)^0,w,c
 24099  0047D0  101C               	iorwf	(___aodiv@divisor+6)^0,w,c
 24100  0047D2  101D               	iorwf	(___aodiv@divisor+7)^0,w,c
 24101  0047D4  B4D8               	btfsc	status,2,c
 24102  0047D6  D046               	goto	l9555
 24103  0047D8  0E01               	movlw	1
 24104  0047DA  6E1E               	movwf	___aodiv@counter^0,c
 24105  0047DC  D00A               	goto	l9541
 24106  0047DE                     l9539:
 24107  0047DE  90D8               	bcf	status,0,c
 24108  0047E0  3616               	rlcf	___aodiv@divisor^0,f,c
 24109  0047E2  3617               	rlcf	(___aodiv@divisor+1)^0,f,c
 24110  0047E4  3618               	rlcf	(___aodiv@divisor+2)^0,f,c
 24111  0047E6  3619               	rlcf	(___aodiv@divisor+3)^0,f,c
 24112  0047E8  361A               	rlcf	(___aodiv@divisor+4)^0,f,c
 24113  0047EA  361B               	rlcf	(___aodiv@divisor+5)^0,f,c
 24114  0047EC  361C               	rlcf	(___aodiv@divisor+6)^0,f,c
 24115  0047EE  361D               	rlcf	(___aodiv@divisor+7)^0,f,c
 24116  0047F0  2A1E               	incf	___aodiv@counter^0,f,c
 24117  0047F2                     l9541:
 24118  0047F2  AE1D               	btfss	(___aodiv@divisor+7)^0,7,c
 24119  0047F4  D7F4               	goto	l9539
 24120  0047F6                     u11160:
 24121  0047F6  90D8               	bcf	status,0,c
 24122  0047F8  3620               	rlcf	___aodiv@quotient^0,f,c
 24123  0047FA  3621               	rlcf	(___aodiv@quotient+1)^0,f,c
 24124  0047FC  3622               	rlcf	(___aodiv@quotient+2)^0,f,c
 24125  0047FE  3623               	rlcf	(___aodiv@quotient+3)^0,f,c
 24126  004800  3624               	rlcf	(___aodiv@quotient+4)^0,f,c
 24127  004802  3625               	rlcf	(___aodiv@quotient+5)^0,f,c
 24128  004804  3626               	rlcf	(___aodiv@quotient+6)^0,f,c
 24129  004806  3627               	rlcf	(___aodiv@quotient+7)^0,f,c
 24130  004808  5016               	movf	___aodiv@divisor^0,w,c
 24131  00480A  5C0E               	subwf	___aodiv@dividend^0,w,c
 24132  00480C  5017               	movf	(___aodiv@divisor+1)^0,w,c
 24133  00480E  580F               	subwfb	(___aodiv@dividend+1)^0,w,c
 24134  004810  5018               	movf	(___aodiv@divisor+2)^0,w,c
 24135  004812  5810               	subwfb	(___aodiv@dividend+2)^0,w,c
 24136  004814  5019               	movf	(___aodiv@divisor+3)^0,w,c
 24137  004816  5811               	subwfb	(___aodiv@dividend+3)^0,w,c
 24138  004818  501A               	movf	(___aodiv@divisor+4)^0,w,c
 24139  00481A  5812               	subwfb	(___aodiv@dividend+4)^0,w,c
 24140  00481C  501B               	movf	(___aodiv@divisor+5)^0,w,c
 24141  00481E  5813               	subwfb	(___aodiv@dividend+5)^0,w,c
 24142  004820  501C               	movf	(___aodiv@divisor+6)^0,w,c
 24143  004822  5814               	subwfb	(___aodiv@dividend+6)^0,w,c
 24144  004824  501D               	movf	(___aodiv@divisor+7)^0,w,c
 24145  004826  5815               	subwfb	(___aodiv@dividend+7)^0,w,c
 24146  004828  A0D8               	btfss	status,0,c
 24147  00482A  D011               	goto	l9551
 24148  00482C  5016               	movf	___aodiv@divisor^0,w,c
 24149  00482E  5E0E               	subwf	___aodiv@dividend^0,f,c
 24150  004830  5017               	movf	(___aodiv@divisor+1)^0,w,c
 24151  004832  5A0F               	subwfb	(___aodiv@dividend+1)^0,f,c
 24152  004834  5018               	movf	(___aodiv@divisor+2)^0,w,c
 24153  004836  5A10               	subwfb	(___aodiv@dividend+2)^0,f,c
 24154  004838  5019               	movf	(___aodiv@divisor+3)^0,w,c
 24155  00483A  5A11               	subwfb	(___aodiv@dividend+3)^0,f,c
 24156  00483C  501A               	movf	(___aodiv@divisor+4)^0,w,c
 24157  00483E  5A12               	subwfb	(___aodiv@dividend+4)^0,f,c
 24158  004840  501B               	movf	(___aodiv@divisor+5)^0,w,c
 24159  004842  5A13               	subwfb	(___aodiv@dividend+5)^0,f,c
 24160  004844  501C               	movf	(___aodiv@divisor+6)^0,w,c
 24161  004846  5A14               	subwfb	(___aodiv@dividend+6)^0,f,c
 24162  004848  501D               	movf	(___aodiv@divisor+7)^0,w,c
 24163  00484A  5A15               	subwfb	(___aodiv@dividend+7)^0,f,c
 24164  00484C  8020               	bsf	___aodiv@quotient^0,0,c
 24165  00484E                     l9551:
 24166  00484E  90D8               	bcf	status,0,c
 24167  004850  321D               	rrcf	(___aodiv@divisor+7)^0,f,c
 24168  004852  321C               	rrcf	(___aodiv@divisor+6)^0,f,c
 24169  004854  321B               	rrcf	(___aodiv@divisor+5)^0,f,c
 24170  004856  321A               	rrcf	(___aodiv@divisor+4)^0,f,c
 24171  004858  3219               	rrcf	(___aodiv@divisor+3)^0,f,c
 24172  00485A  3218               	rrcf	(___aodiv@divisor+2)^0,f,c
 24173  00485C  3217               	rrcf	(___aodiv@divisor+1)^0,f,c
 24174  00485E  3216               	rrcf	___aodiv@divisor^0,f,c
 24175  004860  2E1E               	decfsz	___aodiv@counter^0,f,c
 24176  004862  D7C9               	goto	u11160
 24177  004864                     l9555:
 24178  004864  501F               	movf	___aodiv@sign^0,w,c
 24179  004866  B4D8               	btfsc	status,2,c
 24180  004868  D010               	goto	l9559
 24181  00486A  1E27               	comf	(___aodiv@quotient+7)^0,f,c
 24182  00486C  1E26               	comf	(___aodiv@quotient+6)^0,f,c
 24183  00486E  1E25               	comf	(___aodiv@quotient+5)^0,f,c
 24184  004870  1E24               	comf	(___aodiv@quotient+4)^0,f,c
 24185  004872  1E23               	comf	(___aodiv@quotient+3)^0,f,c
 24186  004874  1E22               	comf	(___aodiv@quotient+2)^0,f,c
 24187  004876  1E21               	comf	(___aodiv@quotient+1)^0,f,c
 24188  004878  6C20               	negf	___aodiv@quotient^0,c
 24189  00487A  0E00               	movlw	0
 24190  00487C  2221               	addwfc	(___aodiv@quotient+1)^0,f,c
 24191  00487E  2222               	addwfc	(___aodiv@quotient+2)^0,f,c
 24192  004880  2223               	addwfc	(___aodiv@quotient+3)^0,f,c
 24193  004882  2224               	addwfc	(___aodiv@quotient+4)^0,f,c
 24194  004884  2225               	addwfc	(___aodiv@quotient+5)^0,f,c
 24195  004886  2226               	addwfc	(___aodiv@quotient+6)^0,f,c
 24196  004888  2227               	addwfc	(___aodiv@quotient+7)^0,f,c
 24197  00488A                     l9559:
 24198  00488A  C020  F00E         	movff	___aodiv@quotient,?___aodiv
 24199  00488E  C021  F00F         	movff	___aodiv@quotient+1,?___aodiv+1
 24200  004892  C022  F010         	movff	___aodiv@quotient+2,?___aodiv+2
 24201  004896  C023  F011         	movff	___aodiv@quotient+3,?___aodiv+3
 24202  00489A  C024  F012         	movff	___aodiv@quotient+4,?___aodiv+4
 24203  00489E  C025  F013         	movff	___aodiv@quotient+5,?___aodiv+5
 24204  0048A2  C026  F014         	movff	___aodiv@quotient+6,?___aodiv+6
 24205  0048A6  C027  F015         	movff	___aodiv@quotient+7,?___aodiv+7
 24206  0048AA  0012               	return		;funcret
 24207  0048AC                     __end_of___aodiv:
 24208                           	opt callstack 0
 24209                           
 24210 ;; *************** function _atoi *****************
 24211 ;; Defined at:
 24212 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/atoi.c"
 24213 ;; Parameters:    Size  Location     Type
 24214 ;;  s               2   26[COMRAM] PTR const unsigned char 
 24215 ;;		 -> STR_95(16), STR_94(13), STR_93(31), STR_92(2), 
 24216 ;;		 -> STR_91(26), STR_90(15), eval_gps@elem(240), STR_40(18), 
 24217 ;;		 -> STR_37(17), STR_36(21), STR_35(28), STR_34(11), 
 24218 ;;		 -> STR_33(13), STR_32(27), STR_31(20), STR_30(13), 
 24219 ;;		 -> STR_29(9), STR_28(12), STR_27(15), STR_26(9), 
 24220 ;;		 -> STR_25(11), STR_24(15), STR_23(32), STR_22(16), 
 24221 ;;		 -> STR_21(18), STR_20(16), STR_19(15), STR_18(32), 
 24222 ;;		 -> STR_17(16), STR_16(18), STR_15(16), STR_14(15), 
 24223 ;;		 -> STR_13(32), STR_12(16), STR_11(18), STR_10(20), 
 24224 ;;		 -> STR_9(18), STR_8(8), STR_7(39), STR_6(25), 
 24225 ;;		 -> STR_5(25), STR_4(20), STR_3(12), STR_2(14), 
 24226 ;;		 -> STR_1(24), 
 24227 ;; Auto vars:     Size  Location     Type
 24228 ;;  n               2   39[COMRAM] int 
 24229 ;;  neg             2   32[COMRAM] int 
 24230 ;; Return value:  Size  Location     Type
 24231 ;;                  2   26[COMRAM] int 
 24232 ;; Registers used:
 24233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24234 ;; Tracked objects:
 24235 ;;		On entry : 3F/0
 24236 ;;		On exit  : 0/0
 24237 ;;		Unchanged: 0/0
 24238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24239 ;;      Params:         2       0       0       0       0       0       0
 24240 ;;      Locals:         9       0       0       0       0       0       0
 24241 ;;      Temps:          4       0       0       0       0       0       0
 24242 ;;      Totals:        15       0       0       0       0       0       0
 24243 ;;Total ram usage:       15 bytes
 24244 ;; Hardware stack levels used:    1
 24245 ;; Hardware stack levels required when called:    3
 24246 ;; This function calls:
 24247 ;;		___wmul
 24248 ;;		_isdigit
 24249 ;;		_isspace
 24250 ;; This function is called by:
 24251 ;;		_eval_gps
 24252 ;;		_vfpfcnvrt
 24253 ;; This function uses a non-reentrant model
 24254 ;;
 24255                           
 24256                           	psect	text102
 24257  0042AE                     __ptext102:
 24258                           	opt callstack 0
 24259  0042AE                     _atoi:
 24260                           	opt callstack 22
 24261                           
 24262                           ; BSR set to: 0
 24263                           
 24264                           ;incstack = 0
 24265  0042AE  0E00               	movlw	0
 24266  0042B0  6E29               	movwf	(atoi@n+1)^0,c
 24267  0042B2  0E00               	movlw	0
 24268  0042B4  6E28               	movwf	atoi@n^0,c
 24269  0042B6  0E00               	movlw	0
 24270  0042B8  6E22               	movwf	(atoi@neg+1)^0,c
 24271  0042BA  0E00               	movlw	0
 24272  0042BC  6E21               	movwf	atoi@neg^0,c
 24273  0042BE  D002               	goto	l9621
 24274  0042C0                     l9619:
 24275  0042C0  4A1B               	infsnz	atoi@s^0,f,c
 24276  0042C2  2A1C               	incf	(atoi@s+1)^0,f,c
 24277  0042C4                     l9621:
 24278  0042C4  0E01               	movlw	1
 24279  0042C6  6E27               	movwf	_atoi$3601^0,c
 24280  0042C8  C01B  FFF6         	movff	atoi@s,tblptrl
 24281  0042CC  C01C  FFF7         	movff	atoi@s+1,tblptrh
 24282  0042D0  6AF8               	clrf	tblptru,c
 24283  0042D2  0E05               	movlw	(high __ramtop+-1)
 24284  0042D4  64F7               	cpfsgt	tblptrh,c
 24285  0042D6  D003               	bra	u11287
 24286  0042D8  0008               	tblrd		*
 24287  0042DA  50F5               	movf	tablat,w,c
 24288  0042DC  D005               	bra	u11280
 24289  0042DE                     u11287:
 24290  0042DE  CFF6 FFE9          	movff	tblptrl,fsr0l
 24291  0042E2  CFF7 FFEA          	movff	tblptrh,fsr0h
 24292  0042E6  50EF               	movf	indf0,w,c
 24293  0042E8                     u11280:
 24294  0042E8  0A20               	xorlw	32
 24295  0042EA  B4D8               	btfsc	status,2,c
 24296  0042EC  D022               	goto	l9629
 24297  0042EE  0EF7               	movlw	247
 24298  0042F0  6E1D               	movwf	??_atoi^0,c
 24299  0042F2  0EFF               	movlw	255
 24300  0042F4  6E1E               	movwf	(??_atoi+1)^0,c
 24301  0042F6  C01B  FFF6         	movff	atoi@s,tblptrl
 24302  0042FA  C01C  FFF7         	movff	atoi@s+1,tblptrh
 24303  0042FE  6AF8               	clrf	tblptru,c
 24304  004300  0E05               	movlw	(high __ramtop+-1)
 24305  004302  64F7               	cpfsgt	tblptrh,c
 24306  004304  D003               	bra	u11307
 24307  004306  0008               	tblrd		*
 24308  004308  50F5               	movf	tablat,w,c
 24309  00430A  D005               	bra	u11300
 24310  00430C                     u11307:
 24311  00430C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24312  004310  CFF7 FFEA          	movff	tblptrh,fsr0h
 24313  004314  50EF               	movf	indf0,w,c
 24314  004316                     u11300:
 24315  004316  6E1F               	movwf	(??_atoi+2)^0,c
 24316  004318  6A20               	clrf	(??_atoi+3)^0,c
 24317  00431A  501D               	movf	??_atoi^0,w,c
 24318  00431C  261F               	addwf	(??_atoi+2)^0,f,c
 24319  00431E  501E               	movf	(??_atoi+1)^0,w,c
 24320  004320  2220               	addwfc	(??_atoi+3)^0,f,c
 24321  004322  5020               	movf	(??_atoi+3)^0,w,c
 24322  004324  E104               	bnz	u11310
 24323  004326  0E05               	movlw	5
 24324  004328  5C1F               	subwf	(??_atoi+2)^0,w,c
 24325  00432A  A0D8               	btfss	status,0,c
 24326  00432C  D002               	goto	l9629
 24327  00432E                     u11310:
 24328  00432E  0E00               	movlw	0
 24329  004330  6E27               	movwf	_atoi$3601^0,c
 24330  004332                     l9629:
 24331  004332  C027  F023         	movff	_atoi$3601,_atoi$3600
 24332  004336  6A24               	clrf	(_atoi$3600+1)^0,c
 24333  004338  5023               	movf	_atoi$3600^0,w,c
 24334  00433A  1024               	iorwf	(_atoi$3600+1)^0,w,c
 24335  00433C  B4D8               	btfsc	status,2,c
 24336  00433E  D008               	goto	l9639
 24337  004340  D7BF               	goto	l9619
 24338  004342                     l9635:
 24339  004342  0E00               	movlw	0
 24340  004344  6E22               	movwf	(atoi@neg+1)^0,c
 24341  004346  0E01               	movlw	1
 24342  004348  6E21               	movwf	atoi@neg^0,c
 24343  00434A                     l9637:
 24344  00434A  4A1B               	infsnz	atoi@s^0,f,c
 24345  00434C  2A1C               	incf	(atoi@s+1)^0,f,c
 24346  00434E  D044               	goto	l9645
 24347  004350                     l9639:
 24348  004350  C01B  FFF6         	movff	atoi@s,tblptrl
 24349  004354  C01C  FFF7         	movff	atoi@s+1,tblptrh
 24350  004358  6AF8               	clrf	tblptru,c
 24351  00435A  0E05               	movlw	(high __ramtop+-1)
 24352  00435C  64F7               	cpfsgt	tblptrh,c
 24353  00435E  D003               	bra	u11337
 24354  004360  0008               	tblrd		*
 24355  004362  50F5               	movf	tablat,w,c
 24356  004364  D005               	bra	u11330
 24357  004366                     u11337:
 24358  004366  CFF6 FFE9          	movff	tblptrl,fsr0l
 24359  00436A  CFF7 FFEA          	movff	tblptrh,fsr0h
 24360  00436E  50EF               	movf	indf0,w,c
 24361  004370                     u11330:
 24362  004370  6E1D               	movwf	??_atoi^0,c
 24363  004372  6A1E               	clrf	(??_atoi+1)^0,c
 24364                           
 24365                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 24366                           ; Switch size 1, requested type "simple"
 24367                           ; Number of cases is 1, Range of values is 0 to 0
 24368                           ; switch strategies available:
 24369                           ; Name         Instructions Cycles
 24370                           ; simple_byte            4     3 (average)
 24371                           ;	Chosen strategy is simple_byte
 24372  004374  501E               	movf	(??_atoi+1)^0,w,c
 24373  004376  0A00               	xorlw	0	; case 0
 24374  004378  A4D8               	btfss	status,2,c
 24375  00437A  D02E               	goto	l9645
 24376                           
 24377                           ; Switch size 1, requested type "simple"
 24378                           ; Number of cases is 2, Range of values is 43 to 45
 24379                           ; switch strategies available:
 24380                           ; Name         Instructions Cycles
 24381                           ; simple_byte            7     4 (average)
 24382                           ;	Chosen strategy is simple_byte
 24383  00437C  501D               	movf	??_atoi^0,w,c
 24384  00437E  0A2B               	xorlw	43	; case 43
 24385  004380  B4D8               	btfsc	status,2,c
 24386  004382  D7E3               	goto	l9637
 24387  004384  0A06               	xorlw	6	; case 45
 24388  004386  B4D8               	btfsc	status,2,c
 24389  004388  D7DC               	goto	l9635
 24390  00438A  D026               	goto	l9645
 24391  00438C                     l9641:
 24392  00438C  C028  F015         	movff	atoi@n,___wmul@multiplier
 24393  004390  C029  F016         	movff	atoi@n+1,___wmul@multiplier+1
 24394  004394  0E00               	movlw	0
 24395  004396  6E18               	movwf	(___wmul@multiplicand+1)^0,c
 24396  004398  0E0A               	movlw	10
 24397  00439A  6E17               	movwf	___wmul@multiplicand^0,c
 24398  00439C  ECD9  F039         	call	___wmul	;wreg free
 24399  0043A0  C01B  FFF6         	movff	atoi@s,tblptrl
 24400  0043A4  C01C  FFF7         	movff	atoi@s+1,tblptrh
 24401  0043A8  6AF8               	clrf	tblptru,c
 24402  0043AA  0E05               	movlw	(high __ramtop+-1)
 24403  0043AC  64F7               	cpfsgt	tblptrh,c
 24404  0043AE  D003               	bra	u11347
 24405  0043B0  0008               	tblrd		*
 24406  0043B2  50F5               	movf	tablat,w,c
 24407  0043B4  D005               	bra	u11340
 24408  0043B6                     u11347:
 24409  0043B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 24410  0043BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 24411  0043BE  50EF               	movf	indf0,w,c
 24412  0043C0                     u11340:
 24413  0043C0  6E1D               	movwf	??_atoi^0,c
 24414  0043C2  501D               	movf	??_atoi^0,w,c
 24415  0043C4  5E15               	subwf	?___wmul^0,f,c
 24416  0043C6  0E00               	movlw	0
 24417  0043C8  5A16               	subwfb	(?___wmul+1)^0,f,c
 24418  0043CA  0E30               	movlw	48
 24419  0043CC  2415               	addwf	?___wmul^0,w,c
 24420  0043CE  6E28               	movwf	atoi@n^0,c
 24421  0043D0  0E00               	movlw	0
 24422  0043D2  2016               	addwfc	(?___wmul+1)^0,w,c
 24423  0043D4  6E29               	movwf	(atoi@n+1)^0,c
 24424  0043D6  D7B9               	goto	l9637
 24425  0043D8                     l9645:
 24426  0043D8  0ED0               	movlw	208
 24427  0043DA  6E1D               	movwf	??_atoi^0,c
 24428  0043DC  0EFF               	movlw	255
 24429  0043DE  6E1E               	movwf	(??_atoi+1)^0,c
 24430  0043E0  C01B  FFF6         	movff	atoi@s,tblptrl
 24431  0043E4  C01C  FFF7         	movff	atoi@s+1,tblptrh
 24432  0043E8  6AF8               	clrf	tblptru,c
 24433  0043EA  0E05               	movlw	(high __ramtop+-1)
 24434  0043EC  64F7               	cpfsgt	tblptrh,c
 24435  0043EE  D003               	bra	u11357
 24436  0043F0  0008               	tblrd		*
 24437  0043F2  50F5               	movf	tablat,w,c
 24438  0043F4  D005               	bra	u11350
 24439  0043F6                     u11357:
 24440  0043F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 24441  0043FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 24442  0043FE  50EF               	movf	indf0,w,c
 24443  004400                     u11350:
 24444  004400  6E1F               	movwf	(??_atoi+2)^0,c
 24445  004402  6A20               	clrf	(??_atoi+3)^0,c
 24446  004404  501D               	movf	??_atoi^0,w,c
 24447  004406  261F               	addwf	(??_atoi+2)^0,f,c
 24448  004408  501E               	movf	(??_atoi+1)^0,w,c
 24449  00440A  2220               	addwfc	(??_atoi+3)^0,f,c
 24450  00440C  5020               	movf	(??_atoi+3)^0,w,c
 24451  00440E  E106               	bnz	u11360
 24452  004410  0E0A               	movlw	10
 24453  004412  5C1F               	subwf	(??_atoi+2)^0,w,c
 24454  004414  B0D8               	btfsc	status,0,c
 24455  004416  D002               	goto	u11360
 24456  004418  0E01               	movlw	1
 24457  00441A  D001               	goto	u11370
 24458  00441C                     u11360:
 24459  00441C  0E00               	movlw	0
 24460  00441E                     u11370:
 24461  00441E  6E25               	movwf	_atoi$3602^0,c
 24462  004420  6A26               	clrf	(_atoi$3602+1)^0,c
 24463  004422  5025               	movf	_atoi$3602^0,w,c
 24464  004424  1026               	iorwf	(_atoi$3602+1)^0,w,c
 24465  004426  A4D8               	btfss	status,2,c
 24466  004428  D7B1               	goto	l9641
 24467  00442A  5021               	movf	atoi@neg^0,w,c
 24468  00442C  1022               	iorwf	(atoi@neg+1)^0,w,c
 24469  00442E  A4D8               	btfss	status,2,c
 24470  004430  D00D               	goto	l2222
 24471  004432  C028  F01D         	movff	atoi@n,??_atoi
 24472  004436  C029  F01E         	movff	atoi@n+1,??_atoi+1
 24473  00443A  1E1D               	comf	??_atoi^0,f,c
 24474  00443C  1E1E               	comf	(??_atoi+1)^0,f,c
 24475  00443E  4A1D               	infsnz	??_atoi^0,f,c
 24476  004440  2A1E               	incf	(??_atoi+1)^0,f,c
 24477  004442  C01D  F01B         	movff	??_atoi,?_atoi
 24478  004446  C01E  F01C         	movff	??_atoi+1,?_atoi+1
 24479  00444A  0012               	return	
 24480  00444C                     l2222:
 24481  00444C  C028  F01B         	movff	atoi@n,?_atoi
 24482  004450  C029  F01C         	movff	atoi@n+1,?_atoi+1
 24483  004454  0012               	return		;funcret
 24484  004456                     __end_of_atoi:
 24485                           	opt callstack 0
 24486                           
 24487 ;; *************** function _isspace *****************
 24488 ;; Defined at:
 24489 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isspace.c"
 24490 ;; Parameters:    Size  Location     Type
 24491 ;;  c               2   13[COMRAM] int 
 24492 ;; Auto vars:     Size  Location     Type
 24493 ;;		None
 24494 ;; Return value:  Size  Location     Type
 24495 ;;                  2   13[COMRAM] int 
 24496 ;; Registers used:
 24497 ;;		wreg, status,2, status,0
 24498 ;; Tracked objects:
 24499 ;;		On entry : 0/0
 24500 ;;		On exit  : 0/0
 24501 ;;		Unchanged: 0/0
 24502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24503 ;;      Params:         2       0       0       0       0       0       0
 24504 ;;      Locals:         1       0       0       0       0       0       0
 24505 ;;      Temps:          4       0       0       0       0       0       0
 24506 ;;      Totals:         7       0       0       0       0       0       0
 24507 ;;Total ram usage:        7 bytes
 24508 ;; Hardware stack levels used:    1
 24509 ;; Hardware stack levels required when called:    2
 24510 ;; This function calls:
 24511 ;;		Nothing
 24512 ;; This function is called by:
 24513 ;;		_atoi
 24514 ;;		___strtoxl
 24515 ;; This function uses a non-reentrant model
 24516 ;;
 24517                           
 24518                           	psect	text103
 24519  007012                     __ptext103:
 24520                           	opt callstack 0
 24521  007012                     _isspace:
 24522                           	opt callstack 22
 24523                           
 24524                           ;incstack = 0
 24525  007012  0E01               	movlw	1
 24526  007014  6E14               	movwf	_isspace$3627^0,c
 24527  007016  0E20               	movlw	32
 24528  007018  180E               	xorwf	isspace@c^0,w,c
 24529  00701A  100F               	iorwf	(isspace@c+1)^0,w,c
 24530  00701C  B4D8               	btfsc	status,2,c
 24531  00701E  D014               	goto	l9607
 24532  007020  0EF7               	movlw	247
 24533  007022  6E10               	movwf	??_isspace^0,c
 24534  007024  0EFF               	movlw	255
 24535  007026  6E11               	movwf	(??_isspace+1)^0,c
 24536  007028  C00E  F012         	movff	isspace@c,??_isspace+2
 24537  00702C  C00F  F013         	movff	isspace@c+1,??_isspace+3
 24538  007030  5010               	movf	??_isspace^0,w,c
 24539  007032  2612               	addwf	(??_isspace+2)^0,f,c
 24540  007034  5011               	movf	(??_isspace+1)^0,w,c
 24541  007036  2213               	addwfc	(??_isspace+3)^0,f,c
 24542  007038  5013               	movf	(??_isspace+3)^0,w,c
 24543  00703A  E104               	bnz	u11260
 24544  00703C  0E05               	movlw	5
 24545  00703E  5C12               	subwf	(??_isspace+2)^0,w,c
 24546  007040  A0D8               	btfss	status,0,c
 24547  007042  D002               	goto	l9607
 24548  007044                     u11260:
 24549  007044  0E00               	movlw	0
 24550  007046  6E14               	movwf	_isspace$3627^0,c
 24551  007048                     l9607:
 24552  007048  C014  F00E         	movff	_isspace$3627,?_isspace
 24553  00704C  6A0F               	clrf	(?_isspace+1)^0,c
 24554  00704E  0012               	return		;funcret
 24555  007050                     __end_of_isspace:
 24556                           	opt callstack 0
 24557                           
 24558 ;; *************** function _isdigit *****************
 24559 ;; Defined at:
 24560 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isdigit.c"
 24561 ;; Parameters:    Size  Location     Type
 24562 ;;  c               2   13[COMRAM] int 
 24563 ;; Auto vars:     Size  Location     Type
 24564 ;;		None
 24565 ;; Return value:  Size  Location     Type
 24566 ;;                  2   13[COMRAM] int 
 24567 ;; Registers used:
 24568 ;;		wreg, status,2, status,0
 24569 ;; Tracked objects:
 24570 ;;		On entry : 0/0
 24571 ;;		On exit  : 0/0
 24572 ;;		Unchanged: 0/0
 24573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24574 ;;      Params:         2       0       0       0       0       0       0
 24575 ;;      Locals:         0       0       0       0       0       0       0
 24576 ;;      Temps:          4       0       0       0       0       0       0
 24577 ;;      Totals:         6       0       0       0       0       0       0
 24578 ;;Total ram usage:        6 bytes
 24579 ;; Hardware stack levels used:    1
 24580 ;; Hardware stack levels required when called:    2
 24581 ;; This function calls:
 24582 ;;		Nothing
 24583 ;; This function is called by:
 24584 ;;		_vfpfcnvrt
 24585 ;;		_atoi
 24586 ;;		___strtoxl
 24587 ;; This function uses a non-reentrant model
 24588 ;;
 24589                           
 24590                           	psect	text104
 24591  0072D2                     __ptext104:
 24592                           	opt callstack 0
 24593  0072D2                     _isdigit:
 24594                           	opt callstack 23
 24595                           
 24596                           ;incstack = 0
 24597  0072D2  0ED0               	movlw	208
 24598  0072D4  6E10               	movwf	??_isdigit^0,c
 24599  0072D6  0EFF               	movlw	255
 24600  0072D8  6E11               	movwf	(??_isdigit+1)^0,c
 24601  0072DA  C00E  F012         	movff	isdigit@c,??_isdigit+2
 24602  0072DE  C00F  F013         	movff	isdigit@c+1,??_isdigit+3
 24603  0072E2  5010               	movf	??_isdigit^0,w,c
 24604  0072E4  2612               	addwf	(??_isdigit+2)^0,f,c
 24605  0072E6  5011               	movf	(??_isdigit+1)^0,w,c
 24606  0072E8  2213               	addwfc	(??_isdigit+3)^0,f,c
 24607  0072EA  5013               	movf	(??_isdigit+3)^0,w,c
 24608  0072EC  E106               	bnz	u11100
 24609  0072EE  0E0A               	movlw	10
 24610  0072F0  5C12               	subwf	(??_isdigit+2)^0,w,c
 24611  0072F2  B0D8               	btfsc	status,0,c
 24612  0072F4  D002               	goto	u11100
 24613  0072F6  0E01               	movlw	1
 24614  0072F8  D001               	goto	u11110
 24615  0072FA                     u11100:
 24616  0072FA  0E00               	movlw	0
 24617  0072FC                     u11110:
 24618  0072FC  6E0E               	movwf	?_isdigit^0,c
 24619  0072FE  6A0F               	clrf	(?_isdigit+1)^0,c
 24620  007300  0012               	return		;funcret
 24621  007302                     __end_of_isdigit:
 24622                           	opt callstack 0
 24623                           
 24624 ;; *************** function ___wmul *****************
 24625 ;; Defined at:
 24626 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul16.c"
 24627 ;; Parameters:    Size  Location     Type
 24628 ;;  multiplier      2   20[COMRAM] unsigned int 
 24629 ;;  multiplicand    2   22[COMRAM] unsigned int 
 24630 ;; Auto vars:     Size  Location     Type
 24631 ;;  product         2   24[COMRAM] unsigned int 
 24632 ;; Return value:  Size  Location     Type
 24633 ;;                  2   20[COMRAM] unsigned int 
 24634 ;; Registers used:
 24635 ;;		wreg, status,2, status,0, prodl, prodh
 24636 ;; Tracked objects:
 24637 ;;		On entry : 0/0
 24638 ;;		On exit  : 0/0
 24639 ;;		Unchanged: 0/0
 24640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24641 ;;      Params:         4       0       0       0       0       0       0
 24642 ;;      Locals:         2       0       0       0       0       0       0
 24643 ;;      Temps:          0       0       0       0       0       0       0
 24644 ;;      Totals:         6       0       0       0       0       0       0
 24645 ;;Total ram usage:        6 bytes
 24646 ;; Hardware stack levels used:    1
 24647 ;; Hardware stack levels required when called:    2
 24648 ;; This function calls:
 24649 ;;		Nothing
 24650 ;; This function is called by:
 24651 ;;		_adf4351_calc_counters
 24652 ;;		_atoi
 24653 ;; This function uses a non-reentrant model
 24654 ;;
 24655                           
 24656                           	psect	text105
 24657  0073B2                     __ptext105:
 24658                           	opt callstack 0
 24659  0073B2                     ___wmul:
 24660                           	opt callstack 22
 24661                           
 24662                           ;incstack = 0
 24663  0073B2  5015               	movf	___wmul@multiplier^0,w,c
 24664  0073B4  0217               	mulwf	___wmul@multiplicand^0,c
 24665  0073B6  CFF3 F019          	movff	prodl,___wmul@product
 24666  0073BA  CFF4 F01A          	movff	prodh,___wmul@product+1
 24667  0073BE  5015               	movf	___wmul@multiplier^0,w,c
 24668  0073C0  0218               	mulwf	(___wmul@multiplicand+1)^0,c
 24669  0073C2  50F3               	movf	243,w,c
 24670  0073C4  261A               	addwf	(___wmul@product+1)^0,f,c
 24671  0073C6  5016               	movf	(___wmul@multiplier+1)^0,w,c
 24672  0073C8  0217               	mulwf	___wmul@multiplicand^0,c
 24673  0073CA  50F3               	movf	243,w,c
 24674  0073CC  261A               	addwf	(___wmul@product+1)^0,f,c
 24675  0073CE  C019  F015         	movff	___wmul@product,?___wmul
 24676  0073D2  C01A  F016         	movff	___wmul@product+1,?___wmul+1
 24677  0073D6  0012               	return		;funcret
 24678  0073D8                     __end_of___wmul:
 24679                           	opt callstack 0
 24680                           
 24681 ;; *************** function _adf4351_set_tune *****************
 24682 ;; Defined at:
 24683 ;;		line 217 in file "src/driver/adf4351.c"
 24684 ;; Parameters:    Size  Location     Type
 24685 ;;  ctx             2   13[COMRAM] PTR struct adf4351_ctx
 24686 ;;		 -> g_adf4351(55), 
 24687 ;;  icp             1   15[COMRAM] unsigned char 
 24688 ;;  pout            1   16[COMRAM] unsigned char 
 24689 ;;  lownoise        2   17[COMRAM] int 
 24690 ;; Auto vars:     Size  Location     Type
 24691 ;;		None
 24692 ;; Return value:  Size  Location     Type
 24693 ;;                  1    wreg      void 
 24694 ;; Registers used:
 24695 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24696 ;; Tracked objects:
 24697 ;;		On entry : 0/0
 24698 ;;		On exit  : 0/0
 24699 ;;		Unchanged: 0/0
 24700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24701 ;;      Params:         6       0       0       0       0       0       0
 24702 ;;      Locals:         2       0       0       0       0       0       0
 24703 ;;      Temps:          0       0       0       0       0       0       0
 24704 ;;      Totals:         8       0       0       0       0       0       0
 24705 ;;Total ram usage:        8 bytes
 24706 ;; Hardware stack levels used:    1
 24707 ;; Hardware stack levels required when called:    2
 24708 ;; This function calls:
 24709 ;;		Nothing
 24710 ;; This function is called by:
 24711 ;;		_main
 24712 ;; This function uses a non-reentrant model
 24713 ;;
 24714                           
 24715                           	psect	text106
 24716  006D28                     __ptext106:
 24717                           	opt callstack 0
 24718  006D28                     _adf4351_set_tune:
 24719                           	opt callstack 28
 24720                           
 24721                           ;src/driver/adf4351.c: 217: void adf4351_set_tune(adf4351_ctx* ctx, u8 icp, u8 pout, BOO
      +                          L lownoise);src/driver/adf4351.c: 218: {;src/driver/adf4351.c: 220:     ctx->reg2.lownoi
      +                          se = lownoise?0:3;
 24722                           
 24723                           ;incstack = 0
 24724  006D28  5012               	movf	adf4351_set_tune@lownoise^0,w,c
 24725  006D2A  1013               	iorwf	(adf4351_set_tune@lownoise+1)^0,w,c
 24726  006D2C  A4D8               	btfss	status,2,c
 24727  006D2E  D004               	goto	l11251
 24728  006D30  0E00               	movlw	0
 24729  006D32  6E15               	movwf	(_adf4351_set_tune$505+1)^0,c
 24730  006D34  0E03               	movlw	3
 24731  006D36  D003               	goto	L17
 24732  006D38                     l11251:
 24733  006D38  0E00               	movlw	0
 24734  006D3A  6E15               	movwf	(_adf4351_set_tune$505+1)^0,c
 24735  006D3C  0E00               	movlw	0
 24736  006D3E                     L17:
 24737  006D3E  6E14               	movwf	_adf4351_set_tune$505^0,c
 24738  006D40  EE20 F00B          	lfsr	2,11
 24739  006D44  500E               	movf	adf4351_set_tune@ctx^0,w,c
 24740  006D46  26D9               	addwf	fsr2l,f,c
 24741  006D48  500F               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 24742  006D4A  22DA               	addwfc	fsr2h,f,c
 24743  006D4C  C014  FFDF         	movff	_adf4351_set_tune$505,indf2
 24744                           
 24745                           ;src/driver/adf4351.c: 221:     ctx->reg2.cpc = icp;
 24746  006D50  EE20 F012          	lfsr	2,18
 24747  006D54  500E               	movf	adf4351_set_tune@ctx^0,w,c
 24748  006D56  26D9               	addwf	fsr2l,f,c
 24749  006D58  500F               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 24750  006D5A  22DA               	addwfc	fsr2h,f,c
 24751  006D5C  C010  FFDF         	movff	adf4351_set_tune@icp,indf2
 24752                           
 24753                           ;src/driver/adf4351.c: 222:     ctx->reg4.rfoutpwr = pout;
 24754  006D60  EE20 F029          	lfsr	2,41
 24755  006D64  500E               	movf	adf4351_set_tune@ctx^0,w,c
 24756  006D66  26D9               	addwf	fsr2l,f,c
 24757  006D68  500F               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 24758  006D6A  22DA               	addwfc	fsr2h,f,c
 24759  006D6C  C011  FFDF         	movff	adf4351_set_tune@pout,indf2
 24760  006D70  0012               	return		;funcret
 24761  006D72                     __end_of_adf4351_set_tune:
 24762                           	opt callstack 0
 24763                           
 24764 ;; *************** function _adf4351_set_mode *****************
 24765 ;; Defined at:
 24766 ;;		line 192 in file "src/driver/adf4351.c"
 24767 ;; Parameters:    Size  Location     Type
 24768 ;;  ctx             2   39[COMRAM] PTR struct adf4351_ctx
 24769 ;;		 -> g_adf4351(55), 
 24770 ;;  enable          2   41[COMRAM] int 
 24771 ;; Auto vars:     Size  Location     Type
 24772 ;;		None
 24773 ;; Return value:  Size  Location     Type
 24774 ;;                  1    wreg      void 
 24775 ;; Registers used:
 24776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24777 ;; Tracked objects:
 24778 ;;		On entry : 0/0
 24779 ;;		On exit  : 0/0
 24780 ;;		Unchanged: 0/0
 24781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24782 ;;      Params:         4       0       0       0       0       0       0
 24783 ;;      Locals:         0       0       0       0       0       0       0
 24784 ;;      Temps:          2       0       0       0       0       0       0
 24785 ;;      Totals:         6       0       0       0       0       0       0
 24786 ;;Total ram usage:        6 bytes
 24787 ;; Hardware stack levels used:    1
 24788 ;; Hardware stack levels required when called:    5
 24789 ;; This function calls:
 24790 ;;		_adf4351_setup
 24791 ;;		_adf4351_write_reg2
 24792 ;;		_adf4351_write_reg4
 24793 ;; This function is called by:
 24794 ;;		_main
 24795 ;; This function uses a non-reentrant model
 24796 ;;
 24797                           
 24798                           	psect	text107
 24799  005F1C                     __ptext107:
 24800                           	opt callstack 0
 24801  005F1C                     _adf4351_set_mode:
 24802                           	opt callstack 25
 24803                           
 24804                           ;src/driver/adf4351.c: 192: void adf4351_set_mode(adf4351_ctx* ctx, BOOL enable);src/dri
      +                          ver/adf4351.c: 193: {;src/driver/adf4351.c: 195:  if(!ctx->init) return;
 24805                           
 24806                           ;incstack = 0
 24807  005F1C  C028  FFD9         	movff	adf4351_set_mode@ctx,fsr2l
 24808  005F20  C029  FFDA         	movff	adf4351_set_mode@ctx+1,fsr2h
 24809  005F24  50DE               	movf	postinc2,w,c
 24810  005F26  10DE               	iorwf	postinc2,w,c
 24811  005F28  B4D8               	btfsc	status,2,c
 24812  005F2A  0012               	return	
 24813                           
 24814                           ;src/driver/adf4351.c: 198:  if(enable) {
 24815  005F2C  502A               	movf	adf4351_set_mode@enable^0,w,c
 24816  005F2E  102B               	iorwf	(adf4351_set_mode@enable+1)^0,w,c
 24817  005F30  B4D8               	btfsc	status,2,c
 24818  005F32  D01F               	goto	l11241
 24819                           
 24820                           ;src/driver/adf4351.c: 199:   ctx->reg4.vcopd = 0;
 24821  005F34  EE20 F023          	lfsr	2,35
 24822  005F38  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24823  005F3A  26D9               	addwf	fsr2l,f,c
 24824  005F3C  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24825  005F3E  22DA               	addwfc	fsr2h,f,c
 24826  005F40  0E00               	movlw	0
 24827  005F42  6EDF               	movwf	indf2,c
 24828                           
 24829                           ;src/driver/adf4351.c: 200:   ctx->reg4.rfoutena = 1;
 24830  005F44  EE20 F028          	lfsr	2,40
 24831  005F48  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24832  005F4A  26D9               	addwf	fsr2l,f,c
 24833  005F4C  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24834  005F4E  22DA               	addwfc	fsr2h,f,c
 24835  005F50  0E01               	movlw	1
 24836  005F52  6EDF               	movwf	indf2,c
 24837                           
 24838                           ;src/driver/adf4351.c: 201:   ctx->reg2.pd = 0;
 24839  005F54  EE20 F016          	lfsr	2,22
 24840  005F58  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24841  005F5A  26D9               	addwf	fsr2l,f,c
 24842  005F5C  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24843  005F5E  22DA               	addwfc	fsr2h,f,c
 24844  005F60  0E00               	movlw	0
 24845  005F62  6EDF               	movwf	indf2,c
 24846                           
 24847                           ;src/driver/adf4351.c: 204:   adf4351_setup(ctx);
 24848  005F64  C028  F026         	movff	adf4351_set_mode@ctx,adf4351_setup@ctx
 24849  005F68  C029  F027         	movff	adf4351_set_mode@ctx+1,adf4351_setup@ctx+1
 24850  005F6C  ECB9  F036         	call	_adf4351_setup	;wreg free
 24851                           
 24852                           ;src/driver/adf4351.c: 205:  } else {
 24853  005F70  0012               	return	
 24854  005F72                     l11241:
 24855                           
 24856                           ;src/driver/adf4351.c: 206:   ctx->reg4.vcopd = 1;
 24857  005F72  EE20 F023          	lfsr	2,35
 24858  005F76  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24859  005F78  26D9               	addwf	fsr2l,f,c
 24860  005F7A  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24861  005F7C  22DA               	addwfc	fsr2h,f,c
 24862  005F7E  0E01               	movlw	1
 24863  005F80  6EDF               	movwf	indf2,c
 24864                           
 24865                           ;src/driver/adf4351.c: 207:   ctx->reg4.rfoutena = 0;
 24866  005F82  EE20 F028          	lfsr	2,40
 24867  005F86  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24868  005F88  26D9               	addwf	fsr2l,f,c
 24869  005F8A  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24870  005F8C  22DA               	addwfc	fsr2h,f,c
 24871  005F8E  0E00               	movlw	0
 24872  005F90  6EDF               	movwf	indf2,c
 24873                           
 24874                           ;src/driver/adf4351.c: 208:   ctx->reg2.pd = 1;
 24875  005F92  EE20 F016          	lfsr	2,22
 24876  005F96  5028               	movf	adf4351_set_mode@ctx^0,w,c
 24877  005F98  26D9               	addwf	fsr2l,f,c
 24878  005F9A  5029               	movf	(adf4351_set_mode@ctx+1)^0,w,c
 24879  005F9C  22DA               	addwfc	fsr2h,f,c
 24880  005F9E  0E01               	movlw	1
 24881  005FA0  6EDF               	movwf	indf2,c
 24882                           
 24883                           ;src/driver/adf4351.c: 211:   adf4351_write_reg4(ctx);
 24884  005FA2  C028  F01A         	movff	adf4351_set_mode@ctx,adf4351_write_reg4@ctx
 24885  005FA6  C029  F01B         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg4@ctx+1
 24886  005FAA  EC7B  F016         	call	_adf4351_write_reg4	;wreg free
 24887                           
 24888                           ;src/driver/adf4351.c: 212:   adf4351_write_reg2(ctx);
 24889  005FAE  C028  F01A         	movff	adf4351_set_mode@ctx,adf4351_write_reg2@ctx
 24890  005FB2  C029  F01B         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg2@ctx+1
 24891  005FB6  EC01  F00F         	call	_adf4351_write_reg2	;wreg free
 24892  005FBA  0012               	return		;funcret
 24893  005FBC                     __end_of_adf4351_set_mode:
 24894                           	opt callstack 0
 24895                           
 24896 ;; *************** function _adf4351_setup *****************
 24897 ;; Defined at:
 24898 ;;		line 244 in file "src/driver/adf4351.c"
 24899 ;; Parameters:    Size  Location     Type
 24900 ;;  ctx             2   37[COMRAM] PTR struct adf4351_ctx
 24901 ;;		 -> g_adf4351(55), 
 24902 ;; Auto vars:     Size  Location     Type
 24903 ;;		None
 24904 ;; Return value:  Size  Location     Type
 24905 ;;                  1    wreg      void 
 24906 ;; Registers used:
 24907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24908 ;; Tracked objects:
 24909 ;;		On entry : 0/0
 24910 ;;		On exit  : 0/0
 24911 ;;		Unchanged: 0/0
 24912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24913 ;;      Params:         2       0       0       0       0       0       0
 24914 ;;      Locals:         0       0       0       0       0       0       0
 24915 ;;      Temps:          0       0       0       0       0       0       0
 24916 ;;      Totals:         2       0       0       0       0       0       0
 24917 ;;Total ram usage:        2 bytes
 24918 ;; Hardware stack levels used:    1
 24919 ;; Hardware stack levels required when called:    4
 24920 ;; This function calls:
 24921 ;;		_adf4351_write_reg0
 24922 ;;		_adf4351_write_reg1
 24923 ;;		_adf4351_write_reg2
 24924 ;;		_adf4351_write_reg3
 24925 ;;		_adf4351_write_reg4
 24926 ;;		_adf4351_write_reg5
 24927 ;; This function is called by:
 24928 ;;		_adf4351_set_freq
 24929 ;;		_adf4351_set_mode
 24930 ;; This function uses a non-reentrant model
 24931 ;;
 24932                           
 24933                           	psect	text108
 24934  006D72                     __ptext108:
 24935                           	opt callstack 0
 24936  006D72                     _adf4351_setup:
 24937                           	opt callstack 24
 24938                           
 24939                           ;src/driver/adf4351.c: 244: static void adf4351_setup(adf4351_ctx* ctx);src/driver/adf43
      +                          51.c: 245: {;src/driver/adf4351.c: 246:     adf4351_write_reg5(ctx);
 24940                           
 24941                           ;incstack = 0
 24942  006D72  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg5@ctx
 24943  006D76  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg5@ctx+1
 24944  006D7A  ECB4  F033         	call	_adf4351_write_reg5	;wreg free
 24945                           
 24946                           ;src/driver/adf4351.c: 247:     adf4351_write_reg4(ctx);
 24947  006D7E  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg4@ctx
 24948  006D82  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg4@ctx+1
 24949  006D86  EC7B  F016         	call	_adf4351_write_reg4	;wreg free
 24950                           
 24951                           ;src/driver/adf4351.c: 248:     adf4351_write_reg3(ctx);
 24952  006D8A  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg3@ctx
 24953  006D8E  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg3@ctx+1
 24954  006D92  ECD4  F01E         	call	_adf4351_write_reg3	;wreg free
 24955                           
 24956                           ;src/driver/adf4351.c: 249:     adf4351_write_reg2(ctx);
 24957  006D96  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg2@ctx
 24958  006D9A  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg2@ctx+1
 24959  006D9E  EC01  F00F         	call	_adf4351_write_reg2	;wreg free
 24960                           
 24961                           ;src/driver/adf4351.c: 250:     adf4351_write_reg1(ctx);
 24962  006DA2  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg1@ctx
 24963  006DA6  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg1@ctx+1
 24964  006DAA  EC3C  F028         	call	_adf4351_write_reg1	;wreg free
 24965                           
 24966                           ;src/driver/adf4351.c: 251:     adf4351_write_reg0(ctx);
 24967  006DAE  C026  F01A         	movff	adf4351_setup@ctx,adf4351_write_reg0@ctx
 24968  006DB2  C027  F01B         	movff	adf4351_setup@ctx+1,adf4351_write_reg0@ctx+1
 24969  006DB6  EC82  F02C         	call	_adf4351_write_reg0	;wreg free
 24970  006DBA  0012               	return		;funcret
 24971  006DBC                     __end_of_adf4351_setup:
 24972                           	opt callstack 0
 24973                           
 24974 ;; *************** function _adf4351_write_reg5 *****************
 24975 ;; Defined at:
 24976 ;;		line 338 in file "src/driver/adf4351.c"
 24977 ;; Parameters:    Size  Location     Type
 24978 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 24979 ;;		 -> g_adf4351(55), 
 24980 ;; Auto vars:     Size  Location     Type
 24981 ;;  data            4   32[COMRAM] unsigned long 
 24982 ;; Return value:  Size  Location     Type
 24983 ;;                  1    wreg      void 
 24984 ;; Registers used:
 24985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24986 ;; Tracked objects:
 24987 ;;		On entry : 0/0
 24988 ;;		On exit  : 0/0
 24989 ;;		Unchanged: 0/0
 24990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24991 ;;      Params:         2       0       0       0       0       0       0
 24992 ;;      Locals:         4       0       0       0       0       0       0
 24993 ;;      Temps:          5       0       0       0       0       0       0
 24994 ;;      Totals:        11       0       0       0       0       0       0
 24995 ;;Total ram usage:       11 bytes
 24996 ;; Hardware stack levels used:    1
 24997 ;; Hardware stack levels required when called:    3
 24998 ;; This function calls:
 24999 ;;		_adf4351_write_latch
 25000 ;; This function is called by:
 25001 ;;		_adf4351_setup
 25002 ;; This function uses a non-reentrant model
 25003 ;;
 25004                           
 25005                           	psect	text109
 25006  006768                     __ptext109:
 25007                           	opt callstack 0
 25008  006768                     _adf4351_write_reg5:
 25009                           	opt callstack 24
 25010                           
 25011                           ;src/driver/adf4351.c: 338: static void adf4351_write_reg5(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 339: {;src/driver/adf4351.c: 340:     if(ctx->init) {
 25012                           
 25013                           ;incstack = 0
 25014  006768  C01A  FFD9         	movff	adf4351_write_reg5@ctx,fsr2l
 25015  00676C  C01B  FFDA         	movff	adf4351_write_reg5@ctx+1,fsr2h
 25016  006770  50DE               	movf	postinc2,w,c
 25017  006772  10DE               	iorwf	postinc2,w,c
 25018  006774  B4D8               	btfsc	status,2,c
 25019  006776  0012               	return	
 25020                           
 25021                           ;src/driver/adf4351.c: 341:         u32 data = 5;
 25022  006778  0E05               	movlw	5
 25023  00677A  6E21               	movwf	adf4351_write_reg5@data^0,c
 25024  00677C  0E00               	movlw	0
 25025  00677E  6E22               	movwf	(adf4351_write_reg5@data+1)^0,c
 25026  006780  0E00               	movlw	0
 25027  006782  6E23               	movwf	(adf4351_write_reg5@data+2)^0,c
 25028  006784  0E00               	movlw	0
 25029  006786  6E24               	movwf	(adf4351_write_reg5@data+3)^0,c
 25030                           
 25031                           ;src/driver/adf4351.c: 343:         data |= (((u32)ctx->reg5.ldpinmod&0x0003)<<22);
 25032  006788  EE20 F02A          	lfsr	2,42
 25033  00678C  501A               	movf	adf4351_write_reg5@ctx^0,w,c
 25034  00678E  26D9               	addwf	fsr2l,f,c
 25035  006790  501B               	movf	(adf4351_write_reg5@ctx+1)^0,w,c
 25036  006792  22DA               	addwfc	fsr2h,f,c
 25037  006794  50DF               	movf	indf2,w,c
 25038  006796  6E1C               	movwf	??_adf4351_write_reg5^0,c
 25039  006798  0E03               	movlw	3
 25040  00679A  161C               	andwf	??_adf4351_write_reg5^0,f,c
 25041  00679C  C01C  F01D         	movff	??_adf4351_write_reg5,??_adf4351_write_reg5+1
 25042  0067A0  6A1E               	clrf	(??_adf4351_write_reg5+2)^0,c
 25043  0067A2  6A1F               	clrf	(??_adf4351_write_reg5+3)^0,c
 25044  0067A4  6A20               	clrf	(??_adf4351_write_reg5+4)^0,c
 25045  0067A6  0E16               	movlw	22
 25046  0067A8                     u12705:
 25047  0067A8  90D8               	bcf	status,0,c
 25048  0067AA  361D               	rlcf	(??_adf4351_write_reg5+1)^0,f,c
 25049  0067AC  361E               	rlcf	(??_adf4351_write_reg5+2)^0,f,c
 25050  0067AE  361F               	rlcf	(??_adf4351_write_reg5+3)^0,f,c
 25051  0067B0  3620               	rlcf	(??_adf4351_write_reg5+4)^0,f,c
 25052  0067B2  2EE8               	decfsz	wreg,f,c
 25053  0067B4  D7F9               	goto	u12705
 25054  0067B6  501D               	movf	(??_adf4351_write_reg5+1)^0,w,c
 25055  0067B8  1221               	iorwf	adf4351_write_reg5@data^0,f,c
 25056  0067BA  501E               	movf	(??_adf4351_write_reg5+2)^0,w,c
 25057  0067BC  1222               	iorwf	(adf4351_write_reg5@data+1)^0,f,c
 25058  0067BE  501F               	movf	(??_adf4351_write_reg5+3)^0,w,c
 25059  0067C0  1223               	iorwf	(adf4351_write_reg5@data+2)^0,f,c
 25060  0067C2  5020               	movf	(??_adf4351_write_reg5+4)^0,w,c
 25061  0067C4  1224               	iorwf	(adf4351_write_reg5@data+3)^0,f,c
 25062                           
 25063                           ;src/driver/adf4351.c: 345:         adf4351_write_latch(data);
 25064  0067C6  C021  F00E         	movff	adf4351_write_reg5@data,adf4351_write_latch@value
 25065  0067CA  C022  F00F         	movff	adf4351_write_reg5@data+1,adf4351_write_latch@value+1
 25066  0067CE  C023  F010         	movff	adf4351_write_reg5@data+2,adf4351_write_latch@value+2
 25067  0067D2  C024  F011         	movff	adf4351_write_reg5@data+3,adf4351_write_latch@value+3
 25068  0067D6  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 25069  0067DA  0012               	return		;funcret
 25070  0067DC                     __end_of_adf4351_write_reg5:
 25071                           	opt callstack 0
 25072                           
 25073 ;; *************** function _adf4351_write_reg4 *****************
 25074 ;; Defined at:
 25075 ;;		line 318 in file "src/driver/adf4351.c"
 25076 ;; Parameters:    Size  Location     Type
 25077 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 25078 ;;		 -> g_adf4351(55), 
 25079 ;; Auto vars:     Size  Location     Type
 25080 ;;  data            4   32[COMRAM] unsigned long 
 25081 ;; Return value:  Size  Location     Type
 25082 ;;                  1    wreg      void 
 25083 ;; Registers used:
 25084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25085 ;; Tracked objects:
 25086 ;;		On entry : 0/0
 25087 ;;		On exit  : 0/0
 25088 ;;		Unchanged: 0/0
 25089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25090 ;;      Params:         2       0       0       0       0       0       0
 25091 ;;      Locals:         4       0       0       0       0       0       0
 25092 ;;      Temps:          5       0       0       0       0       0       0
 25093 ;;      Totals:        11       0       0       0       0       0       0
 25094 ;;Total ram usage:       11 bytes
 25095 ;; Hardware stack levels used:    1
 25096 ;; Hardware stack levels required when called:    3
 25097 ;; This function calls:
 25098 ;;		_adf4351_write_latch
 25099 ;; This function is called by:
 25100 ;;		_adf4351_set_mode
 25101 ;;		_adf4351_setup
 25102 ;; This function uses a non-reentrant model
 25103 ;;
 25104                           
 25105                           	psect	text110
 25106  002CF6                     __ptext110:
 25107                           	opt callstack 0
 25108  002CF6                     _adf4351_write_reg4:
 25109                           	opt callstack 24
 25110                           
 25111                           ;src/driver/adf4351.c: 318: static void adf4351_write_reg4(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 319: {;src/driver/adf4351.c: 320:     if(ctx->init) {
 25112                           
 25113                           ;incstack = 0
 25114  002CF6  C01A  FFD9         	movff	adf4351_write_reg4@ctx,fsr2l
 25115  002CFA  C01B  FFDA         	movff	adf4351_write_reg4@ctx+1,fsr2h
 25116  002CFE  50DE               	movf	postinc2,w,c
 25117  002D00  10DE               	iorwf	postinc2,w,c
 25118  002D02  B4D8               	btfsc	status,2,c
 25119  002D04  0012               	return	
 25120                           
 25121                           ;src/driver/adf4351.c: 321:         u32 data = 4;
 25122  002D06  0E04               	movlw	4
 25123  002D08  6E21               	movwf	adf4351_write_reg4@data^0,c
 25124  002D0A  0E00               	movlw	0
 25125  002D0C  6E22               	movwf	(adf4351_write_reg4@data+1)^0,c
 25126  002D0E  0E00               	movlw	0
 25127  002D10  6E23               	movwf	(adf4351_write_reg4@data+2)^0,c
 25128  002D12  0E00               	movlw	0
 25129  002D14  6E24               	movwf	(adf4351_write_reg4@data+3)^0,c
 25130                           
 25131                           ;src/driver/adf4351.c: 323:         data |= (((u32)ctx->reg4.rfoutpwr&0x0003)<<3);
 25132  002D16  EE20 F029          	lfsr	2,41
 25133  002D1A  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25134  002D1C  26D9               	addwf	fsr2l,f,c
 25135  002D1E  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25136  002D20  22DA               	addwfc	fsr2h,f,c
 25137  002D22  50DF               	movf	indf2,w,c
 25138  002D24  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25139  002D26  0E03               	movlw	3
 25140  002D28  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25141  002D2A  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25142  002D2E  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25143  002D30  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25144  002D32  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25145  002D34  0E03               	movlw	3
 25146  002D36                     u12485:
 25147  002D36  90D8               	bcf	status,0,c
 25148  002D38  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25149  002D3A  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25150  002D3C  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25151  002D3E  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25152  002D40  2EE8               	decfsz	wreg,f,c
 25153  002D42  D7F9               	goto	u12485
 25154  002D44  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25155  002D46  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25156  002D48  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25157  002D4A  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25158  002D4C  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25159  002D4E  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25160  002D50  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25161  002D52  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25162                           
 25163                           ;src/driver/adf4351.c: 324:         data |= (((u32)ctx->reg4.rfoutena&0x0001)<<5);
 25164  002D54  EE20 F028          	lfsr	2,40
 25165  002D58  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25166  002D5A  26D9               	addwf	fsr2l,f,c
 25167  002D5C  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25168  002D5E  22DA               	addwfc	fsr2h,f,c
 25169  002D60  50DF               	movf	indf2,w,c
 25170  002D62  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25171  002D64  0E01               	movlw	1
 25172  002D66  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25173  002D68  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25174  002D6C  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25175  002D6E  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25176  002D70  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25177  002D72  0E05               	movlw	5
 25178  002D74                     u12495:
 25179  002D74  90D8               	bcf	status,0,c
 25180  002D76  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25181  002D78  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25182  002D7A  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25183  002D7C  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25184  002D7E  2EE8               	decfsz	wreg,f,c
 25185  002D80  D7F9               	goto	u12495
 25186  002D82  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25187  002D84  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25188  002D86  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25189  002D88  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25190  002D8A  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25191  002D8C  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25192  002D8E  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25193  002D90  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25194                           
 25195                           ;src/driver/adf4351.c: 325:         data |= (((u32)ctx->reg4.auxpwrout&0x0003)<<6);
 25196  002D92  EE20 F027          	lfsr	2,39
 25197  002D96  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25198  002D98  26D9               	addwf	fsr2l,f,c
 25199  002D9A  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25200  002D9C  22DA               	addwfc	fsr2h,f,c
 25201  002D9E  50DF               	movf	indf2,w,c
 25202  002DA0  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25203  002DA2  0E03               	movlw	3
 25204  002DA4  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25205  002DA6  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25206  002DAA  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25207  002DAC  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25208  002DAE  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25209  002DB0  0E06               	movlw	6
 25210  002DB2                     u12505:
 25211  002DB2  90D8               	bcf	status,0,c
 25212  002DB4  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25213  002DB6  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25214  002DB8  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25215  002DBA  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25216  002DBC  2EE8               	decfsz	wreg,f,c
 25217  002DBE  D7F9               	goto	u12505
 25218  002DC0  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25219  002DC2  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25220  002DC4  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25221  002DC6  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25222  002DC8  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25223  002DCA  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25224  002DCC  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25225  002DCE  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25226                           
 25227                           ;src/driver/adf4351.c: 326:         data |= (((u32)ctx->reg4.auxoutena&0x0001)<<8);
 25228  002DD0  EE20 F026          	lfsr	2,38
 25229  002DD4  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25230  002DD6  26D9               	addwf	fsr2l,f,c
 25231  002DD8  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25232  002DDA  22DA               	addwfc	fsr2h,f,c
 25233  002DDC  50DF               	movf	indf2,w,c
 25234  002DDE  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25235  002DE0  0E01               	movlw	1
 25236  002DE2  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25237  002DE4  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25238  002DE8  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25239  002DEA  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25240  002DEC  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25241  002DEE  C01F  F020         	movff	??_adf4351_write_reg4+3,??_adf4351_write_reg4+4
 25242  002DF2  C01E  F01F         	movff	??_adf4351_write_reg4+2,??_adf4351_write_reg4+3
 25243  002DF6  C01D  F01E         	movff	??_adf4351_write_reg4+1,??_adf4351_write_reg4+2
 25244  002DFA  6A1D               	clrf	(??_adf4351_write_reg4+1)^0,c
 25245  002DFC  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25246  002DFE  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25247  002E00  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25248  002E02  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25249  002E04  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25250  002E06  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25251  002E08  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25252  002E0A  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25253                           
 25254                           ;src/driver/adf4351.c: 327:         data |= (((u32)ctx->reg4.auxoutsel&0x0001)<<9);
 25255  002E0C  EE20 F025          	lfsr	2,37
 25256  002E10  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25257  002E12  26D9               	addwf	fsr2l,f,c
 25258  002E14  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25259  002E16  22DA               	addwfc	fsr2h,f,c
 25260  002E18  50DF               	movf	indf2,w,c
 25261  002E1A  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25262  002E1C  0E01               	movlw	1
 25263  002E1E  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25264  002E20  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25265  002E24  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25266  002E26  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25267  002E28  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25268  002E2A  0E09               	movlw	9
 25269  002E2C                     u12515:
 25270  002E2C  90D8               	bcf	status,0,c
 25271  002E2E  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25272  002E30  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25273  002E32  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25274  002E34  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25275  002E36  2EE8               	decfsz	wreg,f,c
 25276  002E38  D7F9               	goto	u12515
 25277  002E3A  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25278  002E3C  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25279  002E3E  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25280  002E40  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25281  002E42  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25282  002E44  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25283  002E46  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25284  002E48  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25285                           
 25286                           ;src/driver/adf4351.c: 328:         data |= (((u32)ctx->reg4.mtld&0x0001)<<10);
 25287  002E4A  EE20 F024          	lfsr	2,36
 25288  002E4E  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25289  002E50  26D9               	addwf	fsr2l,f,c
 25290  002E52  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25291  002E54  22DA               	addwfc	fsr2h,f,c
 25292  002E56  50DF               	movf	indf2,w,c
 25293  002E58  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25294  002E5A  0E01               	movlw	1
 25295  002E5C  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25296  002E5E  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25297  002E62  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25298  002E64  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25299  002E66  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25300  002E68  0E0A               	movlw	10
 25301  002E6A                     u12525:
 25302  002E6A  90D8               	bcf	status,0,c
 25303  002E6C  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25304  002E6E  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25305  002E70  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25306  002E72  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25307  002E74  2EE8               	decfsz	wreg,f,c
 25308  002E76  D7F9               	goto	u12525
 25309  002E78  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25310  002E7A  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25311  002E7C  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25312  002E7E  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25313  002E80  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25314  002E82  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25315  002E84  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25316  002E86  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25317                           
 25318                           ;src/driver/adf4351.c: 329:         data |= (((u32)ctx->reg4.vcopd&0x0001)<<11);
 25319  002E88  EE20 F023          	lfsr	2,35
 25320  002E8C  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25321  002E8E  26D9               	addwf	fsr2l,f,c
 25322  002E90  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25323  002E92  22DA               	addwfc	fsr2h,f,c
 25324  002E94  50DF               	movf	indf2,w,c
 25325  002E96  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25326  002E98  0E01               	movlw	1
 25327  002E9A  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25328  002E9C  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25329  002EA0  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25330  002EA2  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25331  002EA4  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25332  002EA6  0E0B               	movlw	11
 25333  002EA8                     u12535:
 25334  002EA8  90D8               	bcf	status,0,c
 25335  002EAA  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25336  002EAC  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25337  002EAE  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25338  002EB0  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25339  002EB2  2EE8               	decfsz	wreg,f,c
 25340  002EB4  D7F9               	goto	u12535
 25341  002EB6  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25342  002EB8  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25343  002EBA  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25344  002EBC  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25345  002EBE  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25346  002EC0  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25347  002EC2  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25348  002EC4  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25349                           
 25350                           ;src/driver/adf4351.c: 330:         data |= (((u32)ctx->reg4.bsclkdiv&0x00FF)<<12);
 25351  002EC6  EE20 F022          	lfsr	2,34
 25352  002ECA  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25353  002ECC  26D9               	addwf	fsr2l,f,c
 25354  002ECE  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25355  002ED0  22DA               	addwfc	fsr2h,f,c
 25356  002ED2  50DF               	movf	indf2,w,c
 25357  002ED4  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25358  002ED6  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25359  002EDA  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25360  002EDC  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25361  002EDE  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25362  002EE0  0E0C               	movlw	12
 25363  002EE2                     u12545:
 25364  002EE2  90D8               	bcf	status,0,c
 25365  002EE4  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25366  002EE6  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25367  002EE8  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25368  002EEA  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25369  002EEC  2EE8               	decfsz	wreg,f,c
 25370  002EEE  D7F9               	goto	u12545
 25371  002EF0  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25372  002EF2  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25373  002EF4  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25374  002EF6  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25375  002EF8  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25376  002EFA  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25377  002EFC  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25378  002EFE  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25379                           
 25380                           ;src/driver/adf4351.c: 331:         data |= (((u32)ctx->reg4.divsel&0x0007)<<20);
 25381  002F00  EE20 F021          	lfsr	2,33
 25382  002F04  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25383  002F06  26D9               	addwf	fsr2l,f,c
 25384  002F08  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25385  002F0A  22DA               	addwfc	fsr2h,f,c
 25386  002F0C  50DF               	movf	indf2,w,c
 25387  002F0E  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25388  002F10  0E07               	movlw	7
 25389  002F12  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25390  002F14  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25391  002F18  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25392  002F1A  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25393  002F1C  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25394  002F1E  0E14               	movlw	20
 25395  002F20                     u12555:
 25396  002F20  90D8               	bcf	status,0,c
 25397  002F22  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25398  002F24  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25399  002F26  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25400  002F28  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25401  002F2A  2EE8               	decfsz	wreg,f,c
 25402  002F2C  D7F9               	goto	u12555
 25403  002F2E  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25404  002F30  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25405  002F32  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25406  002F34  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25407  002F36  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25408  002F38  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25409  002F3A  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25410  002F3C  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25411                           
 25412                           ;src/driver/adf4351.c: 332:         data |= (((u32)ctx->reg4.fbsel&0x0001)<<23);
 25413  002F3E  EE20 F020          	lfsr	2,32
 25414  002F42  501A               	movf	adf4351_write_reg4@ctx^0,w,c
 25415  002F44  26D9               	addwf	fsr2l,f,c
 25416  002F46  501B               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 25417  002F48  22DA               	addwfc	fsr2h,f,c
 25418  002F4A  50DF               	movf	indf2,w,c
 25419  002F4C  6E1C               	movwf	??_adf4351_write_reg4^0,c
 25420  002F4E  0E01               	movlw	1
 25421  002F50  161C               	andwf	??_adf4351_write_reg4^0,f,c
 25422  002F52  C01C  F01D         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 25423  002F56  6A1E               	clrf	(??_adf4351_write_reg4+2)^0,c
 25424  002F58  6A1F               	clrf	(??_adf4351_write_reg4+3)^0,c
 25425  002F5A  6A20               	clrf	(??_adf4351_write_reg4+4)^0,c
 25426  002F5C  0E17               	movlw	23
 25427  002F5E                     u12565:
 25428  002F5E  90D8               	bcf	status,0,c
 25429  002F60  361D               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 25430  002F62  361E               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 25431  002F64  361F               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 25432  002F66  3620               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 25433  002F68  2EE8               	decfsz	wreg,f,c
 25434  002F6A  D7F9               	goto	u12565
 25435  002F6C  501D               	movf	(??_adf4351_write_reg4+1)^0,w,c
 25436  002F6E  1221               	iorwf	adf4351_write_reg4@data^0,f,c
 25437  002F70  501E               	movf	(??_adf4351_write_reg4+2)^0,w,c
 25438  002F72  1222               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 25439  002F74  501F               	movf	(??_adf4351_write_reg4+3)^0,w,c
 25440  002F76  1223               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 25441  002F78  5020               	movf	(??_adf4351_write_reg4+4)^0,w,c
 25442  002F7A  1224               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 25443                           
 25444                           ;src/driver/adf4351.c: 334:         adf4351_write_latch(data);
 25445  002F7C  C021  F00E         	movff	adf4351_write_reg4@data,adf4351_write_latch@value
 25446  002F80  C022  F00F         	movff	adf4351_write_reg4@data+1,adf4351_write_latch@value+1
 25447  002F84  C023  F010         	movff	adf4351_write_reg4@data+2,adf4351_write_latch@value+2
 25448  002F88  C024  F011         	movff	adf4351_write_reg4@data+3,adf4351_write_latch@value+3
 25449  002F8C  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 25450  002F90  0012               	return		;funcret
 25451  002F92                     __end_of_adf4351_write_reg4:
 25452                           	opt callstack 0
 25453                           
 25454 ;; *************** function _adf4351_write_reg3 *****************
 25455 ;; Defined at:
 25456 ;;		line 302 in file "src/driver/adf4351.c"
 25457 ;; Parameters:    Size  Location     Type
 25458 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 25459 ;;		 -> g_adf4351(55), 
 25460 ;; Auto vars:     Size  Location     Type
 25461 ;;  data            4   33[COMRAM] unsigned long 
 25462 ;; Return value:  Size  Location     Type
 25463 ;;                  1    wreg      void 
 25464 ;; Registers used:
 25465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25466 ;; Tracked objects:
 25467 ;;		On entry : 0/0
 25468 ;;		On exit  : 0/0
 25469 ;;		Unchanged: 0/0
 25470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25471 ;;      Params:         2       0       0       0       0       0       0
 25472 ;;      Locals:         4       0       0       0       0       0       0
 25473 ;;      Temps:          6       0       0       0       0       0       0
 25474 ;;      Totals:        12       0       0       0       0       0       0
 25475 ;;Total ram usage:       12 bytes
 25476 ;; Hardware stack levels used:    1
 25477 ;; Hardware stack levels required when called:    3
 25478 ;; This function calls:
 25479 ;;		_adf4351_write_latch
 25480 ;; This function is called by:
 25481 ;;		_adf4351_setup
 25482 ;; This function uses a non-reentrant model
 25483 ;;
 25484                           
 25485                           	psect	text111
 25486  003DA8                     __ptext111:
 25487                           	opt callstack 0
 25488  003DA8                     _adf4351_write_reg3:
 25489                           	opt callstack 24
 25490                           
 25491                           ;src/driver/adf4351.c: 302: static void adf4351_write_reg3(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 303: {;src/driver/adf4351.c: 304:     if(ctx->init) {
 25492                           
 25493                           ;incstack = 0
 25494  003DA8  C01A  FFD9         	movff	adf4351_write_reg3@ctx,fsr2l
 25495  003DAC  C01B  FFDA         	movff	adf4351_write_reg3@ctx+1,fsr2h
 25496  003DB0  50DE               	movf	postinc2,w,c
 25497  003DB2  10DE               	iorwf	postinc2,w,c
 25498  003DB4  B4D8               	btfsc	status,2,c
 25499  003DB6  0012               	return	
 25500                           
 25501                           ;src/driver/adf4351.c: 305:         u32 data = 3;
 25502  003DB8  0E03               	movlw	3
 25503  003DBA  6E22               	movwf	adf4351_write_reg3@data^0,c
 25504  003DBC  0E00               	movlw	0
 25505  003DBE  6E23               	movwf	(adf4351_write_reg3@data+1)^0,c
 25506  003DC0  0E00               	movlw	0
 25507  003DC2  6E24               	movwf	(adf4351_write_reg3@data+2)^0,c
 25508  003DC4  0E00               	movlw	0
 25509  003DC6  6E25               	movwf	(adf4351_write_reg3@data+3)^0,c
 25510                           
 25511                           ;src/driver/adf4351.c: 307:         data |= (((u32)ctx->reg3.clkdiv&0x0FFF)<<3);
 25512  003DC8  EE20 F01E          	lfsr	2,30
 25513  003DCC  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25514  003DCE  26D9               	addwf	fsr2l,f,c
 25515  003DD0  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25516  003DD2  22DA               	addwfc	fsr2h,f,c
 25517  003DD4  CFDE F01C          	movff	postinc2,??_adf4351_write_reg3
 25518  003DD8  CFDD F01D          	movff	postdec2,??_adf4351_write_reg3+1
 25519  003DDC  0EFF               	movlw	255
 25520  003DDE  141C               	andwf	??_adf4351_write_reg3^0,w,c
 25521  003DE0  6E1E               	movwf	(??_adf4351_write_reg3+2)^0,c
 25522  003DE2  0E0F               	movlw	15
 25523  003DE4  141D               	andwf	(??_adf4351_write_reg3+1)^0,w,c
 25524  003DE6  6E1F               	movwf	(??_adf4351_write_reg3+3)^0,c
 25525  003DE8  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25526  003DEA  6A21               	clrf	(??_adf4351_write_reg3+5)^0,c
 25527  003DEC  0E03               	movlw	3
 25528  003DEE                     u12725:
 25529  003DEE  90D8               	bcf	status,0,c
 25530  003DF0  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25531  003DF2  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25532  003DF4  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25533  003DF6  3621               	rlcf	(??_adf4351_write_reg3+5)^0,f,c
 25534  003DF8  2EE8               	decfsz	wreg,f,c
 25535  003DFA  D7F9               	goto	u12725
 25536  003DFC  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25537  003DFE  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25538  003E00  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25539  003E02  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25540  003E04  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25541  003E06  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25542  003E08  5021               	movf	(??_adf4351_write_reg3+5)^0,w,c
 25543  003E0A  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25544                           
 25545                           ;src/driver/adf4351.c: 308:         data |= (((u32)ctx->reg3.clkdivmode&0x0003)<<15);
 25546  003E0C  EE20 F01D          	lfsr	2,29
 25547  003E10  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25548  003E12  26D9               	addwf	fsr2l,f,c
 25549  003E14  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25550  003E16  22DA               	addwfc	fsr2h,f,c
 25551  003E18  50DF               	movf	indf2,w,c
 25552  003E1A  6E1C               	movwf	??_adf4351_write_reg3^0,c
 25553  003E1C  0E03               	movlw	3
 25554  003E1E  161C               	andwf	??_adf4351_write_reg3^0,f,c
 25555  003E20  C01C  F01D         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 25556  003E24  6A1E               	clrf	(??_adf4351_write_reg3+2)^0,c
 25557  003E26  6A1F               	clrf	(??_adf4351_write_reg3+3)^0,c
 25558  003E28  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25559  003E2A  0E0F               	movlw	15
 25560  003E2C                     u12735:
 25561  003E2C  90D8               	bcf	status,0,c
 25562  003E2E  361D               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 25563  003E30  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25564  003E32  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25565  003E34  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25566  003E36  2EE8               	decfsz	wreg,f,c
 25567  003E38  D7F9               	goto	u12735
 25568  003E3A  501D               	movf	(??_adf4351_write_reg3+1)^0,w,c
 25569  003E3C  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25570  003E3E  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25571  003E40  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25572  003E42  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25573  003E44  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25574  003E46  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25575  003E48  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25576                           
 25577                           ;src/driver/adf4351.c: 309:         data |= (((u32)ctx->reg3.csr&0x0001)<<18);
 25578  003E4A  EE20 F01C          	lfsr	2,28
 25579  003E4E  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25580  003E50  26D9               	addwf	fsr2l,f,c
 25581  003E52  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25582  003E54  22DA               	addwfc	fsr2h,f,c
 25583  003E56  50DF               	movf	indf2,w,c
 25584  003E58  6E1C               	movwf	??_adf4351_write_reg3^0,c
 25585  003E5A  0E01               	movlw	1
 25586  003E5C  161C               	andwf	??_adf4351_write_reg3^0,f,c
 25587  003E5E  C01C  F01D         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 25588  003E62  6A1E               	clrf	(??_adf4351_write_reg3+2)^0,c
 25589  003E64  6A1F               	clrf	(??_adf4351_write_reg3+3)^0,c
 25590  003E66  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25591  003E68  0E12               	movlw	18
 25592  003E6A                     u12745:
 25593  003E6A  90D8               	bcf	status,0,c
 25594  003E6C  361D               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 25595  003E6E  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25596  003E70  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25597  003E72  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25598  003E74  2EE8               	decfsz	wreg,f,c
 25599  003E76  D7F9               	goto	u12745
 25600  003E78  501D               	movf	(??_adf4351_write_reg3+1)^0,w,c
 25601  003E7A  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25602  003E7C  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25603  003E7E  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25604  003E80  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25605  003E82  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25606  003E84  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25607  003E86  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25608                           
 25609                           ;src/driver/adf4351.c: 310:         data |= (((u32)ctx->reg3.chcancel&0x0001)<<21);
 25610  003E88  EE20 F01B          	lfsr	2,27
 25611  003E8C  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25612  003E8E  26D9               	addwf	fsr2l,f,c
 25613  003E90  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25614  003E92  22DA               	addwfc	fsr2h,f,c
 25615  003E94  50DF               	movf	indf2,w,c
 25616  003E96  6E1C               	movwf	??_adf4351_write_reg3^0,c
 25617  003E98  0E01               	movlw	1
 25618  003E9A  161C               	andwf	??_adf4351_write_reg3^0,f,c
 25619  003E9C  C01C  F01D         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 25620  003EA0  6A1E               	clrf	(??_adf4351_write_reg3+2)^0,c
 25621  003EA2  6A1F               	clrf	(??_adf4351_write_reg3+3)^0,c
 25622  003EA4  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25623  003EA6  0E15               	movlw	21
 25624  003EA8                     u12755:
 25625  003EA8  90D8               	bcf	status,0,c
 25626  003EAA  361D               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 25627  003EAC  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25628  003EAE  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25629  003EB0  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25630  003EB2  2EE8               	decfsz	wreg,f,c
 25631  003EB4  D7F9               	goto	u12755
 25632  003EB6  501D               	movf	(??_adf4351_write_reg3+1)^0,w,c
 25633  003EB8  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25634  003EBA  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25635  003EBC  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25636  003EBE  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25637  003EC0  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25638  003EC2  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25639  003EC4  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25640                           
 25641                           ;src/driver/adf4351.c: 311:         data |= (((u32)ctx->reg3.abp&0x0001)<<22);
 25642  003EC6  EE20 F01A          	lfsr	2,26
 25643  003ECA  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25644  003ECC  26D9               	addwf	fsr2l,f,c
 25645  003ECE  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25646  003ED0  22DA               	addwfc	fsr2h,f,c
 25647  003ED2  50DF               	movf	indf2,w,c
 25648  003ED4  6E1C               	movwf	??_adf4351_write_reg3^0,c
 25649  003ED6  0E01               	movlw	1
 25650  003ED8  161C               	andwf	??_adf4351_write_reg3^0,f,c
 25651  003EDA  C01C  F01D         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 25652  003EDE  6A1E               	clrf	(??_adf4351_write_reg3+2)^0,c
 25653  003EE0  6A1F               	clrf	(??_adf4351_write_reg3+3)^0,c
 25654  003EE2  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25655  003EE4  0E16               	movlw	22
 25656  003EE6                     u12765:
 25657  003EE6  90D8               	bcf	status,0,c
 25658  003EE8  361D               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 25659  003EEA  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25660  003EEC  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25661  003EEE  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25662  003EF0  2EE8               	decfsz	wreg,f,c
 25663  003EF2  D7F9               	goto	u12765
 25664  003EF4  501D               	movf	(??_adf4351_write_reg3+1)^0,w,c
 25665  003EF6  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25666  003EF8  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25667  003EFA  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25668  003EFC  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25669  003EFE  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25670  003F00  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25671  003F02  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25672                           
 25673                           ;src/driver/adf4351.c: 312:         data |= (((u32)ctx->reg3.bscm&0x0001)<<23);
 25674  003F04  EE20 F019          	lfsr	2,25
 25675  003F08  501A               	movf	adf4351_write_reg3@ctx^0,w,c
 25676  003F0A  26D9               	addwf	fsr2l,f,c
 25677  003F0C  501B               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 25678  003F0E  22DA               	addwfc	fsr2h,f,c
 25679  003F10  50DF               	movf	indf2,w,c
 25680  003F12  6E1C               	movwf	??_adf4351_write_reg3^0,c
 25681  003F14  0E01               	movlw	1
 25682  003F16  161C               	andwf	??_adf4351_write_reg3^0,f,c
 25683  003F18  C01C  F01D         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 25684  003F1C  6A1E               	clrf	(??_adf4351_write_reg3+2)^0,c
 25685  003F1E  6A1F               	clrf	(??_adf4351_write_reg3+3)^0,c
 25686  003F20  6A20               	clrf	(??_adf4351_write_reg3+4)^0,c
 25687  003F22  0E17               	movlw	23
 25688  003F24                     u12775:
 25689  003F24  90D8               	bcf	status,0,c
 25690  003F26  361D               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 25691  003F28  361E               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 25692  003F2A  361F               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 25693  003F2C  3620               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 25694  003F2E  2EE8               	decfsz	wreg,f,c
 25695  003F30  D7F9               	goto	u12775
 25696  003F32  501D               	movf	(??_adf4351_write_reg3+1)^0,w,c
 25697  003F34  1222               	iorwf	adf4351_write_reg3@data^0,f,c
 25698  003F36  501E               	movf	(??_adf4351_write_reg3+2)^0,w,c
 25699  003F38  1223               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 25700  003F3A  501F               	movf	(??_adf4351_write_reg3+3)^0,w,c
 25701  003F3C  1224               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 25702  003F3E  5020               	movf	(??_adf4351_write_reg3+4)^0,w,c
 25703  003F40  1225               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 25704                           
 25705                           ;src/driver/adf4351.c: 314:         adf4351_write_latch(data);
 25706  003F42  C022  F00E         	movff	adf4351_write_reg3@data,adf4351_write_latch@value
 25707  003F46  C023  F00F         	movff	adf4351_write_reg3@data+1,adf4351_write_latch@value+1
 25708  003F4A  C024  F010         	movff	adf4351_write_reg3@data+2,adf4351_write_latch@value+2
 25709  003F4E  C025  F011         	movff	adf4351_write_reg3@data+3,adf4351_write_latch@value+3
 25710  003F52  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 25711  003F56  0012               	return		;funcret
 25712  003F58                     __end_of_adf4351_write_reg3:
 25713                           	opt callstack 0
 25714                           
 25715 ;; *************** function _adf4351_write_reg2 *****************
 25716 ;; Defined at:
 25717 ;;		line 279 in file "src/driver/adf4351.c"
 25718 ;; Parameters:    Size  Location     Type
 25719 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 25720 ;;		 -> g_adf4351(55), 
 25721 ;; Auto vars:     Size  Location     Type
 25722 ;;  data            4   33[COMRAM] unsigned long 
 25723 ;; Return value:  Size  Location     Type
 25724 ;;                  1    wreg      void 
 25725 ;; Registers used:
 25726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25727 ;; Tracked objects:
 25728 ;;		On entry : 0/0
 25729 ;;		On exit  : 0/0
 25730 ;;		Unchanged: 0/0
 25731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25732 ;;      Params:         2       0       0       0       0       0       0
 25733 ;;      Locals:         4       0       0       0       0       0       0
 25734 ;;      Temps:          6       0       0       0       0       0       0
 25735 ;;      Totals:        12       0       0       0       0       0       0
 25736 ;;Total ram usage:       12 bytes
 25737 ;; Hardware stack levels used:    1
 25738 ;; Hardware stack levels required when called:    3
 25739 ;; This function calls:
 25740 ;;		_adf4351_write_latch
 25741 ;; This function is called by:
 25742 ;;		_adf4351_set_mode
 25743 ;;		_adf4351_setup
 25744 ;; This function uses a non-reentrant model
 25745 ;;
 25746                           
 25747                           	psect	text112
 25748  001E02                     __ptext112:
 25749                           	opt callstack 0
 25750  001E02                     _adf4351_write_reg2:
 25751                           	opt callstack 24
 25752                           
 25753                           ;src/driver/adf4351.c: 279: static void adf4351_write_reg2(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 280: {;src/driver/adf4351.c: 281:     if(ctx->init) {
 25754                           
 25755                           ;incstack = 0
 25756  001E02  C01A  FFD9         	movff	adf4351_write_reg2@ctx,fsr2l
 25757  001E06  C01B  FFDA         	movff	adf4351_write_reg2@ctx+1,fsr2h
 25758  001E0A  50DE               	movf	postinc2,w,c
 25759  001E0C  10DE               	iorwf	postinc2,w,c
 25760  001E0E  B4D8               	btfsc	status,2,c
 25761  001E10  0012               	return	
 25762                           
 25763                           ;src/driver/adf4351.c: 282:         u32 data = 2;
 25764  001E12  0E02               	movlw	2
 25765  001E14  6E22               	movwf	adf4351_write_reg2@data^0,c
 25766  001E16  0E00               	movlw	0
 25767  001E18  6E23               	movwf	(adf4351_write_reg2@data+1)^0,c
 25768  001E1A  0E00               	movlw	0
 25769  001E1C  6E24               	movwf	(adf4351_write_reg2@data+2)^0,c
 25770  001E1E  0E00               	movlw	0
 25771  001E20  6E25               	movwf	(adf4351_write_reg2@data+3)^0,c
 25772                           
 25773                           ;src/driver/adf4351.c: 284:         data |= (((u32)ctx->reg2.cntreset&0x0001)<<3);
 25774  001E22  EE20 F018          	lfsr	2,24
 25775  001E26  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25776  001E28  26D9               	addwf	fsr2l,f,c
 25777  001E2A  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25778  001E2C  22DA               	addwfc	fsr2h,f,c
 25779  001E2E  50DF               	movf	indf2,w,c
 25780  001E30  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25781  001E32  0E01               	movlw	1
 25782  001E34  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25783  001E36  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25784  001E3A  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25785  001E3C  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25786  001E3E  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25787  001E40  0E03               	movlw	3
 25788  001E42                     u12585:
 25789  001E42  90D8               	bcf	status,0,c
 25790  001E44  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25791  001E46  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25792  001E48  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25793  001E4A  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25794  001E4C  2EE8               	decfsz	wreg,f,c
 25795  001E4E  D7F9               	goto	u12585
 25796  001E50  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25797  001E52  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25798  001E54  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25799  001E56  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25800  001E58  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25801  001E5A  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25802  001E5C  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25803  001E5E  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25804                           
 25805                           ;src/driver/adf4351.c: 285:         data |= (((u32)ctx->reg2.cpts&0x0001)<<4);
 25806  001E60  EE20 F017          	lfsr	2,23
 25807  001E64  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25808  001E66  26D9               	addwf	fsr2l,f,c
 25809  001E68  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25810  001E6A  22DA               	addwfc	fsr2h,f,c
 25811  001E6C  50DF               	movf	indf2,w,c
 25812  001E6E  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25813  001E70  0E01               	movlw	1
 25814  001E72  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25815  001E74  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25816  001E78  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25817  001E7A  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25818  001E7C  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25819  001E7E  0E04               	movlw	4
 25820  001E80                     u12595:
 25821  001E80  90D8               	bcf	status,0,c
 25822  001E82  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25823  001E84  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25824  001E86  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25825  001E88  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25826  001E8A  2EE8               	decfsz	wreg,f,c
 25827  001E8C  D7F9               	goto	u12595
 25828  001E8E  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25829  001E90  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25830  001E92  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25831  001E94  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25832  001E96  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25833  001E98  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25834  001E9A  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25835  001E9C  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25836                           
 25837                           ;src/driver/adf4351.c: 286:         data |= (((u32)ctx->reg2.pd&0x0001)<<5);
 25838  001E9E  EE20 F016          	lfsr	2,22
 25839  001EA2  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25840  001EA4  26D9               	addwf	fsr2l,f,c
 25841  001EA6  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25842  001EA8  22DA               	addwfc	fsr2h,f,c
 25843  001EAA  50DF               	movf	indf2,w,c
 25844  001EAC  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25845  001EAE  0E01               	movlw	1
 25846  001EB0  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25847  001EB2  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25848  001EB6  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25849  001EB8  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25850  001EBA  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25851  001EBC  0E05               	movlw	5
 25852  001EBE                     u12605:
 25853  001EBE  90D8               	bcf	status,0,c
 25854  001EC0  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25855  001EC2  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25856  001EC4  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25857  001EC6  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25858  001EC8  2EE8               	decfsz	wreg,f,c
 25859  001ECA  D7F9               	goto	u12605
 25860  001ECC  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25861  001ECE  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25862  001ED0  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25863  001ED2  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25864  001ED4  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25865  001ED6  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25866  001ED8  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25867  001EDA  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25868                           
 25869                           ;src/driver/adf4351.c: 287:         data |= (((u32)ctx->reg2.pdpol&0x0001)<<6);
 25870  001EDC  EE20 F015          	lfsr	2,21
 25871  001EE0  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25872  001EE2  26D9               	addwf	fsr2l,f,c
 25873  001EE4  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25874  001EE6  22DA               	addwfc	fsr2h,f,c
 25875  001EE8  50DF               	movf	indf2,w,c
 25876  001EEA  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25877  001EEC  0E01               	movlw	1
 25878  001EEE  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25879  001EF0  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25880  001EF4  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25881  001EF6  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25882  001EF8  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25883  001EFA  0E06               	movlw	6
 25884  001EFC                     u12615:
 25885  001EFC  90D8               	bcf	status,0,c
 25886  001EFE  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25887  001F00  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25888  001F02  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25889  001F04  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25890  001F06  2EE8               	decfsz	wreg,f,c
 25891  001F08  D7F9               	goto	u12615
 25892  001F0A  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25893  001F0C  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25894  001F0E  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25895  001F10  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25896  001F12  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25897  001F14  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25898  001F16  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25899  001F18  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25900                           
 25901                           ;src/driver/adf4351.c: 288:         data |= (((u32)ctx->reg2.ldp&0x0001)<<7);
 25902  001F1A  EE20 F014          	lfsr	2,20
 25903  001F1E  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25904  001F20  26D9               	addwf	fsr2l,f,c
 25905  001F22  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25906  001F24  22DA               	addwfc	fsr2h,f,c
 25907  001F26  50DF               	movf	indf2,w,c
 25908  001F28  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25909  001F2A  0E01               	movlw	1
 25910  001F2C  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25911  001F2E  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25912  001F32  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25913  001F34  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25914  001F36  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25915  001F38  0E07               	movlw	7
 25916  001F3A                     u12625:
 25917  001F3A  90D8               	bcf	status,0,c
 25918  001F3C  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25919  001F3E  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25920  001F40  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25921  001F42  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25922  001F44  2EE8               	decfsz	wreg,f,c
 25923  001F46  D7F9               	goto	u12625
 25924  001F48  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25925  001F4A  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25926  001F4C  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25927  001F4E  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25928  001F50  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25929  001F52  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25930  001F54  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25931  001F56  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25932                           
 25933                           ;src/driver/adf4351.c: 289:         data |= (((u32)ctx->reg2.ldf&0x0001)<<8);
 25934  001F58  EE20 F013          	lfsr	2,19
 25935  001F5C  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25936  001F5E  26D9               	addwf	fsr2l,f,c
 25937  001F60  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25938  001F62  22DA               	addwfc	fsr2h,f,c
 25939  001F64  50DF               	movf	indf2,w,c
 25940  001F66  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25941  001F68  0E01               	movlw	1
 25942  001F6A  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25943  001F6C  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25944  001F70  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25945  001F72  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25946  001F74  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25947  001F76  C01F  F020         	movff	??_adf4351_write_reg2+3,??_adf4351_write_reg2+4
 25948  001F7A  C01E  F01F         	movff	??_adf4351_write_reg2+2,??_adf4351_write_reg2+3
 25949  001F7E  C01D  F01E         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+2
 25950  001F82  6A1D               	clrf	(??_adf4351_write_reg2+1)^0,c
 25951  001F84  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25952  001F86  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25953  001F88  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25954  001F8A  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25955  001F8C  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25956  001F8E  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25957  001F90  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25958  001F92  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25959                           
 25960                           ;src/driver/adf4351.c: 290:         data |= (((u32)ctx->reg2.cpc&0x000F)<<9);
 25961  001F94  EE20 F012          	lfsr	2,18
 25962  001F98  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25963  001F9A  26D9               	addwf	fsr2l,f,c
 25964  001F9C  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25965  001F9E  22DA               	addwfc	fsr2h,f,c
 25966  001FA0  50DF               	movf	indf2,w,c
 25967  001FA2  6E1C               	movwf	??_adf4351_write_reg2^0,c
 25968  001FA4  0E0F               	movlw	15
 25969  001FA6  161C               	andwf	??_adf4351_write_reg2^0,f,c
 25970  001FA8  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 25971  001FAC  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 25972  001FAE  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 25973  001FB0  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 25974  001FB2  0E09               	movlw	9
 25975  001FB4                     u12635:
 25976  001FB4  90D8               	bcf	status,0,c
 25977  001FB6  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 25978  001FB8  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 25979  001FBA  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 25980  001FBC  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 25981  001FBE  2EE8               	decfsz	wreg,f,c
 25982  001FC0  D7F9               	goto	u12635
 25983  001FC2  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 25984  001FC4  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 25985  001FC6  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 25986  001FC8  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 25987  001FCA  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 25988  001FCC  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 25989  001FCE  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 25990  001FD0  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 25991                           
 25992                           ;src/driver/adf4351.c: 291:         data |= (((u32)ctx->reg2.dblbuff&0x0001)<<13);
 25993  001FD2  EE20 F011          	lfsr	2,17
 25994  001FD6  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 25995  001FD8  26D9               	addwf	fsr2l,f,c
 25996  001FDA  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 25997  001FDC  22DA               	addwfc	fsr2h,f,c
 25998  001FDE  50DF               	movf	indf2,w,c
 25999  001FE0  6E1C               	movwf	??_adf4351_write_reg2^0,c
 26000  001FE2  0E01               	movlw	1
 26001  001FE4  161C               	andwf	??_adf4351_write_reg2^0,f,c
 26002  001FE6  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 26003  001FEA  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26004  001FEC  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26005  001FEE  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26006  001FF0  0E0D               	movlw	13
 26007  001FF2                     u12645:
 26008  001FF2  90D8               	bcf	status,0,c
 26009  001FF4  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 26010  001FF6  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 26011  001FF8  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 26012  001FFA  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 26013  001FFC  2EE8               	decfsz	wreg,f,c
 26014  001FFE  D7F9               	goto	u12645
 26015  002000  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 26016  002002  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26017  002004  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26018  002006  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26019  002008  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26020  00200A  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26021  00200C  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26022  00200E  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26023                           
 26024                           ;src/driver/adf4351.c: 292:         data |= (((u32)ctx->reg2.rcnt&0x03FF)<<14);
 26025  002010  EE20 F00F          	lfsr	2,15
 26026  002014  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 26027  002016  26D9               	addwf	fsr2l,f,c
 26028  002018  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 26029  00201A  22DA               	addwfc	fsr2h,f,c
 26030  00201C  CFDE F01C          	movff	postinc2,??_adf4351_write_reg2
 26031  002020  CFDD F01D          	movff	postdec2,??_adf4351_write_reg2+1
 26032  002024  0EFF               	movlw	255
 26033  002026  141C               	andwf	??_adf4351_write_reg2^0,w,c
 26034  002028  6E1E               	movwf	(??_adf4351_write_reg2+2)^0,c
 26035  00202A  0E03               	movlw	3
 26036  00202C  141D               	andwf	(??_adf4351_write_reg2+1)^0,w,c
 26037  00202E  6E1F               	movwf	(??_adf4351_write_reg2+3)^0,c
 26038  002030  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26039  002032  6A21               	clrf	(??_adf4351_write_reg2+5)^0,c
 26040  002034  0E0E               	movlw	14
 26041  002036                     u12655:
 26042  002036  90D8               	bcf	status,0,c
 26043  002038  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 26044  00203A  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 26045  00203C  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 26046  00203E  3621               	rlcf	(??_adf4351_write_reg2+5)^0,f,c
 26047  002040  2EE8               	decfsz	wreg,f,c
 26048  002042  D7F9               	goto	u12655
 26049  002044  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26050  002046  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26051  002048  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26052  00204A  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26053  00204C  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26054  00204E  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26055  002050  5021               	movf	(??_adf4351_write_reg2+5)^0,w,c
 26056  002052  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26057                           
 26058                           ;src/driver/adf4351.c: 293:         data |= (((u32)ctx->reg2.refdiv&0x0001)<<24);
 26059  002054  EE20 F00E          	lfsr	2,14
 26060  002058  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 26061  00205A  26D9               	addwf	fsr2l,f,c
 26062  00205C  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 26063  00205E  22DA               	addwfc	fsr2h,f,c
 26064  002060  50DF               	movf	indf2,w,c
 26065  002062  6E1C               	movwf	??_adf4351_write_reg2^0,c
 26066  002064  0E01               	movlw	1
 26067  002066  161C               	andwf	??_adf4351_write_reg2^0,f,c
 26068  002068  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 26069  00206C  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26070  00206E  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26071  002070  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26072  002072  C01D  F020         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+4
 26073  002076  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26074  002078  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26075  00207A  6A1D               	clrf	(??_adf4351_write_reg2+1)^0,c
 26076  00207C  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 26077  00207E  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26078  002080  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26079  002082  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26080  002084  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26081  002086  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26082  002088  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26083  00208A  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26084                           
 26085                           ;src/driver/adf4351.c: 294:         data |= (((u32)ctx->reg2.refdbl&0x0001)<<25);
 26086  00208C  EE20 F00D          	lfsr	2,13
 26087  002090  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 26088  002092  26D9               	addwf	fsr2l,f,c
 26089  002094  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 26090  002096  22DA               	addwfc	fsr2h,f,c
 26091  002098  50DF               	movf	indf2,w,c
 26092  00209A  6E1C               	movwf	??_adf4351_write_reg2^0,c
 26093  00209C  0E01               	movlw	1
 26094  00209E  161C               	andwf	??_adf4351_write_reg2^0,f,c
 26095  0020A0  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 26096  0020A4  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26097  0020A6  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26098  0020A8  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26099  0020AA  0E19               	movlw	25
 26100  0020AC                     u12665:
 26101  0020AC  90D8               	bcf	status,0,c
 26102  0020AE  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 26103  0020B0  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 26104  0020B2  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 26105  0020B4  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 26106  0020B6  2EE8               	decfsz	wreg,f,c
 26107  0020B8  D7F9               	goto	u12665
 26108  0020BA  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 26109  0020BC  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26110  0020BE  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26111  0020C0  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26112  0020C2  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26113  0020C4  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26114  0020C6  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26115  0020C8  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26116                           
 26117                           ;src/driver/adf4351.c: 295:         data |= (((u32)ctx->reg2.muxout&0x0007)<<26);
 26118  0020CA  EE20 F00C          	lfsr	2,12
 26119  0020CE  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 26120  0020D0  26D9               	addwf	fsr2l,f,c
 26121  0020D2  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 26122  0020D4  22DA               	addwfc	fsr2h,f,c
 26123  0020D6  50DF               	movf	indf2,w,c
 26124  0020D8  6E1C               	movwf	??_adf4351_write_reg2^0,c
 26125  0020DA  0E07               	movlw	7
 26126  0020DC  161C               	andwf	??_adf4351_write_reg2^0,f,c
 26127  0020DE  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 26128  0020E2  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26129  0020E4  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26130  0020E6  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26131  0020E8  0E1A               	movlw	26
 26132  0020EA                     u12675:
 26133  0020EA  90D8               	bcf	status,0,c
 26134  0020EC  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 26135  0020EE  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 26136  0020F0  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 26137  0020F2  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 26138  0020F4  2EE8               	decfsz	wreg,f,c
 26139  0020F6  D7F9               	goto	u12675
 26140  0020F8  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 26141  0020FA  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26142  0020FC  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26143  0020FE  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26144  002100  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26145  002102  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26146  002104  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26147  002106  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26148                           
 26149                           ;src/driver/adf4351.c: 296:         data |= (((u32)ctx->reg2.lownoise&0x0003)<<29);
 26150  002108  EE20 F00B          	lfsr	2,11
 26151  00210C  501A               	movf	adf4351_write_reg2@ctx^0,w,c
 26152  00210E  26D9               	addwf	fsr2l,f,c
 26153  002110  501B               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 26154  002112  22DA               	addwfc	fsr2h,f,c
 26155  002114  50DF               	movf	indf2,w,c
 26156  002116  6E1C               	movwf	??_adf4351_write_reg2^0,c
 26157  002118  0E03               	movlw	3
 26158  00211A  161C               	andwf	??_adf4351_write_reg2^0,f,c
 26159  00211C  C01C  F01D         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 26160  002120  6A1E               	clrf	(??_adf4351_write_reg2+2)^0,c
 26161  002122  6A1F               	clrf	(??_adf4351_write_reg2+3)^0,c
 26162  002124  6A20               	clrf	(??_adf4351_write_reg2+4)^0,c
 26163  002126  0E1D               	movlw	29
 26164  002128                     u12685:
 26165  002128  90D8               	bcf	status,0,c
 26166  00212A  361D               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 26167  00212C  361E               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 26168  00212E  361F               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 26169  002130  3620               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 26170  002132  2EE8               	decfsz	wreg,f,c
 26171  002134  D7F9               	goto	u12685
 26172  002136  501D               	movf	(??_adf4351_write_reg2+1)^0,w,c
 26173  002138  1222               	iorwf	adf4351_write_reg2@data^0,f,c
 26174  00213A  501E               	movf	(??_adf4351_write_reg2+2)^0,w,c
 26175  00213C  1223               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 26176  00213E  501F               	movf	(??_adf4351_write_reg2+3)^0,w,c
 26177  002140  1224               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 26178  002142  5020               	movf	(??_adf4351_write_reg2+4)^0,w,c
 26179  002144  1225               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 26180                           
 26181                           ;src/driver/adf4351.c: 298:         adf4351_write_latch(data);
 26182  002146  C022  F00E         	movff	adf4351_write_reg2@data,adf4351_write_latch@value
 26183  00214A  C023  F00F         	movff	adf4351_write_reg2@data+1,adf4351_write_latch@value+1
 26184  00214E  C024  F010         	movff	adf4351_write_reg2@data+2,adf4351_write_latch@value+2
 26185  002152  C025  F011         	movff	adf4351_write_reg2@data+3,adf4351_write_latch@value+3
 26186  002156  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 26187  00215A  0012               	return		;funcret
 26188  00215C                     __end_of_adf4351_write_reg2:
 26189                           	opt callstack 0
 26190                           
 26191 ;; *************** function _adf4351_write_reg1 *****************
 26192 ;; Defined at:
 26193 ;;		line 266 in file "src/driver/adf4351.c"
 26194 ;; Parameters:    Size  Location     Type
 26195 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 26196 ;;		 -> g_adf4351(55), 
 26197 ;; Auto vars:     Size  Location     Type
 26198 ;;  data            4   33[COMRAM] unsigned long 
 26199 ;; Return value:  Size  Location     Type
 26200 ;;                  1    wreg      void 
 26201 ;; Registers used:
 26202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26203 ;; Tracked objects:
 26204 ;;		On entry : 0/0
 26205 ;;		On exit  : 0/0
 26206 ;;		Unchanged: 0/0
 26207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26208 ;;      Params:         2       0       0       0       0       0       0
 26209 ;;      Locals:         4       0       0       0       0       0       0
 26210 ;;      Temps:          6       0       0       0       0       0       0
 26211 ;;      Totals:        12       0       0       0       0       0       0
 26212 ;;Total ram usage:       12 bytes
 26213 ;; Hardware stack levels used:    1
 26214 ;; Hardware stack levels required when called:    3
 26215 ;; This function calls:
 26216 ;;		_adf4351_write_latch
 26217 ;; This function is called by:
 26218 ;;		_adf4351_setup
 26219 ;; This function uses a non-reentrant model
 26220 ;;
 26221                           
 26222                           	psect	text113
 26223  005078                     __ptext113:
 26224                           	opt callstack 0
 26225  005078                     _adf4351_write_reg1:
 26226                           	opt callstack 24
 26227                           
 26228                           ;src/driver/adf4351.c: 266: static void adf4351_write_reg1(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 267: {;src/driver/adf4351.c: 268:     if(ctx->init) {
 26229                           
 26230                           ;incstack = 0
 26231  005078  C01A  FFD9         	movff	adf4351_write_reg1@ctx,fsr2l
 26232  00507C  C01B  FFDA         	movff	adf4351_write_reg1@ctx+1,fsr2h
 26233  005080  50DE               	movf	postinc2,w,c
 26234  005082  10DE               	iorwf	postinc2,w,c
 26235  005084  B4D8               	btfsc	status,2,c
 26236  005086  0012               	return	
 26237                           
 26238                           ;src/driver/adf4351.c: 269:         u32 data = 1;
 26239  005088  0E01               	movlw	1
 26240  00508A  6E22               	movwf	adf4351_write_reg1@data^0,c
 26241  00508C  0E00               	movlw	0
 26242  00508E  6E23               	movwf	(adf4351_write_reg1@data+1)^0,c
 26243  005090  0E00               	movlw	0
 26244  005092  6E24               	movwf	(adf4351_write_reg1@data+2)^0,c
 26245  005094  0E00               	movlw	0
 26246  005096  6E25               	movwf	(adf4351_write_reg1@data+3)^0,c
 26247                           
 26248                           ;src/driver/adf4351.c: 271:         data |= (((u32)ctx->reg1.mod&0x0FFF)<<3);
 26249  005098  EE20 F009          	lfsr	2,9
 26250  00509C  501A               	movf	adf4351_write_reg1@ctx^0,w,c
 26251  00509E  26D9               	addwf	fsr2l,f,c
 26252  0050A0  501B               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 26253  0050A2  22DA               	addwfc	fsr2h,f,c
 26254  0050A4  CFDE F01C          	movff	postinc2,??_adf4351_write_reg1
 26255  0050A8  CFDD F01D          	movff	postdec2,??_adf4351_write_reg1+1
 26256  0050AC  0EFF               	movlw	255
 26257  0050AE  141C               	andwf	??_adf4351_write_reg1^0,w,c
 26258  0050B0  6E1E               	movwf	(??_adf4351_write_reg1+2)^0,c
 26259  0050B2  0E0F               	movlw	15
 26260  0050B4  141D               	andwf	(??_adf4351_write_reg1+1)^0,w,c
 26261  0050B6  6E1F               	movwf	(??_adf4351_write_reg1+3)^0,c
 26262  0050B8  6A20               	clrf	(??_adf4351_write_reg1+4)^0,c
 26263  0050BA  6A21               	clrf	(??_adf4351_write_reg1+5)^0,c
 26264  0050BC  0E03               	movlw	3
 26265  0050BE                     u12795:
 26266  0050BE  90D8               	bcf	status,0,c
 26267  0050C0  361E               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 26268  0050C2  361F               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 26269  0050C4  3620               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 26270  0050C6  3621               	rlcf	(??_adf4351_write_reg1+5)^0,f,c
 26271  0050C8  2EE8               	decfsz	wreg,f,c
 26272  0050CA  D7F9               	goto	u12795
 26273  0050CC  501E               	movf	(??_adf4351_write_reg1+2)^0,w,c
 26274  0050CE  1222               	iorwf	adf4351_write_reg1@data^0,f,c
 26275  0050D0  501F               	movf	(??_adf4351_write_reg1+3)^0,w,c
 26276  0050D2  1223               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 26277  0050D4  5020               	movf	(??_adf4351_write_reg1+4)^0,w,c
 26278  0050D6  1224               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 26279  0050D8  5021               	movf	(??_adf4351_write_reg1+5)^0,w,c
 26280  0050DA  1225               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 26281                           
 26282                           ;src/driver/adf4351.c: 272:         data |= (((u32)ctx->reg1.phase&0x0FFF)<<15);
 26283  0050DC  EE20 F007          	lfsr	2,7
 26284  0050E0  501A               	movf	adf4351_write_reg1@ctx^0,w,c
 26285  0050E2  26D9               	addwf	fsr2l,f,c
 26286  0050E4  501B               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 26287  0050E6  22DA               	addwfc	fsr2h,f,c
 26288  0050E8  CFDE F01C          	movff	postinc2,??_adf4351_write_reg1
 26289  0050EC  CFDD F01D          	movff	postdec2,??_adf4351_write_reg1+1
 26290  0050F0  0EFF               	movlw	255
 26291  0050F2  141C               	andwf	??_adf4351_write_reg1^0,w,c
 26292  0050F4  6E1E               	movwf	(??_adf4351_write_reg1+2)^0,c
 26293  0050F6  0E0F               	movlw	15
 26294  0050F8  141D               	andwf	(??_adf4351_write_reg1+1)^0,w,c
 26295  0050FA  6E1F               	movwf	(??_adf4351_write_reg1+3)^0,c
 26296  0050FC  6A20               	clrf	(??_adf4351_write_reg1+4)^0,c
 26297  0050FE  6A21               	clrf	(??_adf4351_write_reg1+5)^0,c
 26298  005100  0E0F               	movlw	15
 26299  005102                     u12805:
 26300  005102  90D8               	bcf	status,0,c
 26301  005104  361E               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 26302  005106  361F               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 26303  005108  3620               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 26304  00510A  3621               	rlcf	(??_adf4351_write_reg1+5)^0,f,c
 26305  00510C  2EE8               	decfsz	wreg,f,c
 26306  00510E  D7F9               	goto	u12805
 26307  005110  501E               	movf	(??_adf4351_write_reg1+2)^0,w,c
 26308  005112  1222               	iorwf	adf4351_write_reg1@data^0,f,c
 26309  005114  501F               	movf	(??_adf4351_write_reg1+3)^0,w,c
 26310  005116  1223               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 26311  005118  5020               	movf	(??_adf4351_write_reg1+4)^0,w,c
 26312  00511A  1224               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 26313  00511C  5021               	movf	(??_adf4351_write_reg1+5)^0,w,c
 26314  00511E  1225               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 26315                           
 26316                           ;src/driver/adf4351.c: 273:         data |= (((u32)ctx->reg1.prescaler&0x0001)<<27);
 26317  005120  EE20 F006          	lfsr	2,6
 26318  005124  501A               	movf	adf4351_write_reg1@ctx^0,w,c
 26319  005126  26D9               	addwf	fsr2l,f,c
 26320  005128  501B               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 26321  00512A  22DA               	addwfc	fsr2h,f,c
 26322  00512C  50DF               	movf	indf2,w,c
 26323  00512E  6E1C               	movwf	??_adf4351_write_reg1^0,c
 26324  005130  0E01               	movlw	1
 26325  005132  161C               	andwf	??_adf4351_write_reg1^0,f,c
 26326  005134  C01C  F01D         	movff	??_adf4351_write_reg1,??_adf4351_write_reg1+1
 26327  005138  6A1E               	clrf	(??_adf4351_write_reg1+2)^0,c
 26328  00513A  6A1F               	clrf	(??_adf4351_write_reg1+3)^0,c
 26329  00513C  6A20               	clrf	(??_adf4351_write_reg1+4)^0,c
 26330  00513E  0E1B               	movlw	27
 26331  005140                     u12815:
 26332  005140  90D8               	bcf	status,0,c
 26333  005142  361D               	rlcf	(??_adf4351_write_reg1+1)^0,f,c
 26334  005144  361E               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 26335  005146  361F               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 26336  005148  3620               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 26337  00514A  2EE8               	decfsz	wreg,f,c
 26338  00514C  D7F9               	goto	u12815
 26339  00514E  501D               	movf	(??_adf4351_write_reg1+1)^0,w,c
 26340  005150  1222               	iorwf	adf4351_write_reg1@data^0,f,c
 26341  005152  501E               	movf	(??_adf4351_write_reg1+2)^0,w,c
 26342  005154  1223               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 26343  005156  501F               	movf	(??_adf4351_write_reg1+3)^0,w,c
 26344  005158  1224               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 26345  00515A  5020               	movf	(??_adf4351_write_reg1+4)^0,w,c
 26346  00515C  1225               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 26347                           
 26348                           ;src/driver/adf4351.c: 275:         adf4351_write_latch(data);
 26349  00515E  C022  F00E         	movff	adf4351_write_reg1@data,adf4351_write_latch@value
 26350  005162  C023  F00F         	movff	adf4351_write_reg1@data+1,adf4351_write_latch@value+1
 26351  005166  C024  F010         	movff	adf4351_write_reg1@data+2,adf4351_write_latch@value+2
 26352  00516A  C025  F011         	movff	adf4351_write_reg1@data+3,adf4351_write_latch@value+3
 26353  00516E  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 26354  005172  0012               	return		;funcret
 26355  005174                     __end_of_adf4351_write_reg1:
 26356                           	opt callstack 0
 26357                           
 26358 ;; *************** function _adf4351_write_reg0 *****************
 26359 ;; Defined at:
 26360 ;;		line 254 in file "src/driver/adf4351.c"
 26361 ;; Parameters:    Size  Location     Type
 26362 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 26363 ;;		 -> g_adf4351(55), 
 26364 ;; Auto vars:     Size  Location     Type
 26365 ;;  data            4   33[COMRAM] unsigned long 
 26366 ;; Return value:  Size  Location     Type
 26367 ;;                  1    wreg      void 
 26368 ;; Registers used:
 26369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26370 ;; Tracked objects:
 26371 ;;		On entry : 0/0
 26372 ;;		On exit  : 0/0
 26373 ;;		Unchanged: 0/0
 26374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26375 ;;      Params:         2       0       0       0       0       0       0
 26376 ;;      Locals:         4       0       0       0       0       0       0
 26377 ;;      Temps:          6       0       0       0       0       0       0
 26378 ;;      Totals:        12       0       0       0       0       0       0
 26379 ;;Total ram usage:       12 bytes
 26380 ;; Hardware stack levels used:    1
 26381 ;; Hardware stack levels required when called:    3
 26382 ;; This function calls:
 26383 ;;		_adf4351_write_latch
 26384 ;; This function is called by:
 26385 ;;		_adf4351_setup
 26386 ;; This function uses a non-reentrant model
 26387 ;;
 26388                           
 26389                           	psect	text114
 26390  005904                     __ptext114:
 26391                           	opt callstack 0
 26392  005904                     _adf4351_write_reg0:
 26393                           	opt callstack 24
 26394                           
 26395                           ;src/driver/adf4351.c: 254: static void adf4351_write_reg0(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 255: {;src/driver/adf4351.c: 256:  if(ctx->init) {
 26396                           
 26397                           ;incstack = 0
 26398  005904  C01A  FFD9         	movff	adf4351_write_reg0@ctx,fsr2l
 26399  005908  C01B  FFDA         	movff	adf4351_write_reg0@ctx+1,fsr2h
 26400  00590C  50DE               	movf	postinc2,w,c
 26401  00590E  10DE               	iorwf	postinc2,w,c
 26402  005910  B4D8               	btfsc	status,2,c
 26403  005912  0012               	return	
 26404                           
 26405                           ;src/driver/adf4351.c: 257:         u32 data = 0;
 26406  005914  0E00               	movlw	0
 26407  005916  6E22               	movwf	adf4351_write_reg0@data^0,c
 26408  005918  0E00               	movlw	0
 26409  00591A  6E23               	movwf	(adf4351_write_reg0@data+1)^0,c
 26410  00591C  0E00               	movlw	0
 26411  00591E  6E24               	movwf	(adf4351_write_reg0@data+2)^0,c
 26412  005920  0E00               	movlw	0
 26413  005922  6E25               	movwf	(adf4351_write_reg0@data+3)^0,c
 26414                           
 26415                           ;src/driver/adf4351.c: 259:         data |= (((u32)ctx->reg0.frac&0x0FFF)<<3);
 26416  005924  EE20 F004          	lfsr	2,4
 26417  005928  501A               	movf	adf4351_write_reg0@ctx^0,w,c
 26418  00592A  26D9               	addwf	fsr2l,f,c
 26419  00592C  501B               	movf	(adf4351_write_reg0@ctx+1)^0,w,c
 26420  00592E  22DA               	addwfc	fsr2h,f,c
 26421  005930  CFDE F01C          	movff	postinc2,??_adf4351_write_reg0
 26422  005934  CFDD F01D          	movff	postdec2,??_adf4351_write_reg0+1
 26423  005938  0EFF               	movlw	255
 26424  00593A  141C               	andwf	??_adf4351_write_reg0^0,w,c
 26425  00593C  6E1E               	movwf	(??_adf4351_write_reg0+2)^0,c
 26426  00593E  0E0F               	movlw	15
 26427  005940  141D               	andwf	(??_adf4351_write_reg0+1)^0,w,c
 26428  005942  6E1F               	movwf	(??_adf4351_write_reg0+3)^0,c
 26429  005944  6A20               	clrf	(??_adf4351_write_reg0+4)^0,c
 26430  005946  6A21               	clrf	(??_adf4351_write_reg0+5)^0,c
 26431  005948  0E03               	movlw	3
 26432  00594A                     u12835:
 26433  00594A  90D8               	bcf	status,0,c
 26434  00594C  361E               	rlcf	(??_adf4351_write_reg0+2)^0,f,c
 26435  00594E  361F               	rlcf	(??_adf4351_write_reg0+3)^0,f,c
 26436  005950  3620               	rlcf	(??_adf4351_write_reg0+4)^0,f,c
 26437  005952  3621               	rlcf	(??_adf4351_write_reg0+5)^0,f,c
 26438  005954  2EE8               	decfsz	wreg,f,c
 26439  005956  D7F9               	goto	u12835
 26440  005958  501E               	movf	(??_adf4351_write_reg0+2)^0,w,c
 26441  00595A  1222               	iorwf	adf4351_write_reg0@data^0,f,c
 26442  00595C  501F               	movf	(??_adf4351_write_reg0+3)^0,w,c
 26443  00595E  1223               	iorwf	(adf4351_write_reg0@data+1)^0,f,c
 26444  005960  5020               	movf	(??_adf4351_write_reg0+4)^0,w,c
 26445  005962  1224               	iorwf	(adf4351_write_reg0@data+2)^0,f,c
 26446  005964  5021               	movf	(??_adf4351_write_reg0+5)^0,w,c
 26447  005966  1225               	iorwf	(adf4351_write_reg0@data+3)^0,f,c
 26448                           
 26449                           ;src/driver/adf4351.c: 260:         data |= (((u32)ctx->reg0.integer&0xFFFF)<<15);
 26450  005968  EE20 F002          	lfsr	2,2
 26451  00596C  501A               	movf	adf4351_write_reg0@ctx^0,w,c
 26452  00596E  26D9               	addwf	fsr2l,f,c
 26453  005970  501B               	movf	(adf4351_write_reg0@ctx+1)^0,w,c
 26454  005972  22DA               	addwfc	fsr2h,f,c
 26455  005974  CFDE F01C          	movff	postinc2,??_adf4351_write_reg0
 26456  005978  CFDD F01D          	movff	postdec2,??_adf4351_write_reg0+1
 26457  00597C  501C               	movf	??_adf4351_write_reg0^0,w,c
 26458  00597E  6E1E               	movwf	(??_adf4351_write_reg0+2)^0,c
 26459  005980  501D               	movf	(??_adf4351_write_reg0+1)^0,w,c
 26460  005982  6E1F               	movwf	(??_adf4351_write_reg0+3)^0,c
 26461  005984  6A20               	clrf	(??_adf4351_write_reg0+4)^0,c
 26462  005986  6A21               	clrf	(??_adf4351_write_reg0+5)^0,c
 26463  005988  0E0F               	movlw	15
 26464  00598A                     u12845:
 26465  00598A  90D8               	bcf	status,0,c
 26466  00598C  361E               	rlcf	(??_adf4351_write_reg0+2)^0,f,c
 26467  00598E  361F               	rlcf	(??_adf4351_write_reg0+3)^0,f,c
 26468  005990  3620               	rlcf	(??_adf4351_write_reg0+4)^0,f,c
 26469  005992  3621               	rlcf	(??_adf4351_write_reg0+5)^0,f,c
 26470  005994  2EE8               	decfsz	wreg,f,c
 26471  005996  D7F9               	goto	u12845
 26472  005998  501E               	movf	(??_adf4351_write_reg0+2)^0,w,c
 26473  00599A  1222               	iorwf	adf4351_write_reg0@data^0,f,c
 26474  00599C  501F               	movf	(??_adf4351_write_reg0+3)^0,w,c
 26475  00599E  1223               	iorwf	(adf4351_write_reg0@data+1)^0,f,c
 26476  0059A0  5020               	movf	(??_adf4351_write_reg0+4)^0,w,c
 26477  0059A2  1224               	iorwf	(adf4351_write_reg0@data+2)^0,f,c
 26478  0059A4  5021               	movf	(??_adf4351_write_reg0+5)^0,w,c
 26479  0059A6  1225               	iorwf	(adf4351_write_reg0@data+3)^0,f,c
 26480                           
 26481                           ;src/driver/adf4351.c: 262:         adf4351_write_latch(data);
 26482  0059A8  C022  F00E         	movff	adf4351_write_reg0@data,adf4351_write_latch@value
 26483  0059AC  C023  F00F         	movff	adf4351_write_reg0@data+1,adf4351_write_latch@value+1
 26484  0059B0  C024  F010         	movff	adf4351_write_reg0@data+2,adf4351_write_latch@value+2
 26485  0059B4  C025  F011         	movff	adf4351_write_reg0@data+3,adf4351_write_latch@value+3
 26486  0059B8  ECF9  F01D         	call	_adf4351_write_latch	;wreg free
 26487  0059BC  0012               	return		;funcret
 26488  0059BE                     __end_of_adf4351_write_reg0:
 26489                           	opt callstack 0
 26490                           
 26491 ;; *************** function _adf4351_write_latch *****************
 26492 ;; Defined at:
 26493 ;;		line 367 in file "src/driver/adf4351.c"
 26494 ;; Parameters:    Size  Location     Type
 26495 ;;  value           4   13[COMRAM] unsigned long 
 26496 ;; Auto vars:     Size  Location     Type
 26497 ;;  mask            4   21[COMRAM] unsigned long 
 26498 ;; Return value:  Size  Location     Type
 26499 ;;                  1    wreg      void 
 26500 ;; Registers used:
 26501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 26502 ;; Tracked objects:
 26503 ;;		On entry : 0/0
 26504 ;;		On exit  : 0/0
 26505 ;;		Unchanged: 0/0
 26506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26507 ;;      Params:         4       0       0       0       0       0       0
 26508 ;;      Locals:         4       0       0       0       0       0       0
 26509 ;;      Temps:          4       0       0       0       0       0       0
 26510 ;;      Totals:        12       0       0       0       0       0       0
 26511 ;;Total ram usage:       12 bytes
 26512 ;; Hardware stack levels used:    1
 26513 ;; Hardware stack levels required when called:    2
 26514 ;; This function calls:
 26515 ;;		Nothing
 26516 ;; This function is called by:
 26517 ;;		_adf4351_write_reg0
 26518 ;;		_adf4351_write_reg1
 26519 ;;		_adf4351_write_reg2
 26520 ;;		_adf4351_write_reg3
 26521 ;;		_adf4351_write_reg4
 26522 ;;		_adf4351_write_reg5
 26523 ;; This function uses a non-reentrant model
 26524 ;;
 26525                           
 26526                           	psect	text115
 26527  003BF2                     __ptext115:
 26528                           	opt callstack 0
 26529  003BF2                     _adf4351_write_latch:
 26530                           	opt callstack 24
 26531                           
 26532                           ;src/driver/adf4351.c: 367: static void adf4351_write_latch(u32 value);src/driver/adf435
      +                          1.c: 368: {;src/driver/adf4351.c: 369:     u32 mask = 0x80000000ULL;
 26533                           
 26534                           ;incstack = 0
 26535  003BF2  0E00               	movlw	0
 26536  003BF4  6E16               	movwf	adf4351_write_latch@mask^0,c
 26537  003BF6  0E00               	movlw	0
 26538  003BF8  6E17               	movwf	(adf4351_write_latch@mask+1)^0,c
 26539  003BFA  0E00               	movlw	0
 26540  003BFC  6E18               	movwf	(adf4351_write_latch@mask+2)^0,c
 26541  003BFE  0E80               	movlw	128
 26542  003C00  6E19               	movwf	(adf4351_write_latch@mask+3)^0,c
 26543                           
 26544                           ;src/driver/adf4351.c: 371:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 26545  003C02  0EB8               	movlw	low (_PIN_SIO_CLK_DEF+4)
 26546  003C04  6EF6               	movwf	tblptrl,c
 26547  003C06  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+4)
 26548  003C08  6EF7               	movwf	tblptrh,c
 26549  003C0A                     	if	0	;tblptru may be non-zero
 26550  003C0A                     	endif
 26551  003C0A                     	if	0	;tblptru may be non-zero
 26552  003C0A                     	endif
 26553  003C0A  0008               	tblrd		*
 26554  003C0C  50F5               	movf	tablat,w,c
 26555  003C0E  0AFF               	xorlw	255
 26556  003C10  6E12               	movwf	??_adf4351_write_latch^0,c
 26557  003C12  0EB4               	movlw	low _PIN_SIO_CLK_DEF
 26558  003C14  6EF6               	movwf	tblptrl,c
 26559  003C16                     	if	1	;There is more than 1 active tblptr byte
 26560  003C16  0E7B               	movlw	high _PIN_SIO_CLK_DEF
 26561  003C18  6EF7               	movwf	tblptrh,c
 26562  003C1A                     	endif
 26563  003C1A                     	if	0	;There are less than 3 active tblptr bytes
 26564  003C1A                     	endif
 26565  003C1A  0009               	tblrd		*+
 26566  003C1C  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26567  003C20  0009               	tblrd		*+
 26568  003C22  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26569  003C26  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26570  003C2A  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26571  003C2E  5012               	movf	??_adf4351_write_latch^0,w,c
 26572  003C30  16DF               	andwf	indf2,f,c
 26573                           
 26574                           ;src/driver/adf4351.c: 372:     _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 26575  003C32  0004               	clrwdt	
 26576  003C34  F000               	nop		;2 cycle nop
 26577                           
 26578                           ;src/driver/adf4351.c: 374:     while(mask) {
 26579  003C36  D07C               	goto	l6689
 26580  003C38                     l6675:
 26581                           
 26582                           ;src/driver/adf4351.c: 375:         if(value&mask) {
 26583  003C38  5016               	movf	adf4351_write_latch@mask^0,w,c
 26584  003C3A  140E               	andwf	adf4351_write_latch@value^0,w,c
 26585  003C3C  6E12               	movwf	??_adf4351_write_latch^0,c
 26586  003C3E  5017               	movf	(adf4351_write_latch@mask+1)^0,w,c
 26587  003C40  140F               	andwf	(adf4351_write_latch@value+1)^0,w,c
 26588  003C42  6E13               	movwf	(??_adf4351_write_latch+1)^0,c
 26589  003C44  5018               	movf	(adf4351_write_latch@mask+2)^0,w,c
 26590  003C46  1410               	andwf	(adf4351_write_latch@value+2)^0,w,c
 26591  003C48  6E14               	movwf	(??_adf4351_write_latch+2)^0,c
 26592  003C4A  5019               	movf	(adf4351_write_latch@mask+3)^0,w,c
 26593  003C4C  1411               	andwf	(adf4351_write_latch@value+3)^0,w,c
 26594  003C4E  6E15               	movwf	(??_adf4351_write_latch+3)^0,c
 26595  003C50  5012               	movf	??_adf4351_write_latch^0,w,c
 26596  003C52  1013               	iorwf	(??_adf4351_write_latch+1)^0,w,c
 26597  003C54  1014               	iorwf	(??_adf4351_write_latch+2)^0,w,c
 26598  003C56  1015               	iorwf	(??_adf4351_write_latch+3)^0,w,c
 26599  003C58  B4D8               	btfsc	status,2,c
 26600  003C5A  D018               	goto	l6679
 26601                           
 26602                           ;src/driver/adf4351.c: 376:             *((PIN_SIO_DATA)->pPORT) |= (PIN_SIO_DATA)->mask
      +                          ;
 26603  003C5C  0EBD               	movlw	low (_PIN_SIO_DATA_DEF+4)
 26604  003C5E  6EF6               	movwf	tblptrl,c
 26605  003C60  0E7B               	movlw	high (_PIN_SIO_DATA_DEF+4)
 26606  003C62  6EF7               	movwf	tblptrh,c
 26607  003C64                     	if	0	;tblptru may be non-zero
 26608  003C64                     	endif
 26609  003C64                     	if	0	;tblptru may be non-zero
 26610  003C64                     	endif
 26611  003C64  0008               	tblrd		*
 26612  003C66  CFF5 F012          	movff	tablat,??_adf4351_write_latch
 26613  003C6A  0EB9               	movlw	low _PIN_SIO_DATA_DEF
 26614  003C6C  6EF6               	movwf	tblptrl,c
 26615  003C6E                     	if	1	;There is more than 1 active tblptr byte
 26616  003C6E  0E7B               	movlw	high _PIN_SIO_DATA_DEF
 26617  003C70  6EF7               	movwf	tblptrh,c
 26618  003C72                     	endif
 26619  003C72                     	if	0	;There are less than 3 active tblptr bytes
 26620  003C72                     	endif
 26621  003C72  0009               	tblrd		*+
 26622  003C74  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26623  003C78  0009               	tblrd		*+
 26624  003C7A  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26625  003C7E  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26626  003C82  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26627  003C86  5012               	movf	??_adf4351_write_latch^0,w,c
 26628  003C88  12DF               	iorwf	indf2,f,c
 26629                           
 26630                           ;src/driver/adf4351.c: 377:         } else {
 26631  003C8A  D018               	goto	l6681
 26632  003C8C                     l6679:
 26633                           
 26634                           ;src/driver/adf4351.c: 378:             *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mas
      +                          k;
 26635  003C8C  0EBD               	movlw	low (_PIN_SIO_DATA_DEF+4)
 26636  003C8E  6EF6               	movwf	tblptrl,c
 26637  003C90  0E7B               	movlw	high (_PIN_SIO_DATA_DEF+4)
 26638  003C92  6EF7               	movwf	tblptrh,c
 26639  003C94                     	if	0	;tblptru may be non-zero
 26640  003C94                     	endif
 26641  003C94                     	if	0	;tblptru may be non-zero
 26642  003C94                     	endif
 26643  003C94  0008               	tblrd		*
 26644  003C96  50F5               	movf	tablat,w,c
 26645  003C98  0AFF               	xorlw	255
 26646  003C9A  6E12               	movwf	??_adf4351_write_latch^0,c
 26647  003C9C  0EB9               	movlw	low _PIN_SIO_DATA_DEF
 26648  003C9E  6EF6               	movwf	tblptrl,c
 26649  003CA0                     	if	1	;There is more than 1 active tblptr byte
 26650  003CA0  0E7B               	movlw	high _PIN_SIO_DATA_DEF
 26651  003CA2  6EF7               	movwf	tblptrh,c
 26652  003CA4                     	endif
 26653  003CA4                     	if	0	;There are less than 3 active tblptr bytes
 26654  003CA4                     	endif
 26655  003CA4  0009               	tblrd		*+
 26656  003CA6  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26657  003CAA  0009               	tblrd		*+
 26658  003CAC  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26659  003CB0  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26660  003CB4  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26661  003CB8  5012               	movf	??_adf4351_write_latch^0,w,c
 26662  003CBA  16DF               	andwf	indf2,f,c
 26663  003CBC                     l6681:
 26664                           
 26665                           ;src/driver/adf4351.c: 380:         _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 26666  003CBC  0004               	clrwdt	
 26667  003CBE  F000               	nop		;2 cycle nop
 26668                           
 26669                           ;src/driver/adf4351.c: 381:         *((PIN_SIO_CLK)->pPORT) |= (PIN_SIO_CLK)->mask;
 26670  003CC0  0EB8               	movlw	low (_PIN_SIO_CLK_DEF+4)
 26671  003CC2  6EF6               	movwf	tblptrl,c
 26672  003CC4  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+4)
 26673  003CC6  6EF7               	movwf	tblptrh,c
 26674  003CC8                     	if	0	;tblptru may be non-zero
 26675  003CC8                     	endif
 26676  003CC8                     	if	0	;tblptru may be non-zero
 26677  003CC8                     	endif
 26678  003CC8  0008               	tblrd		*
 26679  003CCA  CFF5 F012          	movff	tablat,??_adf4351_write_latch
 26680  003CCE  0EB4               	movlw	low _PIN_SIO_CLK_DEF
 26681  003CD0  6EF6               	movwf	tblptrl,c
 26682  003CD2                     	if	1	;There is more than 1 active tblptr byte
 26683  003CD2  0E7B               	movlw	high _PIN_SIO_CLK_DEF
 26684  003CD4  6EF7               	movwf	tblptrh,c
 26685  003CD6                     	endif
 26686  003CD6                     	if	0	;There are less than 3 active tblptr bytes
 26687  003CD6                     	endif
 26688  003CD6  0009               	tblrd		*+
 26689  003CD8  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26690  003CDC  0009               	tblrd		*+
 26691  003CDE  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26692  003CE2  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26693  003CE6  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26694  003CEA  5012               	movf	??_adf4351_write_latch^0,w,c
 26695  003CEC  12DF               	iorwf	indf2,f,c
 26696                           
 26697                           ;src/driver/adf4351.c: 382:         _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 26698  003CEE  0004               	clrwdt	
 26699  003CF0  F000               	nop		;2 cycle nop
 26700                           
 26701                           ;src/driver/adf4351.c: 383:         *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 26702  003CF2  0EB8               	movlw	low (_PIN_SIO_CLK_DEF+4)
 26703  003CF4  6EF6               	movwf	tblptrl,c
 26704  003CF6  0E7B               	movlw	high (_PIN_SIO_CLK_DEF+4)
 26705  003CF8  6EF7               	movwf	tblptrh,c
 26706  003CFA                     	if	0	;tblptru may be non-zero
 26707  003CFA                     	endif
 26708  003CFA                     	if	0	;tblptru may be non-zero
 26709  003CFA                     	endif
 26710  003CFA  0008               	tblrd		*
 26711  003CFC  50F5               	movf	tablat,w,c
 26712  003CFE  0AFF               	xorlw	255
 26713  003D00  6E12               	movwf	??_adf4351_write_latch^0,c
 26714  003D02  0EB4               	movlw	low _PIN_SIO_CLK_DEF
 26715  003D04  6EF6               	movwf	tblptrl,c
 26716  003D06                     	if	1	;There is more than 1 active tblptr byte
 26717  003D06  0E7B               	movlw	high _PIN_SIO_CLK_DEF
 26718  003D08  6EF7               	movwf	tblptrh,c
 26719  003D0A                     	endif
 26720  003D0A                     	if	0	;There are less than 3 active tblptr bytes
 26721  003D0A                     	endif
 26722  003D0A  0009               	tblrd		*+
 26723  003D0C  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26724  003D10  0009               	tblrd		*+
 26725  003D12  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26726  003D16  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26727  003D1A  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26728  003D1E  5012               	movf	??_adf4351_write_latch^0,w,c
 26729  003D20  16DF               	andwf	indf2,f,c
 26730                           
 26731                           ;src/driver/adf4351.c: 384:         _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 26732  003D22  0004               	clrwdt	
 26733  003D24  F000               	nop		;2 cycle nop
 26734                           
 26735                           ;src/driver/adf4351.c: 386:         mask >>= 1;
 26736  003D26  90D8               	bcf	status,0,c
 26737  003D28  3219               	rrcf	(adf4351_write_latch@mask+3)^0,f,c
 26738  003D2A  3218               	rrcf	(adf4351_write_latch@mask+2)^0,f,c
 26739  003D2C  3217               	rrcf	(adf4351_write_latch@mask+1)^0,f,c
 26740  003D2E  3216               	rrcf	adf4351_write_latch@mask^0,f,c
 26741  003D30                     l6689:
 26742                           
 26743                           ;src/driver/adf4351.c: 374:     while(mask) {
 26744  003D30  5016               	movf	adf4351_write_latch@mask^0,w,c
 26745  003D32  1017               	iorwf	(adf4351_write_latch@mask+1)^0,w,c
 26746  003D34  1018               	iorwf	(adf4351_write_latch@mask+2)^0,w,c
 26747  003D36  1019               	iorwf	(adf4351_write_latch@mask+3)^0,w,c
 26748  003D38  A4D8               	btfss	status,2,c
 26749  003D3A  D77E               	goto	l6675
 26750                           
 26751                           ;src/driver/adf4351.c: 390:  *((PIN_ADF_LE)->pPORT) |= (PIN_ADF_LE)->mask;
 26752  003D3C  0EC2               	movlw	low (_PIN_ADF_LE_DEF+4)
 26753  003D3E  6EF6               	movwf	tblptrl,c
 26754  003D40  0E7B               	movlw	high (_PIN_ADF_LE_DEF+4)
 26755  003D42  6EF7               	movwf	tblptrh,c
 26756  003D44                     	if	0	;tblptru may be non-zero
 26757  003D44                     	endif
 26758  003D44                     	if	0	;tblptru may be non-zero
 26759  003D44                     	endif
 26760  003D44  0008               	tblrd		*
 26761  003D46  CFF5 F012          	movff	tablat,??_adf4351_write_latch
 26762  003D4A  0EBE               	movlw	low _PIN_ADF_LE_DEF
 26763  003D4C  6EF6               	movwf	tblptrl,c
 26764  003D4E                     	if	1	;There is more than 1 active tblptr byte
 26765  003D4E  0E7B               	movlw	high _PIN_ADF_LE_DEF
 26766  003D50  6EF7               	movwf	tblptrh,c
 26767  003D52                     	endif
 26768  003D52                     	if	0	;There are less than 3 active tblptr bytes
 26769  003D52                     	endif
 26770  003D52  0009               	tblrd		*+
 26771  003D54  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26772  003D58  0009               	tblrd		*+
 26773  003D5A  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26774  003D5E  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26775  003D62  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26776  003D66  5012               	movf	??_adf4351_write_latch^0,w,c
 26777  003D68  12DF               	iorwf	indf2,f,c
 26778                           
 26779                           ;src/driver/adf4351.c: 391:  _delaywdt((unsigned long)((1)*(8000000/4000000.0)));
 26780  003D6A  0004               	clrwdt	
 26781  003D6C  F000               	nop		;2 cycle nop
 26782                           
 26783                           ;src/driver/adf4351.c: 392:  *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 26784  003D6E  0EC2               	movlw	low (_PIN_ADF_LE_DEF+4)
 26785  003D70  6EF6               	movwf	tblptrl,c
 26786  003D72  0E7B               	movlw	high (_PIN_ADF_LE_DEF+4)
 26787  003D74  6EF7               	movwf	tblptrh,c
 26788  003D76                     	if	0	;tblptru may be non-zero
 26789  003D76                     	endif
 26790  003D76                     	if	0	;tblptru may be non-zero
 26791  003D76                     	endif
 26792  003D76  0008               	tblrd		*
 26793  003D78  50F5               	movf	tablat,w,c
 26794  003D7A  0AFF               	xorlw	255
 26795  003D7C  6E12               	movwf	??_adf4351_write_latch^0,c
 26796  003D7E  0EBE               	movlw	low _PIN_ADF_LE_DEF
 26797  003D80  6EF6               	movwf	tblptrl,c
 26798  003D82                     	if	1	;There is more than 1 active tblptr byte
 26799  003D82  0E7B               	movlw	high _PIN_ADF_LE_DEF
 26800  003D84  6EF7               	movwf	tblptrh,c
 26801  003D86                     	endif
 26802  003D86                     	if	0	;There are less than 3 active tblptr bytes
 26803  003D86                     	endif
 26804  003D86  0009               	tblrd		*+
 26805  003D88  CFF5 F013          	movff	tablat,??_adf4351_write_latch+1
 26806  003D8C  0009               	tblrd		*+
 26807  003D8E  CFF5 F014          	movff	tablat,??_adf4351_write_latch+2
 26808  003D92  C013  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 26809  003D96  C014  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 26810  003D9A  5012               	movf	??_adf4351_write_latch^0,w,c
 26811  003D9C  16DF               	andwf	indf2,f,c
 26812                           
 26813                           ;src/driver/adf4351.c: 393:  _delaywdt((unsigned long)((50)*(8000000/4000000.0)));
 26814  003D9E  0E19               	movlw	25
 26815  003DA0                     u15037:
 26816  003DA0  0004               	clrwdt	
 26817  003DA2  2EE8               	decfsz	wreg,f,c
 26818  003DA4  D7FD               	bra	u15037
 26819  003DA6  0012               	return		;funcret
 26820  003DA8                     __end_of_adf4351_write_latch:
 26821                           	opt callstack 0
 26822                           
 26823 ;; *************** function _adf4351_init *****************
 26824 ;; Defined at:
 26825 ;;		line 47 in file "src/driver/adf4351.c"
 26826 ;; Parameters:    Size  Location     Type
 26827 ;;  ctx             2   25[COMRAM] PTR struct adf4351_ctx
 26828 ;;		 -> g_adf4351(55), 
 26829 ;; Auto vars:     Size  Location     Type
 26830 ;;		None
 26831 ;; Return value:  Size  Location     Type
 26832 ;;                  1    wreg      void 
 26833 ;; Registers used:
 26834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26835 ;; Tracked objects:
 26836 ;;		On entry : 3D/0
 26837 ;;		On exit  : 0/0
 26838 ;;		Unchanged: 0/0
 26839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26840 ;;      Params:         2       0       0       0       0       0       0
 26841 ;;      Locals:         0       0       0       0       0       0       0
 26842 ;;      Temps:          3       0       0       0       0       0       0
 26843 ;;      Totals:         5       0       0       0       0       0       0
 26844 ;;Total ram usage:        5 bytes
 26845 ;; Hardware stack levels used:    1
 26846 ;; Hardware stack levels required when called:    3
 26847 ;; This function calls:
 26848 ;;		_adf4351_default
 26849 ;;		_memset
 26850 ;; This function is called by:
 26851 ;;		_main
 26852 ;; This function uses a non-reentrant model
 26853 ;;
 26854                           
 26855                           	psect	text116
 26856  005FBC                     __ptext116:
 26857                           	opt callstack 0
 26858  005FBC                     _adf4351_init:
 26859                           	opt callstack 27
 26860                           
 26861                           ;src/driver/adf4351.c: 47: void adf4351_init(adf4351_ctx* ctx);src/driver/adf4351.c: 48:
      +                           {;src/driver/adf4351.c: 49:  memset(ctx, 0, sizeof(*ctx));
 26862                           
 26863                           ;incstack = 0
 26864  005FBC  C01A  F00E         	movff	adf4351_init@ctx,memset@dest
 26865  005FC0  C01B  F00F         	movff	adf4351_init@ctx+1,memset@dest+1
 26866  005FC4  0E00               	movlw	0
 26867  005FC6  6E11               	movwf	(memset@c+1)^0,c
 26868  005FC8  0E00               	movlw	0
 26869  005FCA  6E10               	movwf	memset@c^0,c
 26870  005FCC  0E00               	movlw	0
 26871  005FCE  6E13               	movwf	(memset@n+1)^0,c
 26872  005FD0  0E37               	movlw	55
 26873  005FD2  6E12               	movwf	memset@n^0,c
 26874  005FD4  ECF4  F024         	call	_memset	;wreg free
 26875                           
 26876                           ;src/driver/adf4351.c: 52:  ctx->init = 1;
 26877  005FD8  C01A  FFD9         	movff	adf4351_init@ctx,fsr2l
 26878  005FDC  C01B  FFDA         	movff	adf4351_init@ctx+1,fsr2h
 26879  005FE0  0E01               	movlw	1
 26880  005FE2  6EDE               	movwf	postinc2,c
 26881  005FE4  0E00               	movlw	0
 26882  005FE6  6EDD               	movwf	postdec2,c
 26883                           
 26884                           ;src/driver/adf4351.c: 55:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 26885  005FE8  0EC2               	movlw	low (_PIN_ADF_LE_DEF+4)
 26886  005FEA  6EF6               	movwf	tblptrl,c
 26887  005FEC  0E7B               	movlw	high (_PIN_ADF_LE_DEF+4)
 26888  005FEE  6EF7               	movwf	tblptrh,c
 26889  005FF0                     	if	0	;tblptru may be non-zero
 26890  005FF0                     	endif
 26891  005FF0                     	if	0	;tblptru may be non-zero
 26892  005FF0                     	endif
 26893  005FF0  0008               	tblrd		*
 26894  005FF2  50F5               	movf	tablat,w,c
 26895  005FF4  0AFF               	xorlw	255
 26896  005FF6  6E1C               	movwf	??_adf4351_init^0,c
 26897  005FF8  0EBE               	movlw	low _PIN_ADF_LE_DEF
 26898  005FFA  6EF6               	movwf	tblptrl,c
 26899  005FFC                     	if	1	;There is more than 1 active tblptr byte
 26900  005FFC  0E7B               	movlw	high _PIN_ADF_LE_DEF
 26901  005FFE  6EF7               	movwf	tblptrh,c
 26902  006000                     	endif
 26903  006000                     	if	0	;There are less than 3 active tblptr bytes
 26904  006000                     	endif
 26905  006000  0009               	tblrd		*+
 26906  006002  CFF5 F01D          	movff	tablat,??_adf4351_init+1
 26907  006006  0009               	tblrd		*+
 26908  006008  CFF5 F01E          	movff	tablat,??_adf4351_init+2
 26909  00600C  C01D  FFD9         	movff	??_adf4351_init+1,fsr2l
 26910  006010  C01E  FFDA         	movff	??_adf4351_init+2,fsr2h
 26911  006014  501C               	movf	??_adf4351_init^0,w,c
 26912  006016  16DF               	andwf	indf2,f,c
 26913                           
 26914                           ;src/driver/adf4351.c: 56:     *((PIN_ADF_CE)->pPORT) |= (PIN_ADF_CE)->mask;
 26915  006018  0EC7               	movlw	low (_PIN_ADF_CE_DEF+4)
 26916  00601A  6EF6               	movwf	tblptrl,c
 26917  00601C  0E7B               	movlw	high (_PIN_ADF_CE_DEF+4)
 26918  00601E  6EF7               	movwf	tblptrh,c
 26919  006020                     	if	0	;tblptru may be non-zero
 26920  006020                     	endif
 26921  006020                     	if	0	;tblptru may be non-zero
 26922  006020                     	endif
 26923  006020  0008               	tblrd		*
 26924  006022  CFF5 F01C          	movff	tablat,??_adf4351_init
 26925  006026  0EC3               	movlw	low _PIN_ADF_CE_DEF
 26926  006028  6EF6               	movwf	tblptrl,c
 26927  00602A                     	if	1	;There is more than 1 active tblptr byte
 26928  00602A  0E7B               	movlw	high _PIN_ADF_CE_DEF
 26929  00602C  6EF7               	movwf	tblptrh,c
 26930  00602E                     	endif
 26931  00602E                     	if	0	;There are less than 3 active tblptr bytes
 26932  00602E                     	endif
 26933  00602E  0009               	tblrd		*+
 26934  006030  CFF5 F01D          	movff	tablat,??_adf4351_init+1
 26935  006034  0009               	tblrd		*+
 26936  006036  CFF5 F01E          	movff	tablat,??_adf4351_init+2
 26937  00603A  C01D  FFD9         	movff	??_adf4351_init+1,fsr2l
 26938  00603E  C01E  FFDA         	movff	??_adf4351_init+2,fsr2h
 26939  006042  501C               	movf	??_adf4351_init^0,w,c
 26940  006044  12DF               	iorwf	indf2,f,c
 26941                           
 26942                           ;src/driver/adf4351.c: 59:  adf4351_default(ctx);
 26943  006046  C01A  F00E         	movff	adf4351_init@ctx,adf4351_default@ctx
 26944  00604A  C01B  F00F         	movff	adf4351_init@ctx+1,adf4351_default@ctx+1
 26945  00604E  ECEB  F02E         	call	_adf4351_default	;wreg free
 26946                           
 26947                           ;src/driver/adf4351.c: 61:     _delaywdt((unsigned long)((100)*(8000000/4000000.0)));
 26948  006052  0E32               	movlw	50
 26949  006054                     u15047:
 26950  006054  0004               	clrwdt	
 26951  006056  2EE8               	decfsz	wreg,f,c
 26952  006058  D7FD               	bra	u15047
 26953  00605A  0012               	return		;funcret
 26954  00605C                     __end_of_adf4351_init:
 26955                           	opt callstack 0
 26956                           
 26957 ;; *************** function _memset *****************
 26958 ;; Defined at:
 26959 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memset.c"
 26960 ;; Parameters:    Size  Location     Type
 26961 ;;  dest            2   13[COMRAM] PTR void 
 26962 ;;		 -> g_adf4351(55), g_i2c_bus(8), eval_gps@elem(240), itoa@buffer(12), 
 26963 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), 
 26964 ;;  c               2   15[COMRAM] int 
 26965 ;;  n               2   17[COMRAM] unsigned int 
 26966 ;; Auto vars:     Size  Location     Type
 26967 ;;  s               2   23[COMRAM] PTR unsigned char 
 26968 ;;		 -> g_adf4351(55), g_i2c_bus(8), eval_gps@elem(240), itoa@buffer(12), 
 26969 ;;		 -> print_char@map(8), lcd_clear_screen@buf(128), 
 26970 ;;  k               2   21[COMRAM] unsigned int 
 26971 ;; Return value:  Size  Location     Type
 26972 ;;                  2   13[COMRAM] PTR void 
 26973 ;; Registers used:
 26974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26975 ;; Tracked objects:
 26976 ;;		On entry : 0/0
 26977 ;;		On exit  : 0/0
 26978 ;;		Unchanged: 0/0
 26979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26980 ;;      Params:         6       0       0       0       0       0       0
 26981 ;;      Locals:         4       0       0       0       0       0       0
 26982 ;;      Temps:          2       0       0       0       0       0       0
 26983 ;;      Totals:        12       0       0       0       0       0       0
 26984 ;;Total ram usage:       12 bytes
 26985 ;; Hardware stack levels used:    1
 26986 ;; Hardware stack levels required when called:    2
 26987 ;; This function calls:
 26988 ;;		Nothing
 26989 ;; This function is called by:
 26990 ;;		_adf4351_init
 26991 ;;		_i2c_native_init
 26992 ;;		_lcd_clear_screen
 26993 ;;		_print_char
 26994 ;;		_itoa
 26995 ;;		_eval_gps
 26996 ;; This function uses a non-reentrant model
 26997 ;;
 26998                           
 26999                           	psect	text117
 27000  0049E8                     __ptext117:
 27001                           	opt callstack 0
 27002  0049E8                     _memset:
 27003                           	opt callstack 25
 27004                           
 27005                           ;incstack = 0
 27006  0049E8  C00E  F018         	movff	memset@dest,memset@s
 27007  0049EC  C00F  F019         	movff	memset@dest+1,memset@s+1
 27008  0049F0  5012               	movf	memset@n^0,w,c
 27009  0049F2  1013               	iorwf	(memset@n+1)^0,w,c
 27010  0049F4  B4D8               	btfsc	status,2,c
 27011  0049F6  0012               	return	
 27012  0049F8  C018  FFD9         	movff	memset@s,fsr2l
 27013  0049FC  C019  FFDA         	movff	memset@s+1,fsr2h
 27014  004A00  C010  FFDF         	movff	memset@c,indf2
 27015  004A04  5012               	movf	memset@n^0,w,c
 27016  004A06  2418               	addwf	memset@s^0,w,c
 27017  004A08  6E14               	movwf	??_memset^0,c
 27018  004A0A  5013               	movf	(memset@n+1)^0,w,c
 27019  004A0C  2019               	addwfc	(memset@s+1)^0,w,c
 27020  004A0E  6E15               	movwf	(??_memset+1)^0,c
 27021  004A10  0EFF               	movlw	255
 27022  004A12  2414               	addwf	??_memset^0,w,c
 27023  004A14  6ED9               	movwf	fsr2l,c
 27024  004A16  0EFF               	movlw	255
 27025  004A18  2015               	addwfc	(??_memset+1)^0,w,c
 27026  004A1A  6EDA               	movwf	fsr2h,c
 27027  004A1C  C010  FFDF         	movff	memset@c,indf2
 27028  004A20  5013               	movf	(memset@n+1)^0,w,c
 27029  004A22  E104               	bnz	l6607
 27030  004A24  0E03               	movlw	3
 27031  004A26  5C12               	subwf	memset@n^0,w,c
 27032  004A28  A0D8               	btfss	status,0,c
 27033  004A2A  0012               	return	
 27034  004A2C                     l6607:
 27035  004A2C  EE20 F001          	lfsr	2,1
 27036  004A30  5018               	movf	memset@s^0,w,c
 27037  004A32  26D9               	addwf	fsr2l,f,c
 27038  004A34  5019               	movf	(memset@s+1)^0,w,c
 27039  004A36  22DA               	addwfc	fsr2h,f,c
 27040  004A38  C010  FFDF         	movff	memset@c,indf2
 27041  004A3C  EE20 F002          	lfsr	2,2
 27042  004A40  5018               	movf	memset@s^0,w,c
 27043  004A42  26D9               	addwf	fsr2l,f,c
 27044  004A44  5019               	movf	(memset@s+1)^0,w,c
 27045  004A46  22DA               	addwfc	fsr2h,f,c
 27046  004A48  C010  FFDF         	movff	memset@c,indf2
 27047  004A4C  5012               	movf	memset@n^0,w,c
 27048  004A4E  2418               	addwf	memset@s^0,w,c
 27049  004A50  6E14               	movwf	??_memset^0,c
 27050  004A52  5013               	movf	(memset@n+1)^0,w,c
 27051  004A54  2019               	addwfc	(memset@s+1)^0,w,c
 27052  004A56  6E15               	movwf	(??_memset+1)^0,c
 27053  004A58  0EFE               	movlw	254
 27054  004A5A  2414               	addwf	??_memset^0,w,c
 27055  004A5C  6ED9               	movwf	fsr2l,c
 27056  004A5E  0EFF               	movlw	255
 27057  004A60  2015               	addwfc	(??_memset+1)^0,w,c
 27058  004A62  6EDA               	movwf	fsr2h,c
 27059  004A64  C010  FFDF         	movff	memset@c,indf2
 27060  004A68  5012               	movf	memset@n^0,w,c
 27061  004A6A  2418               	addwf	memset@s^0,w,c
 27062  004A6C  6E14               	movwf	??_memset^0,c
 27063  004A6E  5013               	movf	(memset@n+1)^0,w,c
 27064  004A70  2019               	addwfc	(memset@s+1)^0,w,c
 27065  004A72  6E15               	movwf	(??_memset+1)^0,c
 27066  004A74  0EFD               	movlw	253
 27067  004A76  2414               	addwf	??_memset^0,w,c
 27068  004A78  6ED9               	movwf	fsr2l,c
 27069  004A7A  0EFF               	movlw	255
 27070  004A7C  2015               	addwfc	(??_memset+1)^0,w,c
 27071  004A7E  6EDA               	movwf	fsr2h,c
 27072  004A80  C010  FFDF         	movff	memset@c,indf2
 27073  004A84  5013               	movf	(memset@n+1)^0,w,c
 27074  004A86  E104               	bnz	l6613
 27075  004A88  0E07               	movlw	7
 27076  004A8A  5C12               	subwf	memset@n^0,w,c
 27077  004A8C  A0D8               	btfss	status,0,c
 27078  004A8E  0012               	return	
 27079  004A90                     l6613:
 27080  004A90  EE20 F003          	lfsr	2,3
 27081  004A94  5018               	movf	memset@s^0,w,c
 27082  004A96  26D9               	addwf	fsr2l,f,c
 27083  004A98  5019               	movf	(memset@s+1)^0,w,c
 27084  004A9A  22DA               	addwfc	fsr2h,f,c
 27085  004A9C  C010  FFDF         	movff	memset@c,indf2
 27086  004AA0  5012               	movf	memset@n^0,w,c
 27087  004AA2  2418               	addwf	memset@s^0,w,c
 27088  004AA4  6E14               	movwf	??_memset^0,c
 27089  004AA6  5013               	movf	(memset@n+1)^0,w,c
 27090  004AA8  2019               	addwfc	(memset@s+1)^0,w,c
 27091  004AAA  6E15               	movwf	(??_memset+1)^0,c
 27092  004AAC  0EFC               	movlw	252
 27093  004AAE  2414               	addwf	??_memset^0,w,c
 27094  004AB0  6ED9               	movwf	fsr2l,c
 27095  004AB2  0EFF               	movlw	255
 27096  004AB4  2015               	addwfc	(??_memset+1)^0,w,c
 27097  004AB6  6EDA               	movwf	fsr2h,c
 27098  004AB8  C010  FFDF         	movff	memset@c,indf2
 27099  004ABC  5013               	movf	(memset@n+1)^0,w,c
 27100  004ABE  E104               	bnz	l6619
 27101  004AC0  0E09               	movlw	9
 27102  004AC2  5C12               	subwf	memset@n^0,w,c
 27103  004AC4  A0D8               	btfss	status,0,c
 27104  004AC6  0012               	return	
 27105  004AC8                     l6619:
 27106  004AC8  C018  F014         	movff	memset@s,??_memset
 27107  004ACC  C019  F015         	movff	memset@s+1,??_memset+1
 27108  004AD0  1E14               	comf	??_memset^0,f,c
 27109  004AD2  1E15               	comf	(??_memset+1)^0,f,c
 27110  004AD4  4A14               	infsnz	??_memset^0,f,c
 27111  004AD6  2A15               	incf	(??_memset+1)^0,f,c
 27112  004AD8  0E03               	movlw	3
 27113  004ADA  1414               	andwf	??_memset^0,w,c
 27114  004ADC  6E16               	movwf	memset@k^0,c
 27115  004ADE  6A17               	clrf	(memset@k+1)^0,c
 27116  004AE0  5016               	movf	memset@k^0,w,c
 27117  004AE2  2618               	addwf	memset@s^0,f,c
 27118  004AE4  5017               	movf	(memset@k+1)^0,w,c
 27119  004AE6  2219               	addwfc	(memset@s+1)^0,f,c
 27120  004AE8  5016               	movf	memset@k^0,w,c
 27121  004AEA  5E12               	subwf	memset@n^0,f,c
 27122  004AEC  5017               	movf	(memset@k+1)^0,w,c
 27123  004AEE  5A13               	subwfb	(memset@n+1)^0,f,c
 27124  004AF0  0EFC               	movlw	252
 27125  004AF2  1612               	andwf	memset@n^0,f,c
 27126  004AF4  0EFF               	movlw	255
 27127  004AF6  1613               	andwf	(memset@n+1)^0,f,c
 27128  004AF8  D00B               	goto	l6627
 27129  004AFA                     l6621:
 27130  004AFA  C018  FFD9         	movff	memset@s,fsr2l
 27131  004AFE  C019  FFDA         	movff	memset@s+1,fsr2h
 27132  004B02  C010  FFDF         	movff	memset@c,indf2
 27133  004B06  0612               	decf	memset@n^0,f,c
 27134  004B08  A0D8               	btfss	status,0,c
 27135  004B0A  0613               	decf	(memset@n+1)^0,f,c
 27136  004B0C  4A18               	infsnz	memset@s^0,f,c
 27137  004B0E  2A19               	incf	(memset@s+1)^0,f,c
 27138  004B10                     l6627:
 27139  004B10  5012               	movf	memset@n^0,w,c
 27140  004B12  1013               	iorwf	(memset@n+1)^0,w,c
 27141  004B14  B4D8               	btfsc	status,2,c
 27142  004B16  0012               	return	
 27143  004B18  D7F0               	goto	l6621
 27144  004B1A                     __end_of_memset:
 27145                           	opt callstack 0
 27146                           
 27147 ;; *************** function _adf4351_default *****************
 27148 ;; Defined at:
 27149 ;;		line 230 in file "src/driver/adf4351.c"
 27150 ;; Parameters:    Size  Location     Type
 27151 ;;  ctx             2   13[COMRAM] PTR struct adf4351_ctx
 27152 ;;		 -> g_adf4351(55), 
 27153 ;; Auto vars:     Size  Location     Type
 27154 ;;		None
 27155 ;; Return value:  Size  Location     Type
 27156 ;;                  1    wreg      void 
 27157 ;; Registers used:
 27158 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27159 ;; Tracked objects:
 27160 ;;		On entry : 0/0
 27161 ;;		On exit  : 0/0
 27162 ;;		Unchanged: 0/0
 27163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27164 ;;      Params:         2       0       0       0       0       0       0
 27165 ;;      Locals:         0       0       0       0       0       0       0
 27166 ;;      Temps:          0       0       0       0       0       0       0
 27167 ;;      Totals:         2       0       0       0       0       0       0
 27168 ;;Total ram usage:        2 bytes
 27169 ;; Hardware stack levels used:    1
 27170 ;; Hardware stack levels required when called:    2
 27171 ;; This function calls:
 27172 ;;		Nothing
 27173 ;; This function is called by:
 27174 ;;		_adf4351_init
 27175 ;; This function uses a non-reentrant model
 27176 ;;
 27177                           
 27178                           	psect	text118
 27179  005DD6                     __ptext118:
 27180                           	opt callstack 0
 27181  005DD6                     _adf4351_default:
 27182                           	opt callstack 27
 27183                           
 27184                           ;src/driver/adf4351.c: 230: static void adf4351_default(adf4351_ctx* ctx);src/driver/adf
      +                          4351.c: 231: {;src/driver/adf4351.c: 232:  ctx->reg1.phase = 1;
 27185                           
 27186                           ;incstack = 0
 27187  005DD6  EE20 F007          	lfsr	2,7
 27188  005DDA  500E               	movf	adf4351_default@ctx^0,w,c
 27189  005DDC  26D9               	addwf	fsr2l,f,c
 27190  005DDE  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27191  005DE0  22DA               	addwfc	fsr2h,f,c
 27192  005DE2  0E01               	movlw	1
 27193  005DE4  6EDE               	movwf	postinc2,c
 27194  005DE6  0E00               	movlw	0
 27195  005DE8  6EDD               	movwf	postdec2,c
 27196                           
 27197                           ;src/driver/adf4351.c: 233:  ctx->reg2.muxout = 6;
 27198  005DEA  EE20 F00C          	lfsr	2,12
 27199  005DEE  500E               	movf	adf4351_default@ctx^0,w,c
 27200  005DF0  26D9               	addwf	fsr2l,f,c
 27201  005DF2  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27202  005DF4  22DA               	addwfc	fsr2h,f,c
 27203  005DF6  0E06               	movlw	6
 27204  005DF8  6EDF               	movwf	indf2,c
 27205                           
 27206                           ;src/driver/adf4351.c: 234:  ctx->reg2.cpc = 7;
 27207  005DFA  EE20 F012          	lfsr	2,18
 27208  005DFE  500E               	movf	adf4351_default@ctx^0,w,c
 27209  005E00  26D9               	addwf	fsr2l,f,c
 27210  005E02  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27211  005E04  22DA               	addwfc	fsr2h,f,c
 27212  005E06  0E07               	movlw	7
 27213  005E08  6EDF               	movwf	indf2,c
 27214                           
 27215                           ;src/driver/adf4351.c: 235:  ctx->reg2.lownoise = 3;
 27216  005E0A  EE20 F00B          	lfsr	2,11
 27217  005E0E  500E               	movf	adf4351_default@ctx^0,w,c
 27218  005E10  26D9               	addwf	fsr2l,f,c
 27219  005E12  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27220  005E14  22DA               	addwfc	fsr2h,f,c
 27221  005E16  0E03               	movlw	3
 27222  005E18  6EDF               	movwf	indf2,c
 27223                           
 27224                           ;src/driver/adf4351.c: 236:  ctx->reg2.pdpol = 1;
 27225  005E1A  EE20 F015          	lfsr	2,21
 27226  005E1E  500E               	movf	adf4351_default@ctx^0,w,c
 27227  005E20  26D9               	addwf	fsr2l,f,c
 27228  005E22  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27229  005E24  22DA               	addwfc	fsr2h,f,c
 27230  005E26  0E01               	movlw	1
 27231  005E28  6EDF               	movwf	indf2,c
 27232                           
 27233                           ;src/driver/adf4351.c: 237:  ctx->reg4.fbsel = 1;
 27234  005E2A  EE20 F020          	lfsr	2,32
 27235  005E2E  500E               	movf	adf4351_default@ctx^0,w,c
 27236  005E30  26D9               	addwf	fsr2l,f,c
 27237  005E32  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27238  005E34  22DA               	addwfc	fsr2h,f,c
 27239  005E36  0E01               	movlw	1
 27240  005E38  6EDF               	movwf	indf2,c
 27241                           
 27242                           ;src/driver/adf4351.c: 238:  ctx->reg4.rfoutena = 1;
 27243  005E3A  EE20 F028          	lfsr	2,40
 27244  005E3E  500E               	movf	adf4351_default@ctx^0,w,c
 27245  005E40  26D9               	addwf	fsr2l,f,c
 27246  005E42  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27247  005E44  22DA               	addwfc	fsr2h,f,c
 27248  005E46  0E01               	movlw	1
 27249  005E48  6EDF               	movwf	indf2,c
 27250                           
 27251                           ;src/driver/adf4351.c: 239:  ctx->reg4.rfoutpwr = 3;
 27252  005E4A  EE20 F029          	lfsr	2,41
 27253  005E4E  500E               	movf	adf4351_default@ctx^0,w,c
 27254  005E50  26D9               	addwf	fsr2l,f,c
 27255  005E52  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27256  005E54  22DA               	addwfc	fsr2h,f,c
 27257  005E56  0E03               	movlw	3
 27258  005E58  6EDF               	movwf	indf2,c
 27259                           
 27260                           ;src/driver/adf4351.c: 240:     ctx->reg4.vcopd = 1;
 27261  005E5A  EE20 F023          	lfsr	2,35
 27262  005E5E  500E               	movf	adf4351_default@ctx^0,w,c
 27263  005E60  26D9               	addwf	fsr2l,f,c
 27264  005E62  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27265  005E64  22DA               	addwfc	fsr2h,f,c
 27266  005E66  0E01               	movlw	1
 27267  005E68  6EDF               	movwf	indf2,c
 27268                           
 27269                           ;src/driver/adf4351.c: 241:     ctx->reg5.ldpinmod = 1;
 27270  005E6A  EE20 F02A          	lfsr	2,42
 27271  005E6E  500E               	movf	adf4351_default@ctx^0,w,c
 27272  005E70  26D9               	addwf	fsr2l,f,c
 27273  005E72  500F               	movf	(adf4351_default@ctx+1)^0,w,c
 27274  005E74  22DA               	addwfc	fsr2h,f,c
 27275  005E76  0E01               	movlw	1
 27276  005E78  6EDF               	movwf	indf2,c
 27277  005E7A  0012               	return		;funcret
 27278  005E7C                     __end_of_adf4351_default:
 27279                           	opt callstack 0
 27280                           
 27281 ;; *************** function _global_irq_handler *****************
 27282 ;; Defined at:
 27283 ;;		line 31 in file "src/driver/irq.c"
 27284 ;; Parameters:    Size  Location     Type
 27285 ;;		None
 27286 ;; Auto vars:     Size  Location     Type
 27287 ;;  dummy           1   12[COMRAM] volatile unsigned char 
 27288 ;;  dummy           1   11[COMRAM] volatile unsigned char 
 27289 ;; Return value:  Size  Location     Type
 27290 ;;                  1    wreg      void 
 27291 ;; Registers used:
 27292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 27293 ;; Tracked objects:
 27294 ;;		On entry : 0/0
 27295 ;;		On exit  : 0/0
 27296 ;;		Unchanged: 0/0
 27297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27298 ;;      Params:         0       0       0       0       0       0       0
 27299 ;;      Locals:         2       0       0       0       0       0       0
 27300 ;;      Temps:          4       0       0       0       0       0       0
 27301 ;;      Totals:         6       0       0       0       0       0       0
 27302 ;;Total ram usage:        6 bytes
 27303 ;; Hardware stack levels used:    1
 27304 ;; Hardware stack levels required when called:    1
 27305 ;; This function calls:
 27306 ;;		_t0_irq
 27307 ;;		_usart_rx_irq_handler
 27308 ;; This function is called by:
 27309 ;;		Interrupt level 2
 27310 ;; This function uses a non-reentrant model
 27311 ;;
 27312                           
 27313                           	psect	intcode
 27314  000008                     __pintcode:
 27315                           	opt callstack 0
 27316  000008                     _global_irq_handler:
 27317                           	opt callstack 15
 27318                           
 27319                           ;incstack = 0
 27320  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27321  00000A  ED2E  F030         	call	int_func,f	;refresh shadow registers
 27322                           
 27323                           	psect	intcode_body
 27324  00605C                     __pintcode_body:
 27325                           	opt callstack 15
 27326  00605C                     int_func:
 27327                           	opt callstack 15
 27328  00605C  0006               	pop		; remove dummy address from shadow register refresh
 27329  00605E  CFFA F008          	movff	pclath,??_global_irq_handler
 27330  006062  CFFB F009          	movff	pclatu,??_global_irq_handler+1
 27331  006066  CFD9 F00A          	movff	fsr2l,??_global_irq_handler+2
 27332  00606A  CFDA F00B          	movff	fsr2h,??_global_irq_handler+3
 27333                           
 27334                           ;src/driver/irq.c: 33:     if(PIR1bits.RCIF)
 27335  00606E  AA9E               	btfss	158,5,c	;volatile
 27336  006070  D01A               	goto	i2l359
 27337                           
 27338                           ;src/driver/irq.c: 34:  {;src/driver/irq.c: 35:         if(g_irq_handler_info[IRQ_HANDLE
      +                          R_ID_USART].handler)
 27339  006072  0102               	movlb	2	; () banked
 27340  006074  51A0               	movf	_g_irq_handler_info& (0+255),w,b
 27341  006076  11A1               	iorwf	(_g_irq_handler_info+1)& (0+255),w,b
 27342  006078  B4D8               	btfsc	status,2,c
 27343  00607A  D010               	goto	i2u1037_49
 27344                           
 27345                           ; BSR set to: 2
 27346                           ;src/driver/irq.c: 36:             g_irq_handler_info[IRQ_HANDLER_ID_USART].handler(g_ir
      +                          q_handler_info[IRQ_HANDLER_ID_USART].udata);
 27347  00607C  C2A2  F001         	movff	_g_irq_handler_info+2,usart_rx_irq_handler@udata
 27348  006080  C2A3  F002         	movff	_g_irq_handler_info+3,usart_rx_irq_handler@udata+1
 27349  006084  D801               	call	i2u1037_48
 27350  006086  D00A               	goto	i2u1037_49
 27351  006088                     i2u1037_48:
 27352  006088  0005               	push	
 27353  00608A  6EFA               	movwf	pclath,c
 27354  00608C  51A0               	movf	_g_irq_handler_info& (0+255),w,b
 27355  00608E  6EFD               	movwf	tosl,c
 27356  006090  51A1               	movf	(_g_irq_handler_info+1)& (0+255),w,b
 27357  006092  6EFE               	movwf	tosh,c
 27358  006094  50F8               	movf	tblptru,w,c
 27359  006096  6EFF               	movwf	tosu,c
 27360  006098  50FA               	movf	pclath,w,c
 27361  00609A  0012               	return		;indir
 27362  00609C                     i2u1037_49:
 27363                           
 27364                           ;src/driver/irq.c: 38:   if(INTCONbits.RBIF) {
 27365  00609C  A0F2               	btfss	242,0,c	;volatile
 27366  00609E  D003               	goto	i2l359
 27367                           
 27368                           ;src/driver/irq.c: 39:    volatile u8 dummy = PORTB;
 27369  0060A0  CF81 F00C          	movff	3969,global_irq_handler@dummy	;volatile
 27370                           
 27371                           ;src/driver/irq.c: 40:    INTCONbits.RBIF = 0;
 27372  0060A4  90F2               	bcf	242,0,c	;volatile
 27373  0060A6                     i2l359:
 27374                           
 27375                           ;src/driver/irq.c: 44:     if(INTCONbits.TMR0IF)
 27376  0060A6  A4F2               	btfss	242,2,c	;volatile
 27377  0060A8  D01C               	goto	i2l365
 27378                           
 27379                           ;src/driver/irq.c: 45:  {;src/driver/irq.c: 46:         if(g_irq_handler_info[IRQ_HANDLE
      +                          R_ID_TIMER0].handler)
 27380  0060AA  0102               	movlb	2	; () banked
 27381  0060AC  51A4               	movf	(_g_irq_handler_info+4)& (0+255),w,b
 27382  0060AE  11A5               	iorwf	(_g_irq_handler_info+5)& (0+255),w,b
 27383  0060B0  B4D8               	btfsc	status,2,c
 27384  0060B2  D012               	goto	i2u1041_49
 27385                           
 27386                           ; BSR set to: 2
 27387                           ;src/driver/irq.c: 47:             g_irq_handler_info[IRQ_HANDLER_ID_TIMER0].handler(g_i
      +                          rq_handler_info[IRQ_HANDLER_ID_TIMER0].udata);
 27388  0060B4  C2A6  F001         	movff	_g_irq_handler_info+6,usart_rx_irq_handler@udata
 27389  0060B8  C2A7  F002         	movff	_g_irq_handler_info+7,usart_rx_irq_handler@udata+1
 27390  0060BC  EE22  F0A4         	lfsr	2,_g_irq_handler_info+4
 27391  0060C0  D801               	call	i2u1041_48
 27392  0060C2  D00A               	goto	i2u1041_49
 27393  0060C4                     i2u1041_48:
 27394  0060C4  0005               	push	
 27395  0060C6  6EFA               	movwf	pclath,c
 27396  0060C8  50DE               	movf	postinc2,w,c
 27397  0060CA  6EFD               	movwf	tosl,c
 27398  0060CC  50DE               	movf	postinc2,w,c
 27399  0060CE  6EFE               	movwf	tosh,c
 27400  0060D0  50F8               	movf	tblptru,w,c
 27401  0060D2  6EFF               	movwf	tosu,c
 27402  0060D4  50FA               	movf	pclath,w,c
 27403  0060D6  0012               	return		;indir
 27404  0060D8                     i2u1041_49:
 27405                           
 27406                           ;src/driver/irq.c: 49:   if(INTCONbits.TMR0IF) {
 27407  0060D8  A4F2               	btfss	242,2,c	;volatile
 27408  0060DA  D003               	goto	i2l365
 27409                           
 27410                           ;src/driver/irq.c: 50:    volatile u8 dummy = PORTB;
 27411  0060DC  CF81 F00D          	movff	3969,global_irq_handler@dummy_1626	;volatile
 27412                           
 27413                           ;src/driver/irq.c: 51:    INTCONbits.TMR0IF = 0;
 27414  0060E0  94F2               	bcf	242,2,c	;volatile
 27415  0060E2                     i2l365:
 27416  0060E2  C00B  FFDA         	movff	??_global_irq_handler+3,fsr2h
 27417  0060E6  C00A  FFD9         	movff	??_global_irq_handler+2,fsr2l
 27418  0060EA  C009  FFFB         	movff	??_global_irq_handler+1,pclatu
 27419  0060EE  C008  FFFA         	movff	??_global_irq_handler,pclath
 27420  0060F2  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27421  0060F4  0011               	retfie		f
 27422  0060F6                     __end_of_global_irq_handler:
 27423                           	opt callstack 0
 27424                           
 27425 ;; *************** function _usart_rx_irq_handler *****************
 27426 ;; Defined at:
 27427 ;;		line 90 in file "src/driver/usart.c"
 27428 ;; Parameters:    Size  Location     Type
 27429 ;;  udata           2    0[COMRAM] PTR void 
 27430 ;;		 -> NULL(0), 
 27431 ;; Auto vars:     Size  Location     Type
 27432 ;;  wposn           2    5[COMRAM] volatile int 
 27433 ;;  c               1    4[COMRAM] volatile unsigned char 
 27434 ;; Return value:  Size  Location     Type
 27435 ;;                  1    wreg      void 
 27436 ;; Registers used:
 27437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27438 ;; Tracked objects:
 27439 ;;		On entry : 3F/2
 27440 ;;		On exit  : 3F/2
 27441 ;;		Unchanged: 3F/0
 27442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27443 ;;      Params:         2       0       0       0       0       0       0
 27444 ;;      Locals:         3       0       0       0       0       0       0
 27445 ;;      Temps:          2       0       0       0       0       0       0
 27446 ;;      Totals:         7       0       0       0       0       0       0
 27447 ;;Total ram usage:        7 bytes
 27448 ;; Hardware stack levels used:    1
 27449 ;; This function calls:
 27450 ;;		Nothing
 27451 ;; This function is called by:
 27452 ;;		_usart_init
 27453 ;;		_global_irq_handler
 27454 ;; This function uses a non-reentrant model
 27455 ;;
 27456                           
 27457                           	psect	text120
 27458  006B50                     __ptext120:
 27459                           	opt callstack 0
 27460  006B50                     _usart_rx_irq_handler:
 27461                           	opt callstack 15
 27462                           
 27463                           ; BSR set to: 2
 27464                           ;src/driver/usart.c: 90: static void usart_rx_irq_handler(void *udata);src/driver/usart.
      +                          c: 91: {;src/driver/usart.c: 92:     volatile char c;;src/driver/usart.c: 93:     volati
      +                          le int wposn;;src/driver/usart.c: 96:     if(BAUDCONbits.RCIDL == 0) return;
 27465                           
 27466                           ;incstack = 0
 27467  006B50  ACB8               	btfss	184,6,c	;volatile
 27468  006B52  0012               	return	
 27469                           
 27470                           ; BSR set to: 2
 27471                           ;src/driver/usart.c: 99:  c = RCREG;
 27472  006B54  CFAE F005          	movff	4014,usart_rx_irq_handler@c	;volatile
 27473                           
 27474                           ;src/driver/usart.c: 102:     if(RCSTAbits.FERR) {
 27475  006B58  B4AB               	btfsc	171,2,c	;volatile
 27476  006B5A  0012               	return	
 27477                           
 27478                           ; BSR set to: 2
 27479                           ;src/driver/usart.c: 105:     if(RCSTAbits.OERR) {
 27480                           
 27481                           ;src/driver/usart.c: 104:     }
 27482  006B5C  A2AB               	btfss	171,1,c	;volatile
 27483  006B5E  D003               	goto	i2l8405
 27484                           
 27485                           ; BSR set to: 2
 27486                           ;src/driver/usart.c: 107:         RCSTAbits.CREN = 0;
 27487  006B60  98AB               	bcf	171,4,c	;volatile
 27488                           
 27489                           ;src/driver/usart.c: 108:         RCSTAbits.CREN = 1;
 27490  006B62  88AB               	bsf	171,4,c	;volatile
 27491                           
 27492                           ;src/driver/usart.c: 109:         return;
 27493  006B64  0012               	return	
 27494  006B66                     i2l8405:
 27495                           
 27496                           ; BSR set to: 2
 27497                           ;src/driver/usart.c: 113:  wposn = (g_usart_wpos+1) % sizeof(g_usart_buf);
 27498  006B66  0E01               	movlw	1
 27499  006B68  2469               	addwf	_g_usart_wpos^0,w,c	;volatile
 27500  006B6A  6E03               	movwf	??_usart_rx_irq_handler^0,c
 27501  006B6C  0E00               	movlw	0
 27502  006B6E  206A               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 27503  006B70  6E04               	movwf	(??_usart_rx_irq_handler+1)^0,c
 27504  006B72  0E7F               	movlw	127
 27505  006B74  1403               	andwf	??_usart_rx_irq_handler^0,w,c
 27506  006B76  6E06               	movwf	usart_rx_irq_handler@wposn^0,c	;volatile
 27507  006B78  6A07               	clrf	(usart_rx_irq_handler@wposn+1)^0,c	;volatile
 27508                           
 27509                           ;src/driver/usart.c: 114:  if(wposn != g_usart_rpos) {
 27510  006B7A  506B               	movf	_g_usart_rpos^0,w,c	;volatile
 27511  006B7C  1806               	xorwf	usart_rx_irq_handler@wposn^0,w,c	;volatile
 27512  006B7E  E104               	bnz	i2u952_40
 27513  006B80  506C               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
 27514  006B82  1807               	xorwf	(usart_rx_irq_handler@wposn+1)^0,w,c	;volatile
 27515  006B84  B4D8               	btfsc	status,2,c
 27516  006B86  0012               	return	
 27517  006B88                     i2u952_40:
 27518                           
 27519                           ; BSR set to: 2
 27520                           ;src/driver/usart.c: 115:   g_usart_buf[g_usart_wpos] = c;
 27521  006B88  0E00               	movlw	low _g_usart_buf
 27522  006B8A  2469               	addwf	_g_usart_wpos^0,w,c	;volatile
 27523  006B8C  6ED9               	movwf	fsr2l,c
 27524  006B8E  0E04               	movlw	high _g_usart_buf
 27525  006B90  206A               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 27526  006B92  6EDA               	movwf	fsr2h,c
 27527  006B94  C005  FFDF         	movff	usart_rx_irq_handler@c,indf2	;volatile
 27528                           
 27529                           ; BSR set to: 2
 27530                           ;src/driver/usart.c: 116:   g_usart_wpos = wposn;
 27531  006B98  C006  F069         	movff	usart_rx_irq_handler@wposn,_g_usart_wpos	;volatile
 27532  006B9C  C007  F06A         	movff	usart_rx_irq_handler@wposn+1,_g_usart_wpos+1	;volatile
 27533                           
 27534                           ; BSR set to: 2
 27535  006BA0  0012               	return		;funcret
 27536  006BA2                     __end_of_usart_rx_irq_handler:
 27537                           	opt callstack 0
 27538                           
 27539 ;; *************** function _t0_irq *****************
 27540 ;; Defined at:
 27541 ;;		line 38 in file "src/driver/timer.c"
 27542 ;; Parameters:    Size  Location     Type
 27543 ;;		None
 27544 ;; Auto vars:     Size  Location     Type
 27545 ;;		None
 27546 ;; Return value:  Size  Location     Type
 27547 ;;                  1    wreg      void 
 27548 ;; Registers used:
 27549 ;;		wreg, status,2, status,0
 27550 ;; Tracked objects:
 27551 ;;		On entry : 3F/2
 27552 ;;		On exit  : 3F/0
 27553 ;;		Unchanged: 0/0
 27554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27555 ;;      Params:         0       0       0       0       0       0       0
 27556 ;;      Locals:         0       0       0       0       0       0       0
 27557 ;;      Temps:          0       0       0       0       0       0       0
 27558 ;;      Totals:         0       0       0       0       0       0       0
 27559 ;;Total ram usage:        0 bytes
 27560 ;; Hardware stack levels used:    1
 27561 ;; This function calls:
 27562 ;;		Nothing
 27563 ;; This function is called by:
 27564 ;;		_init_timer
 27565 ;;		_global_irq_handler
 27566 ;; This function uses a non-reentrant model
 27567 ;;
 27568                           
 27569                           	psect	text121
 27570  006E8C                     __ptext121:
 27571                           	opt callstack 0
 27572  006E8C                     _t0_irq:
 27573                           	opt callstack 15
 27574                           
 27575                           ; BSR set to: 2
 27576                           ;src/driver/timer.c: 40:  static u8 second2 = 0;;src/driver/timer.c: 41:  static u8 ms50
      +                          0 = 0;;src/driver/timer.c: 43:  if(++ms500 > 50)
 27577                           
 27578                           ; BSR set to: 2
 27579                           ;incstack = 0
 27580  006E8C  0100               	movlb	0	; () banked
 27581  006E8E  2BC8               	incf	t0_irq@ms500& (0+255),f,b
 27582  006E90  0E32               	movlw	50
 27583  006E92  65C8               	cpfsgt	t0_irq@ms500& (0+255),b
 27584  006E94  D010               	goto	i2l8875
 27585                           
 27586                           ; BSR set to: 0
 27587                           ;src/driver/timer.c: 44:  {;src/driver/timer.c: 45:   ms500 = 0;
 27588  006E96  0E00               	movlw	0
 27589  006E98  6FC8               	movwf	t0_irq@ms500& (0+255),b
 27590                           
 27591                           ;src/driver/timer.c: 47:   if(cpu_blink_timer) cpu_blink_timer = 0;
 27592  006E9A  51CB               	movf	_cpu_blink_timer& (0+255),w,b
 27593  006E9C  B4D8               	btfsc	status,2,c
 27594  006E9E  D002               	goto	i2l8869
 27595                           
 27596                           ; BSR set to: 0
 27597  006EA0  0E00               	movlw	0
 27598  006EA2  D001               	goto	L18
 27599  006EA4                     i2l8869:
 27600                           
 27601                           ; BSR set to: 0
 27602  006EA4  0E01               	movlw	1
 27603  006EA6                     L18:
 27604  006EA6  6FCB               	movwf	_cpu_blink_timer& (0+255),b
 27605                           
 27606                           ; BSR set to: 0
 27607                           ;src/driver/timer.c: 50:   if(adf4351_set_qrg != 0 && adf4351_set_qrg < 3)
 27608  006EA8  51CA               	movf	_adf4351_set_qrg& (0+255),w,b
 27609  006EAA  B4D8               	btfsc	status,2,c
 27610  006EAC  D004               	goto	i2l8875
 27611                           
 27612                           ; BSR set to: 0
 27613  006EAE  0E03               	movlw	3
 27614  006EB0  61CA               	cpfslt	_adf4351_set_qrg& (0+255),b
 27615  006EB2  D001               	goto	i2l8875
 27616                           
 27617                           ; BSR set to: 0
 27618                           ;src/driver/timer.c: 51:    adf4351_set_qrg++;
 27619  006EB4  2BCA               	incf	_adf4351_set_qrg& (0+255),f,b
 27620  006EB6                     i2l8875:
 27621                           
 27622                           ; BSR set to: 0
 27623                           ;src/driver/timer.c: 54:  if(++second2 >= 200)
 27624  006EB6  2BC9               	incf	t0_irq@second2& (0+255),f,b
 27625  006EB8  0EC7               	movlw	199
 27626  006EBA  65C9               	cpfsgt	t0_irq@second2& (0+255),b
 27627  006EBC  D004               	goto	i2l979
 27628                           
 27629                           ; BSR set to: 0
 27630                           ;src/driver/timer.c: 55:  {;src/driver/timer.c: 56:   second2 = 0;
 27631  006EBE  0E00               	movlw	0
 27632  006EC0  6FC9               	movwf	t0_irq@second2& (0+255),b
 27633                           
 27634                           ;src/driver/timer.c: 59:   gps_init_timer = 1;
 27635  006EC2  0E01               	movlw	1
 27636  006EC4  6FCD               	movwf	_gps_init_timer& (0+255),b
 27637  006EC6                     i2l979:
 27638                           
 27639                           ; BSR set to: 0
 27640                           ;src/driver/timer.c: 62:  TMR0L = 0xe0;
 27641  006EC6  0EE0               	movlw	224
 27642  006EC8  6ED6               	movwf	214,c	;volatile
 27643                           
 27644                           ;src/driver/timer.c: 63:  TMR0H = 0xb1;
 27645  006ECA  0EB1               	movlw	177
 27646  006ECC  6ED7               	movwf	215,c	;volatile
 27647                           
 27648                           ; BSR set to: 0
 27649  006ECE  0012               	return		;funcret
 27650  006ED0                     __end_of_t0_irq:
 27651                           	opt callstack 0
 27652                           
 27653                           	psect	text122
 27654  000000                     __ptext122:
 27655                           	opt callstack 0
 27656                           
 27657                           	psect	rparam
 27658  0000                     
 27659                           	psect	temp
 27660  000072                     btemp:
 27661                           	opt callstack 0
 27662  000072                     	ds	1
 27663  0000                     int$flags	set	btemp
 27664  0000                     wtemp8	set	btemp+1
 27665  0000                     ttemp5	set	btemp+1
 27666  0000                     ttemp6	set	btemp+4
 27667  0000                     ttemp7	set	btemp+8
 27668                           tosu	equ	0xFFF
 27669                           tosh	equ	0xFFE
 27670                           tosl	equ	0xFFD
 27671                           stkptr	equ	0xFFC
 27672                           pclatu	equ	0xFFB
 27673                           pclath	equ	0xFFA
 27674                           pcl	equ	0xFF9
 27675                           tblptru	equ	0xFF8
 27676                           tblptrh	equ	0xFF7
 27677                           tblptrl	equ	0xFF6
 27678                           tablat	equ	0xFF5
 27679                           prodh	equ	0xFF4
 27680                           prodl	equ	0xFF3
 27681                           indf0	equ	0xFEF
 27682                           postinc0	equ	0xFEE
 27683                           postdec0	equ	0xFED
 27684                           preinc0	equ	0xFEC
 27685                           plusw0	equ	0xFEB
 27686                           fsr0h	equ	0xFEA
 27687                           fsr0l	equ	0xFE9
 27688                           wreg	equ	0xFE8
 27689                           indf1	equ	0xFE7
 27690                           postinc1	equ	0xFE6
 27691                           postdec1	equ	0xFE5
 27692                           preinc1	equ	0xFE4
 27693                           plusw1	equ	0xFE3
 27694                           fsr1h	equ	0xFE2
 27695                           fsr1l	equ	0xFE1
 27696                           bsr	equ	0xFE0
 27697                           indf2	equ	0xFDF
 27698                           postinc2	equ	0xFDE
 27699                           postdec2	equ	0xFDD
 27700                           preinc2	equ	0xFDC
 27701                           plusw2	equ	0xFDB
 27702                           fsr2h	equ	0xFDA
 27703                           fsr2l	equ	0xFD9
 27704                           status	equ	0xFD8


Data Sizes:
    Strings     1074
    Constant    1188
    Data        207
    BSS         439
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    100     113
    BANK0           128     69     105
    BANK1           256    248     256
    BANK2           256      0     244
    BANK3           256      0     217
    BANK4           256      0     128
    BANK5           256      0       0

Pointer List with Targets:

    g_i2c_bus.setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    g_i2c_bus.transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 0
		 -> i2c_transfer_native(), 

    usart_rx_irq_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    handler$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    adf4351_get_lock@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    check_ADF5341_status@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    S1519$0$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S33$0$1	PTR struct i2c_msg size(1) Largest target is 16
		 -> smbus8_read_byte@msg(BANK0[14]), smbus8_write_data@msg(BANK0[14]), smbus8_write_byte@msg(COMRAM[7]), i2c_probe_addr@msg(COMRAM[7]), 

    S33$0$0	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    __strtoxl@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    __strtoxl@s	PTR const unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), 

    __strtoxl@cp	PTR const unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_111(CODE[3]), STR_107(CODE[3]), STR_102(CODE[3]), STR_98(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_111(CODE[3]), STR_107(CODE[3]), STR_102(CODE[3]), STR_98(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), STR_40(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), STR_33(CODE[13]), 
		 -> STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), STR_25(CODE[11]), 
		 -> STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), STR_21(CODE[18]), 
		 -> STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[16]), 
		 -> STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[32]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), STR_9(CODE[18]), 
		 -> STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), STR_5(CODE[25]), 
		 -> STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), STR_1(CODE[24]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), STR_40(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), STR_33(CODE[13]), 
		 -> STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), STR_25(CODE[11]), 
		 -> STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), STR_21(CODE[18]), 
		 -> STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[16]), 
		 -> STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[32]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), STR_9(CODE[18]), 
		 -> STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), STR_5(CODE[25]), 
		 -> STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), STR_1(CODE[24]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 85
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK2[32]), CalculateGridSquare@grid(BANK2[7]), 
		 -> gpsbuf(BANK3[85]), STR_89(CODE[14]), STR_88(CODE[7]), STR_87(CODE[6]), 
		 -> STR_86(CODE[12]), STR_85(CODE[17]), itoa@buffer(BANK2[12]), STR_84(CODE[5]), 
		 -> STR_83(CODE[5]), STR_82(CODE[7]), STR_81(CODE[7]), STR_80(CODE[8]), 
		 -> STR_79(CODE[5]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_76(CODE[6]), STR_75(CODE[5]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_72(CODE[10]), GPS_time(BANK2[9]), STR_71(CODE[17]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[7]), 
		 -> STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[17]), STR_63(CODE[7]), 
		 -> STR_62(CODE[7]), STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[17]), 
		 -> STR_58(CODE[7]), STR_57(CODE[7]), STR_56(CODE[6]), STR_55(CODE[6]), 
		 -> STR_54(CODE[17]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[3]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[4]), STR_41(CODE[17]), ssd1306_setpos@x(BANK0[1]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 85
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK2[32]), CalculateGridSquare@grid(BANK2[7]), 
		 -> gpsbuf(BANK3[85]), STR_89(CODE[14]), STR_88(CODE[7]), STR_87(CODE[6]), 
		 -> STR_86(CODE[12]), STR_85(CODE[17]), itoa@buffer(BANK2[12]), STR_84(CODE[5]), 
		 -> STR_83(CODE[5]), STR_82(CODE[7]), STR_81(CODE[7]), STR_80(CODE[8]), 
		 -> STR_79(CODE[5]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_76(CODE[6]), STR_75(CODE[5]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_72(CODE[10]), GPS_time(BANK2[9]), STR_71(CODE[17]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[7]), 
		 -> STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[17]), STR_63(CODE[7]), 
		 -> STR_62(CODE[7]), STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[17]), 
		 -> STR_58(CODE[7]), STR_57(CODE[7]), STR_56(CODE[6]), STR_55(CODE[6]), 
		 -> STR_54(CODE[17]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[3]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[4]), STR_41(CODE[17]), ssd1306_setpos@x(BANK0[1]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), 

    strchr@s	PTR const unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), NULL(NULL[0]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), STR_40(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), STR_33(CODE[13]), 
		 -> STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), STR_25(CODE[11]), 
		 -> STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), STR_21(CODE[18]), 
		 -> STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[16]), 
		 -> STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[32]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), STR_9(CODE[18]), 
		 -> STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), STR_5(CODE[25]), 
		 -> STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 240
		 -> g_adf4351(BANK3[55]), g_i2c_bus(BANK2[8]), eval_gps@elem(BANK1[240]), itoa@buffer(BANK2[12]), 
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), 

    memset@s	PTR unsigned char  size(2) Largest target is 240
		 -> g_adf4351(BANK3[55]), g_i2c_bus(BANK2[8]), eval_gps@elem(BANK1[240]), itoa@buffer(BANK2[12]), 
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), 

    memcpy@d1	PTR void  size(2) Largest target is 240
		 -> eval_gps@elem(BANK1[240]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), show_display@old_GPS_time(BANK2[9]), 
		 -> show_display@old_GPS_lon(BANK2[15]), show_display@old_GPS_lat(BANK2[15]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 240
		 -> eval_gps@elem(BANK1[240]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), show_display@old_GPS_time(BANK2[9]), 
		 -> show_display@old_GPS_lon(BANK2[15]), show_display@old_GPS_lat(BANK2[15]), 

    memcpy@s1	PTR const void  size(2) Largest target is 240
		 -> gpsbuf(BANK3[85]), eval_gps@elem(BANK1[240]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), 
		 -> GPS_time(BANK2[9]), NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 240
		 -> gpsbuf(BANK3[85]), eval_gps@elem(BANK1[240]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), 
		 -> GPS_time(BANK2[9]), NULL(NULL[0]), 

    memcmp@vr	PTR const void  size(2) Largest target is 15
		 -> GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), show_display@old_GPS_time(BANK2[9]), 

    memcmp@r	PTR const unsigned char  size(2) Largest target is 15
		 -> GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), show_display@old_GPS_time(BANK2[9]), 

    memcmp@vl	PTR const void  size(2) Largest target is 15
		 -> GPS_time(BANK2[9]), show_display@old_GPS_lon(BANK2[15]), show_display@old_GPS_lat(BANK2[15]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 15
		 -> GPS_time(BANK2[9]), show_display@old_GPS_lon(BANK2[15]), show_display@old_GPS_lat(BANK2[15]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 240
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), eval_gps@elem(BANK1[240]), STR_40(CODE[18]), 
		 -> STR_37(CODE[17]), STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), 
		 -> STR_33(CODE[13]), STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), 
		 -> STR_29(CODE[9]), STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), 
		 -> STR_25(CODE[11]), STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), 
		 -> STR_21(CODE[18]), STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), 
		 -> STR_17(CODE[16]), STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), 
		 -> STR_13(CODE[32]), STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), 
		 -> STR_9(CODE[18]), STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), 
		 -> STR_5(CODE[25]), STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), 
		 -> STR_1(CODE[24]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), STR_40(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), STR_33(CODE[13]), 
		 -> STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), STR_25(CODE[11]), 
		 -> STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), STR_21(CODE[18]), 
		 -> STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[16]), 
		 -> STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[32]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), STR_9(CODE[18]), 
		 -> STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), STR_5(CODE[25]), 
		 -> STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), STR_1(CODE[24]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 39
		 -> STR_95(CODE[16]), STR_94(CODE[13]), STR_93(CODE[31]), STR_92(CODE[2]), 
		 -> STR_91(CODE[26]), STR_90(CODE[15]), STR_40(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[21]), STR_35(CODE[28]), STR_34(CODE[11]), STR_33(CODE[13]), 
		 -> STR_32(CODE[27]), STR_31(CODE[20]), STR_30(CODE[13]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[15]), STR_26(CODE[9]), STR_25(CODE[11]), 
		 -> STR_24(CODE[15]), STR_23(CODE[32]), STR_22(CODE[16]), STR_21(CODE[18]), 
		 -> STR_20(CODE[16]), STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[16]), 
		 -> STR_16(CODE[18]), STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[32]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[20]), STR_9(CODE[18]), 
		 -> STR_8(CODE[8]), STR_7(CODE[39]), STR_6(CODE[25]), STR_5(CODE[25]), 
		 -> STR_4(CODE[20]), STR_3(CODE[12]), STR_2(CODE[14]), STR_1(CODE[24]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), CalculateGridSquare@grid(BANK2[7]), STR_89(CODE[14]), STR_88(CODE[7]), 
		 -> STR_87(CODE[6]), STR_86(CODE[12]), STR_85(CODE[17]), itoa@buffer(BANK2[12]), 
		 -> STR_84(CODE[5]), STR_83(CODE[5]), STR_82(CODE[7]), STR_81(CODE[7]), 
		 -> STR_80(CODE[8]), STR_79(CODE[5]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), 
		 -> STR_78(CODE[4]), STR_77(CODE[4]), STR_76(CODE[6]), STR_75(CODE[5]), 
		 -> STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[10]), GPS_time(BANK2[9]), 
		 -> STR_71(CODE[17]), STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), 
		 -> STR_67(CODE[7]), STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[17]), 
		 -> STR_63(CODE[7]), STR_62(CODE[7]), STR_61(CODE[17]), STR_60(CODE[17]), 
		 -> STR_59(CODE[17]), STR_58(CODE[7]), STR_57(CODE[7]), STR_56(CODE[6]), 
		 -> STR_55(CODE[6]), STR_54(CODE[17]), STR_53(CODE[5]), STR_52(CODE[5]), 
		 -> STR_51(CODE[5]), STR_50(CODE[5]), STR_49(CODE[3]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[4]), STR_41(CODE[17]), ssd1306_setpos@x(BANK0[1]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), CalculateGridSquare@grid(BANK2[7]), STR_89(CODE[14]), STR_88(CODE[7]), 
		 -> STR_87(CODE[6]), STR_86(CODE[12]), STR_85(CODE[17]), itoa@buffer(BANK2[12]), 
		 -> STR_84(CODE[5]), STR_83(CODE[5]), STR_82(CODE[7]), STR_81(CODE[7]), 
		 -> STR_80(CODE[8]), STR_79(CODE[5]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), 
		 -> STR_78(CODE[4]), STR_77(CODE[4]), STR_76(CODE[6]), STR_75(CODE[5]), 
		 -> STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[10]), GPS_time(BANK2[9]), 
		 -> STR_71(CODE[17]), STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), 
		 -> STR_67(CODE[7]), STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[17]), 
		 -> STR_63(CODE[7]), STR_62(CODE[7]), STR_61(CODE[17]), STR_60(CODE[17]), 
		 -> STR_59(CODE[17]), STR_58(CODE[7]), STR_57(CODE[7]), STR_56(CODE[6]), 
		 -> STR_55(CODE[6]), STR_54(CODE[17]), STR_53(CODE[5]), STR_52(CODE[5]), 
		 -> STR_51(CODE[5]), STR_50(CODE[5]), STR_49(CODE[3]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[4]), STR_41(CODE[17]), ssd1306_setpos@x(BANK0[1]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), CalculateGridSquare@grid(BANK2[7]), STR_89(CODE[14]), 
		 -> STR_88(CODE[7]), STR_87(CODE[6]), STR_86(CODE[12]), STR_85(CODE[17]), 
		 -> itoa@buffer(BANK2[12]), STR_84(CODE[5]), STR_83(CODE[5]), STR_82(CODE[7]), 
		 -> STR_81(CODE[7]), STR_80(CODE[8]), STR_79(CODE[5]), GPS_lon(BANK2[15]), 
		 -> GPS_lat(BANK2[15]), STR_78(CODE[4]), STR_77(CODE[4]), STR_76(CODE[6]), 
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[10]), 
		 -> GPS_time(BANK2[9]), STR_71(CODE[17]), STR_70(CODE[17]), STR_69(CODE[17]), 
		 -> STR_68(CODE[7]), STR_67(CODE[7]), STR_66(CODE[17]), STR_65(CODE[17]), 
		 -> STR_64(CODE[17]), STR_63(CODE[7]), STR_62(CODE[7]), STR_61(CODE[17]), 
		 -> STR_60(CODE[17]), STR_59(CODE[17]), STR_58(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[6]), STR_55(CODE[6]), STR_54(CODE[17]), STR_53(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[4]), STR_41(CODE[17]), 
		 -> ssd1306_setpos@x(BANK0[1]), STR_39(CODE[17]), STR_38(CODE[17]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    PIN_LNB_FAULT_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_FAULT_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LNB_QRG1_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_QRG1_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LNB_QRG2_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_QRG2_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ6_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ6_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ5_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ5_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ4_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ4_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ3_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ3_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_USART_RX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_USART_TX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_I2C_SDA_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_I2C_SDA_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_I2C_SCL_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_I2C_SCL_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED2	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED2_DEF(CODE[5]), 

    PIN_LED2_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED2_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_LNB_GOOD_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_LNB_GOOD_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED1	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED1_DEF(CODE[5]), 

    PIN_LED1_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED1_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED0	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED0_DEF(CODE[5]), 

    PIN_LED0_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED0_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED3	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED3_DEF(CODE[5]), 

    PIN_LED3_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED3_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_SI_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_SI_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SI5328_CS_CA_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SI5328_CS_CA_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SI5328_LOL_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SI5328_LOL_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SIO_CLK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SIO_DATA_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_LE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_CE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    setADF4351frequency@p	PTR const unsigned long  size(2) Largest target is 40
		 -> freq_table_27_OPT(CODE[40]), freq_table_27_26(CODE[40]), freq_table_25_25(CODE[40]), freq_table_25_24(CODE[40]), 

    g_i2c_bus.ops.setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    g_i2c_bus.ops.transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 2
		 -> i2c_transfer_native(), 

    PIN_USART_RX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_USART_RX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_RX_DEF(CODE[5]), 

    PIN_USART_TX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_USART_TX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_TX_DEF(CODE[5]), 

    PIN_LNB_QRG1.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_QRG1.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LNB_QRG1	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LNB_QRG1_DEF(CODE[5]), 

    PIN_LNB_QRG2.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_QRG2.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LNB_QRG2	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LNB_QRG2_DEF(CODE[5]), 

    PIN_SJ6.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ6.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ6	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SJ6_DEF(CODE[5]), 

    PIN_SJ5.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ5.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ5	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SJ5_DEF(CODE[5]), 

    PIN_SJ4.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ4.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ4	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SJ4_DEF(CODE[5]), 

    PIN_SJ3.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SJ3.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SJ3	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SJ3_DEF(CODE[5]), 

    PIN_I2C_SDA.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_I2C_SDA.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_I2C_SDA	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_I2C_SDA_DEF(CODE[5]), 

    PIN_I2C_SCL.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_I2C_SCL.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_I2C_SCL	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_I2C_SCL_DEF(CODE[5]), 

    PIN_LED_CPU_OK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_CPU_OK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_CPU_OK_DEF(CODE[5]), 

    PIN_SI5328_CS_CA.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SI5328_CS_CA.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SI5328_CS_CA	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SI5328_CS_CA_DEF(CODE[5]), 

    send_UBX_string@payload	PTR unsigned char  size(2) Largest target is 32
		 -> gps_config_data(BANK2[32]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), NULL(NULL[0]), 

    eval_gps@pe	PTR unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), NULL(NULL[0]), 

    eval_gps@ps	PTR unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), NULL(NULL[0]), 

    eval_gps@gpsbuf	PTR unsigned char  size(2) Largest target is 85
		 -> gpsbuf(BANK3[85]), 

    sp__CalculateGridSquare	PTR unsigned char  size(2) Largest target is 7
		 -> CalculateGridSquare@grid(BANK2[7]), 

    show_display@p	PTR unsigned char  size(2) Largest target is 12
		 -> itoa@buffer(BANK2[12]), 

    sp__memcpy	PTR void  size(2) Largest target is 240
		 -> eval_gps@elem(BANK1[240]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), show_display@old_GPS_time(BANK2[9]), 
		 -> show_display@old_GPS_lon(BANK2[15]), show_display@old_GPS_lat(BANK2[15]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 12
		 -> itoa@buffer(BANK2[12]), 

    print_string@s	PTR unsigned char  size(2) Largest target is 17
		 -> CalculateGridSquare@grid(BANK2[7]), STR_89(CODE[14]), STR_88(CODE[7]), STR_87(CODE[6]), 
		 -> STR_86(CODE[12]), STR_85(CODE[17]), itoa@buffer(BANK2[12]), STR_84(CODE[5]), 
		 -> STR_83(CODE[5]), STR_82(CODE[7]), STR_81(CODE[7]), STR_80(CODE[8]), 
		 -> STR_79(CODE[5]), GPS_lon(BANK2[15]), GPS_lat(BANK2[15]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_76(CODE[6]), STR_75(CODE[5]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_72(CODE[10]), GPS_time(BANK2[9]), STR_71(CODE[17]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[7]), 
		 -> STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[17]), STR_63(CODE[7]), 
		 -> STR_62(CODE[7]), STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[17]), 
		 -> STR_58(CODE[7]), STR_57(CODE[7]), STR_56(CODE[6]), STR_55(CODE[6]), 
		 -> STR_54(CODE[17]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[3]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[4]), STR_41(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 

    lcd_draw8x8@buffer	PTR unsigned char  size(1) Largest target is 8
		 -> print_char@map(BANK0[8]), 

    ssd1306_data@data	PTR unsigned char  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), 

    ssd1306_command@cmd	PTR unsigned char  size(2) Largest target is 27
		 -> ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 

    lcd_i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    lcd_init@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    read_reg@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    write_regset@set	PTR const struct . size(2) Largest target is 26
		 -> reg_set_LNB_LO(BANK2[24]), reg_set_univ_CKIN2_XAXB(CODE[24]), reg_set_univ_CKIN1_GPS(CODE[26]), 

    write_regset@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    check_si5328_status@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    PIN_LED_SI_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_SI_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_SI_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_SI_LOCK_DEF(CODE[5]), 

    PIN_SI5328_LOL.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SI5328_LOL.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SI5328_LOL	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SI5328_LOL_DEF(CODE[5]), 

    si5328_checkGPS@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    si5328_perform_ical@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    si5328_set_freq@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    si5328_init@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    set_reg@p	PTR unsigned char  size(2) Largest target is 24
		 -> reg_set_LNB_LO(BANK2[24]), 

    irq_set_handler@handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> t0_irq(), usart_rx_irq_handler(), 

    S1519$udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    g_irq_handler_info.udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1519$handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> t0_irq(), usart_rx_irq_handler(), 

    g_irq_handler_info.handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> t0_irq(), usart_rx_irq_handler(), 

    irq_set_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_LNB_status@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    PIN_LED_LNB_GOOD.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_LNB_GOOD.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_LNB_GOOD	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_LNB_GOOD_DEF(CODE[5]), 

    PIN_LNB_FAULT.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LNB_FAULT.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LNB_FAULT	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LNB_FAULT_DEF(CODE[5]), 

    lnb_do_configure@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    lnb_configure@i2c	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    i2c_transfer_native@bdata	PTR unsigned char  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    i2c_transfer_native@pmsg.data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    i2c_transfer_native@msg	PTR struct i2c_msg size(1) Largest target is 16
		 -> smbus8_read_byte@msg(BANK0[14]), smbus8_write_data@msg(BANK0[14]), smbus8_write_byte@msg(COMRAM[7]), i2c_probe_addr@msg(COMRAM[7]), 

    i2c_transfer_native@pmsg	PTR struct i2c_msg size(1) Largest target is 16
		 -> smbus8_read_byte@msg(BANK0[14]), smbus8_write_data@msg(BANK0[14]), smbus8_write_byte@msg(COMRAM[7]), i2c_probe_addr@msg(COMRAM[7]), 

    i2c_transfer_native@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    i2c_transfer_native@ctx	PTR struct i2c_data_native size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    i2c_read@data	PTR unsigned char  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    i2c_stop@ctx	PTR struct i2c_data_native size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    i2c_reset@ctx.ops.setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    i2c_reset@ctx.ops.transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 2
		 -> i2c_transfer_native(), 

    i2c_reset@ctx	PTR struct i2c_data_native size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    i2c_native_init@ctx.ops.setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    i2c_native_init@ctx.ops.transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 2
		 -> i2c_transfer_native(), 

    i2c_native_init@ctx	PTR struct i2c_data_native size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    PIN_SIO_DATA.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SIO_DATA.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_DATA_DEF(CODE[5]), 

    PIN_SIO_CLK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_SIO_CLK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_CLK_DEF(CODE[5]), 

    adf4351_write_reg5@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_write_reg4@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_write_reg3@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_write_reg2@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_write_reg1@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_write_reg0@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_setup@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_default@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_set_tune@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_set_mode@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    PIN_LED_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_LED_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_ADF_LOCK_DEF(CODE[5]), 

    PIN_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LOCK_DEF(CODE[5]), 

    adf4351_calc_counters@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    adf4351_set_freq@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    PIN_ADF_CE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_CE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_CE_DEF(CODE[5]), 

    S154gpio_pin_def$pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    PIN_ADF_LE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISA(SFR[1]), TRISC(SFR[1]), 

    S154gpio_pin_def$pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LE_DEF(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 240
		 -> g_adf4351(BANK3[55]), g_i2c_bus(BANK2[8]), eval_gps@elem(BANK1[240]), itoa@buffer(BANK2[12]), 
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), 

    adf4351_init@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK3[55]), 

    smbus8_read_byte@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    smbus8_read_byte@data	PTR unsigned char  size(1) Largest target is 1
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), 

    smbus8_read_byte@msg.data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    smbus8_write_data@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    smbus8_write_data@data	PTR const unsigned char  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 

    smbus8_write_data@msg.data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    smbus8_write_byte@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 

    msg.data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    i2c_probe_addr@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), 

    S26i2c_msg$data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    msg.data	PTR void  size(2) Largest target is 128
		 -> print_char@map(BANK0[8]), lcd_clear_screen@buf(BANK1[128]), ssd1306_setpos@data(BANK0[3]), ssd1306_init_commands(BANK3[27]), 
		 -> read_reg@val(COMRAM[1]), LNB_error(BANK0[1]), lnb_do_configure@value(BANK0[1]), smbus8_read_byte@reg(COMRAM[1]), 
		 -> smbus8_write_data@reg(COMRAM[1]), smbus8_write_byte@tmp(COMRAM[2]), NULL(NULL[0]), 

    S33i2c_driver_ops$setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    i2c_transfer@dev.setbaud	PTR FTN(PTR struct i2c_dev__,int ,)int  size(2) Largest target is 0

    S33i2c_driver_ops$transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 2
		 -> i2c_transfer_native(), 

    i2c_transfer@dev.transfer	PTR FTN(PTR struct i2c_dev__,PTR struct i2c_msg,int ,)int  size(2) Largest target is 2
		 -> i2c_transfer_native(), 

    i2c_transfer@msg	PTR struct i2c_msg size(1) Largest target is 16
		 -> smbus8_read_byte@msg(BANK0[14]), smbus8_write_data@msg(BANK0[14]), smbus8_write_byte@msg(COMRAM[7]), i2c_probe_addr@msg(COMRAM[7]), 

    i2c_transfer@dev	PTR struct i2c_dev__ size(2) Largest target is 8
		 -> g_i2c_bus(BANK2[8]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_check_ADF5341_status
    _main->_check_LNB_status
    _usart_init->___lldiv
    _set_reg27->_set_reg
    _CalculateGridSquare->___lldiv
    _calc_mixer_corr_value->___aodiv
    _adf4351_calc_counters->___lodiv
    ___lodiv->___omul
    _itoa->_memset
    _eeprom_setmode->_Eeprom_WriteByte
    _eeprom_getmode->_Eeprom_ReadByte
    _rx_usart->_rx_gps
    _rx_gps->_eval_gps
    _eval_gps->_strtol
    _strtol->___strtoxl
    ___strtoxl->_toupper
    _lnb_configure->_check_LNB_status
    _ssd1306_commandbyte->_smbus8_write_byte
    _smbus8_write_byte->_i2c_transfer
    _print_char->_lcd_draw8x8
    _lcd_draw8x8->_ssd1306_setpos
    _lcd_clear_screen->_ssd1306_setpos
    _ssd1306_setpos->_ssd1306_command
    _ssd1306_command->_smbus8_write_data
    _ssd1306_data->_smbus8_write_data
    _smbus8_write_data->_i2c_transfer
    _i2c_probe_addr->_i2c_transfer
    _init_timer->_irq_set_handler
    _init_gps->_send_UBX_string
    _putgps->_usart_putc
    _init_gpios->_check_RXTX
    _i2c_native_init->_i2c_reset
    _read_reg->_smbus8_read_byte
    _smbus8_read_byte->_i2c_transfer
    _i2c_transfer->_i2c_transfer_native
    _i2c_transfer_native->_i2c_stop
    _i2c_write->_i2c_wait_int
    _i2c_stop->_i2c_reset
    _i2c_reset->___lldiv
    ___lldiv->___lmul
    _i2c_start->_i2c_wait_int
    _i2c_read->_i2c_wait_int
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _stoa->_fputc
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _fputc->_usart_putc
    _abs->___aomod
    _atoi->___wmul
    ___wmul->___lwdiv
    _adf4351_set_mode->_adf4351_setup
    _adf4351_setup->_adf4351_write_reg0
    _adf4351_setup->_adf4351_write_reg1
    _adf4351_setup->_adf4351_write_reg2
    _adf4351_setup->_adf4351_write_reg3
    _adf4351_write_reg5->_adf4351_write_latch
    _adf4351_write_reg4->_adf4351_write_latch
    _adf4351_write_reg3->_adf4351_write_latch
    _adf4351_write_reg2->_adf4351_write_latch
    _adf4351_write_reg1->_adf4351_write_latch
    _adf4351_write_reg0->_adf4351_write_latch
    _adf4351_init->_memset

Critical Paths under _global_irq_handler in COMRAM

    _global_irq_handler->_usart_rx_irq_handler

Critical Paths under _main in BANK0

    _main->_secret_settings
    _si5328_init->_setQRG
    _si5328_checkGPS->_setQRG
    _setQRG->_si5328_set_freq
    _si5328_set_freq->_write_regset
    _write_regset->_printf
    _si5328_perform_ical->_printf
    _set_reg26->_printf
    _set_reg25->_printf
    _set_reg24->_printf
    _show_display->_print_string
    _setADF4351frequency->_adf4351_set_freq
    _adf4351_set_freq->_printf
    _secret_settings->_secret_settings_write
    _secret_settings_write->_lcd_settingsOK
    _lcd_settingsOK->_print_string
    _lnb_configure->_check_LNB_status
    _lnb_configure->_lnb_do_configure
    _lnb_do_configure->_printf
    _check_LNB_status->_printf
    _lcd_init->_print_string
    _print_string->_print_char
    _lcd_draw8x8->_ssd1306_setpos
    _lcd_clear_screen->_ssd1306_setpos
    _ssd1306_command->_smbus8_write_data
    _ssd1306_data->_smbus8_write_data
    _init_gps->_send_UBX_string
    _send_UBX_string->_printf
    _check_si5328_status->_printf
    _read_reg->_smbus8_read_byte
    _check_ADF5341_status->_printf
    _vfprintf->_vfpfcnvrt

Critical Paths under _global_irq_handler in BANK0

    None.

Critical Paths under _main in BANK1

    _show_display->_lcd_clear_screen
    _lcd_settingsOK->_lcd_clear_screen
    _rx_gps->_eval_gps
    _lcd_init->_lcd_clear_screen
    _init_gps->_send_UBX_string

Critical Paths under _global_irq_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_irq_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_irq_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_irq_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_irq_handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0 1732789
                                             65 BANK0      4     4      0
                       _adf4351_init
                   _adf4351_set_mode
                   _adf4351_set_tune
               _check_ADF5341_status
                   _check_LNB_status
                _check_si5328_status
                    _i2c_native_init
                         _init_gpios
                           _init_gps
                         _init_timer
                           _lcd_init
                      _lnb_configure
                           _rx_usart
                    _secret_settings
                _setADF4351frequency
                             _setQRG
                       _show_display
                    _si5328_checkGPS
                        _si5328_init
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           6     2      4    2704
                                             38 COMRAM     6     2      4
                            ___lldiv
                    _irq_set_handler
 ---------------------------------------------------------------------------------
 (1) _si5328_init                                          7     4      3  326970
                                             56 BANK0      7     4      3
                     _i2c_probe_addr
                             _printf
                             _setQRG
                  _smbus8_write_byte
                       _write_regset
 ---------------------------------------------------------------------------------
 (1) _si5328_checkGPS                                      3     0      3  300833
                                             56 BANK0      3     0      3
                             _printf
                             _setQRG
                       _write_regset
 ---------------------------------------------------------------------------------
 (2) _setQRG                                               5     5      0  221638
                                             51 BANK0      5     5      0
                    _si5328_set_freq
 ---------------------------------------------------------------------------------
 (3) _si5328_set_freq                                      4     0      4  221533
                                             47 BANK0      4     0      4
                             _printf
                          _set_reg24
                          _set_reg25
                          _set_reg26
                          _set_reg27
                _si5328_perform_ical
                       _write_regset
 ---------------------------------------------------------------------------------
 (2) _write_regset                                        11     4      7   47482
                                             36 BANK0     11     4      7
                             _printf
                  _smbus8_write_byte
 ---------------------------------------------------------------------------------
 (4) _si5328_perform_ical                                  3     0      3   45698
                                             36 BANK0      3     0      3
                             _printf
                  _smbus8_write_byte
 ---------------------------------------------------------------------------------
 (4) _set_reg27                                            0     0      0     542
                            _set_reg
 ---------------------------------------------------------------------------------
 (4) _set_reg26                                            0     0      0   31951
                             _printf
                            _set_reg
 ---------------------------------------------------------------------------------
 (4) _set_reg25                                            0     0      0   31951
                             _printf
                            _set_reg
 ---------------------------------------------------------------------------------
 (4) _set_reg24                                            0     0      0   31951
                             _printf
                            _set_reg
 ---------------------------------------------------------------------------------
 (5) _set_reg                                              7     7      0     542
                                             13 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _show_display                                         5     5      0  127207
                                             58 BANK0      5     5      0
                _CalculateGridSquare
                               _itoa
                   _lcd_clear_screen
                             _memcmp
                             _memcpy
                       _print_string
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _memcmp                                              12     6      6     865
                                             13 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _CalculateGridSquare                                 54    52      2    5333
                                             38 COMRAM    54    52      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _setADF4351frequency                                  8     8      0   81815
                                             54 BANK0      8     8      0
                   _adf4351_get_lock
                   _adf4351_set_freq
                             _printf
                        _read_switch
 ---------------------------------------------------------------------------------
 (2) _read_switch                                          7     7      0      92
                                             13 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (2) _adf4351_set_freq                                    18    12      6   49831
                                             36 BANK0     18    12      6
                            ___aldiv
                            ___lldiv
              _adf4351_calc_counters
                      _adf4351_setup
              _calc_mixer_corr_value
                             _printf
 ---------------------------------------------------------------------------------
 (3) _calc_mixer_corr_value                               32    28      4    3098
                                             39 COMRAM    32    28      4
                            ___aodiv
                             ___omul
                    _getGPSfrequency
 ---------------------------------------------------------------------------------
 (4) _getGPSfrequency                                      8     4      4      29
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _adf4351_calc_counters                               36    34      2    5646
                                             62 COMRAM    36    34      2
                             ___lmul
                            ___lodiv
                            ___lwdiv
                             ___omul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              24     8     16    1130
                                             13 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lodiv                                             25     9     16     412
                                             37 COMRAM    25     9     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     496
                                             13 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _adf4351_get_lock                                     5     3      2      90
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _secret_settings                                      2     2      0  149588
                                             63 BANK0      2     2      0
                    _clear_GPS_shift
                     _eeprom_getmode
                             _printf
              _secret_settings_write
 ---------------------------------------------------------------------------------
 (2) _secret_settings_write                                4     4      0  118041
                                             59 BANK0      4     4      0
                     _eeprom_setmode
                     _lcd_settingsOK
                        _read_switch
 ---------------------------------------------------------------------------------
 (3) _read_switch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_settingsOK                                       1     1      0  117780
                                             58 BANK0      1     1      0
                               _itoa
                   _lcd_clear_screen
                       _print_string
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 3     1      2    3783
                                             25 COMRAM     3     1      2
                            ___awdiv
                            ___awmod
                             _memset
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _eeprom_setmode                                       1     1      0     165
                                             16 COMRAM     1     1      0
                   _Eeprom_WriteByte
 ---------------------------------------------------------------------------------
 (4) _Eeprom_WriteByte                                     3     2      1     143
                                             13 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_getmode                                       0     0      0      45
                    _Eeprom_ReadByte
 ---------------------------------------------------------------------------------
 (3) _Eeprom_ReadByte                                      2     2      0      45
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _clear_GPS_shift                                      1     1      0      93
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rx_usart                                             2     2      0   16464
                                             79 COMRAM     2     2      0
                             _rx_gps
                         _usart_getc
 ---------------------------------------------------------------------------------
 (2) _usart_getc                                           6     4      2      23
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _rx_gps                                               4     2      2   16376
                                             75 COMRAM     4     2      2
                           _eval_gps
 ---------------------------------------------------------------------------------
 (3) _eval_gps                                           254   252      2   15511
                                             69 COMRAM     6     4      2
                                              0 BANK1    248   248      0
                               _atoi
                             _memcpy
                             _memset
                             _strchr
                             _strlen
                             _strtol
 ---------------------------------------------------------------------------------
 (4) _strtol                                               6     0      6    6434
                                             63 COMRAM     6     0      6
                          ___strtoxl
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___strtoxl                                           36    29      7    6071
                                             27 COMRAM    36    29      7
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    2292
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6    1967
                                             13 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _lnb_configure                                        7     4      3  148377
                                             42 BANK0      7     4      3
                   _check_LNB_status
                     _i2c_probe_addr
                   _lnb_do_configure
                             _printf
 ---------------------------------------------------------------------------------
 (2) _lnb_do_configure                                     6     3      3   59548
                                             36 BANK0      6     3      3
                             _printf
                   _smbus8_read_byte
                  _smbus8_write_byte
 ---------------------------------------------------------------------------------
 (2) _check_LNB_status                                     7     4      3   45033
                                             99 COMRAM     1     1      0
                                             36 BANK0      6     3      3
                             _printf
                   _smbus8_read_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             5     2      3  184704
                                             58 BANK0      5     2      3
                     _i2c_probe_addr
                   _lcd_clear_screen
                       _print_string
                             _printf
                    _ssd1306_command
                _ssd1306_commandbyte
 ---------------------------------------------------------------------------------
 (2) _ssd1306_commandbyte                                  1     1      0   14078
                                             98 COMRAM     1     1      0
                  _smbus8_write_byte
 ---------------------------------------------------------------------------------
 (3) _smbus8_write_byte                                   14     9      5   14047
                                             84 COMRAM    14     9      5
                       _i2c_transfer
 ---------------------------------------------------------------------------------
 (2) _print_string                                         8     3      5   85246
                                             50 BANK0      8     3      5
                _CalculateGridSquare (ARG)
                               _itoa (ARG)
                         _print_char
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _print_char                                          32    29      3   29780
                                             18 BANK0     32    29      3
                        _lcd_draw8x8
                             _memset
 ---------------------------------------------------------------------------------
 (4) _lcd_draw8x8                                          3     0      3   26741
                                             97 COMRAM     3     0      3
                       _ssd1306_data
                     _ssd1306_setpos
 ---------------------------------------------------------------------------------
 (2) _lcd_clear_screen                                   130   130      0   28720
                                              0 BANK1    130   130      0
                             _memset
                       _ssd1306_data
                     _ssd1306_setpos
 ---------------------------------------------------------------------------------
 (5) _ssd1306_setpos                                       5     4      1   13390
                                             96 COMRAM     1     0      1
                                             14 BANK0      4     4      0
                    _ssd1306_command
 ---------------------------------------------------------------------------------
 (6) _ssd1306_command                                      4     0      4   12988
                                             92 COMRAM     4     0      4
                  _smbus8_write_data
 ---------------------------------------------------------------------------------
 (5) _ssd1306_data                                         4     0      4   12988
                                             92 COMRAM     4     0      4
                  _smbus8_write_data
 ---------------------------------------------------------------------------------
 (7) _smbus8_write_data                                   22    14      8   12566
                                             84 COMRAM     8     0      8
                                              0 BANK0     14    14      0
                       _i2c_transfer
 ---------------------------------------------------------------------------------
 (2) _i2c_probe_addr                                      10     7      3   11925
                                             84 COMRAM    10     7      3
                       _i2c_transfer
 ---------------------------------------------------------------------------------
 (1) _init_timer                                           0     0      0     414
                    _irq_set_handler
 ---------------------------------------------------------------------------------
 (2) _irq_set_handler                                      5     1      4     414
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _init_gps                                             0     0      0   33111
                    _send_UBX_string
 ---------------------------------------------------------------------------------
 (2) _send_UBX_string                                     67    62      5   33111
                                             99 COMRAM     1     1      0
                                             36 BANK0      5     0      5
                                              0 BANK1     61    61      0
                             _printf
                             _putgps
 ---------------------------------------------------------------------------------
 (3) _putgps                                               1     1      0      69
                                             14 COMRAM     1     1      0
                         _usart_putc
 ---------------------------------------------------------------------------------
 (1) _init_gpios                                           3     3      0      46
                                             18 COMRAM     3     3      0
                         _check_RXTX
 ---------------------------------------------------------------------------------
 (2) _check_RXTX                                           5     5      0      46
                                             13 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _i2c_native_init                                      6     0      6    4926
                                             52 COMRAM     6     0      6
                          _i2c_reset
                             _memset
 ---------------------------------------------------------------------------------
 (1) _check_si5328_status                                  9     6      3   45423
                                             36 BANK0      9     6      3
                             _printf
                           _read_reg
 ---------------------------------------------------------------------------------
 (2) _read_reg                                             7     3      4   13512
                                             89 COMRAM     7     3      4
                   _smbus8_read_byte
 ---------------------------------------------------------------------------------
 (3) _smbus8_read_byte                                    19    14      5   13075
                                             84 COMRAM     5     0      5
                                              0 BANK0     14    14      0
                       _i2c_transfer
 ---------------------------------------------------------------------------------
 (4) _i2c_transfer                                         5     0      5   11154
                                             79 COMRAM     5     0      5
                _i2c_transfer_native *
 ---------------------------------------------------------------------------------
 (5) _i2c_transfer_native                                 25    20      5    9919
                                             54 COMRAM    25    20      5
                           _i2c_read
                          _i2c_reset
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (6) _i2c_write                                            5     3      2     788
                                             17 COMRAM     5     3      2
                       _i2c_wait_int
 ---------------------------------------------------------------------------------
 (6) _i2c_stop                                             2     0      2    3286
                                             52 COMRAM     2     0      2
                          _i2c_reset
                       _i2c_wait_int
 ---------------------------------------------------------------------------------
 (7) _i2c_reset                                           14    12      2    2504
                                             38 COMRAM    14    12      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    2101
                                             25 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _i2c_start                                            9     3      6    1126
                                             17 COMRAM     9     3      6
                       _i2c_wait_int
 ---------------------------------------------------------------------------------
 (6) _i2c_read                                             7     3      4     943
                                             17 COMRAM     7     3      4
                       _i2c_wait_int
 ---------------------------------------------------------------------------------
 (7) _i2c_wait_int                                         4     0      4     571
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _check_ADF5341_status                                 6     4      2   31595
                                             99 COMRAM     1     1      0
                                             36 BANK0      5     3      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              13     3     10   31409
                                             23 BANK0     13     3     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             7     2      5   27338
                                             92 COMRAM     7     2      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           52    48      4   26757
                                             75 COMRAM    17    13      4
                                              0 BANK0     23    23      0
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
                               _stoa
                            _strncmp
                               _xtoa
 ---------------------------------------------------------------------------------
 (6) _xtoa                                                39    28     11    7637
                                             36 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (7) _toupper                                              8     6      2     602
                                             19 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (8) _islower                                              6     4      2     191
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _isupper                                              6     4      2     191
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _isalpha                                              6     4      2     281
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strncmp                                             11     5      6    1405
                                             13 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _stoa                                                22    18      4    3249
                                             18 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    8503
                                             39 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    5157
                                             25 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2    1030
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1867
                                             18 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                4     0      4    1367
                                             14 COMRAM     4     0      4
                         _usart_putc
 ---------------------------------------------------------------------------------
 (10) _usart_putc                                          1     1      0      38
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     183
                                             31 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     613
                                             13 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16    1525
                                             13 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    2155
                                             26 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              7     5      2     349
                                             13 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     371
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     782
                                             20 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _adf4351_set_tune                                     8     2      6     583
                                             13 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _adf4351_set_mode                                     6     2      4    8651
                                             39 COMRAM     6     2      4
                      _adf4351_setup
                 _adf4351_write_reg2
                 _adf4351_write_reg4
 ---------------------------------------------------------------------------------
 (3) _adf4351_setup                                        2     0      2    5810
                                             37 COMRAM     2     0      2
                 _adf4351_write_reg0
                 _adf4351_write_reg1
                 _adf4351_write_reg2
                 _adf4351_write_reg3
                 _adf4351_write_reg4
                 _adf4351_write_reg5
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg5                                  11     9      2     713
                                             25 COMRAM    11     9      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg4                                  11     9      2    1109
                                             25 COMRAM    11     9      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg3                                  12    10      2     883
                                             25 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg2                                  12    10      2    1211
                                             25 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg1                                  12    10      2     781
                                             25 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (4) _adf4351_write_reg0                                  12    10      2     747
                                             25 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_latch                                 12     8      4     524
                                             13 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (1) _adf4351_init                                         5     3      2    2670
                                             25 COMRAM     5     3      2
                    _adf4351_default
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                              12     6      6    2087
                                             13 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _adf4351_default                                      2     0      2     400
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _global_irq_handler                                  6     6      0     176
                                              7 COMRAM     6     6      0
                             _t0_irq *
               _usart_rx_irq_handler *
 ---------------------------------------------------------------------------------
 (16) _usart_rx_irq_handler                                7     5      2     174
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (16) _t0_irq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adf4351_init
     _adf4351_default
     _memset
   _adf4351_set_mode
     _adf4351_setup
       _adf4351_write_reg0
         _adf4351_write_latch
       _adf4351_write_reg1
         _adf4351_write_latch
       _adf4351_write_reg2
         _adf4351_write_latch
       _adf4351_write_reg3
         _adf4351_write_latch
       _adf4351_write_reg4
         _adf4351_write_latch
       _adf4351_write_reg5
         _adf4351_write_latch
     _adf4351_write_reg2
       _adf4351_write_latch
     _adf4351_write_reg4
       _adf4351_write_latch
   _adf4351_set_tune
   _check_ADF5341_status
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
   _check_LNB_status
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _smbus8_read_byte
       _i2c_transfer
         _i2c_transfer_native *
           _i2c_read
             _i2c_wait_int
           _i2c_reset
             ___lldiv
               ___lmul (ARG)
           _i2c_start
             _i2c_wait_int
           _i2c_stop
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_wait_int
           _i2c_write
             _i2c_wait_int
   _check_si5328_status
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _read_reg
       _smbus8_read_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
   _i2c_native_init
     _i2c_reset
       ___lldiv
         ___lmul (ARG)
     _memset
   _init_gpios
     _check_RXTX
   _init_gps
     _send_UBX_string
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _putgps
         _usart_putc
   _init_timer
     _irq_set_handler
   _lcd_init
     _i2c_probe_addr
       _i2c_transfer
         _i2c_transfer_native *
           _i2c_read
             _i2c_wait_int
           _i2c_reset
             ___lldiv
               ___lmul (ARG)
           _i2c_start
             _i2c_wait_int
           _i2c_stop
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_wait_int
           _i2c_write
             _i2c_wait_int
     _lcd_clear_screen
       _memset
       _ssd1306_data
         _smbus8_write_data
           _i2c_transfer
             _i2c_transfer_native *
               _i2c_read
                 _i2c_wait_int
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_start
                 _i2c_wait_int
               _i2c_stop
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_wait_int
               _i2c_write
                 _i2c_wait_int
       _ssd1306_setpos
         _ssd1306_command
           _smbus8_write_data
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
     _print_string
       _CalculateGridSquare (ARG)
         ___lldiv
           ___lmul (ARG)
         ___lmul
       _itoa (ARG)
         ___awdiv
         ___awmod
         _memset
       _print_char (ARG)
         _lcd_draw8x8
           _ssd1306_data
             _smbus8_write_data
               _i2c_transfer
                 _i2c_transfer_native *
                   _i2c_read
                     _i2c_wait_int
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_start
                     _i2c_wait_int
                   _i2c_stop
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_wait_int
                   _i2c_write
                     _i2c_wait_int
           _ssd1306_setpos
             _ssd1306_command
               _smbus8_write_data
                 _i2c_transfer
                   _i2c_transfer_native *
                     _i2c_read
                       _i2c_wait_int
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_start
                       _i2c_wait_int
                     _i2c_stop
                       _i2c_reset
                         ___lldiv
                           ___lmul (ARG)
                       _i2c_wait_int
                     _i2c_write
                       _i2c_wait_int
         _memset
       _printf (ARG)
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _strlen (ARG)
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _ssd1306_command
       _smbus8_write_data
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
     _ssd1306_commandbyte
       _smbus8_write_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
   _lnb_configure
     _check_LNB_status
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _smbus8_read_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
     _i2c_probe_addr
       _i2c_transfer
         _i2c_transfer_native *
           _i2c_read
             _i2c_wait_int
           _i2c_reset
             ___lldiv
               ___lmul (ARG)
           _i2c_start
             _i2c_wait_int
           _i2c_stop
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_wait_int
           _i2c_write
             _i2c_wait_int
     _lnb_do_configure
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _smbus8_read_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
       _smbus8_write_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
   _rx_usart
     _rx_gps
       _eval_gps
         _atoi
           ___wmul
             ___lwdiv (ARG)
           _isdigit
           _isspace
         _memcpy
         _memset
         _strchr
         _strlen
         _strtol
           ___strtoxl
             ___lmul
             _isalpha
             _isdigit
             _isspace
             _toupper
               _islower
           _strlen (ARG)
     _usart_getc
   _secret_settings
     _clear_GPS_shift
     _eeprom_getmode
       _Eeprom_ReadByte
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _secret_settings_write
       _eeprom_setmode
         _Eeprom_WriteByte
       _lcd_settingsOK
         _itoa
           ___awdiv
           ___awmod
           _memset
         _lcd_clear_screen
           _memset
           _ssd1306_data
             _smbus8_write_data
               _i2c_transfer
                 _i2c_transfer_native *
                   _i2c_read
                     _i2c_wait_int
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_start
                     _i2c_wait_int
                   _i2c_stop
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_wait_int
                   _i2c_write
                     _i2c_wait_int
           _ssd1306_setpos
             _ssd1306_command
               _smbus8_write_data
                 _i2c_transfer
                   _i2c_transfer_native *
                     _i2c_read
                       _i2c_wait_int
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_start
                       _i2c_wait_int
                     _i2c_stop
                       _i2c_reset
                         ___lldiv
                           ___lmul (ARG)
                       _i2c_wait_int
                     _i2c_write
                       _i2c_wait_int
         _print_string
           _CalculateGridSquare (ARG)
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _itoa (ARG)
             ___awdiv
             ___awmod
             _memset
           _print_char (ARG)
             _lcd_draw8x8
               _ssd1306_data
                 _smbus8_write_data
                   _i2c_transfer
                     _i2c_transfer_native *
                       _i2c_read
                         _i2c_wait_int
                       _i2c_reset
                         ___lldiv
                           ___lmul (ARG)
                       _i2c_start
                         _i2c_wait_int
                       _i2c_stop
                         _i2c_reset
                           ___lldiv
                             ___lmul (ARG)
                         _i2c_wait_int
                       _i2c_write
                         _i2c_wait_int
               _ssd1306_setpos
                 _ssd1306_command
                   _smbus8_write_data
                     _i2c_transfer
                       _i2c_transfer_native *
                         _i2c_read
                           _i2c_wait_int
                         _i2c_reset
                           ___lldiv
                             ___lmul (ARG)
                         _i2c_start
                           _i2c_wait_int
                         _i2c_stop
                           _i2c_reset
                             ___lldiv
                               ___lmul (ARG)
                           _i2c_wait_int
                         _i2c_write
                           _i2c_wait_int
             _memset
           _printf (ARG)
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _strlen (ARG)
       _read_switch
   _setADF4351frequency
     _adf4351_get_lock
     _adf4351_set_freq
       ___aldiv
       ___lldiv
         ___lmul (ARG)
       _adf4351_calc_counters
         ___lmul
         ___lodiv
           ___omul (ARG)
         ___lwdiv
         ___omul
         ___wmul
           ___lwdiv (ARG)
       _adf4351_setup
         _adf4351_write_reg0
           _adf4351_write_latch
         _adf4351_write_reg1
           _adf4351_write_latch
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg3
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
         _adf4351_write_reg5
           _adf4351_write_latch
       _calc_mixer_corr_value
         ___aodiv
         ___omul
         _getGPSfrequency
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _read_switch
   _setQRG
     _si5328_set_freq
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _set_reg24
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _set_reg
       _set_reg25
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _set_reg
       _set_reg26
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _set_reg
       _set_reg27
         _set_reg
       _si5328_perform_ical
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _smbus8_write_byte
           _i2c_transfer
             _i2c_transfer_native *
               _i2c_read
                 _i2c_wait_int
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_start
                 _i2c_wait_int
               _i2c_stop
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_wait_int
               _i2c_write
                 _i2c_wait_int
       _write_regset
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _smbus8_write_byte
           _i2c_transfer
             _i2c_transfer_native *
               _i2c_read
                 _i2c_wait_int
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_start
                 _i2c_wait_int
               _i2c_stop
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_wait_int
               _i2c_write
                 _i2c_wait_int
   _show_display
     _CalculateGridSquare
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _itoa
       ___awdiv
       ___awmod
       _memset
     _lcd_clear_screen
       _memset
       _ssd1306_data
         _smbus8_write_data
           _i2c_transfer
             _i2c_transfer_native *
               _i2c_read
                 _i2c_wait_int
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_start
                 _i2c_wait_int
               _i2c_stop
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_wait_int
               _i2c_write
                 _i2c_wait_int
       _ssd1306_setpos
         _ssd1306_command
           _smbus8_write_data
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
     _memcmp
     _memcpy
     _print_string
       _CalculateGridSquare (ARG)
         ___lldiv
           ___lmul (ARG)
         ___lmul
       _itoa (ARG)
         ___awdiv
         ___awmod
         _memset
       _print_char (ARG)
         _lcd_draw8x8
           _ssd1306_data
             _smbus8_write_data
               _i2c_transfer
                 _i2c_transfer_native *
                   _i2c_read
                     _i2c_wait_int
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_start
                     _i2c_wait_int
                   _i2c_stop
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_wait_int
                   _i2c_write
                     _i2c_wait_int
           _ssd1306_setpos
             _ssd1306_command
               _smbus8_write_data
                 _i2c_transfer
                   _i2c_transfer_native *
                     _i2c_read
                       _i2c_wait_int
                     _i2c_reset
                       ___lldiv
                         ___lmul (ARG)
                     _i2c_start
                       _i2c_wait_int
                     _i2c_stop
                       _i2c_reset
                         ___lldiv
                           ___lmul (ARG)
                       _i2c_wait_int
                     _i2c_write
                       _i2c_wait_int
         _memset
       _printf (ARG)
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _strlen (ARG)
     _strlen
   _si5328_checkGPS
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _setQRG
       _si5328_set_freq
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _set_reg24
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg25
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg26
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg27
           _set_reg
         _si5328_perform_ical
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _smbus8_write_byte
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
         _write_regset
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _smbus8_write_byte
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
     _write_regset
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _smbus8_write_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
   _si5328_init
     _i2c_probe_addr
       _i2c_transfer
         _i2c_transfer_native *
           _i2c_read
             _i2c_wait_int
           _i2c_reset
             ___lldiv
               ___lmul (ARG)
           _i2c_start
             _i2c_wait_int
           _i2c_stop
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_wait_int
           _i2c_write
             _i2c_wait_int
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
               ___lwdiv (ARG)
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _setQRG
       _si5328_set_freq
         _printf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                   ___lwdiv (ARG)
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
         _set_reg24
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg25
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg26
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _set_reg
         _set_reg27
           _set_reg
         _si5328_perform_ical
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _smbus8_write_byte
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
         _write_regset
           _printf
             _vfprintf
               _vfpfcnvrt
                 _atoi
                   ___wmul
                     ___lwdiv (ARG)
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
           _smbus8_write_byte
             _i2c_transfer
               _i2c_transfer_native *
                 _i2c_read
                   _i2c_wait_int
                 _i2c_reset
                   ___lldiv
                     ___lmul (ARG)
                 _i2c_start
                   _i2c_wait_int
                 _i2c_stop
                   _i2c_reset
                     ___lldiv
                       ___lmul (ARG)
                   _i2c_wait_int
                 _i2c_write
                   _i2c_wait_int
     _smbus8_write_byte
       _i2c_transfer
         _i2c_transfer_native *
           _i2c_read
             _i2c_wait_int
           _i2c_reset
             ___lldiv
               ___lmul (ARG)
           _i2c_start
             _i2c_wait_int
           _i2c_stop
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_wait_int
           _i2c_write
             _i2c_wait_int
     _write_regset
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
                 ___lwdiv (ARG)
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
       _smbus8_write_byte
         _i2c_transfer
           _i2c_transfer_native *
             _i2c_read
               _i2c_wait_int
             _i2c_reset
               ___lldiv
                 ___lmul (ARG)
             _i2c_start
               _i2c_wait_int
             _i2c_stop
               _i2c_reset
                 ___lldiv
                   ___lmul (ARG)
               _i2c_wait_int
             _i2c_write
               _i2c_wait_int
   _usart_init
     ___lldiv
       ___lmul (ARG)
     _irq_set_handler

 _global_irq_handler (ROOT)
   _t0_irq *
   _usart_rx_irq_handler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      80      13       50.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      D9      11       84.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F4       9       95.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F8     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     45      69       5       82.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     64      71       1       89.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     427      15        0.0%
DATA                 0      0     427       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri May 29 10:59:57 2020

            _PIN_LED_LNB_GOOD_DEF 7B87                 ??_getGPSfrequency 0012  
           __end_of_adf4351_setup 6DBC                    _out_freq_table 7A31  
               i2c_probe_addr@dev 0055         adf4351_calc_counters@rest 004D  
               i2c_probe_addr@msg 0058          __end_of_Eeprom_WriteByte 7102  
                     _SSPSTATbits 000FC7                                _LO 0207  
                    ___awdiv@sign 0013                i2c_probe_addr@addr 0057  
             ___wmul@multiplicand 0017                       __CFG_BORV$3 000000  
                  _PIN_LED_CPU_OK 7A61          __size_of_secret_settings 0052  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
           print_string@underline 00B6          __end_of_adf4351_set_freq 2CF6  
        __end_of_adf4351_set_mode 5FBC                               l208 6380  
                             l180 5B22                               l239 3A22  
                             l184 6DE2                               l185 6DBE  
                             l194 6106                               l178 5B12  
                             l267 504A                               l196 6136  
                             l518 4F76                               l712 035A  
                             l716 03E8                               l733 07BC  
                             l725 0684                               l830 370E  
                             l486 568A                               l831 3714  
                             l719 048E                               l832 371E  
                             l825 367E                               l683 0032  
        __end_of_adf4351_set_tune 6D72                               l871 3BF0  
                             l792 293C                               l688 00EA  
                             l849 3852                               l794 2938  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                     __CFG_WDTPS$ 000018                       lcd_init@i2c 00BA  
                             _abs 7210          __size_of_clear_GPS_shift 0044  
                             _pad 6224      __size_of_i2c_transfer_native 01E4  
                   _font8x8_basic 7729                       lcd_init@res 00BD  
                    ___awmod@sign 0013                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    lcd_draw8x8@x 0063                      lcd_draw8x8@y 0064  
                _PIN_LED_ADF_LOCK 7A71           __end_of_irq_set_handler 713C  
                  read_switch@rb1 0011                    read_switch@rb2 0012  
                  read_switch@rb3 0013                    read_switch@rb4 0014  
                    __CFG_LVP$OFF 000000                   _gps_config_data 021A  
                 _PIN_LED_SI_LOCK 7A65                      __CFG_WDT$OFF 000000  
                            l1101 41D0                              l1114 4472  
                            l1115 4482                              ?_abs 0020  
                            l2007 6A50                              l1119 45FA  
                            l2222 444C                              l1423 4910  
                            l1272 743A                              l1442 3438  
                            l1098 410C                              l1444 3440  
                            l2325 6D1E                              l2191 7238  
                            l1383 6252                              l1543 65EE  
                            l1279 70F8                              l1394 324C  
                            l2370 2286                              l2371 22B4  
                            l1396 3254                              l2377 22BC  
               ??_si5328_checkGPS 0064                              l1954 574A  
                            ?_pad 001A            ??_check_ADF5341_status 00A6  
                            l8031 668C                              l8041 66CC  
                            l8033 669A                              l8211 4652  
                            l6621 4AFA                              l6613 4A90  
                            l8221 46D2                              l7421 64A0  
                            l6607 4A2C                              l7431 56C4  
                            l6641 68C4                              l7409 70E8  
                            l6801 651E                              l7353 6620  
                            l7433 56D8                              l7417 647C  
                            l6627 4B10                              l6619 4AC8  
                            l7443 5734                              l7365 6E5A  
                            l7373 6E7A                              l6645 68D8  
                            l7453 6A1E                              l9231 6DFA  
                            l6807 6534                              l6823 6566  
                            l7703 5788                              l7455 6A26  
                            l6681 3CBC                              l9241 6108  
                            l7385 718E                              l6809 653C  
                            l7465 6A46                              l6675 3C38  
                            l9251 6146                              l9323 69FE  
                            l9315 69EA                              l6827 6574  
                            l6819 655C                              l6843 67FC  
                            l7715 57C2                              l7731 5810  
                            l9413 74C6                              l7717 57CE  
                            l7709 57A0                              l6679 3C8C  
                            l9327 74EE                              l9431 6F20  
                            l9183 65A0                              l9423 6C04  
                            l6863 6842                              l6855 682A  
                            l6847 680A                              l6839 67F0  
                            l7735 5826                              l7727 5802  
                            l6689 3D30                              l9185 65AC  
                            l9361 3920                              l6849 6812  
                            l9443 715C                              l9267 6184  
                            l9195 65E0                              l9371 395A  
                            l9339 386E                              l6795 650E  
                            l6859 6834                              l9621 42C4  
                            l9541 47F2                              l9533 47B8  
                            l9429 6F1C                              l9373 396C  
                            l9357 3904                              l7685 7432  
                            l9607 7048                              l9551 484E  
                            l9527 4790                              l9439 7146  
                            l9391 39DC                              l9375 3980  
                            l9383 39AA                              l9641 438C  
                            l9473 624A                              l9393 39E0  
                            l7873 6BBC                              l9635 4342  
                            l9619 42C0                              l9539 47DE  
                            l9555 4864                              l9571 4B46  
                            l9483 62A0                              l9475 625C  
                            l9715 33DA                              l9731 48D4  
                            l9803 3534                              l9811 35AA  
                            l9645 43D8                              l9637 434A  
                            l9629 4332                              l9581 4B98  
                            l9469 623C                              l9741 4926  
                            l9639 4350                              l9559 488A  
                            l9591 4BF6                              l9575 4B6A  
                            l9479 6274                              l9719 33F2  
                            l9399 39FE                              l9681 326E  
                            l9745 493E                              l9913 1504  
                            l9595 4C1C                              l9587 4BE0  
                            l9579 4B84                              l9667 3230  
                            l9763 49CA                              l9755 4998  
                            l9827 361E                              l9915 1520  
                            l9685 327E                              l9749 495C  
                            l9837 5CAE                              l9781 3484  
                            l9917 152C                              l9695 3376  
                            l9759 49B2                              l9839 5CBC  
                            l9775 3454                              l9935 160E  
                            STR_1 7CD6                              STR_2 7EF0  
                            l9881 1456                              l9873 1442  
                            STR_3 7F3D                              STR_4 7D2B  
                            l9971 181E                              l9947 170C  
                            l9875 1444                              STR_5 7CA4  
                            STR_6 7CBD                              l9789 34A6  
                            l9957 1766                              l9893 1462  
                            l9885 145A                              l9877 1452  
                            STR_7 7BCD                              STR_8 7F7B  
                            l9991 1954                              STR_9 7D63  
                            l9985 191C                              l9897 146C  
                            l9889 145E                              l9995 195E  
                            l9899 14AC                              _PIE1 000F9D  
                            _PIE2 000FA0                              u7100 6816  
                            u7040 6540                              u8211 56A4  
                            u8230 56DC                              u8170 70FC  
                            u8500 743E                              u8260 6A2A  
                            u9300 4CB2                              u8181 6476  
                            u9310 4CB4                              u9150 66BA  
                            u9320 4CEE                      _si5328locked 00D5  
                            u9250 46CA                              u9330 4CF0  
                            u8540 57D2                              u9340 4D2A  
                            u9270 475C                              u9350 4D2C  
                            u9280 4C76                              u9290 4C78  
         adf4351_write_latch@mask 0016                   __end_of_PIN_SJ3 7A5D  
                 __end_of_PIN_SJ4 7A5B                   __end_of_PIN_SJ5 7A59  
                 __end_of_PIN_SJ6 7A57                   _cpu_blink_timer 00CB  
                            abs@a 0020             __end_of_PIN_LNB_FAULT 7A6D  
                            _dbuf 02B9                              _atoi 42AE  
                            _main 4104                              _dtoa 31DA  
                            _itoa 6600                      lcd_init@addr 00BC  
                            _prec 0065                              _nout 02AE  
                            pad@i 0021                              pad@p 001E  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 0023                              fsr2l 000FD9  
                            _stoa 48AC                              btemp 0072  
                            _xtoa 341C            __end_of_PIN_SI5328_LOL 7A69  
                 ?_lcd_settingsOK 0001                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                  _PIN_LED_LNB_GOOD 7A69  
          __end_of_out_freq_table 7A45               lcd_clear_screen@buf 0100  
                    ___param_bank 000000               lcd_clear_screen@row 0181  
                   ?_i2c_wait_int 000E                     show_display@p 00BD  
          __end_of_PIN_LED_CPU_OK 7A63           __size_of_ssd1306_setpos 003C  
                           ??_abs 0022                  lnb_configure@i2c 00AA  
                           ??_pad 0020       __end_of_PIN_LED_SI_LOCK_DEF 7BAA  
                lnb_configure@res 00AF                     ?_i2c_transfer 0050  
  __size_of_calc_mixer_corr_value 045E                             l10001 1974  
                           l10025 6CA4                             l10121 2206  
                           l10027 6CC2                             l10107 21CE  
                           l11101 3A68                             l10061 4D8C  
                           l10053 4D6C                             l10205 2444  
                           l10141 2262                             l10125 220E  
                           l10207 2454                             l10119 21F4  
                           l10321 5504                 ??_si5328_set_freq 0064  
                           l10075 4E24                             l10067 4D90  
                           l10155 22A2                             l10147 2276  
                           l10331 5530                             l10173 2352  
                           l10165 231A                             l11037 0FE0  
                           l10405 548E                             l11135 3B1E  
                           l11055 1168                             l10343 5564  
                           l10327 551E                             l10511 5A42  
                           l11241 5F72                             l11225 58C0  
                           l11145 3B60                             l11129 3AF2  
                           l10193 2412                             l10097 218C  
                           l10337 5548                             l10417 54B0  
                           l10433 54D2                             l10505 59C8  
                           l11251 6D38                             l11411 4F6A  
                           l11403 4F42                             l11163 3BCE  
                           l11139 3B44                             l10531 6ADA  
                           l11323 73EE                             l10611 2538  
                           l10355 5586                             l10371 55A8  
                           l10427 54C4                             l10451 5372  
                           l11229 58FE                             l11157 3BAC  
                           l10541 6408                             l10189 23FC  
                           l11501 01A2                             l10365 559A  
                           l10461 539C                             l10445 5358  
                           l10509 5A38                             l11341 566A  
                           l11415 4F72                             l11159 3BB6  
                           l10527 6AD0                             l10199 242E  
                           l11183 301C                             l10607 24DA  
                           l11511 01E6                             l11503 01A6  
                           l10383 542E                             l10455 5384  
                           l11343 5690                             l11097 3A5C  
                           l10545 644E                             l11281 6340  
                           l11601 04E4                             l11521 022A  
                           l11513 01EA                             l10393 545A  
                           l10803 2B6C                             l11523 022E  
                           l10467 53B8                             l11363 61D8  
                           l11429 5B60                             l10733 298A  
                           l11701 6A7C                             l11533 0298  
                           l11509 01CE                             l11541 02B6  
                           l10389 5448                             l11447 5BC0  
                           l10671 279E                             l11703 6A82  
                           l10807 2B9E                             l11631 0604  
                           l11615 0558                             l11607 04F4  
                           l11535 02B0                             l11519 0212  
                           l10399 5472                             l10479 53DA  
                           l10495 53FC                             l11561 02E8  
                           l11473 00D2                             l10489 53EE  
                           l11395 4EFC                             l10675 27B2  
                           l11707 6A88                             l10595 1D54  
                           l11723 4492                             l11643 06A0  
                           l11733 44AA                             l11485 013E  
                           l11813 420E                             l10855 5062  
                           l10695 2882                             l10679 27C4  
                           l10791 2AE0                             l11743 44CC  
                           l11727 449C                             l11639 0648  
                           l11591 0476                             l11575 0342  
                           l11831 427E                             l10961 379E  
                           l10785 2A8C                             l11753 45A6  
                           l11585 03D0                             l11577 03A4  
                           l10875 525C                             l10971 37D0  
                           l10947 375A                             l10891 3668  
                           l10883 364A                             l11587 0456  
                           l11499 017E                             l10869 5200  
                           l10877 5260                             l10957 3792  
                           l11757 45C0                             l11677 084C  
                           l11669 07A4                             l10895 3676  
                           l10977 37D8                             l11697 6A68  
                           l10995 380E     __end_of_calc_mixer_corr_value 1E02  
                 __end_of___aldiv 5838                   __end_of___aodiv 48AC  
                           ?_atoi 001B                             ?_main 0001  
                           ?_dtoa 0028                   __end_of___aomod 4C3E  
               _smbus8_write_data 6C42                             ?_itoa 001A  
                 __end_of___awdiv 657E                             _EEADR 000FA9  
                           STR_10 7D03                             STR_11 7D51  
                           STR_20 7EA5                             STR_12 7E95  
                           STR_21 7D51                             STR_13 7C14  
                           STR_22 7E95                             STR_30 7F18  
                           STR_14 7ED3                             STR_23 7BF4  
                           STR_15 7EA5                             STR_31 7D17  
                           STR_24 7ED3                             STR_16 7D51  
                           STR_40 7D3F                             STR_32 7C6F  
                           STR_17 7E95                             STR_25 7F49  
                           STR_33 7F0B                             STR_41 7DA8  
                           STR_42 7FEB                             STR_50 7FD9  
                           STR_26 7F72                             STR_34 7F54  
                           STR_18 7BF4                             STR_19 7ED3  
                           STR_51 7FDE                             STR_27 7EC4  
                           STR_43 7E41                             STR_35 7C53  
                           STR_52 7FD9                             STR_28 7F31  
                           STR_60 7E1F                             STR_44 7D97  
                           STR_36 7CEE                   __end_of___awmod 684C  
                           STR_61 7D86                             STR_53 7FDE  
                           STR_29 7F69                             STR_45 7E0E  
                           STR_37 7D75                             STR_70 7D86  
                           STR_62 7F83                             STR_38 7E74  
                           STR_46 7DDB                             STR_54 7DB9  
                           STR_71 7D86                             STR_55 7FAD  
                           STR_63 7F91                             STR_39 7E63  
                           STR_47 7DCA                             STR_80 7D8F  
                           STR_64 7D86                             STR_56 7FBF  
                           STR_72 7F5F                             STR_48 7DEC  
                           STR_49 7F2E                             STR_73 7FE7  
                           STR_57 7F98                             STR_81 7F8A  
                           STR_65 7E30                             STR_58 7E6D  
                           STR_74 7FEF                             STR_82 7FA6  
                           STR_90 7EB5                             STR_66 7DFD  
                           STR_67 7F83                             STR_83 7FCF  
                           STR_75 7FC5                             STR_59 7D86  
                           STR_91 7C8A                             STR_92 7D84  
                           STR_68 7F91                             STR_84 7FCA  
                           STR_76 7FB3                             STR_69 7D86  
                           STR_77 7FE3                             STR_85 7E52  
                           STR_93 7C34                             STR_78 7FEF  
                           STR_86 7F25                             STR_94 7EFE  
                           STR_79 7FD4                             STR_87 7FB9  
                           STR_95 7E85                             STR_96 7FF6  
                           STR_88 7F9F                             STR_89 7EE2  
                           STR_98 7FF6                             ?_stoa 0013  
               _smbus8_write_byte 6ED0       check_si5328_status@lastlock 00E6  
                 __end_of___lldiv 6600                       i2c_read@ack 0014  
                           u11100 72FA                             u11020 721E  
                           u11110 72FC                             u11030 72CA  
                           u11040 72CC                             u11050 71D6  
                           u11300 4316                             u11220 4B9C  
                           u11060 71D8                             u12020 1796  
                           u12100 4E10                             u11141 47BE  
                           u11310 432E                             u11070 6D06  
                           u11160 47F6                             u11400 3202  
                           u11080 6D08                             u12040 1872  
                           u10520 5B00                             _T0CON 000FD5  
                           u11330 4370                             u11410 3204  
                           u11307 430C                             u10515 5AB6  
                 __end_of___lodiv 576C                             u11260 7044  
                           u11340 43C0                             u11500 33B4  
                           u13100 5A60                   ___awdiv@divisor 0010  
                           u11350 4400                             u11510 33B8  
                           u10550 6DEA                             u12134 4E34  
                           u12135 4E30                             ?_xtoa 0025  
                           u11360 441C                             u11280 42E8  
                           u11440 3242                             u11600 4952  
                           u10640 6376                             u10800 392C  
                           u12320 22FA                             u13040 53C4  
                           u11337 4366                             u11370 441E  
                           u11530 33C4                             u11610 497C  
                           u10490 65B0                             u10810 392E  
                           u10730 389C                             u12090 4E0E  
                           u13130 6446                             u12330 22FC  
                           u12250 2238                             u11347 43B6  
                           u11460 3268                             u11700 34DA  
                           u10660 63A0                             u10580 612C  
                           u10740 389E                             u12084 4DFA  
                           u12420 23DE                             u13060 59F4  
                           u11357 43F6                             u12085 4DF6  
                           u11470 3384                             u14030 5870  
                           u10750 38B4                             u12350 2340  
                           u12270 2248                             u12190 21CA  
                           u13150 1D34                             u13070 5A24  
                           u11287 42DE                             u11551 48B6  
                           u11640 49DE                             u11800 35EE  
                           u11720 3512                             u14040 5872  
                           u10760 38B6                             u12360 2342  
                           u13240 2782                             u13400 2AA0  
                           u12505 2DB2                             u11617 4972  
                           u13137 643C                             u10930 6F40  
                           u11490 33A6                             u11730 3514  
                           u10850 39BA                             u14210 4EA4  
                           u13250 279C                             u13410 2AB4  
                           u12515 2E2C                             u11491 33A4  
                           u13067 59EA                             u11660 342E  
                           u14220 4EA6                             u12605 1EBE  
                           u12525 2E6A                             u13077 5A1A  
                           u11750 3586                             u10678 63A2  
                           u12615 1EFC                             u12535 2EA8  
                           u15007 6304                             u13175 24CA  
                           u10960 729A                             u11760 35BA  
                           u11680 34A2                             u10880 3A0A  
                           u10928 6C24                             u13520 51AE  
                           u14400 0156                             u12625 1F3A  
                           u12545 2EE2                             u12705 67A8  
                           u10937 6F36                             u10929 6C38  
                           u15017 4688                             u10970 729C  
                           u11690 34D8                             u11930 1562  
                           u10890 3A16                             u13530 51B0  
                           u13450 6FCC                             u14330 002E  
                           u12635 1FB4                             u12555 2F20  
                           u11755 3574                             u15027 4706  
                           u13195 251A                             u11860 5D08  
                           u11780 35DC                             u11940 1564  
                           u13460 6FCE                             u12900 5570  
                           u15037 3DA0                             u12805 5102  
                           u12645 1FF2                             u12725 3DEE  
                           u12565 2F5E                             u12485 2D36  
                           u11781 35DA                             u11790 35EA  
                           u11950 1572                             u15047 6054  
                           u12815 5140                             u12655 2036  
                           u12735 3E2C                             u12495 2D74  
                           u14520 0316                             u12665 20AC  
                           u12585 1E42                             u12745 3E6A  
                           u11970 15A2                             u12835 594A  
                           u12675 20EA                             u12595 1E80  
                           u12755 3EA8                             u13580 3672  
                           u12845 598A                             u12685 2128  
                           u12765 3EE6                             u11990 1662  
                           u14710 0704                             u14630 056E  
                           u12775 3F24                             u13770 3792  
                           u12970 549A                             u13850 5C14  
                           u12795 50BE                             u13860 5C16  
                           u13790 37B2                             u13870 5C54  
                           u14840 44C0                             u13880 5C56  
                           u14690 06BC                             u14870 45DE  
                           u14880 45EE                             u14947 561E  
                           u14957 454E                             u14967 45B4  
                     i2c_read@res 0017                             u14977 30EA  
                           u14987 31C4                   __end_of___lwdiv 6A5A  
                           u14997 70EA                             i2l365 60E2  
                           i2l359 60A6                   ___awdiv@counter 0012  
                           i2l979 6EC6                             _RCREG 000FAE  
                    vfpfcnvrt@fmt 004E                             _TMR0H 000FD7  
                    vfpfcnvrt@llu 008E                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                  __end_of_PIN_LED0 7A4B  
                __end_of_PIN_LED1 7A49                  __end_of_PIN_LED2 7A47  
                __end_of_PIN_LED3 7A4D                             _TXREG 000FAD  
              ?_smbus8_write_data 0055                     __CFG_PWRT$OFF 000000  
        adf4351_write_latch@value 000E                ?_smbus8_write_byte 0055  
                   __CFG_WRT0$OFF 000000                     ?_ssd1306_data 005D  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
             ___lmul@multiplicand 0012                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
            irq_set_handler@udata 0010                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
        __end_of_lnb_do_configure 5078               print_char@underline 0094  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
              i2c_native_init@ctx 0035                     __CFG_WRTD$OFF 000000  
              ssd1306_command@cmd 005D                ssd1306_command@len 005F  
                  __CFG_EBTRB$OFF 000000                             _g_ipc 0210  
                           _flags 0067                  ?_Eeprom_ReadByte 0001  
                           _p_len 02B2                             _errno 02AC  
                           _fputc 74B6                   __end_of_isalpha 71DE  
                           _fputs 713C                   __end_of_isdigit 7302  
                           atoi@n 0028                             pad@fp 001A  
                           atoi@s 001B                             _width 00C5  
                    ?_read_switch 0001                     print_char@idx 00AF  
                           dtoa@d 002A                     print_char@map 00A5  
                           dtoa@i 004A                             dtoa@n 0042  
                           dtoa@p 003C                             dtoa@s 0040  
                           dtoa@w 003E               ??_smbus8_write_data 005D  
                 __end_of_islower 72A2                   __end_of_isspace 7050  
                _lcd_clear_screen 6AAC               ??_smbus8_write_byte 005A  
                           itoa@c 001C                   __end_of_isupper 72D2  
                           pclath 000FFA                   __end_of_set_reg 4104  
                           tablat 000FF5            si5328_perform_ical@i2c 00A4  
                           plusw1 000FE3                             plusw2 000FDB  
                     i2c_stop@ctx 0035                             stoa@i 001F  
                           stoa@l 0027                             stoa@p 0025  
                           stoa@s 0015                             stoa@w 0021  
                           ttemp5 0073                             ttemp6 0076  
                           ttemp7 007A                             status 000FD8  
                           wtemp8 0073                             xtoa@c 004A  
                           xtoa@d 0027                             xtoa@i 0048  
                           xtoa@n 0040                             xtoa@p 003C  
                           xtoa@w 003E                             xtoa@x 002F  
           _adf4351_set_freq$4063 00AE                    _i2c_reset$1141 002D  
                 ssd1306_data@len 005F                   __end_of_strncmp 5D2E  
                 __end_of_toupper 6D28                  ___lodiv@dividend 0026  
                 _actualADFswitch 00E4                  ?_adf4351_default 000E  
                    _toupper$3722 001A                   _send_UBX_string 3A38  
                  __CFG_MCLRE$OFF 000000                   __initialization 5264  
        __size_of_ssd1306_command 002E                    ??_i2c_wait_int 0012  
                    __end_of_atoi 4456                      __end_of_main 42AE  
                    __end_of_dtoa 341C                      __end_of_itoa 667A  
                    __end_of_stoa 49E8                      __end_of_xtoa 3648  
                __end_of_i2c_read 63E0                    ??_i2c_transfer 0055  
             lnb_do_configure@i2c 00A4                  __end_of_i2c_stop 735E  
       __end_of_smbus8_write_data 6C90               lnb_do_configure@res 00A8  
          __size_of_lnb_configure 0094         __end_of_smbus8_write_byte 6F12  
           usart_rx_irq_handler@c 0005             __size_of_write_regset 00B8  
               Eeprom_ReadByte@to 000F                            ??_atoi 001D  
                          ??_main 00C1                            ??_dtoa 0032  
                          ??_itoa 001C             usart_init@spbrg_value 002B  
               lnb_configure@addr 00AC                            ??_stoa 0017  
                          ??_xtoa 0030                     __activetblptr 000002  
         __end_of_PIN_LED_SI_LOCK 7A67   __end_of_reg_set_univ_CKIN2_XAXB 7B4B  
                  ??_ssd1306_data 0061                 ?_check_LNB_status 00A4  
                ___lodiv@quotient 0036                  ?_irq_set_handler 000E  
               ??_secret_settings 00BF                   ssd1306_setpos@x 0091  
                 ssd1306_setpos@y 0061                     print_string@i 00B9  
                   print_string@s 00B2                     print_string@x 00B4  
                   print_string@y 00B5                    _i2c_probe_addr 708C  
                ??_eeprom_getmode 0010           ??_adf4351_calc_counters 0041  
              ??_check_LNB_status 00A7                            ?_fputc 000F  
                          STR_100 7FF9                            STR_102 7FF9  
                          ?_fputs 0013                            STR_111 7FF3  
                          STR_105 7FFC                            STR_107 7FFC  
                          STR_109 7FF3                            _EEDATA 000FA8  
                          _EECON2 000FA7                  ___awdiv@dividend 000E  
               ??_clear_GPS_shift 000E      check_si5328_status@lastinput 00E5  
                    i2c_read@data 0012               _si5328_perform_ical 6FD4  
                          i2l8405 6B66                            i2l8875 6EB6  
                          i2l8869 6EA4                  ??_eeprom_setmode 0011  
                          _OSCCON 000FD3                     vfpfcnvrt@done 0082  
         check_ADF5341_status@ctx 00A4                            _SPBRGH 000FB0  
                          _WDTCON 000FD1                __size_of_i2c_reset 00B4  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
              __size_of_i2c_start 0098                __size_of_i2c_write 0054  
     __end_of_setADF4351frequency 45FC                    __CFG_XINST$OFF 000000  
            __size_of_lcd_draw8x8 001E                      _write_regset 59BE  
                    ___strtoxl@cp 003D                            _t0_irq 6E8C  
                    vfprintf@cfmt 0062                  __end_of_lcd_init 5BDA  
               _ext10MHzReference 00D7               i2c_native_init@baud 0037  
                          ___lmul 68B4                            ___omul 6470  
                       ??___aldiv 0016                         ??___aodiv 001E  
                _PIN_LNB_QRG1_DEF 7B50                  _PIN_LNB_QRG2_DEF 7B55  
                       ??___aomod 001E                            ___wmul 73B2  
              write_regset@errors 00AD                      i2c_reset@ctx 0027  
                       ??___awdiv 0012                      i2c_reset@reg 0031  
                  __CFG_STVREN$ON 000000                         ??___awmod 0012  
                __end_of_eval_gps 2A34                  _freq_table_25_24 7AF1  
                _freq_table_25_25 7AC9                            _g_freq 02A8  
                _freq_table_27_26 7AA1                         ??___lldiv 0022  
                       ??___lodiv 0036              ?_si5328_perform_ical 00A4  
                       ??___lwdiv 0012                            _g_pout 020E  
           _ssd1306_init_commands 03BE       __size_of_global_irq_handler 60EE  
                          _memcmp 667A                            _memcpy 6E48  
                          _gpsbuf 0332                  __end_of_init_gps 738A  
                          _memset 49E8                            _setQRG 5BDA  
                ___strtoxl@endptr 001E                            clear_0 52FC  
                          clear_1 5308                            clear_2 5314  
                          clear_3 532A                            clear_4 5336  
                __end_of_read_reg 749A                  ___awdiv@quotient 0014  
                 ___awmod@divisor 0010                   _i2c_native_init 690A  
                          _ubx_id 02B8                   ___awmod@counter 0012  
                          _printf 7460                            pad@buf 001C  
                          _rx_gps 3648      __size_of_adf4351_write_latch 01B6  
                          _putgps 74FA          __end_of_PIN_SI5328_CS_CA 7A65  
                          dtoa@fp 0028                            _strchr 7174  
                ___strtoxl@prev_a 0027                            _strlen 6F12  
                 _PIN_SIO_CLK_DEF 7BB4                            _strtol 71DE  
                  print_char@xpos 0092                    print_char@ypos 0093  
              _g_irq_handler_info 02A0                            fputc@c 000F  
              _adf4351_write_reg0 5904                _adf4351_write_reg1 5078  
              _adf4351_write_reg2 1E02                _adf4351_write_reg3 3DA8  
              _adf4351_write_reg4 2CF6                _adf4351_write_reg5 6768  
                          fputs@c 0017                            fputs@i 0018  
                    __pdataCOMRAM 0071            __end_of_i2c_probe_addr 70C8  
                          fputs@s 0013                         ??_isalpha 0010  
                       ??_isdigit 0010                _PIN_LED_CPU_OK_DEF 7B9B  
              si5328_checkGPS@i2c 00B8                         ??_islower 0010  
                    i2c_start@rep 0014                      i2c_start@res 0019  
                    __mediumconst 7728                         ??_isspace 0010  
                          tblptrh 000FF7           Eeprom_WriteByte@address 000F  
                       ??_isupper 0010                            tblptrl 000FF6  
                          tblptru 000FF8      __size_of_ssd1306_commandbyte 0024  
                    eval_gps@eidx 01F5                      eval_gps@elem 0100  
                       ??_set_reg 000E           si5328_perform_ical@addr 00A6  
      i2c_transfer_native@wantack 0043                       read_reg@i2c 005A  
     __end_of_check_si5328_status 4F7A                            stoa@cp 0023  
                          stoa@fp 0013                  __end_of_vfprintf 6CDE  
                     read_reg@reg 005D                       read_reg@val 0060  
                __end_of_rx_usart 73FC                            xtoa@fp 0025  
             ?_adf4351_write_reg0 001A               ?_adf4351_write_reg1 001A  
             ?_adf4351_write_reg2 001A               ?_adf4351_write_reg3 001A  
             ?_adf4351_write_reg4 001A                         ??_strncmp 0014  
             ?_adf4351_write_reg5 001A                         ??_toupper 0016  
                ssd1306_data@data 005D                     _lnb_configure 62BA  
                 _getGPSfrequency 6960           __end_of_send_UBX_string 3BF2  
                    i2c_write@res 0015                        __accesstop 0080  
         __end_of__initialization 533C  show_display@old_adf4351_lockstat 00DC  
                 __CFG_PBADEN$OFF 000000                     ___rparam_used 000001  
             _i2c_transfer_native 3854         CalculateGridSquare@latmid 0049  
               ?_adf4351_get_lock 000E         CalculateGridSquare@lonmid 0039  
        __end_of_PIN_LED_ADF_LOCK 7A73                       setQRG@newLO 00B7  
                   ?_adf4351_init 001A                    __pcstackCOMRAM 0001  
              __size_of___strtoxl 030A                      __pidataBANK0 74CE  
                    __pidataBANK1 750C                      __pidataBANK2 5E7C  
                    __pidataBANK3 749A                    _ssd1306_setpos 7050  
              ??_adf4351_get_lock 0010             ??_si5328_perform_ical 0064  
                 write_regset@i2c 00A4              ??_adf4351_write_reg0 001C  
            ??_adf4351_write_reg1 001C              ??_adf4351_write_reg2 001C  
            ??_adf4351_write_reg3 001C              ??_adf4351_write_reg4 001C  
            ??_adf4351_write_reg5 001C                   write_regset@len 00A9  
                 write_regset@set 00A7                     __end_of_fputc 74CE  
                   __end_of_fputs 7174        __size_of_smbus8_write_data 004E  
       __size_of_smbus8_read_byte 0052        __size_of_smbus8_write_byte 0042  
               ?_Eeprom_WriteByte 000E                 ??_ssd1306_command 0061  
   __size_of_usart_rx_irq_handler 0052                   _si5328_checkGPS 618E  
               __end_of_i2c_reset 5B2A                ??_Eeprom_WriteByte 000F  
               __end_of_i2c_start 618E                 ?_adf4351_set_freq 00A4  
            lnb_do_configure@addr 00A6                 __end_of_i2c_write 6A08  
               ?_adf4351_set_mode 0028          show_display@old_GPS_lock 00E3  
        show_display@old_GPS_time 028E                 ?_adf4351_set_tune 000E  
            ?_i2c_transfer_native 0037             _secret_settings_write 2F92  
               getGPSfrequency@gf 0012                   ?_i2c_probe_addr 0055  
        __end_of_PIN_LED_LNB_GOOD 7A6B                ??_adf4351_set_freq 00AA  
              ??_adf4351_set_mode 002C                ??_adf4351_set_tune 0014  
    __size_of_CalculateGridSquare 05A4              __end_of_i2c_wait_int 6E04  
                         ??_fputc 0013                           ??_fputs 0017  
                  ?_lnb_configure 00AA                        _check_RXTX 45FC  
                ??_lcd_settingsOK 0065                        __pbssBANK0 00C5  
                      __pbssBANK1 01F8                        __pbssBANK2 02A0  
                      __pbssBANK3 0300                        __pbssBANK4 0400  
            __end_of_i2c_transfer 6C42      show_display@old_LNB_laststat 00DE  
                       ?_i2c_read 0012                     rx_gps@len_lsb 02B0  
                   ??_si5328_init 00BB                         ?_i2c_stop 0035  
            __size_of_read_switch 0118        _adf4351_calc_counters$4064 0051  
                 _si5328_set_freq 66F2      __end_of_PIN_LED_ADF_LOCK_DEF 7B96  
            __end_of_ssd1306_data 7272                    ??_adf4351_init 001C  
          __end_of_ssd1306_setpos 708C    adf4351_calc_counters@Nmal10000 005B  
         __end_of_i2c_native_init 6960                           ?_t0_irq 0001  
        CalculateGridSquare@latgf 0041          CalculateGridSquare@longf 0031  
              ssd1306_setpos@data 008E                           ?___lmul 000E  
                         ?___omul 000E           __end_of_PIN_SIO_CLK_DEF 7BB9  
                         ?___wmul 0015                show_display@outqrg 00BB  
         si5328_set_freq@freq_MHz 00B2          __end_of_lcd_clear_screen 6AFE  
                         ?_memcmp 000E                           ?_memcpy 000E  
                         ?_memset 000E               ___omul@multiplicand 0016  
                  ___lmul@product 0016                           ?_setQRG 0001  
                  usart_init@baud 0027                eeprom_setmode@mode 0011  
              __size_of_set_reg24 00D6                __size_of_set_reg25 00D6  
              __size_of_set_reg26 00D6                __size_of_set_reg27 0040  
                         ?_printf 0097                           ?_rx_gps 004C  
          show_display@old_lnbqrg 00E0                           ?_putgps 0001  
                         ?_strchr 000E                           ?_strlen 000E  
                         ?_strtol 0040             ??_i2c_transfer_native 003C  
               _PIN_LNB_FAULT_DEF 7B4B            show_display@old_outqrg 02B6  
         __end_of_getGPSfrequency 69B4                __size_of_vfpfcnvrt 05A4  
                         _GPS_fix 00D6                           _GPS_lat 027F  
                         _GPS_lon 0270                           _GPS_sat 00D1  
                         _PIN_SJ3 7A5B                           _PIN_SJ4 7A59  
                         _PIN_SJ5 7A57                           _PIN_SJ6 7A55  
                         _OSCTUNE 000F9B             setADF4351frequency@sw 00BD  
        check_ADF5341_status@stat 0064                 ?_lnb_do_configure 00A4  
               __end_of___strtoxl 2466                clear_GPS_shift@idx 000E  
               send_UBX_string@id 00A4                __end_of_PIN_ADF_CE 7A77  
              __end_of_PIN_ADF_LE 7A79                         ?_lcd_init 00BA  
          __size_of_adf4351_setup 004A                ??_lnb_do_configure 0064  
                       ?_eval_gps 0046                        ??_i2c_read 0016  
          irq_set_handler@handler 000E                  ?_send_UBX_string 00A4  
                      ??_i2c_stop 0037     __size_of_check_ADF5341_status 00CC  
                       ?_init_gps 0001                         ?_read_reg 005A  
                         __Hparam 0000                   ?_ssd1306_setpos 0061  
                         __Lparam 0000               __end_of_si5328_init 569E  
                 __size_of_t0_irq 0044           __end_of_si5328_checkGPS 6224  
            Eeprom_WriteByte@data 000E                           ___aldiv 576C  
                         ___aodiv 4764                           ___aomod 4B1A  
                         ___awdiv 64FA                   __size_of___lmul 0056  
                         ___awmod 67DC                   __size_of___omul 008A  
                         ___lldiv 657E                   __size_of___wmul 0026  
                         ___lodiv 569E                           ___lwdiv 6A08  
                       ?_vfprintf 005D                   _secret_settings 6A5A  
                       ?_rx_usart 0001                        _init_gpios 088E  
                         __pcinit 5264                   __size_of_memcmp 0078  
                 __size_of_memcpy 0044                        _init_timer 738A  
                 __size_of_memset 0132                   __size_of_setQRG 00AA  
       __end_of_PIN_LNB_FAULT_DEF 7B50                           __ramtop 0600  
                         _lcd_i2c 01F8                 _freq_table_27_OPT 7A79  
                         __ptext0 4104                           __ptext1 684C  
                         __ptext2 55CC                           __ptext3 618E  
                         __ptext4 5BDA                           __ptext5 66F2  
                         __ptext6 59BE                           __ptext7 6FD4  
                         __ptext8 6F54                           __ptext9 534A  
          ?_secret_settings_write 0001                   __size_of_printf 001E  
                 _clear_GPS_shift 6E04            check_si5328_status@i2c 00A4  
                 __size_of_rx_gps 020C                           _booting 00CE  
                 __size_of_putgps 000A                   __size_of_strchr 0036  
                 __size_of_strlen 0042            check_si5328_status@res 00AC  
          check_si5328_status@ret 00AA             adf4351_set_freq@fcorr 00B2  
                 __size_of_strtol 0032                      __size_of_abs 0032  
                    __size_of_pad 0096                           _isalpha 71AA  
                         _isdigit 72D2             _calc_mixer_corr_value 19A4  
                ___awmod@dividend 000E                  ___aldiv@dividend 000E  
                         _islower 7272                           _payload 0300  
                         _isspace 7012                           _isupper 72A2  
                         _set_reg 3F58                  _PIN_SIO_DATA_DEF 7BB9  
                         _ubx_ack 006E                   ??_lnb_configure 00AD  
                     t0_irq@ms500 00C8                           _ubx_len 02B4  
                         _use_GPS 00E8                           atoi@neg 0021  
          i2c_transfer_native@ack 003D            i2c_transfer_native@dev 0037  
        __end_of_PIN_LNB_QRG1_DEF 7B55          __end_of_PIN_LNB_QRG2_DEF 7B5A  
          i2c_transfer_native@ctx 0049            i2c_transfer_native@msg 0039  
          i2c_transfer_native@res 004D            i2c_transfer_native@num 003A  
                      ??_lcd_init 0065                       ?_check_RXTX 0001  
        __end_of_freq_table_25_24 7B19          __end_of_freq_table_25_25 7AF1  
        __end_of_freq_table_27_26 7AC9                           _strncmp 5C84  
                  __pintcode_body 605C                           _toupper 6CDE  
  __size_of_adf4351_calc_counters 02FE              end_of_initialization 533C  
   __end_of_adf4351_calc_counters 2764           __end_of_si5328_set_freq 6768  
                    _g_usart_rpos 006B                        ??_eval_gps 0048  
                    _g_usart_wpos 0069                           memcmp@l 0016  
                         memcmp@n 0012                           memcmp@r 0018  
                  ___omul@product 001E                           memcpy@d 0014  
                         memcpy@n 0012                           memcpy@s 0016  
                         fputc@fp 0011                           memset@c 0010  
                         memset@k 0016                           memset@n 0012  
                         memset@s 0018                 __end_of_set_reg24 55CC  
               __end_of_set_reg25 54F6                 __end_of_set_reg26 5420  
               __end_of_set_reg27 6F94                     __Lmediumconst 7728  
             _adf4351_write_latch 3BF2                        ??_init_gps 0065  
                         int_func 605C                           fputs@fp 0015  
                      ??_read_reg 005E                         i2u1041_48 60C4  
                       i2u1041_49 60D8                         i2u1037_48 6088  
                       i2u1037_49 609C               adf4351_get_lock@ctx 000E  
       __size_of_check_LNB_status 00F0                     i2c_start@addr 0018  
        __size_of_Eeprom_ReadByte 0022               si5328_checkGPS@addr 00BA  
                   i2c_start@read 0012                   ___lldiv@divisor 001E  
               eval_gps@chksumgps 01F0                   ___lldiv@counter 0026  
                main@old_GPS_lock 00C7               _ssd1306_commandbyte 73FC  
                       _LNB_error 00D9                 __end_of_vfpfcnvrt 19A4  
          _reg_set_univ_CKIN1_GPS 7B19                  ?_i2c_native_init 0035  
                       _RCSTAbits 000FAB                  ___aldiv@quotient 0018  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                           rx_gps@c 004C  
                   _adf4351_setup 6D72                      read_reg@addr 005C  
                      ??_vfprintf 0062                           putgps@c 000F  
       __end_of_freq_table_27_OPT 7AA1                lcd_settingsOK@mode 00BA  
                _smbus8_read_byte 6AFE                           strchr@c 0010  
                         strchr@s 000E          __size_of_adf4351_default 00A6  
                      ??_rx_usart 0050                           strlen@a 0010  
                         strlen@s 000E                     ?_show_display 0001  
                         strtol@s 0040              ?_adf4351_write_latch 000E  
             send_UBX_string@CK_A 013A               send_UBX_string@CK_B 0139  
                      _print_char 4D56             __size_of_i2c_wait_int 0048  
            __end_of_PIN_ADF_LOCK 7A75                     i2c_write@data 0014  
            ?_ssd1306_commandbyte 0001                  ?_getGPSfrequency 000E  
           __size_of_i2c_transfer 0050              __end_of_adf4351_init 605C  
            _PIN_LED_ADF_LOCK_DEF 7B91                      strtol@endptr 0042  
                   ?_print_string 00B2                    _NC1_LS_reg3233 01FC  
            __end_of_PIN_LED0_DEF 7B9B              __end_of_PIN_LED1_DEF 7B91  
            __end_of_PIN_LED2_DEF 7B87              __end_of_PIN_LED3_DEF 7BA5  
       calc_mixer_corr_value@fgps 0040            adf4351_write_reg0@data 0022  
          adf4351_write_reg1@data 0022            adf4351_write_reg2@data 0022  
          adf4351_write_reg3@data 0022            adf4351_write_reg4@data 0021  
          adf4351_write_reg5@data 0021             __size_of_ssd1306_data 0030  
        adf4351_set_tune@lownoise 0012                       _si5328_init 55CC  
        __size_of_irq_set_handler 003A                     ??_lcd_draw8x8 0065  
                       _TXSTAbits 000FAC                     _PIN_LNB_FAULT 7A6B  
      CalculateGridSquare@lat_min 0059                        _usart_getc 6BA2  
                      _usart_init 684C                        _usart_putc 74EC  
                     print_char@b 00AE                       print_char@c 00AD  
                     print_char@x 00B0                       print_char@y 00B1  
            __end_of_PIN_LNB_QRG1 7A53              __end_of_PIN_LNB_QRG2 7A55  
         __end_of_secret_settings 6AAC                   _ssd1306_command 7302  
      CalculateGridSquare@lon_min 0051               _CalculateGridSquare 0E5C  
      __end_of_global_irq_handler 60F6                    ?_adf4351_setup 0026  
         __end_of_clear_GPS_shift 6E48                  ?_si5328_checkGPS 00B8  
                    _i2c_wait_int 6DBC                    __end_of_t0_irq 6ED0  
                  _NC2_LS_reg3536 0212              __end_of_PIN_SIO_DATA 7A6F  
                  __end_of___lmul 690A                    __end_of___omul 64FA  
    __size_of_setADF4351frequency 01A6                    ??_show_display 0065  
                     vfpfcnvrt@ap 004F                       vfpfcnvrt@cp 0080  
                     vfpfcnvrt@fp 004C                       vfpfcnvrt@ll 0086  
                ??_i2c_probe_addr 0058                    __end_of___wmul 73D8  
             __size_of_check_RXTX 0168                       ?_init_gpios 0001  
                     _BAUDCONbits 000FB8                     __pidataCOMRAM 7510  
           ??_adf4351_write_latch 0012                      _i2c_transfer 6BF2  
                     ?_init_timer 0001                  write_regset@addr 00A6  
            __end_of_PIN_USART_RX 7A4F              __end_of_PIN_USART_TX 7A51  
                  __end_of_memcmp 66F2                    __end_of_memcpy 6E8C  
                  __end_of_memset 4B1A                    __end_of_setQRG 5C84  
          ?_calc_mixer_corr_value 0028             __end_of_font8x8_basic 7A31  
                  __end_of_printf 747E            lcd_clear_screen@ystart 0180  
                      eval_gps@pe 01F3                        eval_gps@ps 01F6  
                  __end_of_rx_gps 3854                    __end_of_putgps 7504  
                  __end_of_strchr 71AA                    __end_of_strlen 6F54  
       __size_of_adf4351_get_lock 0040                    __end_of_strtol 7210  
           ??_ssd1306_commandbyte 0063               start_initialization 5264  
                 ___lodiv@divisor 002E                   ___lodiv@counter 003E  
                    _ssd1306_data 7242              ?_CalculateGridSquare 0027  
                       _i2c_reset 5A76           global_irq_handler@dummy 000C  
                _PIN_USART_RX_DEF 7B6E                       __end_of_abs 7242  
                       _i2c_start 60F6                  _PIN_USART_TX_DEF 7B73  
                     __end_of_pad 62BA                    ??_print_string 00B7  
                       _i2c_write 69B4                    _gps_init_timer 00CD  
       __size_of_Eeprom_WriteByte 003A                  ?_si5328_set_freq 00AF  
    __end_of_usart_rx_irq_handler 6BA2                  show_display@xpos 00BA  
           lnb_do_configure@value 00A7         __size_of_adf4351_set_freq 02C2  
               ___omul@multiplier 000E         __size_of_adf4351_set_mode 00A0  
    __size_of_check_si5328_status 0112                  __CFG_OSC$INTIO67 000000  
       __size_of_adf4351_set_tune 004A       __end_of_si5328_perform_ical 7012  
               __size_of_i2c_read 0092                       _N31_reg4445 00DA  
         __size_of_eeprom_getmode 0008                 __size_of_i2c_stop 002E  
            _adf4351_set_tune$505 0014                       _N32_reg4748 0218  
                     ___strtoxl@a 0039                       ___strtoxl@c 003F  
                     ___strtoxl@s 001C                       vfprintf@fmt 005F  
                        ??_t0_irq 0001                          ??___lmul 0016  
                        ??___omul 001E      __end_of_PIN_SI5328_CS_CA_DEF 7BAF  
      setADF4351frequency@timeout 00B9                          ??___wmul 0019  
         __size_of_eeprom_setmode 000E               __end_of_lcd_draw8x8 7460  
      calc_mixer_corr_value@curLO 0034                   ___strtoxl@limit 0033  
     __size_of_adf4351_write_reg0 00BA       __size_of_adf4351_write_reg1 00FC  
     __size_of_adf4351_write_reg2 035A       __size_of_adf4351_write_reg3 01B0  
     __size_of_adf4351_write_reg4 029C       __size_of_adf4351_write_reg5 0074  
            i2c_transfer_native@i 0045                 ??_Eeprom_ReadByte 000E  
                     __pdataBANK0 00DA                       __pdataBANK1 01FC  
                     __pdataBANK2 0200                       __pdataBANK3 03BE  
                      itoa@buffer 02D9                  __CFG_LPT1OSC$OFF 000000  
                        ??_memcmp 0014                          ??_memcpy 0014  
                        ??_memset 0014                          ??_setQRG 00B3  
               ?_lcd_clear_screen 0001                        memset@dest 000E  
                        ??_printf 0064                          ??_rx_gps 004E  
            check_LNB_status@addr 00A6                          ??_putgps 000F  
                        ??_strchr 0012                          ??_strlen 0010  
    show_display@old_si5328locked 00DD                          ??_strtol 0046  
            check_LNB_status@stat 0064                       ?_print_char 0092  
              ??_lcd_clear_screen 0062       adf4351_calc_counters@vfoout 0053  
                     __pbssCOMRAM 0065                 ??_adf4351_default 0010  
           ??_CalculateGridSquare 0029                         _g_i2c_bus 02E5  
                   __pcstackBANK0 0080                     __pcstackBANK1 0100  
              adf4351_default@ctx 000E                  ___aodiv@dividend 000E  
                      ?_i2c_reset 0027                        ?_i2c_start 0012  
                      ?_i2c_write 0012                 irq_set_handler@id 0012  
                       _g_adf4351 0387                     ??_read_switch 0001  
     CalculateGridSquare@latrest1 0045           show_display@old_GPS_fix 00E2  
         show_display@old_GPS_lat 0261           show_display@old_GPS_lon 0252  
         show_display@old_GPS_sat 00DF           __end_of_ssd1306_command 7330  
                ??_ssd1306_setpos 0062                         ___strtoxl 215C  
               __size_of_lcd_init 00B0               __size_of_init_gpios 05CE  
     CalculateGridSquare@lonrest1 0035               __size_of_init_timer 0028  
             ssd1306_setpos@F3137 020B                 __size_of_eval_gps 02D0  
                       _atoi$3600 0023                         _atoi$3601 0027  
                       _atoi$3602 0025        __end_of_PIN_SI5328_LOL_DEF 7BB4  
                     ?_usart_getc 000E                  _check_LNB_status 5174  
                     ?_usart_init 0027                       ?_usart_putc 0001  
                ?_secret_settings 0001                 __size_of_init_gps 002C  
                 ??_adf4351_setup 0028               _PIN_LED_SI_LOCK_DEF 7BA5  
                   usart_getc@res 0012                 __size_of_read_reg 001C  
                ___lwdiv@dividend 000E                         _dtoa$3087 003A  
               __CFG_CCP2MX$PORTC 000000         __size_of_lnb_do_configure 00FE  
        __end_of_PIN_SIO_DATA_DEF 7BBE           CalculateGridSquare@grid 02ED  
         CalculateGridSquare@latm 003D           CalculateGridSquare@lonm 002D  
                       __pintcode 0008                 ??_irq_set_handler 0012  
                   __pmediumconst 7728                          ?___aldiv 000E  
                        ?___aodiv 000E                          ?___aomod 000E  
                ?_clear_GPS_shift 0001                          ?___awdiv 000E  
                       __ptext100 4B1A                         __ptext101 4764  
                       __ptext110 2CF6                         __ptext102 42AE  
                ___aodiv@quotient 0020                         __ptext111 3DA8  
                       __ptext103 7012                         __ptext120 6B50  
                       __ptext112 1E02                         __ptext104 72D2  
                       __ptext121 6E8C                         __ptext113 5078  
                       __ptext105 73B2                         __ptext122 0000  
                       __ptext114 5904                         __ptext106 6D28  
                       __ptext115 3BF2                         __ptext107 5F1C  
                       __ptext116 5FBC                         __ptext108 6D72  
                       __ptext117 49E8                         __ptext109 6768  
                       __ptext118 5DD6                          ?___awmod 000E  
                     usart_putc@c 000E       __end_of_i2c_transfer_native 3A38  
                        ?___lldiv 001A                          ?___lodiv 0026  
         ??_secret_settings_write 00BB                          ?___lwdiv 000E  
    __end_of_check_ADF5341_status 5904              setADF4351frequency@p 00BB  
           __size_of_adf4351_init 00A0                  send_UBX_string@i 0133  
               __size_of_vfprintf 004E                  _PIN_ADF_LOCK_DEF 7BC8  
               __size_of_rx_usart 0024                          ?_isalpha 000E  
                        ?_isdigit 000E                  i2c_start@wantack 0016  
                        ?_islower 000E                          ?_isspace 000E  
                     _N2L_reg4142 01FE                          ?_isupper 000E  
                 si5328_init@addr 00BA                          ?_set_reg 0001  
        adf4351_calc_counters@INT 0049                  ___lwdiv@quotient 0012  
                       _currentLO 006D                      ??_check_RXTX 000E  
                  __size_of_fputc 0018          adf4351_calc_counters@ctx 003F  
                  __size_of_fputs 0038                         _gpsbufidx 0071  
                        ?_strncmp 000E                          ?_toupper 0014  
         show_display@old_ubx_ack 00E1              adf4351_set_freq@freq 00A6  
        __end_of_smbus8_read_byte 6B50              __end_of_show_display 088E  
             ___strtoxl@conv_done 0032                   ___aldiv@divisor 0012  
                      ?___strtoxl 001C                        set_reg@idx 0014  
             i2c_wait_int@timeout 000E                   ___aldiv@counter 0016  
                  ___wmul@product 0019                       _g_usart_buf 0400  
                     _lcd_draw8x8 7442                          _PIE1bits 000F9D  
             __end_of_read_switch 4D56               __size_of_print_char 0112  
                    _PIN_ADF_LOCK 7A73                     ?_write_regset 00A4  
                       _set_reg24 54F6                         _set_reg25 5420  
                       _set_reg26 534A                         _set_reg27 6F54  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                        _PIN_LED0 7A49                          _GPS_lock 00D8  
                        _PIN_LED1 7A47                          _PIN_LED2 7A45  
                        _PIN_LED3 7A4B               ___strtoxl@is_signed 0022  
                        _GPS_time 0297                          i2u952_40 6B88  
         __size_of_lcd_settingsOK 00A8                      _adf4351_init 5FBC  
                        _RCONbits 000FD0          __size_of_send_UBX_string 01BA  
                       _ubx_class 01FB                      _LNB_laststat 00E7  
            __end_of_print_string 6470                  adf4351_setup@ctx 0026  
          ssd1306_commandbyte@cmd 0063                      _PIN_LED0_DEF 7B96  
                    _PIN_LED1_DEF 7B8C                      _PIN_LED2_DEF 7B82  
                    _PIN_LED3_DEF 7BA0               __end_of_PIN_I2C_SDA 7A5F  
             __end_of_PIN_I2C_SCL 7A61                send_UBX_string@idx 013B  
              send_UBX_string@len 00A5                         _vfpfcnvrt 1400  
                       _xtoa$3108 0038                         _xtoa$3109 003A  
              __end_of_check_RXTX 4764              _usart_rx_irq_handler 6B50  
                      _ADCON1bits 000FC1                 ___wmul@multiplier 0015  
             ?islower@read_switch 0001             adf4351_write_reg0@ctx 001A  
           adf4351_write_reg1@ctx 001A             adf4351_write_reg2@ctx 001A  
           adf4351_write_reg3@ctx 001A             adf4351_write_reg4@ctx 001A  
           adf4351_write_reg5@ctx 001A          i2c_transfer_native@bdata 0047  
                   t0_irq@second2 00C9                  _adf4351_get_lock 6F94  
        i2c_transfer_native@inmsg 003F               __size_of_usart_getc 0050  
                    _PIN_LNB_QRG1 7A51                      _PIN_LNB_QRG2 7A53  
             __size_of_usart_init 0068               __end_of_PIN_SJ3_DEF 7B6E  
             __end_of_PIN_SJ4_DEF 7B69               __size_of_usart_putc 000E  
             __end_of_PIN_SJ5_DEF 7B64               __end_of_PIN_SJ6_DEF 7B5F  
                     ??_i2c_reset 0029                       ??_i2c_start 0018  
                    _isspace$3627 0014                       ??_i2c_write 0014  
             si5328_set_freq@addr 00B1               __end_of_PIN_SIO_CLK 7A71  
                      vfpfcnvrt@c 0096             __end_of_lnb_configure 634E  
               ___lmul@multiplier 000E                       _INTCON2bits 000FF1  
                       copy_data0 5278                         copy_data1 5298  
                       copy_data2 52B8                         copy_data3 52D8  
                _Eeprom_WriteByte 70C8              _PIN_SI5328_CS_CA_DEF 7BAA  
                    _PIN_SIO_DATA 7A6D                  _adf4351_lockstat 0070  
             _setADF4351frequency 4456                         eval_gps@i 01F2  
                ?_ssd1306_command 005D                          _i2c_read 634E  
            adf4351_set_tune@pout 0011                    ___strtoxl$3744 002B  
                  ___strtoxl$3745 0031                    ___strtoxl$3746 002D  
                  ___strtoxl$3747 002F    __end_of_reg_set_univ_CKIN1_GPS 7B33  
                        _i2c_stop 7330                      ?_si5328_init 00B8  
                    _PIN_USART_RX 7A4D                      _PIN_USART_TX 7A4F  
                _adf4351_set_freq 2A34              ??islower@read_switch 000E  
                _adf4351_set_mode 5F1C             _adf4351_calc_counters 2466  
                _adf4351_set_tune 6D28                    _eeprom_getmode 7504  
                      _EECON1bits 000FA6                        rx_gps@stat 01FA  
                  ??_write_regset 00AB                          __Hrparam 0000  
                      ?_set_reg24 0001                        ?_set_reg25 0001  
                      ?_set_reg26 0001                        ?_set_reg27 0001  
                       memcpy@tmp 0018                        vfprintf@ap 0061  
                        __Lrparam 0000                        vfprintf@fp 005D  
                     check_RXTX@i 0011          __end_of_PIN_USART_RX_DEF 7B73  
              __CFG_BOREN$SBORDIS 000000                    ___strtoxl@base 0020  
        __end_of_PIN_USART_TX_DEF 7B78                    _eeprom_setmode 74DE  
                  ___strtoxl@sign 0037                    ___strtoxl@skip 0038  
             check_LNB_status@i2c 00A4                         itoa@value 001A  
                __size_of___aldiv 00CC                  __size_of___aodiv 0148  
         ??_calc_mixer_corr_value 002C              ?_setADF4351frequency 0001  
                __size_of___aomod 0124                  __size_of___awdiv 0084  
                __size_of___awmod 0070       si5328_checkGPS@old_GPS_lock 00D4  
                    ??_init_gpios 0013                  __size_of___lldiv 0082  
                __size_of___lodiv 00CE                        ?_vfpfcnvrt 004C  
                __size_of___lwdiv 0052                      ??_init_timer 0013  
           ?_usart_rx_irq_handler 0001                   _PIN_I2C_SDA_DEF 7B78  
                 ___aodiv@divisor 0016                   _PIN_I2C_SCL_DEF 7B7D  
          Eeprom_ReadByte@address 000E                   ___aodiv@counter 001E  
                      _N1HS_reg25 0214      global_irq_handler@dummy_1626 000D  
             _check_si5328_status 4E68          __size_of_i2c_native_init 0056  
                      _N2HS_reg40 0216                _global_irq_handler 0008  
    __end_of_PIN_LED_LNB_GOOD_DEF 7B8C                  __size_of_isalpha 0034  
                __size_of_isdigit 0030                   ___lwdiv@divisor 0010  
          CalculateGridSquare@lat 0055            CalculateGridSquare@lon 004D  
                __size_of_islower 0030                  __size_of_isspace 003E  
                 ___lwdiv@counter 0014                          __ptext10 5420  
                        __ptext11 54F6                          __ptext20 6960  
                        __ptext12 3F58                          __ptext21 2466  
                        __ptext13 0012                          __ptext30 6600  
                        __ptext22 6470                          __ptext14 667A  
                        __ptext31 67DC                          __ptext23 6A08  
                        __ptext15 0E5C                          __ptext40 3648  
                        __ptext32 64FA                          __ptext24 569E  
                        __ptext16 4456                          __ptext41 2764  
                        __ptext33 74DE                          __ptext25 576C  
                        __ptext17 4C3E                          __ptext50 5B2A  
                        __ptext42 71DE                          __ptext34 70C8  
                        __ptext26 6F94                          __ptext18 2A34  
                        __ptext51 73FC                          __ptext43 215C  
                        __ptext35 7504                          __ptext27 6A5A  
                        __ptext19 19A4                          __ptext60 6C42  
                        __ptext52 6ED0                          __ptext44 68B4  
                        __ptext36 7420                          __ptext28 2F92  
                        __ptext61 708C                          __ptext53 63E0  
                        __ptext45 7174                          __ptext37 6E04  
                        __ptext29 5D2E                          __ptext70 4E68  
                        __ptext62 738A                          __ptext54 4D56  
                        __ptext46 6E48                          __ptext38 73D8  
                        __ptext71 747E                          __ptext63 7102  
                        __ptext55 7442                          __ptext47 62BA  
                        __ptext39 6BA2                          __ptext80 634E  
                        __ptext72 6AFE                          __ptext64 735E  
                        __ptext56 6AAC                          __ptext48 4F7A  
                        __ptext81 6DBC                          __ptext73 6BF2  
                        __ptext65 3A38                          __ptext57 7050  
                        __ptext49 5174                          __ptext90 71AA  
                        __ptext82 5838                          __ptext74 3854  
                        __ptext66 74FA                          __ptext58 7302  
                        __ptext91 5C84                          __ptext83 7460  
                        __ptext75 69B4                          __ptext67 088E  
                        __ptext59 7242                          __ptext92 48AC  
                        __ptext84 6C90                          __ptext76 7330  
                        __ptext68 45FC                          __ptext93 31DA  
                        __ptext85 1400                          __ptext77 5A76  
                        __ptext69 690A                          __ptext94 6224  
                        __ptext86 341C                          __ptext78 657E  
                        __ptext95 6F12                          __ptext87 6CDE  
                        __ptext79 60F6                          __ptext96 713C  
                        __ptext88 7272                          __ptext97 74B6  
                        __ptext89 72A2                          __ptext98 74EC  
                        __ptext99 7210                  __size_of_isupper 0030  
                __size_of_set_reg 01AC                          _lcd_addr 00D0  
                        _lcd_init 5B2A                       _read_switch 4C3E  
             ?_global_irq_handler 0001           check_si5328_status@addr 00A6  
         check_si5328_status@lock 00AB                          _eval_gps 2764  
                __size_of_strncmp 00AA                  __size_of_toupper 004A  
                  si5328_init@i2c 00B8                   adf4351_init@ctx 001A  
          __end_of_eeprom_getmode 750C                       ??___strtoxl 0023  
                  si5328_init@res 00BD              _check_ADF5341_status 5838  
              Eeprom_WriteByte@to 0010          __size_of_getGPSfrequency 0054  
                   __size_of_atoi 01A8                          _init_gps 735E  
                   __size_of_main 01AA                     __size_of_dtoa 0242  
            ?_check_si5328_status 00A4                   _Eeprom_ReadByte 7420  
                   __size_of_itoa 007A                          _read_reg 747E  
              __end_of_init_gpios 0E5C                     __size_of_stoa 013C  
                   __size_of_xtoa 022C               adf4351_set_freq@ctx 00A4  
              __end_of_init_timer 73B2                   i2c_transfer@dev 0050  
                 i2c_transfer@msg 0052                   i2c_transfer@num 0053  
          __end_of_eeprom_setmode 74EC                       _PIN_I2C_SDA 7A5D  
                     _PIN_I2C_SCL 7A5F               adf4351_set_mode@ctx 0028  
                _lnb_do_configure 4F7A       __end_of_adf4351_write_latch 3DA8  
                       stoa@F1139 0200              smbus8_read_byte@addr 0057  
            smbus8_read_byte@data 0059                          int$flags 0072  
                      strtol@base 0044                   _adf4351_default 5DD6  
           ??_setADF4351frequency 00B6              ??_global_irq_handler 0008  
                        _vfprintf 6C90                         printf@fmt 0097  
                        _rx_usart 73D8           i2c_transfer_native@left 004B  
         i2c_transfer_native@read 0041       __end_of_ssd1306_commandbyte 7420  
                        main@lock 00C4           i2c_transfer_native@pmsg 004F  
                     _PIN_SJ3_DEF 7B69                       _PIN_SJ4_DEF 7B64  
                     _PIN_SJ5_DEF 7B5F                       _PIN_SJ6_DEF 7B5A  
              si5328_set_freq@i2c 00AF                  ___aomod@dividend 000E  
               ??_send_UBX_string 0064                      ??_print_char 0095  
                     _PIN_SIO_CLK 7A6F               adf4351_set_tune@icp 0010  
             adf4351_set_tune@ctx 000E          __end_of_check_LNB_status 5264  
        __size_of_si5328_checkGPS 0096                    _vfpfcnvrt$3123 0084  
                 _adf4351_set_qrg 00CA                        _INTCONbits 000FF2  
                        memcmp@vl 000E                          memcmp@vr 0010  
                        memcpy@d1 000E                          memcpy@s1 0010  
                   _lcd_available 00CF             __size_of_show_display 087C  
         secret_settings_write@sw 00BE                          isalpha@c 000E  
                        isdigit@c 000E                          setQRG@sw 00B6  
          adf4351_set_mode@enable 002A             smbus8_write_data@addr 0057  
           smbus8_write_data@data 0059                          intlevel2 0000  
                       rx_usart@c 0050         __size_of_lcd_clear_screen 0052  
          ?_adf4351_calc_counters 003F                   _irq_set_handler 7102  
           ?_check_ADF5341_status 00A4                   ?_eeprom_getmode 0001  
           ??_check_si5328_status 00A7                    _PIN_ADF_CE_DEF 7BC3  
                        islower@c 000E                          isspace@c 000E  
                ___lldiv@dividend 001A                    _PIN_ADF_LE_DEF 7BBE  
        __end_of_PIN_ADF_LOCK_DEF 7BCD                      ??_usart_getc 0010  
                    ??_usart_init 002B             __size_of_print_string 0090  
                    ??_usart_putc 000E                          isupper@c 000E  
                       strncmp@_l 000E                         strncmp@_r 0010  
                        set_reg@p 0012                   ?_eeprom_setmode 0001  
                  _reg_set_LNB_LO 023A                        _OSCCONbits 000FD3  
                     ??_set_reg24 0064                       ??_set_reg25 0064  
                     ??_set_reg26 0064                       ??_set_reg27 0015  
              __end_of_print_char 4E68                    _lcd_settingsOK 5D2E  
                      _PIN_ADF_CE 7A75                    eval_gps@chksum 01F1  
                      _PIN_ADF_LE 7A77          __size_of_si5328_set_freq 0076  
      __end_of_adf4351_write_reg0 59BE        __end_of_adf4351_write_reg1 5174  
      __end_of_adf4351_write_reg2 215C        __end_of_adf4351_write_reg3 3F58  
      __end_of_adf4351_write_reg4 2F92        __end_of_adf4351_write_reg5 67DC  
         __end_of_PIN_I2C_SDA_DEF 7B7D        __end_of_PIN_LED_CPU_OK_DEF 7BA0  
             smbus8_read_byte@dev 0055           __end_of_PIN_I2C_SCL_DEF 7B82  
             smbus8_read_byte@reg 0058                    eval_gps@gpsbuf 0046  
             smbus8_read_byte@msg 0080           _reg_set_univ_CKIN2_XAXB 7B33  
                        printf@ap 00A3      __size_of_si5328_perform_ical 003E  
          ??_usart_rx_irq_handler 0003                   ___aomod@divisor 0016  
                     ??_vfpfcnvrt 0050                          stoa@nuls 0018  
                 ___aomod@counter 001E    __size_of_secret_settings_write 0248  
     __end_of_CalculateGridSquare 1400                _PIN_SI5328_LOL_DEF 7BAF  
   __end_of_secret_settings_write 31DA                      _show_display 0012  
           smbus8_write_byte@addr 0057          setADF4351frequency@force 00B8  
            smbus8_write_data@dev 0055             smbus8_write_byte@data 0059  
            smbus8_write_data@len 005B              smbus8_write_data@reg 0058  
            smbus8_write_data@msg 0080                  ___lldiv@quotient 0022  
           send_UBX_string@i_2074 0135             send_UBX_string@i_2075 0137  
          send_UBX_string@payload 00A7                          strncmp@l 0015  
                        strncmp@n 0012                       _special_cfg 00D2  
                        strncmp@r 0017              __end_of_write_regset 5A76  
                        toupper@c 0014                      ___aldiv@sign 0017  
              __end_of_usart_getc 6BF2                __end_of_usart_init 68B4  
              __end_of_usart_putc 74FA                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5           __size_of_i2c_probe_addr 003C  
         __end_of_Eeprom_ReadByte 7442                       _tcxo_no_GPS 006F  
               ??_i2c_native_init 003B        si5328_checkGPS@old_ubx_ack 00D3  
                    _print_string 63E0            __end_of_PIN_ADF_CE_DEF 7BC8  
            smbus8_write_byte@dev 0055                      ___aodiv@sign 001F  
            smbus8_write_byte@reg 0058              smbus8_write_byte@msg 005C  
           send_UBX_string@giveup 00CC              smbus8_write_byte@tmp 005A  
          __end_of_PIN_ADF_LE_DEF 7BC3                 ?_smbus8_read_byte 0055  
                _PIN_SI5328_CS_CA 7A63         usart_rx_irq_handler@udata 0001  
            send_UBX_string@class 0132                  i2c_write@wantack 0012  
                    ?_lcd_draw8x8 0062            calc_mixer_corr_value@v 003C  
       usart_rx_irq_handler@wposn 0006                ??_smbus8_read_byte 005A  
          __end_of_lcd_settingsOK 5DD6           __end_of_adf4351_default 5E7C  
            send_UBX_string@txbuf 0100                      ___aomod@sign 001F  
            __size_of_si5328_init 00D2          __end_of_adf4351_get_lock 6FD4  
               lcd_draw8x8@buffer 0062                    _PIN_SI5328_LOL 7A67  
